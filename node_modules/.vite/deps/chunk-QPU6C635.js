import {
  __commonJS,
  __esm,
  __export
} from "./chunk-NIBQISYW.js";

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node-fetch
var require_node_fetch = __commonJS({
  "browser-external:node-fetch"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node-fetch" has been externalized for browser compatibility. Cannot access "node-fetch.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js
function e(e2, n2) {
  function r2() {
    this.constructor = e2;
  }
  t(e2, n2), e2.prototype = null === n2 ? Object.create(n2) : (r2.prototype = n2.prototype, new r2());
}
function n(t2, e2, n2, r2) {
  return new (n2 || (n2 = Promise))(function(o2, a2) {
    function i2(t3) {
      try {
        s2(r2.next(t3));
      } catch (t4) {
        a2(t4);
      }
    }
    function u2(t3) {
      try {
        s2(r2.throw(t3));
      } catch (t4) {
        a2(t4);
      }
    }
    function s2(t3) {
      t3.done ? o2(t3.value) : new n2(function(e3) {
        e3(t3.value);
      }).then(i2, u2);
    }
    s2((r2 = r2.apply(t2, e2 || [])).next());
  });
}
function r(t2, e2) {
  var n2, r2, o2, a2, i2 = { label: 0, sent: function() {
    if (1 & o2[0])
      throw o2[1];
    return o2[1];
  }, trys: [], ops: [] };
  return a2 = { next: u2(0), throw: u2(1), return: u2(2) }, "function" == typeof Symbol && (a2[Symbol.iterator] = function() {
    return this;
  }), a2;
  function u2(a3) {
    return function(u3) {
      return function(a4) {
        if (n2)
          throw new TypeError("Generator is already executing.");
        for (; i2; )
          try {
            if (n2 = 1, r2 && (o2 = 2 & a4[0] ? r2.return : a4[0] ? r2.throw || ((o2 = r2.return) && o2.call(r2), 0) : r2.next) && !(o2 = o2.call(r2, a4[1])).done)
              return o2;
            switch (r2 = 0, o2 && (a4 = [2 & a4[0], o2.value]), a4[0]) {
              case 0:
              case 1:
                o2 = a4;
                break;
              case 4:
                return i2.label++, { value: a4[1], done: false };
              case 5:
                i2.label++, r2 = a4[1], a4 = [0];
                continue;
              case 7:
                a4 = i2.ops.pop(), i2.trys.pop();
                continue;
              default:
                if (!(o2 = (o2 = i2.trys).length > 0 && o2[o2.length - 1]) && (6 === a4[0] || 2 === a4[0])) {
                  i2 = 0;
                  continue;
                }
                if (3 === a4[0] && (!o2 || a4[1] > o2[0] && a4[1] < o2[3])) {
                  i2.label = a4[1];
                  break;
                }
                if (6 === a4[0] && i2.label < o2[1]) {
                  i2.label = o2[1], o2 = a4;
                  break;
                }
                if (o2 && i2.label < o2[2]) {
                  i2.label = o2[2], i2.ops.push(a4);
                  break;
                }
                o2[2] && i2.ops.pop(), i2.trys.pop();
                continue;
            }
            a4 = e2.call(t2, i2);
          } catch (t3) {
            a4 = [6, t3], r2 = 0;
          } finally {
            n2 = o2 = 0;
          }
        if (5 & a4[0])
          throw a4[1];
        return { value: a4[0] ? a4[1] : void 0, done: true };
      }([a3, u3]);
    };
  }
}
function a() {
  return i;
}
function s(t2, e2) {
  var n2 = f(t2, e2);
  return u.get(n2);
}
function c(t2) {
  for (var e2 = u.entries(), n2 = []; ; ) {
    var r2 = e2.next(), o2 = r2.done, a2 = r2.value;
    if (o2)
      break;
    var i2 = a2[0], s2 = a2[1];
    i2.split("_")[0] === t2 && n2.push(s2);
  }
  return n2;
}
function l(t2) {
  var e2 = t2.kernelName, n2 = t2.backendName, r2 = f(e2, n2);
  if (u.has(r2))
    throw new Error("The kernel '" + e2 + "' for backend '" + n2 + "' is already registered");
  u.set(r2, t2);
}
function h(t2, e2) {
  var n2 = f(t2, e2);
  if (!u.has(n2))
    throw new Error("The kernel '" + t2 + "' for backend '" + e2 + "' is not registered");
  u.delete(n2);
}
function f(t2, e2) {
  return e2 + "_" + t2;
}
function p(t2) {
  for (var e2 = t2.length, n2 = 0, r2 = 0; e2 > 0; )
    r2 = Math.random() * e2 | 0, n2 = t2[--e2], t2[e2] = t2[r2], t2[r2] = n2;
}
function d(t2, e2, n2) {
  return Math.max(t2, Math.min(e2, n2));
}
function v(t2) {
  return t2 % 2 == 0 ? t2 : t2 + 1;
}
function m(t2) {
  for (var e2 = 0, n2 = 0; n2 < t2.length; n2++)
    e2 += t2[n2];
  return e2;
}
function g(t2, e2) {
  if (!t2)
    throw new Error("string" == typeof e2 ? e2 : e2());
}
function y(t2, e2, n2) {
  void 0 === n2 && (n2 = ""), g(C(t2, e2), function() {
    return n2 + " Shapes " + t2 + " and " + e2 + " must match";
  });
}
function x(t2) {
  g(null != t2, function() {
    return "The input to the tensor constructor must be a non-null value.";
  });
}
function b(t2, e2, n2) {
  if (void 0 === e2 && (e2 = []), void 0 === n2 && (n2 = false), null == e2 && (e2 = []), Array.isArray(t2) || B(t2) && !n2)
    for (var r2 = 0; r2 < t2.length; ++r2)
      b(t2[r2], e2, n2);
  else
    e2.push(t2);
  return e2;
}
function w(t2) {
  if (0 === t2.length)
    return 1;
  for (var e2 = t2[0], n2 = 1; n2 < t2.length; n2++)
    e2 *= t2[n2];
  return e2;
}
function C(t2, e2) {
  if (t2 === e2)
    return true;
  if (null == t2 || null == e2)
    return false;
  if (t2.length !== e2.length)
    return false;
  for (var n2 = 0; n2 < t2.length; n2++)
    if (t2[n2] !== e2[n2])
      return false;
  return true;
}
function E(t2) {
  return t2 % 1 == 0;
}
function R(t2) {
  if (null != Math.tanh)
    return Math.tanh(t2);
  if (t2 === 1 / 0)
    return 1;
  if (t2 === -1 / 0)
    return -1;
  var e2 = Math.exp(2 * t2);
  return (e2 - 1) / (e2 + 1);
}
function I(t2) {
  var e2 = Math.ceil(Math.sqrt(t2));
  return [e2, Math.ceil(t2 / e2)];
}
function k(t2, e2) {
  return e2 <= t2.length ? t2 : t2 + " ".repeat(e2 - t2.length);
}
function S(t2, e2, n2) {
  return void 0 === e2 && (e2 = function(t3) {
    return 0;
  }), new Promise(function(r2, o2) {
    var a2 = 0, i2 = function() {
      if (t2())
        r2();
      else {
        var u2 = e2(++a2);
        null != n2 && a2 >= n2 ? o2() : setTimeout(i2, u2);
      }
    };
    i2();
  });
}
function A(t2, e2) {
  for (var n2 = 1, r2 = -1, o2 = 0; o2 < t2.length; ++o2)
    if (t2[o2] >= 0)
      n2 *= t2[o2];
    else if (-1 === t2[o2]) {
      if (-1 !== r2)
        throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + r2 + " and dim " + o2);
      r2 = o2;
    } else if (t2[o2] < 0)
      throw Error("Shapes can not be < 0. Found " + t2[o2] + " at dim " + o2);
  if (-1 === r2) {
    if (e2 > 0 && e2 !== n2)
      throw Error("Size(" + e2 + ") must match the product of shape " + t2);
    return t2;
  }
  if (0 === n2)
    throw Error("Cannot infer the missing size in [" + t2 + "] when there are 0 elements");
  if (e2 % n2 != 0)
    throw Error("The implicit shape can't be a fractional number. Got " + e2 + " / " + n2);
  var a2 = t2.slice();
  return a2[r2] = e2 / n2, a2;
}
function D(t2, e2) {
  var n2 = e2.length;
  return g((t2 = null == t2 ? e2.map(function(t3, e3) {
    return e3;
  }) : [].concat(t2)).every(function(t3) {
    return t3 >= -n2 && t3 < n2;
  }), function() {
    return "All values in axis param must be in range [-" + n2 + ", " + n2 + ") but got axis " + t2;
  }), g(t2.every(function(t3) {
    return E(t3);
  }), function() {
    return "All values in axis param must be integers but got axis " + t2;
  }), t2.map(function(t3) {
    return t3 < 0 ? n2 + t3 : t3;
  });
}
function T(t2, e2) {
  for (var n2 = [], r2 = [], o2 = null != e2 && Array.isArray(e2) && 0 === e2.length, a2 = null == e2 || o2 ? null : D(e2, t2).sort(), i2 = 0, u2 = 0; u2 < t2.length; ++u2) {
    if (null != a2) {
      if (a2[i2] === u2 && 1 !== t2[u2])
        throw new Error("Can't squeeze axis " + u2 + " since its dim '" + t2[u2] + "' is not 1");
      (null == a2[i2] || a2[i2] > u2) && 1 === t2[u2] && (n2.push(t2[u2]), r2.push(u2)), a2[i2] <= u2 && i2++;
    }
    1 !== t2[u2] && (n2.push(t2[u2]), r2.push(u2));
  }
  return { newShape: n2, keptDims: r2 };
}
function N(t2, e2) {
  var n2 = null;
  if (null == t2 || "float32" === t2)
    n2 = new Float32Array(e2);
  else if ("int32" === t2)
    n2 = new Int32Array(e2);
  else {
    if ("bool" !== t2)
      throw new Error("Unknown data type " + t2);
    n2 = new Uint8Array(e2);
  }
  return n2;
}
function F(t2, e2) {
  var n2 = null;
  if (null == t2 || "float32" === t2)
    n2 = new Float32Array(e2);
  else if ("int32" === t2)
    n2 = new Int32Array(e2);
  else if ("bool" === t2)
    n2 = new Uint8Array(e2);
  else {
    if ("string" !== t2)
      throw new Error("Unknown data type " + t2);
    n2 = new Array(e2);
  }
  return n2;
}
function O(t2, e2) {
  for (var n2 = 0; n2 < t2.length; n2++) {
    var r2 = t2[n2];
    if (isNaN(r2) || !isFinite(r2))
      throw Error("A tensor of type " + e2 + " being uploaded contains " + r2 + ".");
  }
}
function _(t2) {
  return "bool" === t2 || "complex64" === t2 || "float32" === t2 || "int32" === t2 || "string" === t2;
}
function M(t2, e2) {
  return "complex64" !== e2 && (("float32" !== e2 || "complex64" === t2) && (("int32" !== e2 || "float32" === t2 || "complex64" === t2) && ("bool" !== e2 || "bool" !== t2)));
}
function B(t2) {
  return t2 instanceof Float32Array || t2 instanceof Int32Array || t2 instanceof Uint8Array;
}
function P(t2) {
  if ("float32" === t2 || "int32" === t2)
    return 4;
  if ("complex64" === t2)
    return 8;
  if ("bool" === t2)
    return 1;
  throw new Error("Unknown dtype " + t2);
}
function L(t2) {
  if (null == t2)
    return 0;
  var e2 = 0;
  return t2.forEach(function(t3) {
    return e2 += t3.length;
  }), e2;
}
function W(t2) {
  return "string" == typeof t2 || t2 instanceof String;
}
function U(t2) {
  return "boolean" == typeof t2;
}
function V(t2) {
  return "number" == typeof t2;
}
function z(t2) {
  return Array.isArray(t2) ? z(t2[0]) : t2 instanceof Float32Array ? "float32" : t2 instanceof Int32Array || t2 instanceof Uint8Array ? "int32" : V(t2) ? "float32" : W(t2) ? "string" : U(t2) ? "bool" : "float32";
}
function G(t2) {
  return !!(t2 && t2.constructor && t2.call && t2.apply);
}
function H(t2, e2) {
  for (var n2 = e2; n2 < t2; ++n2)
    if (t2 % n2 == 0)
      return n2;
  return t2;
}
function q(t2) {
  var e2 = t2.length;
  if (e2 < 2)
    return [];
  var n2 = new Array(e2 - 1);
  n2[e2 - 2] = t2[e2 - 1];
  for (var r2 = e2 - 3; r2 >= 0; --r2)
    n2[r2] = n2[r2 + 1] * t2[r2 + 1];
  return n2;
}
function K(t2, e2, n2) {
  if ("string" === e2)
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(t2) && (t2 = b(t2)), n2 && O(t2, e2), function(t3, e3) {
    return t3 instanceof Float32Array && "float32" === e3 || t3 instanceof Int32Array && "int32" === e3 || t3 instanceof Uint8Array && "bool" === e3;
  }(t2, e2))
    return t2;
  if (null == e2 || "float32" === e2 || "complex64" === e2)
    return new Float32Array(t2);
  if ("int32" === e2)
    return new Int32Array(t2);
  if ("bool" === e2) {
    for (var r2 = new Uint8Array(t2.length), o2 = 0; o2 < r2.length; ++o2)
      0 !== Math.round(t2[o2]) && (r2[o2] = 1);
    return r2;
  }
  throw new Error("Unknown data type " + e2);
}
function j(t2, e2) {
  if (0 === t2.length)
    return e2[0];
  var n2 = t2.reduce(function(t3, e3) {
    return t3 * e3;
  });
  if (0 === n2)
    return [];
  if (n2 !== e2.length)
    throw new Error("[" + t2 + "] does not match the input size.");
  return function t3(e3, n3, r2) {
    var o2 = new Array();
    if (1 === n3.length)
      for (var a2 = n3[0], i2 = 0; i2 < a2; i2++)
        o2[i2] = r2[e3 + i2];
    else {
      a2 = n3[0];
      var u2 = n3.slice(1), s2 = u2.reduce(function(t4, e4) {
        return t4 * e4;
      });
      for (i2 = 0; i2 < a2; i2++)
        o2[i2] = t3(e3 + i2 * s2, u2, r2);
    }
    return o2;
  }(0, t2, e2);
}
function X(t2, e2) {
  for (var n2 = $(t2, e2), r2 = 0; r2 < n2.length; r2++)
    n2[r2] = 1;
  return n2;
}
function $(t2, e2) {
  if (null == e2 || "float32" === e2 || "complex64" === e2)
    return new Float32Array(t2);
  if ("int32" === e2)
    return new Int32Array(t2);
  if ("bool" === e2)
    return new Uint8Array(t2);
  throw new Error("Unknown data type " + e2);
}
function Y() {
  return a().platform.now();
}
function Q(t2) {
  t2.forEach(function(e2) {
    g(Number.isInteger(e2) && e2 >= 0, function() {
      return "Tensor must have a shape comprised of positive integers but got shape [" + t2 + "].";
    });
  });
}
function J(t2, e2) {
  return void 0 === e2 && (e2 = "utf-8"), e2 = e2 || "utf-8", a().platform.encode(t2, e2);
}
function Z(t2, e2) {
  return void 0 === e2 && (e2 = "utf-8"), e2 = e2 || "utf-8", a().platform.decode(t2, e2);
}
function it(t2, e2, n2, r2) {
  var o2 = q(e2), a2 = function(t3, e3, n3, r3) {
    var o3 = w(e3), a3 = r3[r3.length - 1], i3 = new Array(a3).fill(0), u3 = e3.length, s3 = "complex64" === n3 ? ct(t3) : t3;
    if (u3 > 1)
      for (var c2 = 0; c2 < o3 / a3; c2++)
        for (var l3 = c2 * a3, h2 = 0; h2 < a3; h2++)
          i3[h2] = Math.max(i3[h2], ut(s3[l3 + h2], 0, n3).length);
    return i3;
  }(t2, e2, n2, o2), i2 = e2.length, u2 = function t3(e3, n3, r3, o3, a3, i3) {
    void 0 === i3 && (i3 = true);
    var u3 = "complex64" === r3 ? 2 : 1;
    var s3 = n3[0];
    var c2 = n3.length;
    if (0 === c2) {
      if ("complex64" === r3) {
        var l3 = ct(e3);
        return [ut(l3[0], 0, r3)];
      }
      return "bool" === r3 ? [st(e3[0])] : [e3[0].toString()];
    }
    if (1 === c2) {
      if (s3 > rt) {
        var h2 = ot * u3, f2 = Array.from(e3.slice(0, h2)), p2 = Array.from(e3.slice(s3 - ot * u3, s3));
        return "complex64" === r3 && (f2 = ct(f2), p2 = ct(p2)), ["[" + f2.map(function(t4, e4) {
          return ut(t4, a3[e4], r3);
        }).join(", ") + ", ..., " + p2.map(function(t4, e4) {
          return ut(t4, a3[s3 - ot + e4], r3);
        }).join(", ") + "]"];
      }
      var d2 = "complex64" === r3 ? ct(e3) : Array.from(e3);
      return ["[" + d2.map(function(t4, e4) {
        return ut(t4, a3[e4], r3);
      }).join(", ") + "]"];
    }
    var v2 = n3.slice(1);
    var m2 = o3.slice(1);
    var g2 = o3[0] * u3;
    var y2 = [];
    if (s3 > rt) {
      for (var x2 = 0; x2 < ot; x2++) {
        var b2 = x2 * g2, w2 = b2 + g2;
        y2.push.apply(y2, t3(e3.slice(b2, w2), v2, r3, m2, a3, false));
      }
      y2.push("...");
      for (var x2 = s3 - ot; x2 < s3; x2++) {
        var b2 = x2 * g2, w2 = b2 + g2;
        y2.push.apply(y2, t3(e3.slice(b2, w2), v2, r3, m2, a3, x2 === s3 - 1));
      }
    } else
      for (var x2 = 0; x2 < s3; x2++) {
        var b2 = x2 * g2, w2 = b2 + g2;
        y2.push.apply(y2, t3(e3.slice(b2, w2), v2, r3, m2, a3, x2 === s3 - 1));
      }
    var C2 = 2 === c2 ? "," : "";
    y2[0] = "[" + y2[0] + C2;
    for (var x2 = 1; x2 < y2.length - 1; x2++)
      y2[x2] = " " + y2[x2] + C2;
    var E2 = ",\n";
    for (var x2 = 2; x2 < c2; x2++)
      E2 += "\n";
    y2[y2.length - 1] = " " + y2[y2.length - 1] + "]" + (i3 ? "" : E2);
    return y2;
  }(t2, e2, n2, o2, a2), s2 = ["Tensor"];
  return r2 && (s2.push("  dtype: " + n2), s2.push("  rank: " + i2), s2.push("  shape: [" + e2 + "]"), s2.push("  values:")), s2.push(u2.map(function(t3) {
    return "    " + t3;
  }).join("\n")), s2.join("\n");
}
function ut(t2, e2, n2) {
  return k(Array.isArray(t2) ? parseFloat(t2[0].toFixed(at)) + " + " + parseFloat(t2[1].toFixed(at)) + "j" : W(t2) ? "'" + t2 + "'" : "bool" === n2 ? st(t2) : parseFloat(t2.toFixed(at)).toString(), e2);
}
function st(t2) {
  return 0 === t2 ? "false" : "true";
}
function ct(t2) {
  for (var e2 = [], n2 = 0; n2 < t2.length; n2 += 2)
    e2.push([t2[n2], t2[n2 + 1]]);
  return e2;
}
function Ct(t2, e2) {
  if ("string" === t2 || "string" === e2) {
    if ("string" === t2 && "string" === e2)
      return "string";
    throw new Error("Can not upcast " + t2 + " with " + e2);
  }
  return wt[t2][e2];
}
function Et(t2) {
  return Ct(t2, "int32");
}
function Rt(t2, e2) {
  if (t2.dtype === e2.dtype)
    return [t2, e2];
  var n2 = Ct(t2.dtype, e2.dtype);
  return [t2.cast(n2), e2.cast(n2)];
}
function It(t2, e2) {
  g(t2.dtype === e2.dtype, function() {
    return "The dtypes of the first(" + t2.dtype + ") and second(" + e2.dtype + ") input must match";
  });
}
function kt(t2) {
  var e2 = [];
  return function t3(e3, n2, r2) {
    if (null == e3)
      return;
    if (e3 instanceof dt)
      return void n2.push(e3);
    if (o2 = e3, !Array.isArray(o2) && "object" != typeof o2)
      return;
    var o2;
    var a2 = e3;
    for (var i2 in a2) {
      var u2 = a2[i2];
      r2.has(u2) || (r2.add(u2), t3(u2, n2, r2));
    }
  }(t2, e2, /* @__PURE__ */ new Set()), e2;
}
function Ft() {
  return "undefined" != typeof window && null != window.document || "undefined" != typeof WorkerGlobalScope;
}
function Wt(t2, e2) {
  Pt[t2] = e2;
}
function Ut(t2) {
  t2 in Pt || (Pt[t2] = function(t3) {
    if (1 !== t3 && 2 !== t3)
      throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
    var e3 = Vt(t3);
    if (e3.addEventListener("webglcontextlost", function(e4) {
      e4.preventDefault(), delete Pt[t3];
    }, false), 1 === t3)
      return e3.getContext("webgl", Lt) || e3.getContext("experimental-webgl", Lt);
    return e3.getContext("webgl2", Lt);
  }(t2));
  var e2 = Pt[t2];
  return e2.isContextLost() ? (delete Pt[t2], Ut(t2)) : (e2.disable(e2.DEPTH_TEST), e2.disable(e2.STENCIL_TEST), e2.disable(e2.BLEND), e2.disable(e2.DITHER), e2.disable(e2.POLYGON_OFFSET_FILL), e2.disable(e2.SAMPLE_COVERAGE), e2.enable(e2.SCISSOR_TEST), e2.enable(e2.CULL_FACE), e2.cullFace(e2.BACK), Pt[t2]);
}
function Vt(t2) {
  if ("undefined" != typeof OffscreenCanvas && 2 === t2)
    return new OffscreenCanvas(300, 150);
  if ("undefined" != typeof document)
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function zt(t2, e2) {
  return [e2, t2];
}
function Gt(t2) {
  var e2 = w(t2);
  return I(Math.ceil(e2 / 4));
}
function Ht(t2, e2) {
  return [Math.max(1, Math.ceil(e2 / 2)), Math.max(1, Math.ceil(t2 / 2))];
}
function qt(t2, e2) {
  var n2, r2, o2, i2, u2, s2, c2, l3, h2, f2 = t2;
  return 2 === a().getNumber("WEBGL_VERSION") ? (n2 = f2.R32F, r2 = f2.R16F, o2 = f2.RGBA16F, i2 = f2.RGBA32F, u2 = f2.RED, s2 = 4, c2 = 1, l3 = f2.HALF_FLOAT, h2 = f2.FLOAT) : (n2 = t2.RGBA, r2 = t2.RGBA, o2 = t2.RGBA, i2 = f2.RGBA, u2 = t2.RGBA, s2 = 4, c2 = 4, l3 = null != e2 ? e2.HALF_FLOAT_OES : null, h2 = t2.FLOAT), { internalFormatFloat: n2, internalFormatHalfFloat: r2, internalFormatPackedHalfFloat: o2, internalFormatPackedFloat: i2, textureFormatFloat: u2, downloadTextureFormat: t2.RGBA, downloadUnpackNumChannels: s2, defaultNumChannels: c2, textureTypeHalfFloat: l3, textureTypeFloat: h2 };
}
function Kt(t2, e2, n2) {
  var r2 = n2();
  return e2 && function(t3) {
    var e3 = t3.getError();
    if (e3 !== t3.NO_ERROR)
      throw new Error("WebGL Error: " + Yt(t3, e3));
  }(t2), r2;
}
function $t(t2) {
  return !!(a().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || 0 === t2 || jt < Math.abs(t2) && Math.abs(t2) < Xt);
}
function Yt(t2, e2) {
  switch (e2) {
    case t2.NO_ERROR:
      return "NO_ERROR";
    case t2.INVALID_ENUM:
      return "INVALID_ENUM";
    case t2.INVALID_VALUE:
      return "INVALID_VALUE";
    case t2.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case t2.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case t2.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case t2.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return "Unknown error code " + e2;
  }
}
function Qt(t2, e2, n2) {
  return be(t2, e2, function() {
    return t2.getExtension(n2);
  }, 'Extension "' + n2 + '" not supported on this browser.');
}
function Jt(t2, e2, n2) {
  var r2 = be(t2, e2, function() {
    return t2.createShader(t2.VERTEX_SHADER);
  }, "Unable to create vertex WebGLShader.");
  if (Kt(t2, e2, function() {
    return t2.shaderSource(r2, n2);
  }), Kt(t2, e2, function() {
    return t2.compileShader(r2);
  }), false === t2.getShaderParameter(r2, t2.COMPILE_STATUS))
    throw console.log(t2.getShaderInfoLog(r2)), new Error("Failed to compile vertex shader.");
  return r2;
}
function Zt(t2, e2, n2) {
  var r2 = be(t2, e2, function() {
    return t2.createShader(t2.FRAGMENT_SHADER);
  }, "Unable to create fragment WebGLShader.");
  if (Kt(t2, e2, function() {
    return t2.shaderSource(r2, n2);
  }), Kt(t2, e2, function() {
    return t2.compileShader(r2);
  }), false === t2.getShaderParameter(r2, t2.COMPILE_STATUS))
    throw function(t3, e3) {
      var n3 = ne.exec(e3);
      if (null == n3)
        return console.log("Couldn't parse line number in error: " + e3), void console.log(t3);
      for (var r3 = +n3[1], o2 = t3.split("\n"), a2 = o2.length.toString().length + 2, i2 = o2.map(function(t4, e4) {
        return k((e4 + 1).toString(), a2) + t4;
      }), u2 = 0, s2 = 0; s2 < i2.length; s2++)
        u2 = Math.max(i2[s2].length, u2);
      var c2 = i2.slice(0, r3 - 1), l3 = i2.slice(r3 - 1, r3), h2 = i2.slice(r3);
      console.log(c2.join("\n")), console.log(e3.split("\n")[0]), console.log("%c " + k(l3[0], u2), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(h2.join("\n"));
    }(n2, t2.getShaderInfoLog(r2)), new Error("Failed to compile fragment shader.");
  return r2;
}
function re(t2, e2) {
  return be(t2, e2, function() {
    return t2.createProgram();
  }, "Unable to create WebGLProgram.");
}
function oe(t2, e2, n2) {
  if (Kt(t2, e2, function() {
    return t2.linkProgram(n2);
  }), false === t2.getProgramParameter(n2, t2.LINK_STATUS))
    throw console.log(t2.getProgramInfoLog(n2)), new Error("Failed to link vertex and fragment shaders.");
}
function ae(t2, e2, n2) {
  if (Kt(t2, e2, function() {
    return t2.validateProgram(n2);
  }), false === t2.getProgramParameter(n2, t2.VALIDATE_STATUS))
    throw console.log(t2.getProgramInfoLog(n2)), new Error("Shader program validation failed.");
}
function ie(t2, e2, n2) {
  var r2 = be(t2, e2, function() {
    return t2.createBuffer();
  }, "Unable to create WebGLBuffer");
  return Kt(t2, e2, function() {
    return t2.bindBuffer(t2.ARRAY_BUFFER, r2);
  }), Kt(t2, e2, function() {
    return t2.bufferData(t2.ARRAY_BUFFER, n2, t2.STATIC_DRAW);
  }), r2;
}
function ue(t2, e2, n2) {
  var r2 = be(t2, e2, function() {
    return t2.createBuffer();
  }, "Unable to create WebGLBuffer");
  return Kt(t2, e2, function() {
    return t2.bindBuffer(t2.ELEMENT_ARRAY_BUFFER, r2);
  }), Kt(t2, e2, function() {
    return t2.bufferData(t2.ELEMENT_ARRAY_BUFFER, n2, t2.STATIC_DRAW);
  }), r2;
}
function se(t2, e2) {
  return be(t2, e2, function() {
    return t2.createTexture();
  }, "Unable to create WebGLTexture.");
}
function ce(t2, e2) {
  var n2 = a().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (t2 <= 0 || e2 <= 0) {
    var r2 = "[" + t2 + "x" + e2 + "]";
    throw new Error("Requested texture size " + r2 + " is invalid.");
  }
  if (t2 > n2 || e2 > n2) {
    r2 = "[" + t2 + "x" + e2 + "]";
    throw new Error("Requested texture size " + r2 + " greater than WebGL maximum on this browser / GPU " + ("[" + n2 + "x" + n2 + "]") + ".");
  }
}
function le(t2, e2) {
  return be(t2, e2, function() {
    return t2.createFramebuffer();
  }, "Unable to create WebGLFramebuffer.");
}
function he(t2, e2, n2, r2, o2, a2, i2, u2) {
  var s2 = t2.getAttribLocation(n2, r2);
  return -1 !== s2 && (Kt(t2, e2, function() {
    return t2.bindBuffer(t2.ARRAY_BUFFER, o2);
  }), Kt(t2, e2, function() {
    return t2.vertexAttribPointer(s2, a2, t2.FLOAT, false, i2, u2);
  }), Kt(t2, e2, function() {
    return t2.enableVertexAttribArray(s2);
  }), true);
}
function fe(t2, e2, n2, r2) {
  we(t2, r2), Kt(t2, e2, function() {
    return t2.activeTexture(t2.TEXTURE0 + r2);
  }), Kt(t2, e2, function() {
    return t2.bindTexture(t2.TEXTURE_2D, n2);
  });
}
function pe(t2, e2, n2, r2) {
  return be(t2, e2, function() {
    return t2.getUniformLocation(n2, r2);
  }, 'uniform "' + r2 + '" not present in program.');
}
function de(t2, e2, n2) {
  return t2.getUniformLocation(e2, n2);
}
function ve(t2, e2, n2, r2, o2, a2) {
  Kt(t2, e2, function() {
    return fe(t2, e2, r2, a2);
  }), Kt(t2, e2, function() {
    return t2.uniform1i(o2, a2);
  });
}
function me(t2, e2, n2, r2) {
  Kt(t2, e2, function() {
    return t2.bindFramebuffer(t2.FRAMEBUFFER, r2);
  }), Kt(t2, e2, function() {
    return t2.framebufferTexture2D(t2.FRAMEBUFFER, t2.COLOR_ATTACHMENT0, t2.TEXTURE_2D, n2, 0);
  });
}
function ge(t2, e2, n2) {
  Kt(t2, e2, function() {
    return t2.bindFramebuffer(t2.FRAMEBUFFER, n2);
  }), Kt(t2, e2, function() {
    return t2.framebufferTexture2D(t2.FRAMEBUFFER, t2.COLOR_ATTACHMENT0, t2.TEXTURE_2D, null, 0);
  });
}
function ye(t2) {
  var e2 = t2.checkFramebufferStatus(t2.FRAMEBUFFER);
  if (e2 !== t2.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + xe(t2, e2));
}
function xe(t2, e2) {
  switch (e2) {
    case t2.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case t2.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case t2.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case t2.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return "unknown error " + e2;
  }
}
function be(t2, e2, n2, r2) {
  var o2 = Kt(t2, e2, function() {
    return n2();
  });
  if (null == o2)
    throw new Error(r2);
  return o2;
}
function we(t2, e2) {
  var n2 = t2.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, r2 = e2 + t2.TEXTURE0;
  if (r2 < t2.TEXTURE0 || r2 > n2)
    throw new Error("textureUnit must be in " + ("[gl.TEXTURE0, gl.TEXTURE" + n2 + "]") + ".");
}
function Ce(t2, e2) {
  return void 0 === e2 && (e2 = 2), w(t2.slice(0, t2.length - e2));
}
function Ee(t2) {
  if (0 === t2.length)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [t2.length > 1 ? t2[t2.length - 2] : 1, t2[t2.length - 1]];
}
function Re(t2) {
  var e2 = [1, 1, 1];
  return 0 === t2.length || 1 === t2.length && 1 === t2[0] || (e2 = [Ce(t2)].concat(Ee(t2))), e2;
}
function Ie(t2, e2) {
  var n2;
  void 0 === e2 && (e2 = false);
  var r2 = a().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (e2 && (r2 *= 2, 1 === (t2 = t2.map(function(e3, n3) {
    return n3 >= t2.length - 2 ? v(t2[n3]) : t2[n3];
  })).length && (t2 = [2, t2[0]])), 2 !== t2.length) {
    var o2 = T(t2);
    t2 = o2.newShape;
  }
  var i2 = w(t2);
  if (t2.length <= 1 && i2 <= r2)
    return [1, i2];
  if (2 === t2.length && t2[0] <= r2 && t2[1] <= r2)
    return t2;
  if (3 === t2.length && t2[0] * t2[1] <= r2 && t2[2] <= r2)
    return [t2[0] * t2[1], t2[2]];
  if (3 === t2.length && t2[0] <= r2 && t2[1] * t2[2] <= r2)
    return [t2[0], t2[1] * t2[2]];
  if (4 === t2.length && t2[0] * t2[1] * t2[2] <= r2 && t2[3] <= r2)
    return [t2[0] * t2[1] * t2[2], t2[3]];
  if (4 === t2.length && t2[0] <= r2 && t2[1] * t2[2] * t2[3] <= r2)
    return [t2[0], t2[1] * t2[2] * t2[3]];
  if (e2) {
    var u2 = Ce(t2), s2 = 2, c2 = 2;
    return t2.length && (s2 = (n2 = Ee(t2))[0], c2 = n2[1]), I(i2 = u2 * (s2 / 2) * (c2 / 2)).map(function(t3) {
      return 2 * t3;
    });
  }
  return I(i2);
}
function ke(t2) {
  return t2 % 2 == 0;
}
function Se(t2, e2) {
  if (C(t2 = t2.slice(-2), e2 = e2.slice(-2)))
    return true;
  if (!t2.length || !e2.length)
    return true;
  if (0 === t2[0] || 0 === t2[1] || 0 === e2[0] || 0 === e2[1])
    return true;
  if (t2.length !== e2.length) {
    var n2 = t2.slice(-1)[0], r2 = e2.slice(-1)[0];
    if (n2 === r2)
      return true;
    if (ke(n2) && ke(r2) && (1 === t2[0] || 1 === e2[0]))
      return true;
  }
  return t2[1] === e2[1] && ke(t2[0]) && ke(e2[0]);
}
function Ae(t2) {
  if (null == te) {
    var e2 = Ut(t2);
    te = e2.getParameter(e2.MAX_TEXTURE_SIZE);
  }
  return te;
}
function De(t2) {
  if (null == ee) {
    var e2 = Ut(t2);
    ee = e2.getParameter(e2.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, ee);
}
function Te(t2) {
  if (0 === t2)
    return 0;
  var e2 = Ut(t2);
  return Ne(e2, "EXT_disjoint_timer_query_webgl2") && 2 === t2 ? 2 : Ne(e2, "EXT_disjoint_timer_query") ? 1 : 0;
}
function Ne(t2, e2) {
  return null != t2.getExtension(e2);
}
function Fe(t2) {
  try {
    if (null != Ut(t2))
      return true;
  } catch (t3) {
    return false;
  }
  return false;
}
function Oe(t2) {
  if (0 === t2)
    return false;
  var e2 = Ut(t2);
  if (1 === t2) {
    if (!Ne(e2, "OES_texture_float"))
      return false;
  } else if (!Ne(e2, "EXT_color_buffer_float"))
    return false;
  return Me(e2);
}
function _e(t2) {
  if (0 === t2)
    return false;
  var e2 = Ut(t2);
  if (1 !== t2) {
    if (Ne(e2, "EXT_color_buffer_float"))
      return Me(e2);
    if (Ne(e2, "EXT_color_buffer_half_float")) {
      var n2 = e2.getExtension("EXT_color_buffer_half_float");
      return function(t3, e3) {
        var n3 = qt(t3, e3), r2 = t3.createTexture();
        t3.bindTexture(t3.TEXTURE_2D, r2);
        t3.texImage2D(t3.TEXTURE_2D, 0, n3.internalFormatHalfFloat, 1, 1, 0, n3.textureFormatFloat, n3.textureTypeHalfFloat, null);
        var o2 = t3.createFramebuffer();
        t3.bindFramebuffer(t3.FRAMEBUFFER, o2), t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, r2, 0);
        var a2 = t3.checkFramebufferStatus(t3.FRAMEBUFFER) === t3.FRAMEBUFFER_COMPLETE;
        return t3.bindTexture(t3.TEXTURE_2D, null), t3.bindFramebuffer(t3.FRAMEBUFFER, null), t3.deleteTexture(r2), t3.deleteFramebuffer(o2), a2;
      }(e2, n2);
    }
    return false;
  }
  return !!Ne(e2, "OES_texture_float") && (!!Ne(e2, "WEBGL_color_buffer_float") && Me(e2));
}
function Me(t2) {
  var e2 = qt(t2), n2 = t2.createTexture();
  t2.bindTexture(t2.TEXTURE_2D, n2);
  t2.texImage2D(t2.TEXTURE_2D, 0, e2.internalFormatFloat, 1, 1, 0, e2.textureFormatFloat, e2.textureTypeFloat, null);
  var r2 = t2.createFramebuffer();
  t2.bindFramebuffer(t2.FRAMEBUFFER, r2), t2.framebufferTexture2D(t2.FRAMEBUFFER, t2.COLOR_ATTACHMENT0, t2.TEXTURE_2D, n2, 0);
  var o2 = t2.checkFramebufferStatus(t2.FRAMEBUFFER) === t2.FRAMEBUFFER_COMPLETE;
  return t2.bindTexture(t2.TEXTURE_2D, null), t2.bindFramebuffer(t2.FRAMEBUFFER, null), t2.deleteTexture(n2), t2.deleteFramebuffer(r2), o2;
}
function Be(t2) {
  return 2 === t2 && null != Ut(t2).fenceSync;
}
function We() {
  a().set("PROD", true);
}
function Ue() {
  a().set("DEBUG", true);
}
function Ve() {
  a().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function ze(t2) {
  a().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(t2 + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function Ge() {
  Nt.disposeVariables();
}
function He() {
  return Nt;
}
function qe() {
  return Nt.memory();
}
function Ke(t2) {
  return Nt.profile(t2);
}
function je(t2, e2) {
  return Nt.tidy(t2, e2);
}
function Xe(t2) {
  kt(t2).forEach(function(t3) {
    return t3.dispose();
  });
}
function $e(t2) {
  return Nt.keep(t2);
}
function Ye(t2) {
  return Nt.time(t2);
}
function Qe(t2) {
  return Nt.setBackend(t2);
}
function Je() {
  return Nt.ready();
}
function Ze() {
  return Nt.backendName;
}
function tn(t2) {
  Nt.removeBackend(t2);
}
function en(t2) {
  return Nt.findBackend(t2);
}
function nn(t2) {
  return Nt.findBackendFactory(t2);
}
function rn(t2, e2, n2) {
  return void 0 === n2 && (n2 = 1), Nt.registerBackend(t2, e2, n2);
}
function on() {
  return Nt.backend;
}
function an(t2, e2) {
  a().setPlatform(t2, e2);
}
function un() {
  for (var t2 = [], e2 = 0; e2 < arguments.length; e2++)
    t2[e2] = arguments[e2];
  a().getBool("IS_TEST") || console.warn.apply(console, t2);
}
function sn(t2, e2) {
  var n2 = t2;
  if (B(t2))
    return "string" === e2 ? [] : [t2.length];
  if (!Array.isArray(t2))
    return [];
  for (var r2 = []; Array.isArray(n2) || B(n2) && "string" !== e2; )
    r2.push(n2.length), n2 = n2[0];
  return Array.isArray(t2) && a().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && function t3(e3, n3, r3) {
    r3 = r3 || [];
    if (!Array.isArray(e3) && !B(e3))
      return void g(0 === n3.length, function() {
        return "Element arr[" + r3.join("][") + "] is a primitive, but should be an array/TypedArray of " + n3[0] + " elements";
      });
    g(n3.length > 0, function() {
      return "Element arr[" + r3.join("][") + "] should be a primitive, but is an array of " + e3.length + " elements";
    });
    g(e3.length === n3[0], function() {
      return "Element arr[" + r3.join("][") + "] should have " + n3[0] + " elements, but has " + e3.length + " elements";
    });
    var o2 = n3.slice(1);
    for (var a2 = 0; a2 < e3.length; ++a2)
      t3(e3[a2], o2, r3.concat(a2));
  }(t2, r2, []), r2;
}
function cn(t2, e2, n2, r2) {
  if (null != t2 && ("numeric" !== t2 && t2 !== e2 || "numeric" === t2 && "string" === e2))
    throw new Error("Argument '" + n2 + "' passed to '" + r2 + "' must be " + t2 + " tensor, but got " + e2 + " tensor");
}
function ln(t2, e2, n2, r2) {
  if (void 0 === r2 && (r2 = "numeric"), t2 instanceof dt)
    return cn(r2, t2.dtype, e2, n2), t2;
  var o2 = z(t2);
  if ("string" !== o2 && ["bool", "int32", "float32"].indexOf(r2) >= 0 && (o2 = r2), cn(r2, o2, e2, n2), null == t2 || !B(t2) && !Array.isArray(t2) && "number" != typeof t2 && "boolean" != typeof t2 && "string" != typeof t2) {
    var i2 = null == t2 ? "null" : t2.constructor.name;
    throw new Error("Argument '" + e2 + "' passed to '" + n2 + "' must be a Tensor or TensorLike, but got '" + i2 + "'");
  }
  var u2 = sn(t2, o2);
  B(t2) || Array.isArray(t2) || (t2 = [t2]);
  var s2 = "string" !== o2 ? K(t2, o2, a().getBool("DEBUG")) : b(t2, [], true);
  return Nt.makeTensor(s2, u2, o2);
}
function hn(t2, e2, n2, r2) {
  if (void 0 === r2 && (r2 = "numeric"), !Array.isArray(t2))
    throw new Error("Argument " + e2 + " passed to " + n2 + " must be a `Tensor[]` or `TensorLike[]`");
  return t2.map(function(t3, r3) {
    return ln(t3, e2 + "[" + r3 + "]", n2);
  }, r2);
}
function fn(t2, e2) {
  for (var n2 = 0; n2 < t2.length; ++n2)
    if (t2[t2.length - n2 - 1] !== e2 - 1 - n2)
      return false;
  return true;
}
function pn(t2, e2, n2) {
  for (var r2 = t2.length + e2.length, o2 = [], a2 = 0, i2 = 0, u2 = 0; u2 < r2; u2++)
    -1 === n2.indexOf(u2) ? o2.push(t2[a2++]) : o2.push(e2[i2++]);
  return o2;
}
function dn(t2, e2) {
  for (var n2 = [], r2 = t2.length, o2 = 0; o2 < r2; o2++)
    -1 === e2.indexOf(o2) && n2.push(t2[o2]);
  return [n2, e2.map(function(e3) {
    return t2[e3];
  })];
}
function vn(t2, e2) {
  return pn(t2, e2.map(function(t3) {
    return 1;
  }), e2);
}
function mn(t2, e2, n2) {
  g(fn(e2, n2), function() {
    return t2 + " supports only inner-most axes for now. Got axes " + e2 + " and rank-" + n2 + " input.";
  });
}
function gn(t2, e2) {
  if (fn(t2, e2))
    return null;
  for (var n2 = [], r2 = 0; r2 < e2; ++r2)
    -1 === t2.indexOf(r2) && n2.push(r2);
  return t2.forEach(function(t3) {
    return n2.push(t3);
  }), n2;
}
function yn(t2) {
  return t2.map(function(t3, e2) {
    return [e2, t3];
  }).sort(function(t3, e2) {
    return t3[1] - e2[1];
  }).map(function(t3) {
    return t3[0];
  });
}
function xn(t2, e2) {
  for (var n2 = [], r2 = e2 - t2; r2 < e2; ++r2)
    n2.push(r2);
  return n2;
}
function bn(t2, e2) {
  var n2 = t2[0].length;
  t2.forEach(function(t3, e3) {
    g(t3.length === n2, function() {
      return "Error in concat" + n2 + "D: rank of tensors[" + e3 + "] must be the same as the rank of the rest (" + n2 + ")";
    });
  }), g(e2 >= 0 && e2 < n2, function() {
    return "Error in concat" + n2 + "D: axis must be between 0 and " + (n2 - 1) + ".";
  });
  var r2 = t2[0];
  t2.forEach(function(t3, o2) {
    for (var a2 = 0; a2 < n2; a2++)
      g(a2 === e2 || t3[a2] === r2[a2], function() {
        return "Error in concat" + n2 + "D: Shape of tensors[" + o2 + "] (" + t3 + ") does not match the shape of the rest (" + r2 + ") along the non-concatenated axis " + o2 + ".";
      });
  });
}
function wn(t2, e2) {
  for (var n2 = t2[0].slice(), r2 = 1; r2 < t2.length; r2++)
    n2[e2] += t2[r2][e2];
  return n2;
}
function Cn(t2) {
  var e2 = Object.keys(t2);
  if (1 !== e2.length)
    throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with " + e2.length + " keys.");
  var n2 = e2[0], r2 = t2[n2];
  n2.endsWith("_") && (n2 = n2.substring(0, n2.length - 1));
  var o2 = function() {
    for (var t3 = [], e3 = 0; e3 < arguments.length; e3++)
      t3[e3] = arguments[e3];
    Nt.startScope(n2);
    try {
      var o3 = r2.apply(void 0, t3);
      return o3 instanceof Promise && console.error("Cannot return a Promise inside of tidy."), Nt.endScope(o3), o3;
    } catch (t4) {
      throw Nt.endScope(null), t4;
    }
  };
  return Object.defineProperty(o2, "name", { value: n2, configurable: true }), o2;
}
function kn(t2, e2, n2) {
  return Sn(t2, e2, sn(t2, n2), n2);
}
function Sn(t2, e2, n2, r2) {
  if (null == r2 && (r2 = z(t2)), "complex64" === r2)
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!B(t2) && !Array.isArray(t2) && "number" != typeof t2 && "boolean" != typeof t2 && "string" != typeof t2)
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (null != e2) {
    Q(e2);
    var o2 = w(e2), i2 = w(n2);
    g(o2 === i2, function() {
      return "Based on the provided shape, [" + e2 + "], the tensor should have " + o2 + " values but has " + i2;
    });
    for (var u2 = 0; u2 < n2.length; ++u2) {
      var s2 = n2[u2], c2 = u2 !== n2.length - 1 || s2 !== w(e2.slice(u2));
      g(n2[u2] === e2[u2] || !c2, function() {
        return "Error creating a new Tensor. Inferred shape (" + n2 + ") does not match the provided shape (" + e2 + "). ";
      });
    }
  }
  return B(t2) || Array.isArray(t2) || (t2 = [t2]), e2 = e2 || n2, t2 = "string" !== r2 ? K(t2, r2, a().getBool("DEBUG")) : b(t2, [], true), Nt.makeTensor(t2, e2, r2);
}
function An(t2, e2) {
  if ((B(t2) && "string" !== e2 || Array.isArray(t2)) && "complex64" !== e2)
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if ("string" === e2 && B(t2) && !(t2 instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Sn(t2, [], [], e2);
}
function Dn(t2, e2) {
  x(t2);
  var n2 = sn(t2, e2);
  if (1 !== n2.length)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Sn(t2, null, n2, e2);
}
function Tn(t2, e2, n2) {
  if (x(t2), null != e2 && 2 !== e2.length)
    throw new Error("tensor2d() requires shape to have two numbers");
  var r2 = sn(t2, n2);
  if (2 !== r2.length && 1 !== r2.length)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (1 === r2.length && null == e2)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Sn(t2, e2, r2, n2);
}
function Nn(t2, e2, n2) {
  if (x(t2), null != e2 && 3 !== e2.length)
    throw new Error("tensor3d() requires shape to have three numbers");
  var r2 = sn(t2, n2);
  if (3 !== r2.length && 1 !== r2.length)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (1 === r2.length && null == e2)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Sn(t2, e2, r2, n2);
}
function Fn(t2, e2, n2) {
  if (x(t2), null != e2 && 4 !== e2.length)
    throw new Error("tensor4d() requires shape to have four numbers");
  var r2 = sn(t2, n2);
  if (4 !== r2.length && 1 !== r2.length)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (1 === r2.length && null == e2)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Sn(t2, e2, r2, n2);
}
function On(t2, e2, n2) {
  if (x(t2), null != e2 && 5 !== e2.length)
    throw new Error("tensor5d() requires shape to have five numbers");
  var r2 = sn(t2, n2);
  if (5 !== r2.length && 1 !== r2.length)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (1 === r2.length && null == e2)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Sn(t2, e2, r2, n2);
}
function _n(t2, e2, n2) {
  if (x(t2), null != e2 && 6 !== e2.length)
    throw new Error("tensor6d() requires shape to have six numbers");
  var r2 = sn(t2, n2);
  if (6 !== r2.length && 1 !== r2.length)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (1 === r2.length && null == e2)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return Sn(t2, e2 = e2 || r2, r2, n2);
}
function Mn(t2, e2, n2, r2) {
  return void 0 === e2 && (e2 = true), Nt.makeVariable(t2, e2, n2, r2);
}
function Bn(t2, e2) {
  if (void 0 === e2 && (e2 = "float32"), "complex64" === e2) {
    var n2 = Bn(t2, "float32"), r2 = Pn(t2, "float32");
    return En(n2, r2);
  }
  var o2 = X(w(t2), e2);
  return Nt.makeTensor(o2, t2, e2);
}
function Pn(t2, e2) {
  if (void 0 === e2 && (e2 = "float32"), "complex64" === e2) {
    var n2 = Pn(t2, "float32"), r2 = Pn(t2, "float32");
    return En(n2, r2);
  }
  var o2 = $(w(t2), e2);
  return Nt.makeTensor(o2, t2, e2);
}
function Ln(t2, e2, n2) {
  return Nt.runKernelFunc(function(r2) {
    return r2.fill(t2, e2, n2);
  }, {});
}
function Wn(t2, e2, n2) {
  if (n2 <= 0)
    throw new Error("The number of values should be positive.");
  return Nt.runKernelFunc(function(r2) {
    return r2.linspace(t2, e2, n2);
  }, {});
}
function Un(t2, e2, n2, r2) {
  if (void 0 === n2 && (n2 = 1), void 0 === r2 && (r2 = "float32"), 0 === n2)
    throw new Error("Cannot have a step of zero");
  if (t2 === e2 || t2 < e2 && n2 < 0 || e2 < t2 && n2 > 1)
    return Pn([0], r2);
  var o2 = $(Math.abs(Math.ceil((e2 - t2) / n2)), r2);
  e2 < t2 && 1 === n2 && (n2 = -1), o2[0] = t2;
  for (var a2 = 1; a2 < o2.length; a2++)
    o2[a2] = o2[a2 - 1] + n2;
  return Dn(o2, r2);
}
function $n(t2, e2) {
  return t2(e2 = { exports: {} }, e2.exports), e2.exports;
}
function ur(t2, e2, n2) {
  return void 0 === e2 && (e2 = "float32"), e2 = e2 || "float32", Q(t2), new lt(t2, e2, n2);
}
function sr(t2, e2) {
  void 0 === e2 && (e2 = false), console.log(t2.toString(e2));
}
function Mr(t2, e2, n2, r2) {
  void 0 === r2 && (r2 = true);
  var o2 = [];
  if (r2)
    (o2 = o2.concat(e2.slice(0))).push(t2[0] / n2), o2 = o2.concat(t2.slice(1));
  else {
    o2 = o2.concat(t2[0]);
    for (var a2 = e2.length, i2 = 0; i2 < a2; ++i2)
      o2 = o2.concat([t2[i2 + 1] / e2[i2], e2[i2]]);
    o2 = o2.concat(t2.slice(a2 + 1));
  }
  return o2;
}
function Br(t2, e2, n2) {
  void 0 === n2 && (n2 = true);
  var r2 = [];
  if (n2) {
    r2.push(e2);
    for (var o2 = e2 + 1; o2 < t2; ++o2)
      o2 <= 2 * e2 ? (r2.push(o2), r2.push(o2 - (e2 + 1))) : r2.push(o2);
  } else {
    var a2 = [], i2 = [];
    for (o2 = 1; o2 < t2; ++o2)
      o2 >= 2 * e2 + 1 || o2 % 2 == 1 ? i2.push(o2) : a2.push(o2);
    r2.push.apply(r2, a2), r2.push(0), r2.push.apply(r2, i2);
  }
  return r2;
}
function Pr(t2, e2, n2, r2) {
  void 0 === r2 && (r2 = true);
  var o2 = [];
  r2 ? o2.push(t2[0] / n2) : o2.push(t2[0] * n2);
  for (var a2 = 1; a2 < t2.length; ++a2)
    a2 <= e2.length ? r2 ? o2.push(e2[a2 - 1] * t2[a2]) : o2.push(t2[a2] / e2[a2 - 1]) : o2.push(t2[a2]);
  return o2;
}
function Lr(t2, e2) {
  for (var n2 = [0], r2 = 0; r2 < e2; ++r2)
    n2.push(t2[r2][0]);
  return n2;
}
function Wr(t2, e2, n2) {
  for (var r2 = t2.slice(0, 1), o2 = 0; o2 < n2; ++o2)
    r2.push(t2[o2 + 1] - e2[o2][0] - e2[o2][1]);
  return r2;
}
function Ur(t2, e2) {
  if (t2.rank < 1)
    throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was " + t2.rank + ".");
  if (e2.rank < 1)
    throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " + e2.rank + ".");
  if ("int32" !== e2.dtype)
    throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was " + e2.dtype + ".");
  if (e2.shape[e2.rank - 1] > t2.rank)
    throw new Error("index innermost dimension length must be <= tensor rank; saw: " + e2.shape[e2.rank - 1] + " vs. " + t2.rank);
  if (0 === t2.size)
    throw new Error("Requested more than 0 entries, but input is empty. Input shape: " + t2.shape + ".");
  for (var n2 = e2.shape, r2 = n2[n2.length - 1], o2 = 1, a2 = 0; a2 < n2.length - 1; ++a2)
    o2 *= n2[a2];
  var i2 = t2.shape, u2 = n2.slice();
  u2.pop();
  var s2 = 1;
  for (a2 = r2; a2 < t2.rank; ++a2)
    s2 *= i2[a2], u2.push(i2[a2]);
  var c2 = q(t2.shape).map(function(t3) {
    return t3 / s2;
  }).concat([1]).slice(0, r2);
  return [u2, o2, s2, c2];
}
function zr(t2) {
  return t2 <= Vr ? t2 : H(t2, Math.floor(Math.sqrt(t2)));
}
function Gr(t2, e2, n2) {
  if (e2.rank < 1)
    throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " + e2.rank + ".");
  if (t2.rank < 1)
    throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " + t2.rank + ".");
  if ("int32" !== e2.dtype)
    throw new Error("The dtype of 'indices' should be int32, but got dtype: " + e2.dtype);
  if (n2.length < 1)
    throw new Error("Output rank must be greater or equal to 1, but got shape: " + n2);
  if (0 === n2.length) {
    if (0 === e2.size)
      throw new Error("Indices specified for empty output. indices shape: " + e2.shape);
    if (0 === t2.size)
      throw new Error("Updates specified for empty output. updates shape: " + t2.shape);
  }
  !function(t3, e3, n3) {
    var r2 = e3.rank > 1 ? e3.shape[e3.rank - 1] : 1, o2 = e3.rank > 1 ? e3.rank - 1 : 1, a2 = "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " + n3.shape + ", indices.shape: " + e3.shape + ", shape: " + t3 + ", sliceDim: " + r2 + ", and batchDim: " + o2 + ".";
    if (n3.rank < o2)
      throw new Error(a2 + " update.rank < " + o2 + ". ");
    if (t3.length < r2 + (n3.rank - o2))
      throw new Error(a2 + " Output shape length < " + (r2 + (n3.rank - o2)));
    if (n3.rank !== o2 + t3.length - r2)
      throw new Error(a2 + " update.rank != " + (o2 + t3.length - r2));
    for (var i2 = 0; i2 < o2; ++i2)
      if (n3.shape[i2] !== e3.shape[i2])
        throw new Error(a2 + " updates.shape[" + i2 + "] (" + n3.shape[i2] + ") != indices.shape[" + i2 + "] (" + e3.shape[i2] + ").");
    for (i2 = 0; i2 < n3.rank - o2; ++i2)
      if (n3.shape[i2 + o2] !== t3[i2 + r2])
        throw new Error(a2 + " updates.shape[" + (i2 + o2) + "] (" + n3.shape[i2 + o2] + ") != shape[" + (i2 + o2) + "] (" + t3[i2 + o2] + ")");
  }(n2, e2, t2);
}
function Hr(t2, e2, n2) {
  for (var r2 = e2.rank > 1 ? e2.shape[e2.rank - 1] : 1, o2 = n2.length, a2 = 1, i2 = r2; i2 < o2; ++i2)
    a2 *= n2[i2];
  var u2 = r2 < 1 ? 1 : r2;
  return { sliceRank: r2, numUpdates: e2.size / u2, sliceSize: a2, strides: q(n2.slice(0, r2)).concat([1]), outputSize: w(n2) };
}
function qr(t2, e2, n2) {
  g(t2.rank === e2.length, function() {
    return "Error in slice" + t2.rank + "D: Length of begin " + e2 + " must match the rank of the array (" + t2.rank + ").";
  }), g(t2.rank === n2.length, function() {
    return "Error in slice" + t2.rank + "D: Length of size " + n2 + " must match the rank of the array (" + t2.rank + ").";
  });
  for (var r2 = function(r3) {
    g(e2[r3] + n2[r3] <= t2.shape[r3], function() {
      return "Error in slice" + t2.rank + "D: begin[" + r3 + "] + size[" + r3 + "] (" + (e2[r3] + n2[r3]) + ") would overflow input.shape[" + r3 + "] (" + t2.shape[r3] + ")";
    });
  }, o2 = 0; o2 < t2.rank; ++o2)
    r2(o2);
}
function Kr(t2) {
  for (var e2 = [], n2 = 0; t2 > 0; )
    1 & t2 && e2.push(n2), t2 /= 2, n2++;
  return e2;
}
function jr(t2, e2, n2) {
  for (var r2 = [], o2 = 0; o2 < t2.length; o2++)
    r2[o2] = Math.ceil((e2[o2] - t2[o2]) / n2[o2]);
  return r2;
}
function Xr(t2, e2, n2, r2, o2) {
  var a2 = e2[o2], i2 = n2[o2] || 1;
  (t2 & 1 << o2 || null == a2) && (a2 = i2 > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
  var u2 = r2[o2];
  return a2 < 0 && (a2 += u2), a2 = d(0, a2, u2 - 1);
}
function $r(t2, e2, n2, r2, o2) {
  var a2 = e2[o2], i2 = n2[o2] || 1;
  (t2 & 1 << o2 || null == a2) && (a2 = i2 > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
  var u2 = r2[o2];
  return a2 < 0 && (a2 += u2), a2 = i2 > 0 ? d(0, a2, u2) : d(-1, a2, u2 - 1);
}
function Yr(t2, e2, n2) {
  for (var r2 = n2.length, o2 = 0; o2 < n2.length; o2++)
    if (n2[o2] > 1) {
      r2 = o2;
      break;
    }
  for (o2 = r2 + 1; o2 < n2.length; o2++)
    if (e2[o2] > 0 || n2[o2] !== t2[o2])
      return false;
  return true;
}
function Qr(t2, e2) {
  for (var n2 = t2.length > 0 ? t2[t2.length - 1] : 1, r2 = 0; r2 < t2.length - 1; r2++)
    n2 += t2[r2] * e2[r2];
  return n2;
}
function Zr(t2) {
  return g(G(t2), function() {
    return "The f passed in grad(f) must be a function";
  }), function(e2, n2) {
    var r2 = ln(e2, "x", "tf.grad", null), o2 = null != n2 ? ln(n2, "dy", "tf.grad") : null;
    return Nt.tidy(function() {
      var e3 = Nt.gradients(function() {
        return t2(r2);
      }, [r2], o2), n3 = e3.value, a2 = e3.grads;
      return null != o2 && y(n3.shape, o2.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), ao(a2), a2[0];
    });
  };
}
function to(t2) {
  return g(G(t2), function() {
    return "The f passed in grads(f) must be a function";
  }), function(e2, n2) {
    g(Array.isArray(e2), function() {
      return "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s";
    });
    var r2 = hn(e2, "args", "tf.grads", null), o2 = null != n2 ? ln(n2, "dy", "tf.grads") : null;
    return Nt.tidy(function() {
      var e3 = Nt.gradients(function() {
        return t2.apply(void 0, r2);
      }, r2, o2), n3 = e3.value, a2 = e3.grads;
      return null != o2 && y(n3.shape, o2.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), ao(a2), a2;
    });
  };
}
function eo(t2) {
  return g(G(t2), function() {
    return "The f passed in valueAndGrad(f) must be a function";
  }), function(e2, n2) {
    g(e2 instanceof dt, function() {
      return "The x passed in valueAndGrad(f)(x) must be a tensor";
    }), g(null == n2 || n2 instanceof dt, function() {
      return "The dy passed in valueAndGrad(f)(x, dy) must be a tensor";
    });
    var r2 = Nt.gradients(function() {
      return t2(e2);
    }, [e2], n2), o2 = r2.grads, a2 = r2.value;
    return ao(o2), { grad: o2[0], value: a2 };
  };
}
function no(t2) {
  return g(G(t2), function() {
    return "The f passed in valueAndGrads(f) must be a function";
  }), function(e2, n2) {
    g(Array.isArray(e2) && e2.every(function(t3) {
      return t3 instanceof dt;
    }), function() {
      return "The args passed in valueAndGrads(f)(args) must be array of tensors";
    }), g(null == n2 || n2 instanceof dt, function() {
      return "The dy passed in valueAndGrads(f)(args, dy) must be a tensor";
    });
    var r2 = Nt.gradients(function() {
      return t2.apply(void 0, e2);
    }, e2, n2);
    return null != n2 && y(r2.value.shape, n2.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), ao(r2.grads), r2;
  };
}
function ro(t2, e2) {
  g(G(t2), function() {
    return "The f passed in variableGrads(f) must be a function";
  }), g(null == e2 || Array.isArray(e2) && e2.every(function(t3) {
    return t3 instanceof bt;
  }), function() {
    return "The varList passed in variableGrads(f, varList) must be an array of variables";
  });
  var n2 = null != e2;
  if (!n2)
    for (var r2 in e2 = [], Nt.registeredVariables)
      e2.push(Nt.registeredVariables[r2]);
  var o2 = n2 ? e2.filter(function(t3) {
    return !t3.trainable;
  }) : null, a2 = e2.length;
  g((e2 = e2.filter(function(t3) {
    return t3.trainable;
  })).length > 0, function() {
    return "variableGrads() expects at least one of the input variables to be trainable, but none of the " + a2 + " variables is trainable.";
  });
  var i2 = Nt.gradients(t2, e2, null, true), u2 = i2.value, s2 = i2.grads;
  g(s2.some(function(t3) {
    return null != t3;
  }), function() {
    return "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().";
  }), g(0 === u2.rank, function() {
    return "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + u2.rank + " tensor";
  });
  var c2 = {};
  return e2.forEach(function(t3, e3) {
    null != s2[e3] && (c2[t3.name] = s2[e3]);
  }), null != o2 && o2.forEach(function(t3) {
    return c2[t3.name] = null;
  }), { value: u2, grads: c2 };
}
function oo(t2) {
  return Nt.customGrad(t2);
}
function ao(t2) {
  if (t2.filter(function(t3) {
    return null == t3;
  }).length > 0)
    throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
}
function lo() {
  throw new Error("Not yet implemented or not found in the registry. Did you forget to import the kernel?");
}
function ho(t2, e2) {
  for (var n2 = t2.length, r2 = [], o2 = 0; o2 < n2; o2++) {
    var a2 = n2 - 1 - o2, i2 = t2[a2] || 1;
    (e2[e2.length - 1 - o2] || 1) > 1 && 1 === i2 && r2.unshift(a2);
  }
  return r2;
}
function fo(t2, e2) {
  for (var n2 = [], r2 = 0; r2 < e2.length; r2++) {
    var o2 = t2[t2.length - r2 - 1], a2 = e2.length - r2 - 1, i2 = e2[a2];
    (null == o2 || 1 === o2 && i2 > 1) && n2.unshift(a2);
  }
  return n2;
}
function po(t2, e2) {
  for (var n2 = [], r2 = Math.max(t2.length, e2.length), o2 = 0; o2 < r2; o2++) {
    var a2 = t2[t2.length - o2 - 1];
    null == a2 && (a2 = 1);
    var i2 = e2[e2.length - o2 - 1];
    if (null == i2 && (i2 = 1), 1 === a2)
      n2.unshift(i2);
    else if (1 === i2)
      n2.unshift(a2);
    else {
      if (a2 !== i2)
        throw Error("Operands could not be broadcast together with shapes " + t2 + " and " + e2 + ".");
      n2.unshift(a2);
    }
  }
  return n2;
}
function vo(t2, e2, n2, r2, o2, a2, i2) {
  void 0 === i2 && (i2 = "channelsLast");
  var u2, s2 = bo(e2), c2 = s2[0], l3 = s2[1];
  if ("channelsLast" === i2)
    u2 = [c2, l3, t2[3], t2[3]];
  else {
    if ("channelsFirst" !== i2)
      throw new Error("Unknown dataFormat " + i2);
    u2 = [c2, l3, t2[1], t2[1]];
  }
  return go(t2, u2, n2, r2, o2, a2, false, i2);
}
function mo(t2, e2, n2, r2, o2, a2, i2) {
  void 0 === i2 && (i2 = "NDHWC");
  var u2, s2, c2 = wo(e2), l3 = c2[0], h2 = c2[1], f2 = c2[2];
  if ("NDHWC" === i2)
    s2 = "channelsLast", u2 = [l3, h2, f2, t2[4], t2[4]];
  else {
    if ("NCDHW" !== i2)
      throw new Error("Unknown dataFormat " + i2);
    s2 = "channelsFirst", u2 = [l3, h2, f2, t2[1], t2[1]];
  }
  return yo(t2, u2, n2, r2, o2, false, s2, a2);
}
function go(t2, e2, n2, r2, o2, a2, i2, u2) {
  void 0 === i2 && (i2 = false), void 0 === u2 && (u2 = "channelsLast");
  var s2 = [-1, -1, -1, -1], c2 = s2[0], l3 = s2[1], h2 = s2[2], f2 = s2[3];
  if ("channelsLast" === u2)
    c2 = t2[0], l3 = t2[1], h2 = t2[2], f2 = t2[3];
  else {
    if ("channelsFirst" !== u2)
      throw new Error("Unknown dataFormat " + u2);
    c2 = t2[0], f2 = t2[1], l3 = t2[2], h2 = t2[3];
  }
  var p2, d2 = e2[0], v2 = e2[1], m2 = e2[3], y2 = bo(n2), x2 = y2[0], b2 = y2[1], w2 = bo(r2), C2 = w2[0], R2 = w2[1], I2 = Co(d2, C2), k2 = Co(v2, R2), S2 = function(t3, e3, n3, r3, o3, a3, i3, u3) {
    var s3, c3, l4;
    if ("number" == typeof t3) {
      var h3 = 0 === t3 ? "VALID" : "NUMBER";
      s3 = { top: t3, bottom: t3, left: t3, right: t3, type: h3 };
      var f3 = function(t4, e4, n4, r4, o4) {
        null == r4 && (r4 = xo(t4, e4, n4));
        var a4 = t4[0], i4 = t4[1], u4 = Eo((a4 - e4 + 2 * r4) / n4 + 1, o4);
        g(E(u4), function() {
          return "The output # of rows (" + u4 + ") must be an integer. Change the stride and/or zero pad parameters";
        });
        var s4 = Eo((i4 - e4 + 2 * r4) / n4 + 1, o4);
        return g(E(s4), function() {
          return "The output # of columns (" + s4 + ") must be an integer. Change the stride and/or zero pad parameters";
        }), [u4, s4];
      }([e3, n3], a3, r3, t3, u3);
      c3 = f3[0], l4 = f3[1];
    } else if ("same" === t3) {
      c3 = Math.ceil(e3 / r3), l4 = Math.ceil(n3 / o3);
      var p3 = Math.max(0, (c3 - 1) * r3 + a3 - e3), d3 = Math.max(0, (l4 - 1) * o3 + i3 - n3), v3 = Math.floor(p3 / 2), m3 = p3 - v3, y3 = Math.floor(d3 / 2), x3 = d3 - y3;
      s3 = { top: v3, bottom: m3, left: y3, right: x3, type: "SAME" };
    } else {
      if ("valid" !== t3)
        throw Error("Unknown padding parameter: " + t3);
      s3 = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c3 = Math.ceil((e3 - a3 + 1) / r3), l4 = Math.ceil((n3 - i3 + 1) / o3);
    }
    return { padInfo: s3, outHeight: c3, outWidth: l4 };
  }(o2, l3, h2, x2, b2, I2, k2, a2), A2 = S2.padInfo, D2 = S2.outHeight, T2 = S2.outWidth, N2 = i2 ? m2 * f2 : m2;
  return "channelsFirst" === u2 ? p2 = [c2, N2, D2, T2] : "channelsLast" === u2 && (p2 = [c2, D2, T2, N2]), { batchSize: c2, dataFormat: u2, inHeight: l3, inWidth: h2, inChannels: f2, outHeight: D2, outWidth: T2, outChannels: N2, padInfo: A2, strideHeight: x2, strideWidth: b2, filterHeight: d2, filterWidth: v2, effectiveFilterHeight: I2, effectiveFilterWidth: k2, dilationHeight: C2, dilationWidth: R2, inShape: t2, outShape: p2, filterShape: e2 };
}
function yo(t2, e2, n2, r2, o2, a2, i2, u2) {
  void 0 === a2 && (a2 = false), void 0 === i2 && (i2 = "channelsLast");
  var s2 = [-1, -1, -1, -1, -1], c2 = s2[0], l3 = s2[1], h2 = s2[2], f2 = s2[3], p2 = s2[4];
  if ("channelsLast" === i2)
    c2 = t2[0], l3 = t2[1], h2 = t2[2], f2 = t2[3], p2 = t2[4];
  else {
    if ("channelsFirst" !== i2)
      throw new Error("Unknown dataFormat " + i2);
    c2 = t2[0], p2 = t2[1], l3 = t2[2], h2 = t2[3], f2 = t2[4];
  }
  var d2, v2 = e2[0], m2 = e2[1], y2 = e2[2], x2 = e2[4], b2 = wo(n2), w2 = b2[0], C2 = b2[1], R2 = b2[2], I2 = wo(r2), k2 = I2[0], S2 = I2[1], A2 = I2[2], D2 = Co(v2, k2), T2 = Co(m2, S2), N2 = Co(y2, A2), F2 = function(t3, e3, n3, r3, o3, a3, i3, u3, s3, c3, l4) {
    var h3, f3, p3, d3;
    if ("number" == typeof t3) {
      var v3 = 0 === t3 ? "VALID" : "NUMBER";
      h3 = { top: t3, bottom: t3, left: t3, right: t3, front: t3, back: t3, type: v3 };
      var m3 = function(t4, e4, n4, r4, o4, a4) {
        null == o4 && (o4 = xo(t4, e4, r4));
        var i4 = t4[0], u4 = t4[1], s4 = t4[2], c4 = Eo((i4 - e4 + 2 * o4) / r4 + 1, a4);
        g(E(c4), function() {
          return "The output # of depths (" + c4 + ") must be an integer. Change the stride and/or zero pad parameters";
        });
        var l5 = Eo((u4 - e4 + 2 * o4) / r4 + 1, a4);
        g(E(l5), function() {
          return "The output # of rows (" + l5 + ") must be an integer. Change the stride and/or zero pad parameters";
        });
        var h4 = Eo((s4 - e4 + 2 * o4) / r4 + 1, a4);
        return g(E(h4), function() {
          return "The output # of columns (" + h4 + ") must be an integer. Change the stride and/or zero pad parameters";
        }), [c4, l5, h4, n4];
      }([e3, n3, r3, 1], u3, 1, o3, t3, l4);
      f3 = m3[0], p3 = m3[1], d3 = m3[2];
    } else if ("same" === t3) {
      f3 = Math.ceil(e3 / o3), p3 = Math.ceil(n3 / a3), d3 = Math.ceil(r3 / i3);
      var y3 = (f3 - 1) * o3 + u3 - e3, x3 = (p3 - 1) * a3 + s3 - n3, b3 = (d3 - 1) * i3 + c3 - r3, w3 = Math.floor(y3 / 2), C3 = y3 - w3, R3 = Math.floor(x3 / 2), I3 = x3 - R3, k3 = Math.floor(b3 / 2), S3 = b3 - k3;
      h3 = { top: R3, bottom: I3, left: k3, right: S3, front: w3, back: C3, type: "SAME" };
    } else {
      if ("valid" !== t3)
        throw Error("Unknown padding parameter: " + t3);
      h3 = { top: 0, bottom: 0, left: 0, right: 0, front: 0, back: 0, type: "VALID" }, f3 = Math.ceil((e3 - u3 + 1) / o3), p3 = Math.ceil((n3 - s3 + 1) / a3), d3 = Math.ceil((r3 - c3 + 1) / i3);
    }
    return { padInfo: h3, outDepth: f3, outHeight: p3, outWidth: d3 };
  }(o2, l3, h2, f2, w2, C2, R2, D2, T2, N2, u2), O2 = F2.padInfo, _2 = F2.outDepth, M2 = F2.outHeight, B2 = F2.outWidth, P2 = a2 ? x2 * p2 : x2;
  return "channelsFirst" === i2 ? d2 = [c2, P2, _2, M2, B2] : "channelsLast" === i2 && (d2 = [c2, _2, M2, B2, P2]), { batchSize: c2, dataFormat: i2, inDepth: l3, inHeight: h2, inWidth: f2, inChannels: p2, outDepth: _2, outHeight: M2, outWidth: B2, outChannels: P2, padInfo: O2, strideDepth: w2, strideHeight: C2, strideWidth: R2, filterDepth: v2, filterHeight: m2, filterWidth: y2, effectiveFilterDepth: D2, effectiveFilterHeight: T2, effectiveFilterWidth: N2, dilationDepth: k2, dilationHeight: S2, dilationWidth: A2, inShape: t2, outShape: d2, filterShape: e2 };
}
function xo(t2, e2, n2, r2) {
  void 0 === r2 && (r2 = 1);
  var o2 = Co(e2, r2);
  return Math.floor((t2[0] * (n2 - 1) - n2 + o2) / 2);
}
function bo(t2) {
  return "number" == typeof t2 ? [t2, t2, t2] : 2 === t2.length ? [t2[0], t2[1], 1] : t2;
}
function wo(t2) {
  return "number" == typeof t2 ? [t2, t2, t2] : t2;
}
function Co(t2, e2) {
  return e2 <= 1 ? t2 : t2 + (t2 - 1) * (e2 - 1);
}
function Eo(t2, e2) {
  if (!e2)
    return t2;
  switch (e2) {
    case "round":
      return Math.round(t2);
    case "ceil":
      return Math.ceil(t2);
    case "floor":
      return Math.floor(t2);
    default:
      throw new Error("Unknown roundingMode " + e2);
  }
}
function Ro(t2) {
  var e2 = bo(t2), n2 = e2[0], r2 = e2[1], o2 = e2[2];
  return 1 === n2 && 1 === r2 && 1 === o2;
}
function Io(t2, e2) {
  return Ro(t2) || Ro(e2);
}
function ko(t2) {
  if ("NHWC" === t2)
    return "channelsLast";
  if ("NCHW" === t2)
    return "channelsFirst";
  throw new Error("Unknown dataFormat " + t2);
}
function So(t2, e2, n2) {
  if ("complex64" === e2) {
    if ("complex64" === t2.dtype)
      return t2.clone();
    var r2 = Pn(t2.shape), o2 = t2.toFloat(), a2 = n2.complex(o2, r2);
    return r2.dispose(), o2.dispose(), a2;
  }
  if (!M(t2.dtype, e2))
    return Nt.makeTensorFromDataId(t2.dataId, t2.shape, e2);
  if ("complex64" === t2.dtype) {
    var i2 = n2.real(t2);
    a2 = i2.cast(e2);
    return i2.dispose(), a2;
  }
  if ("int32" === e2)
    return n2.int(t2);
  if ("bool" === e2) {
    var u2 = An(0, t2.dtype);
    a2 = n2.notEqual(t2, u2);
    return u2.dispose(), a2;
  }
  throw new Error("Error in Cast: failed to cast " + t2.dtype + " to " + e2);
}
function Ao(t2, e2) {
  return Nt.makeTensorFromDataId(t2.dataId, e2, t2.dtype);
}
function Do(t2, e2, n2) {
  var r2 = (e2 - t2) / (n2 - 1), o2 = $(n2, "float32");
  o2[0] = t2;
  for (var a2 = 1; a2 < o2.length; a2++)
    o2[a2] = o2[a2 - 1] + r2;
  return Dn(o2, "float32");
}
function No(t2, e2) {
  if (t2.length !== e2.length)
    throw new Error("Cannot merge real and imag arrays of different lengths. real:" + t2.length + ", imag: " + e2.length + ".");
  for (var n2 = new Float32Array(2 * t2.length), r2 = 0; r2 < n2.length; r2 += 2)
    n2[r2] = t2[r2 / 2], n2[r2 + 1] = e2[r2 / 2];
  return n2;
}
function Fo(t2, e2) {
  return { real: t2[2 * e2], imag: t2[2 * e2 + 1] };
}
function Oo(t2, e2, n2, r2) {
  t2[2 * r2] = e2, t2[2 * r2 + 1] = n2;
}
function _o(t2, e2, n2) {
  var r2 = (n2 ? 2 : -2) * Math.PI * (t2 / e2);
  return { real: Math.cos(r2), imag: Math.sin(r2) };
}
function Mo(t2, e2, n2, r2, o2) {
  for (var a2 = Array.from(e2).map(function(t3, e3) {
    return { score: t3, boxIndex: e3 };
  }).filter(function(t3) {
    return t3.score > o2;
  }).sort(function(t3, e3) {
    return e3.score - t3.score;
  }), i2 = [], u2 = 0; u2 < a2.length; u2++) {
    var s2 = a2[u2], c2 = s2.score, l3 = s2.boxIndex;
    if (c2 < o2)
      break;
    for (var h2 = false, f2 = i2.length - 1; f2 >= 0; --f2) {
      if (Bo(t2, l3, i2[f2]) >= r2) {
        h2 = true;
        break;
      }
    }
    if (!h2 && (i2.push(l3), i2.length >= n2))
      break;
  }
  return Dn(i2, "int32");
}
function Bo(t2, e2, n2) {
  var r2 = t2.subarray(4 * e2, 4 * e2 + 4), o2 = t2.subarray(4 * n2, 4 * n2 + 4), a2 = Math.min(r2[0], r2[2]), i2 = Math.min(r2[1], r2[3]), u2 = Math.max(r2[0], r2[2]), s2 = Math.max(r2[1], r2[3]), c2 = Math.min(o2[0], o2[2]), l3 = Math.min(o2[1], o2[3]), h2 = Math.max(o2[0], o2[2]), f2 = Math.max(o2[1], o2[3]), p2 = (u2 - a2) * (s2 - i2), d2 = (h2 - c2) * (f2 - l3);
  if (p2 <= 0 || d2 <= 0)
    return 0;
  var v2 = Math.max(a2, c2), m2 = Math.max(i2, l3), g2 = Math.min(u2, h2), y2 = Math.min(s2, f2), x2 = Math.max(g2 - v2, 0) * Math.max(y2 - m2, 0);
  return x2 / (p2 + d2 - x2);
}
function Po(t2, e2, n2) {
  var r2 = new Array(t2.rank).fill(0), o2 = t2.shape.slice();
  return e2.map(function(e3) {
    o2[n2] = e3;
    var a2 = t2.slice(r2, o2);
    return r2[n2] += e3, a2;
  });
}
function Lo(t2, e2) {
  for (var n2 = new Array(t2.rank), r2 = 0; r2 < n2.length; r2++)
    n2[r2] = t2.shape[r2] * e2[r2];
  var o2 = ur(n2, t2.dtype);
  for (r2 = 0; r2 < o2.values.length; ++r2) {
    for (var a2 = o2.indexToLoc(r2), i2 = new Array(t2.rank), u2 = 0; u2 < i2.length; u2++)
      i2[u2] = a2[u2] % t2.shape[u2];
    var s2 = t2.locToIndex(i2);
    o2.values[r2] = t2.values[s2];
  }
  return o2.toTensor();
}
function Wo(t2, e2, n2, r2, o2) {
  for (var a2 = e2[e2.length - 1], i2 = [t2.length / a2, a2], u2 = i2[0], s2 = i2[1], c2 = N(n2, u2 * r2), l3 = N("int32", u2 * r2), h2 = 0; h2 < u2; h2++) {
    for (var f2 = h2 * s2, p2 = t2.subarray(f2, f2 + s2), d2 = [], v2 = 0; v2 < p2.length; v2++)
      d2.push({ value: p2[v2], index: v2 });
    d2.sort(function(t3, e3) {
      return e3.value - t3.value;
    });
    var m2 = h2 * r2, g2 = c2.subarray(m2, m2 + r2), y2 = l3.subarray(m2, m2 + r2);
    for (v2 = 0; v2 < r2; v2++)
      g2[v2] = d2[v2].value, y2[v2] = d2[v2].index;
  }
  var x2 = e2.slice();
  return x2[x2.length - 1] = r2, [kn(c2, x2, n2), kn(l3, x2, "int32")];
}
function Uo(t2, e2) {
  for (var n2 = [], r2 = 0; r2 < e2.length; r2++)
    e2[r2] && n2.push(r2);
  var o2 = ur(t2, "int32"), a2 = ur([n2.length, t2.length], "int32");
  for (r2 = 0; r2 < n2.length; r2++) {
    var i2 = o2.indexToLoc(n2[r2]), u2 = r2 * t2.length;
    a2.values.set(i2, u2);
  }
  return a2.toTensor();
}
function Ho(t2, e2) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e2).map(function(e3) {
    return t2 + "." + e3;
  });
}
function qo(t2, e2) {
  return 1 === e2 ? [t2] : Ho(t2, e2);
}
function Ko() {
  var t2, e2, n2, r2, o2, i2, u2, s2, c2, l3;
  return 2 === a().getNumber("WEBGL_VERSION") ? (t2 = "#version 300 es", e2 = "in", n2 = "out", r2 = "in", o2 = "texture", i2 = "outputColor", u2 = "out vec4 outputColor;", s2 = "\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ", c2 = "", l3 = "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ") : (t2 = "", e2 = "attribute", n2 = "varying", r2 = "varying", o2 = "texture2D", i2 = "gl_FragColor", u2 = "", s2 = "\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ", c2 = "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ", l3 = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "), { version: t2, attribute: e2, varyingVs: n2, varyingFs: r2, texture2D: o2, output: i2, defineOutput: u2, defineSpecialNaN: s2, defineSpecialInf: c2, defineRound: l3 };
}
function jo(t2, e2, n2) {
  void 0 === n2 && (n2 = "index");
  var r2 = q(e2);
  return r2.map(function(e3, o2) {
    return "int " + t2[o2] + " = " + n2 + " / " + e3 + "; " + (o2 === r2.length - 1 ? "int " + t2[o2 + 1] + " = " + n2 + " - " + t2[o2] + " * " + e3 : "index -= " + t2[o2] + " * " + e3) + ";";
  }).join("");
}
function Xo(t2) {
  var e2 = q(t2).map(function(t3) {
    return t3.toString();
  });
  return "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * " + e2[0] + " + coords.y * " + e2[1] + " + coords.z;\n  }\n";
}
function Yo(t2, e2, n2, r2) {
  var o2 = [];
  t2.forEach(function(t3) {
    var e3 = w(t3.shapeInfo.logicalShape);
    t3.shapeInfo.isUniform ? o2.push("uniform float " + t3.name + (e3 > 1 ? "[" + e3 + "]" : "") + ";") : (o2.push("uniform sampler2D " + t3.name + ";"), o2.push("uniform int offset" + t3.name + ";"));
  });
  var a2, i2, u2 = o2.join("\n"), s2 = t2.map(function(t3) {
    return function(t4, e3, n3) {
      void 0 === n3 && (n3 = false);
      var r3 = "";
      r3 += n3 ? Jo(t4) : Qo(t4);
      var o3 = t4.shapeInfo.logicalShape, a3 = e3.logicalShape;
      o3.length <= a3.length && (r3 += n3 ? function(t5, e4) {
        var n4, r4 = t5.name, o4 = r4.charAt(0).toUpperCase() + r4.slice(1), a4 = "get" + o4 + "AtOutCoords", i3 = t5.shapeInfo.logicalShape.length, u3 = e4.logicalShape.length, s3 = ho(t5.shapeInfo.logicalShape, e4.logicalShape), c3 = aa(u3), l4 = u3 - i3, h3 = ["x", "y", "z", "w", "u", "v"];
        n4 = 0 === i3 ? "" : u3 < 2 && s3.length >= 1 ? "coords = 0;" : s3.map(function(t6) {
          return "coords." + h3[t6 + l4] + " = 0;";
        }).join("\n");
        var f3 = "";
        f3 = u3 < 2 && i3 > 0 ? "coords" : t5.shapeInfo.logicalShape.map(function(t6, e5) {
          return "coords." + h3[e5 + l4];
        }).join(", ");
        var p2 = "return outputValue;", d2 = 1 === w(t5.shapeInfo.logicalShape), v2 = 1 === w(e4.logicalShape);
        if (1 !== i3 || d2 || v2) {
          if (d2 && !v2)
            p2 = 1 === u3 ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      " : "\n        return vec4(outputValue.x);\n      ";
          else if (s3.length) {
            var m2 = i3 - 2, g2 = i3 - 1;
            s3.indexOf(m2) > -1 && s3.indexOf(g2) > -1 ? p2 = "return vec4(outputValue.x);" : s3.indexOf(m2) > -1 ? p2 = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : s3.indexOf(g2) > -1 && (p2 = "return vec4(outputValue.xx, outputValue.zz);");
          }
        } else
          p2 = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
        return "\n    vec4 " + a4 + "() {\n      " + c3 + " coords = getOutputCoords();\n      " + n4 + "\n      vec4 outputValue = get" + o4 + "(" + f3 + ");\n      " + p2 + "\n    }\n  ";
      }(t4, e3) : function(t5, e4) {
        var n4 = t5.name, r4 = n4.charAt(0).toUpperCase() + n4.slice(1), o4 = "get" + r4 + "AtOutCoords", a4 = e4.texShape, i3 = t5.shapeInfo.texShape, u3 = t5.shapeInfo.logicalShape.length, s3 = e4.logicalShape.length;
        if (!t5.shapeInfo.isUniform && u3 === s3 && null == t5.shapeInfo.flatOffset && C(i3, a4))
          return "\n      float " + o4 + "() {\n        return sampleTexture(" + n4 + ", resultUV);\n      }\n    ";
        var c3, l4 = aa(s3), h3 = ho(t5.shapeInfo.logicalShape, e4.logicalShape), f3 = s3 - u3, p2 = ["x", "y", "z", "w", "u", "v"];
        c3 = 0 === u3 ? "" : s3 < 2 && h3.length >= 1 ? "coords = 0;" : h3.map(function(t6) {
          return "coords." + p2[t6 + f3] + " = 0;";
        }).join("\n");
        var d2 = "";
        d2 = s3 < 2 && u3 > 0 ? "coords" : t5.shapeInfo.logicalShape.map(function(t6, e5) {
          return "coords." + p2[e5 + f3];
        }).join(", ");
        return "\n    float " + o4 + "() {\n      " + l4 + " coords = getOutputCoords();\n      " + c3 + "\n      return get" + r4 + "(" + d2 + ");\n    }\n  ";
      }(t4, e3));
      return r3;
    }(t3, e2, r2);
  }).join("\n"), c2 = e2.texShape, l3 = Ko(), h2 = function(t3) {
    return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + t3.texture2D + "(textureSampler, uv).r;\n    }\n  ";
  }(l3), f2 = function(t3) {
    return t3.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + t3.varyingFs + " vec2 resultUV;\n    " + t3.defineOutput + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    " + t3.defineSpecialNaN + "\n    " + t3.defineSpecialInf + "\n    " + t3.defineRound + "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " + Zo + "\n    " + ta + "\n    " + ea + "\n  ";
  }(l3);
  return e2.isPacked ? (a2 = function(t3, e3) {
    switch (t3.length) {
      case 0:
        return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
      case 1:
        return function(t4, e4) {
          var n4 = [Math.ceil(e4[0] / 2), Math.ceil(e4[1] / 2)];
          if (1 === n4[0])
            return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + n4[1] + ".0);\n      }\n    ";
          if (1 === n4[1])
            return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + n4[0] + ".0);\n      }\n    ";
          return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n4[0] + ", " + n4[1] + "));\n      return 2 * (resTexRC.x * " + n4[1] + " + resTexRC.y);\n    }\n  ";
        }(0, e3);
      case 2:
        return function(t4, e4) {
          var n4 = [Math.ceil(e4[0] / 2), Math.ceil(e4[1] / 2)];
          if (C(t4, e4))
            return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + n4[0] + ", " + n4[1] + "));\n      }\n    ";
          var r4 = Math.ceil(t4[1] / 2);
          return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n4[0] + ", " + n4[1] + "));\n\n      int index = resTexRC.x * " + n4[1] + " + resTexRC.y;\n      int r = 2 * (index / " + r4 + ");\n      int c = imod(index, " + r4 + ") * 2;\n\n      return ivec2(r, c);\n    }\n  ";
        }(t3, e3);
      case 3:
        return n3 = t3, r3 = e3, o3 = [Math.ceil(r3[0] / 2), Math.ceil(r3[1] / 2)], a3 = Math.ceil(n3[2] / 2), i3 = a3 * Math.ceil(n3[1] / 2), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + o3[0] + ", " + o3[1] + "));\n      int index = resTexRC.x * " + o3[1] + " + resTexRC.y;\n\n      int b = index / " + i3 + ";\n      index -= b * " + i3 + ";\n\n      int r = 2 * (index / " + a3 + ");\n      int c = imod(index, " + a3 + ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";
      default:
        return function(t4, e4) {
          for (var n4 = [Math.ceil(e4[0] / 2), Math.ceil(e4[1] / 2)], r4 = Math.ceil(t4[t4.length - 1] / 2), o4 = r4 * Math.ceil(t4[t4.length - 2] / 2), a4 = o4, i4 = "", u3 = "b, r, c", s3 = 2; s3 < t4.length - 1; s3++)
            a4 *= t4[t4.length - s3 - 1], i4 = "\n      int b" + s3 + " = index / " + a4 + ";\n      index -= b" + s3 + " * " + a4 + ";\n    " + i4, u3 = "b" + s3 + ", " + u3;
          return "\n    ivec" + t4.length + " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n4[0] + ", " + n4[1] + "));\n      int index = resTexRC.x * " + n4[1] + " + resTexRC.y;\n\n      " + i4 + "\n\n      int b = index / " + o4 + ";\n      index -= b * " + o4 + ";\n\n      int r = 2 * (index / " + r4 + ");\n      int c = imod(index, " + r4 + ") * 2;\n\n      return ivec" + t4.length + "(" + u3 + ");\n    }\n  ";
        }(t3, e3);
    }
    var n3, r3, o3, a3, i3;
  }(e2.logicalShape, c2), i2 = function(t3) {
    return "\n    void setOutput(vec4 val) {\n      " + t3.output + " = val;\n    }\n  ";
  }(l3)) : (a2 = function(t3, e3) {
    switch (t3.length) {
      case 0:
        return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
      case 1:
        return function(t4, e4) {
          if (1 === e4[0])
            return "\n      int getOutputCoords() {\n        return int(resultUV.x * " + e4[1] + ".0);\n      }\n    ";
          if (1 === e4[1])
            return "\n      int getOutputCoords() {\n        return int(resultUV.y * " + e4[0] + ".0);\n      }\n    ";
          return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e4[0] + ", " + e4[1] + "));\n      return resTexRC.x * " + e4[1] + " + resTexRC.y;\n    }\n  ";
        }(0, e3);
      case 2:
        return function(t4, e4) {
          if (C(t4, e4))
            return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + e4[0] + ", " + e4[1] + "));\n      }\n    ";
          if (1 === t4[1])
            return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e4[0] + ", " + e4[1] + "));\n        int index = resTexRC.x * " + e4[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";
          if (1 === t4[0])
            return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e4[0] + ", " + e4[1] + "));\n        int index = resTexRC.x * " + e4[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";
          return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e4[0] + ", " + e4[1] + "));\n      int index = resTexRC.x * " + e4[1] + " + resTexRC.y;\n      int r = index / " + t4[1] + ";\n      int c = index - r * " + t4[1] + ";\n      return ivec2(r, c);\n    }\n  ";
        }(t3, e3);
      case 3:
        return n3 = e3, r3 = jo(["r", "c", "d"], t3), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n3[0] + ", " + n3[1] + "));\n      int index = resTexRC.x * " + n3[1] + " + resTexRC.y;\n      " + r3 + "\n      return ivec3(r, c, d);\n    }\n  ";
      case 4:
        return function(t4, e4) {
          var n4 = jo(["r", "c", "d", "d2"], t4);
          return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e4[0] + ", " + e4[1] + "));\n      int index = resTexRC.x * " + e4[1] + " + resTexRC.y;\n      " + n4 + "\n      return ivec4(r, c, d, d2);\n    }\n  ";
        }(t3, e3);
      case 5:
        return function(t4, e4) {
          var n4 = jo(["r", "c", "d", "d2", "d3"], t4);
          return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + e4[0] + ",\n                             " + e4[1] + "));\n\n      int index = resTexRC.x * " + e4[1] + " + resTexRC.y;\n\n      " + n4 + "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
        }(t3, e3);
      case 6:
        return function(t4, e4) {
          var n4 = jo(["r", "c", "d", "d2", "d3", "d4"], t4);
          return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e4[0] + ", " + e4[1] + "));\n      int index = resTexRC.x * " + e4[1] + " + resTexRC.y;\n\n      " + n4 + "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
        }(t3, e3);
      default:
        throw new Error(t3.length + "-D output sampling is not yet supported");
    }
    var n3, r3;
  }(e2.logicalShape, c2), i2 = function(t3) {
    return "\n    void setOutput(float val) {\n      " + t3.output + " = vec4(val, 0, 0, 0);\n    }\n  ";
  }(l3)), r2 && (f2 += na), [f2, h2, i2, u2, a2, s2, n2].join("\n");
}
function Qo(t2) {
  var e2 = t2.shapeInfo.logicalShape;
  switch (e2.length) {
    case 0:
      return function(t3) {
        var e3 = t3.name, n2 = "get" + e3.charAt(0).toUpperCase() + e3.slice(1);
        if (t3.shapeInfo.isUniform)
          return "float " + n2 + "() {return " + e3 + ";}";
        var r2 = t3.shapeInfo.texShape, o2 = r2[0], a2 = r2[1];
        if (1 === o2 && 1 === a2)
          return "\n      float " + n2 + "() {\n        return sampleTexture(" + e3 + ", halfCR);\n      }\n    ";
        var i2 = t3.shapeInfo.texShape, u2 = i2[0], s2 = i2[1], c2 = ra(e3);
        return "\n    float " + n2 + "() {\n      vec2 uv = uvFromFlat(" + u2 + ", " + s2 + ", " + c2 + ");\n      return sampleTexture(" + e3 + ", uv);\n    }\n  ";
      }(t2);
    case 1:
      return function(t3) {
        var e3 = t3.name, n2 = "get" + e3.charAt(0).toUpperCase() + e3.slice(1);
        if (t3.shapeInfo.isUniform)
          return "\n      float " + n2 + "(int index) {\n        " + oa(t3) + "\n      }\n    ";
        var r2 = t3.shapeInfo.texShape, o2 = r2[0], a2 = r2[1];
        if (1 === a2 && 1 === o2)
          return "\n      float " + n2 + "(int index) {\n        return sampleTexture(" + e3 + ", halfCR);\n      }\n    ";
        var i2 = ra(e3);
        if (1 === a2)
          return "\n      float " + n2 + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + i2 + ") + 0.5) / " + o2 + ".0);\n        return sampleTexture(" + e3 + ", uv);\n      }\n    ";
        if (1 === o2)
          return "\n      float " + n2 + "(int index) {\n        vec2 uv = vec2((float(index + " + i2 + ") + 0.5) / " + a2 + ".0, 0.5);\n        return sampleTexture(" + e3 + ", uv);\n      }\n    ";
        return "\n    float " + n2 + "(int index) {\n      vec2 uv = uvFromFlat(" + o2 + ", " + a2 + ", index + " + i2 + ");\n      return sampleTexture(" + e3 + ", uv);\n    }\n  ";
      }(t2);
    case 2:
      return function(t3) {
        var e3 = t3.shapeInfo.logicalShape, n2 = t3.name, r2 = "get" + n2.charAt(0).toUpperCase() + n2.slice(1), o2 = t3.shapeInfo.texShape;
        if (null != o2 && C(e3, o2)) {
          var a2 = o2[0], i2 = o2[1];
          return "\n    float " + r2 + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i2 + ".0, " + a2 + ".0);\n      return sampleTexture(" + n2 + ", uv);\n    }\n  ";
        }
        var u2 = T(e3), s2 = u2.newShape, c2 = u2.keptDims, l3 = s2;
        if (l3.length < e3.length) {
          var h2 = ia(t3, l3);
          return "\n      " + Qo(h2) + "\n      float " + r2 + "(int row, int col) {\n        return " + r2 + "(" + ua(["row", "col"], c2) + ");\n      }\n    ";
        }
        if (t3.shapeInfo.isUniform)
          return "\n      float " + r2 + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + e3[1] + ", 1)));\n        " + oa(t3) + "\n      }\n    ";
        var f2 = o2[0], p2 = o2[1], d2 = ra(n2);
        if (1 === p2)
          return "\n    float " + r2 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + d2 + "), vec3(" + e3[1] + ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " + f2 + ".0);\n      return sampleTexture(" + n2 + ", uv);\n    }\n  ";
        if (1 === f2)
          return "\n    float " + r2 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + d2 + "), vec3(" + e3[1] + ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " + p2 + ".0, 0.5);\n      return sampleTexture(" + n2 + ", uv);\n    }\n  ";
        return "\n  float " + r2 + "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " + e3[1] + " + col + " + d2 + ";\n    vec2 uv = uvFromFlat(" + f2 + ", " + p2 + ", index);\n    return sampleTexture(" + n2 + ", uv);\n  }\n";
      }(t2);
    case 3:
      return function(t3) {
        var e3 = t3.shapeInfo.logicalShape, n2 = t3.name, r2 = "get" + n2.charAt(0).toUpperCase() + n2.slice(1), o2 = e3[1] * e3[2], a2 = e3[2], i2 = T(e3), u2 = i2.newShape, s2 = i2.keptDims, c2 = u2;
        if (c2.length < e3.length) {
          var l3 = ia(t3, c2);
          return "\n        " + Qo(l3) + "\n        float " + r2 + "(int row, int col, int depth) {\n          return " + r2 + "(" + ua(["row", "col", "depth"], s2) + ");\n        }\n      ";
        }
        if (t3.shapeInfo.isUniform)
          return "\n      float " + r2 + "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" + o2 + ", " + a2 + ", 1)));\n        " + oa(t3) + "\n      }\n    ";
        var h2 = t3.shapeInfo.texShape, f2 = h2[0], p2 = h2[1], d2 = t3.shapeInfo.flatOffset;
        if (p2 === o2 && null == d2)
          return "\n        float " + r2 + "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" + a2 + ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + p2 + ".0, " + f2 + ".0);\n          return sampleTexture(" + n2 + ", uv);\n        }\n      ";
        if (p2 === a2 && null == d2)
          return "\n    float " + r2 + "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" + e3[1] + ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + p2 + ".0, " + f2 + ".0);\n      return sampleTexture(" + n2 + ", uv);\n    }\n  ";
        var v2 = ra(n2);
        return "\n      float " + r2 + "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " + o2 + " + col * " + a2 + " + depth + " + v2 + ";\n        vec2 uv = uvFromFlat(" + f2 + ", " + p2 + ", index);\n        return sampleTexture(" + n2 + ", uv);\n      }\n  ";
      }(t2);
    case 4:
      return function(t3) {
        var e3 = t3.shapeInfo.logicalShape, n2 = t3.name, r2 = "get" + n2.charAt(0).toUpperCase() + n2.slice(1), o2 = e3[3], a2 = e3[2] * o2, i2 = e3[1] * a2, u2 = T(e3), s2 = u2.newShape, c2 = u2.keptDims;
        if (s2.length < e3.length) {
          var l3 = ia(t3, s2);
          return "\n      " + Qo(l3) + "\n      float " + r2 + "(int row, int col, int depth, int depth2) {\n        return " + r2 + "(" + ua(["row", "col", "depth", "depth2"], c2) + ");\n      }\n    ";
        }
        if (t3.shapeInfo.isUniform)
          return "\n      float " + r2 + "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" + i2 + ", " + a2 + ", " + o2 + ", 1)));\n        " + oa(t3) + "\n      }\n    ";
        var h2 = t3.shapeInfo.flatOffset, f2 = t3.shapeInfo.texShape, p2 = f2[0], d2 = f2[1];
        if (d2 === i2 && null == h2)
          return "\n      float " + r2 + "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" + a2 + ", " + o2 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + d2 + ".0, " + p2 + ".0);\n        return sampleTexture(" + n2 + ", uv);\n      }\n    ";
        if (d2 === o2 && null == h2)
          return "\n      float " + r2 + "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" + e3[1] * e3[2] + ", " + e3[2] + ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + d2 + ".0, " + p2 + ".0);\n        return sampleTexture(" + n2 + ", uv);\n      }\n    ";
        var v2 = ra(n2);
        return "\n    float " + r2 + "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + i2 + " + col * " + a2 + " +\n          depth * " + o2 + " + depth2;\n      vec2 uv = uvFromFlat(" + p2 + ", " + d2 + ", index + " + v2 + ");\n      return sampleTexture(" + n2 + ", uv);\n    }\n  ";
      }(t2);
    case 5:
      return function(t3) {
        var e3 = t3.shapeInfo.logicalShape, n2 = t3.name, r2 = "get" + n2.charAt(0).toUpperCase() + n2.slice(1), o2 = e3[4], a2 = e3[3] * o2, i2 = e3[2] * a2, u2 = e3[1] * i2, s2 = T(e3), c2 = s2.newShape, l3 = s2.keptDims;
        if (c2.length < e3.length) {
          var h2 = ia(t3, c2);
          return "\n      " + Qo(h2) + "\n      float " + r2 + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + r2 + "(" + ua(["row", "col", "depth", "depth2", "depth3"], l3) + ");\n      }\n    ";
        }
        if (t3.shapeInfo.isUniform)
          return "\n      float " + r2 + "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + u2 + ", " + i2 + ", " + a2 + ", " + o2 + ")) +\n          depth3;\n        " + oa(t3) + "\n      }\n    ";
        var f2 = t3.shapeInfo.flatOffset, p2 = t3.shapeInfo.texShape, d2 = p2[0], v2 = p2[1];
        if (v2 === u2 && null == f2)
          return "\n      float " + r2 + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" + i2 + ", " + a2 + ", " + o2 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + v2 + ".0, " + d2 + ".0);\n        return sampleTexture(" + n2 + ", uv);\n      }\n    ";
        if (v2 === o2 && null == f2)
          return "\n      float " + r2 + "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + e3[1] * e3[2] * e3[3] + ",\n               " + e3[2] * e3[3] + ", " + e3[3] + ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + v2 + ".0, " + d2 + ".0);\n        return sampleTexture(" + n2 + ", uv);\n      }\n    ";
        var m2 = ra(n2);
        return "\n    float " + r2 + "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + u2 + " + col * " + i2 + " + depth * " + a2 + " +\n          depth2 * " + o2 + " + depth3 + " + m2 + ";\n      vec2 uv = uvFromFlat(" + d2 + ", " + v2 + ", index);\n      return sampleTexture(" + n2 + ", uv);\n    }\n  ";
      }(t2);
    case 6:
      return function(t3) {
        var e3 = t3.shapeInfo.logicalShape, n2 = t3.name, r2 = "get" + n2.charAt(0).toUpperCase() + n2.slice(1), o2 = T(e3), a2 = o2.newShape, i2 = o2.keptDims;
        if (a2.length < e3.length) {
          var u2 = ia(t3, a2);
          return "\n      " + Qo(u2) + "\n      float " + r2 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + r2 + "(" + ua(["row", "col", "depth", "depth2", "depth3", "depth4"], i2) + ");\n      }\n    ";
        }
        var s2 = e3[5], c2 = e3[4] * s2, l3 = e3[3] * c2, h2 = e3[2] * l3, f2 = e3[1] * h2;
        if (t3.shapeInfo.isUniform)
          return "\n      float " + r2 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + f2 + ", " + h2 + ", " + l3 + ", " + c2 + ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" + s2 + ", 1)));\n        " + oa(t3) + "\n      }\n    ";
        var p2 = t3.shapeInfo.flatOffset, d2 = t3.shapeInfo.texShape, v2 = d2[0], m2 = d2[1];
        if (m2 === f2 && null == p2)
          return "\n      float " + r2 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" + h2 + ", " + l3 + ", " + c2 + ", " + s2 + ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + m2 + ".0, " + v2 + ".0);\n        return sampleTexture(" + n2 + ", uv);\n      }\n    ";
        if (m2 === s2 && null == p2)
          return "\n      float " + r2 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" + e3[1] * e3[2] * e3[3] * e3[4] + ",\n               " + e3[2] * e3[3] * e3[4] + ",\n               " + e3[3] * e3[4] + ",\n               " + e3[4] + ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + m2 + ".0, " + v2 + ".0);\n        return sampleTexture(" + n2 + ", uv);\n      }\n    ";
        var g2 = ra(n2);
        return "\n    float " + r2 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + f2 + " + col * " + h2 + " + depth * " + l3 + " +\n          depth2 * " + c2 + " + depth3 * " + s2 + " + depth4 + " + g2 + ";\n      vec2 uv = uvFromFlat(" + v2 + ", " + m2 + ", index);\n      return sampleTexture(" + n2 + ", uv);\n    }\n  ";
      }(t2);
    default:
      throw new Error(e2.length + "-D input sampling is not yet supported");
  }
}
function Jo(t2) {
  var e2, n2, r2;
  switch (t2.shapeInfo.logicalShape.length) {
    case 0:
      return e2 = t2.name, n2 = "get" + e2.charAt(0).toUpperCase() + e2.slice(1), r2 = Ko(), "\n    vec4 " + n2 + "() {\n      return " + r2.texture2D + "(" + e2 + ", halfCR);\n    }\n  ";
    case 1:
      return function(t3) {
        var e3 = t3.name, n3 = "get" + e3.charAt(0).toUpperCase() + e3.slice(1), r3 = t3.shapeInfo.texShape, o2 = [Math.ceil(r3[0] / 2), Math.ceil(r3[1] / 2)], a2 = Ko();
        return "\n    vec4 " + n3 + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + o2[0] + ", " + o2[1] + ", index);\n      return " + a2.texture2D + "(" + e3 + ", uv);\n    }\n  ";
      }(t2);
    case 2:
      return function(t3) {
        var e3 = t3.shapeInfo.logicalShape, n3 = t3.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o2 = t3.shapeInfo.texShape, a2 = o2[0], i2 = o2[1], u2 = Ko();
        if (null != o2 && C(e3, o2))
          return "\n      vec4 " + r3 + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i2 + ".0, " + a2 + ".0);\n\n        return " + u2.texture2D + "(" + n3 + ", uv);\n      }\n    ";
        var s2 = [Math.ceil(o2[0] / 2), Math.ceil(o2[1] / 2)], c2 = Math.ceil(e3[1] / 2);
        return "\n    vec4 " + r3 + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + c2 + ", " + s2[0] + ", " + s2[1] + ", row, col);\n      return " + u2.texture2D + "(" + n3 + ", uv);\n    }\n  ";
      }(t2);
    case 3:
      return function(t3) {
        var e3 = t3.shapeInfo.logicalShape, n3 = t3.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o2 = t3.shapeInfo.texShape, a2 = [Math.ceil(o2[0] / 2), Math.ceil(o2[1] / 2)];
        if (1 === e3[0]) {
          var i2 = e3.slice(1), u2 = ia(t3, i2);
          return "\n        " + Jo(u2) + "\n        vec4 " + r3 + "(int b, int row, int col) {\n          return " + r3 + "(" + ua(["b", "row", "col"], [1, 2]) + ");\n        }\n      ";
        }
        var s2 = a2[0], c2 = a2[1], l3 = Math.ceil(e3[2] / 2), h2 = l3 * Math.ceil(e3[1] / 2), f2 = Ko();
        return "\n    vec4 " + r3 + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + s2 + ", " + c2 + ", " + h2 + ", " + l3 + ", b, row, col);\n      return " + f2.texture2D + "(" + n3 + ", uv);\n    }\n  ";
      }(t2);
    default:
      return function(t3) {
        for (var e3 = t3.shapeInfo.logicalShape, n3 = e3.length, r3 = t3.name, o2 = "get" + r3.charAt(0).toUpperCase() + r3.slice(1), a2 = t3.shapeInfo.texShape, i2 = [Math.ceil(a2[0] / 2), Math.ceil(a2[1] / 2)], u2 = i2[0], s2 = i2[1], c2 = Math.ceil(e3[n3 - 1] / 2), l3 = c2 * Math.ceil(e3[n3 - 2] / 2), h2 = "int b, int row, int col", f2 = "b * " + l3 + " + (row / 2) * " + c2 + " + (col / 2)", p2 = 2; p2 < n3 - 1; p2++)
          h2 = "int b" + p2 + ", " + h2, l3 *= e3[n3 - p2 - 1], f2 = "b" + p2 + " * " + l3 + " + " + f2;
        var d2 = Ko();
        return "\n    vec4 " + o2 + "(" + h2 + ") {\n      int index = " + f2 + ";\n      int texR = index / " + s2 + ";\n      int texC = index - texR * " + s2 + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + s2 + ", " + u2 + ");\n      return " + d2.texture2D + "(" + r3 + ", uv);\n    }\n  ";
      }(t2);
  }
}
function ra(t2) {
  return "offset" + t2;
}
function oa(t2) {
  var e2 = t2.name, n2 = w(t2.shapeInfo.logicalShape);
  return n2 < 2 ? "return " + e2 + ";" : "\n    for (int i = 0; i < " + n2 + "; i++) {\n      if (i == index) {\n        return " + e2 + "[i];\n      }\n    }\n  ";
}
function aa(t2) {
  if (t2 <= 1)
    return "int";
  if (2 === t2)
    return "ivec2";
  if (3 === t2)
    return "ivec3";
  if (4 === t2)
    return "ivec4";
  if (5 === t2)
    return "ivec5";
  if (6 === t2)
    return "ivec6";
  throw Error("GPU for rank " + t2 + " is not yet supported");
}
function ia(t2, e2) {
  var n2 = JSON.parse(JSON.stringify(t2));
  return n2.shapeInfo.logicalShape = e2, n2;
}
function ua(t2, e2) {
  return e2.map(function(e3) {
    return t2[e3];
  }).join(", ");
}
function Aa(t2, e2, n2) {
  var r2 = t2.indexOf(e2);
  return t2.map(function(t3, e3) {
    return e3 === r2 ? t3 + " - " + n2 : t3;
  }).join();
}
function Va(t2, e2) {
  if (1 === t2)
    return "" + e2;
  if (2 === t2)
    return e2 + ".y";
  if (3 === t2)
    return e2 + ".z";
  if (4 === t2)
    return e2 + ".w";
  throw Error("Cumulative sum for rank " + t2 + " is not yet supported");
}
function oi(t2, e2) {
  var n2 = Ko();
  return Jt(t2, e2, n2.version + "\n    precision highp float;\n    " + n2.attribute + " vec3 clipSpacePos;\n    " + n2.attribute + " vec2 uv;\n    " + n2.varyingVs + " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
}
function ai(t2, e2) {
  return ie(t2, e2, new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]));
}
function ii(t2, e2) {
  return ue(t2, e2, new Uint16Array([0, 1, 2, 2, 1, 3]));
}
function ui(t2, e2, n2, r2, o2, a2, i2) {
  ce(n2, r2);
  var u2 = se(t2, e2), s2 = t2.TEXTURE_2D;
  return Kt(t2, e2, function() {
    return t2.bindTexture(s2, u2);
  }), Kt(t2, e2, function() {
    return t2.texParameteri(s2, t2.TEXTURE_WRAP_S, t2.CLAMP_TO_EDGE);
  }), Kt(t2, e2, function() {
    return t2.texParameteri(s2, t2.TEXTURE_WRAP_T, t2.CLAMP_TO_EDGE);
  }), Kt(t2, e2, function() {
    return t2.texParameteri(s2, t2.TEXTURE_MIN_FILTER, t2.NEAREST);
  }), Kt(t2, e2, function() {
    return t2.texParameteri(s2, t2.TEXTURE_MAG_FILTER, t2.NEAREST);
  }), Kt(t2, e2, function() {
    return t2.texImage2D(s2, 0, o2, n2, r2, 0, a2, i2, null);
  }), Kt(t2, e2, function() {
    return t2.bindTexture(t2.TEXTURE_2D, null);
  }), u2;
}
function si(t2, e2, n2, r2, o2) {
  var a2 = zt(n2, r2);
  return ui(t2, e2, a2[0], a2[1], o2.internalFormatFloat, o2.textureFormatFloat, t2.FLOAT);
}
function ci(t2, e2, n2, r2, o2) {
  var a2 = zt(n2, r2);
  return ui(t2, e2, a2[0], a2[1], o2.internalFormatHalfFloat, o2.textureFormatFloat, o2.textureTypeHalfFloat);
}
function li(t2, e2, n2, r2, o2) {
  var a2 = zt(n2, r2);
  return ui(t2, e2, a2[0], a2[1], t2.RGBA, t2.RGBA, t2.UNSIGNED_BYTE);
}
function hi(t2, e2, n2, r2, o2) {
  var a2 = Ht(n2, r2);
  return ui(t2, e2, a2[0], a2[1], o2.internalFormatPackedFloat, t2.RGBA, t2.FLOAT);
}
function fi(t2, e2, n2, r2, o2) {
  var a2 = Ht(n2, r2);
  return ui(t2, e2, a2[0], a2[1], o2.internalFormatPackedHalfFloat, t2.RGBA, o2.textureTypeHalfFloat);
}
function pi(t2, e2, n2, r2) {
  return Kt(t2, e2, function() {
    return t2.bindBuffer(t2.ARRAY_BUFFER, r2);
  }), he(t2, e2, n2, "clipSpacePos", r2, 3, 20, 0) && he(t2, e2, n2, "uv", r2, 2, 20, 12);
}
function di(t2, e2, n2, r2, o2, a2, i2) {
  var u2, s2, c2;
  Kt(t2, e2, function() {
    return t2.bindTexture(t2.TEXTURE_2D, n2);
  }), a2 instanceof Uint8Array ? (u2 = new Uint8Array(r2 * o2 * 4), s2 = t2.UNSIGNED_BYTE, c2 = t2.RGBA) : (u2 = new Float32Array(r2 * o2 * 4), s2 = t2.FLOAT, c2 = i2.internalFormatPackedFloat), u2.set(a2), Kt(t2, e2, function() {
    return t2.texImage2D(t2.TEXTURE_2D, 0, c2, r2, o2, 0, t2.RGBA, s2, u2);
  }), Kt(t2, e2, function() {
    return t2.bindTexture(t2.TEXTURE_2D, null);
  });
}
function vi(t2, e2, n2, r2) {
  Kt(t2, e2, function() {
    return t2.bindTexture(t2.TEXTURE_2D, n2);
  }), r2.data instanceof Uint8Array ? Kt(t2, e2, function() {
    return t2.texImage2D(t2.TEXTURE_2D, 0, t2.RGBA, r2.width, r2.height, 0, t2.RGBA, t2.UNSIGNED_BYTE, r2.data);
  }) : Kt(t2, e2, function() {
    return t2.texImage2D(t2.TEXTURE_2D, 0, t2.RGBA, t2.RGBA, t2.UNSIGNED_BYTE, r2);
  }), Kt(t2, e2, function() {
    return t2.bindTexture(t2.TEXTURE_2D, null);
  });
}
function mi(t2, e2, n2, r2, o2) {
  var a2 = t2.createBuffer();
  Kt(t2, e2, function() {
    return t2.bindBuffer(t2.PIXEL_PACK_BUFFER, a2);
  });
  var i2 = 16 * n2 * r2;
  return Kt(t2, e2, function() {
    return t2.bufferData(t2.PIXEL_PACK_BUFFER, i2, t2.STREAM_READ);
  }), Kt(t2, e2, function() {
    return t2.readPixels(0, 0, r2, n2, t2.RGBA, t2.FLOAT, 0);
  }), Kt(t2, e2, function() {
    return t2.bindBuffer(t2.PIXEL_PACK_BUFFER, null);
  }), a2;
}
function gi(t2, e2, n2) {
  var r2 = t2, o2 = new Float32Array(n2);
  return r2.bindBuffer(r2.PIXEL_PACK_BUFFER, e2), r2.getBufferSubData(r2.PIXEL_PACK_BUFFER, 0, o2), r2.bindBuffer(r2.PIXEL_PACK_BUFFER, null), o2;
}
function yi(t2, e2, n2, r2, o2) {
  var a2 = zt(n2, r2), i2 = a2[0], u2 = a2[1], s2 = new Uint8Array(n2 * r2 * 4);
  return Kt(t2, e2, function() {
    return t2.readPixels(0, 0, i2, u2, o2.downloadTextureFormat, t2.UNSIGNED_BYTE, s2);
  }), new Float32Array(s2.buffer);
}
function xi(t2, e2, n2, r2, o2, a2, i2, u2) {
  var s2 = t2, c2 = new Float32Array(function(t3, e3) {
    var n3 = Ht(t3, e3);
    return n3[0] * n3[1] * 4;
  }(a2, i2));
  return s2.bindBuffer(s2.PIXEL_PACK_BUFFER, e2), s2.getBufferSubData(s2.PIXEL_PACK_BUFFER, 0, c2), s2.bindBuffer(s2.PIXEL_PACK_BUFFER, null), c2;
}
function bi(t2, e2, n2, r2) {
  var o2 = new Float32Array(n2 * r2 * 4);
  return Kt(t2, e2, function() {
    return t2.readPixels(0, 0, r2, n2, t2.RGBA, t2.FLOAT, o2);
  }), o2;
}
function Ei(t2, e2) {
  if (t2.length !== e2.length)
    throw Error("Binary was compiled with " + t2.length + " inputs, but was executed with " + e2.length + " inputs");
  t2.forEach(function(t3, n2) {
    var r2 = t3.logicalShape, o2 = e2[n2], a2 = o2.shape;
    if (!C(r2, a2))
      throw Error("Binary was compiled with different shapes than the current args. Shapes " + r2 + " and " + a2 + " must match");
    if (!t3.isUniform || !o2.isUniform) {
      var i2 = t3.texShape, u2 = o2.isUniform ? null : o2.texData.texShape;
      if (!C(i2, u2))
        throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i2 + " and " + u2 + " must match");
    }
  });
}
function eu(t2, e2) {
  if (t2 === Mt.UPLOAD)
    return Bt.PACKED_2X2_FLOAT32;
  if (t2 === Mt.RENDER || null == t2)
    return function(t3) {
      return a().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? t3 ? Bt.PACKED_2X2_FLOAT32 : Bt.UNPACKED_FLOAT32 : t3 ? Bt.PACKED_2X2_FLOAT16 : Bt.UNPACKED_FLOAT16;
    }(e2);
  if (t2 === Mt.DOWNLOAD || t2 === Mt.PIXELS)
    return Bt.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error("Unknown logical texture type " + t2);
}
function nu(t2, e2, n2) {
  return t2[0] + "_" + t2[1] + "_" + e2 + "_" + n2;
}
function Pu(t2, e2) {
  if (void 0 === e2 && (e2 = false), "linear" === t2)
    return e2 ? Tu : lu;
  if ("relu" === t2)
    return e2 ? Nu : fu;
  if ("elu" === t2)
    return e2 ? Ou : du;
  if ("relu6" === t2)
    return e2 ? Fu : pu;
  if ("prelu" === t2)
    return e2 ? wa : xa;
  throw new Error("Activation " + t2 + " has not been implemented for the WebGL backend.");
}
function ws(t2, e2, n2, r2, o2, a2) {
  var i2, u2, s2 = ln(t2, "x", "batchNorm"), c2 = ln(e2, "mean", "batchNorm"), l3 = ln(n2, "variance", "batchNorm");
  return null != o2 && (i2 = ln(o2, "scale", "batchNorm")), null != r2 && (u2 = ln(r2, "offset", "batchNorm")), g(2 === s2.rank, function() {
    return "Error in batchNorm3D: x must be rank 3 but got rank " + s2.rank + ".";
  }), g(2 === c2.rank || 1 === c2.rank, function() {
    return "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " + c2.rank + ".";
  }), g(2 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " + l3.rank + ".";
  }), null != i2 && g(2 === i2.rank || 1 === i2.rank, function() {
    return "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " + i2.rank + ".";
  }), null != u2 && g(2 === u2.rank || 1 === u2.rank, function() {
    return "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " + u2.rank + ".";
  }), Rs(s2, c2, l3, u2, i2, a2);
}
function Cs(t2, e2, n2, r2, o2, a2) {
  var i2, u2, s2 = ln(t2, "x", "batchNorm"), c2 = ln(e2, "mean", "batchNorm"), l3 = ln(n2, "variance", "batchNorm");
  return null != o2 && (i2 = ln(o2, "scale", "batchNorm")), null != r2 && (u2 = ln(r2, "offset", "batchNorm")), g(3 === s2.rank, function() {
    return "Error in batchNorm3D: x must be rank 3 but got rank " + s2.rank + ".";
  }), g(3 === c2.rank || 1 === c2.rank, function() {
    return "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " + c2.rank + ".";
  }), g(3 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " + l3.rank + ".";
  }), null != i2 && g(3 === i2.rank || 1 === i2.rank, function() {
    return "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " + i2.rank + ".";
  }), null != u2 && g(3 === u2.rank || 1 === u2.rank, function() {
    return "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " + u2.rank + ".";
  }), Rs(s2, c2, l3, u2, i2, a2);
}
function Es(t2, e2, n2, r2, o2, a2) {
  var i2, u2, s2 = ln(t2, "x", "batchNorm"), c2 = ln(e2, "mean", "batchNorm"), l3 = ln(n2, "variance", "batchNorm");
  return null != o2 && (i2 = ln(o2, "scale", "batchNorm")), null != r2 && (u2 = ln(r2, "offset", "batchNorm")), g(4 === s2.rank, function() {
    return "Error in batchNorm4D: x must be rank 4 but got rank " + s2.rank + ".";
  }), g(4 === c2.rank || 1 === c2.rank, function() {
    return "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " + c2.rank + ".";
  }), g(4 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " + l3.rank + ".";
  }), null != i2 && g(4 === i2.rank || 1 === i2.rank, function() {
    return "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " + i2.rank + ".";
  }), null != u2 && g(4 === u2.rank || 1 === u2.rank, function() {
    return "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " + u2.rank + ".";
  }), Rs(s2, c2, l3, u2, i2, a2);
}
function Rs(t2, e2, n2, r2, o2, a2) {
  null == a2 && (a2 = 1e-3);
  var i2, u2, s2, c2 = ln(t2, "x", "batchNorm"), l3 = ln(e2, "mean", "batchNorm"), h2 = ln(n2, "variance", "batchNorm");
  null != o2 && (i2 = ln(o2, "scale", "batchNorm")), null != r2 && (u2 = ln(r2, "offset", "batchNorm")), g(l3.rank === h2.rank, function() {
    return "Batch normalization gradient requires mean and variance to have equal ranks.";
  }), g(null == u2 || l3.rank === u2.rank, function() {
    return "Batch normalization gradient requires mean and offset to have equal ranks.";
  }), g(null == i2 || l3.rank === i2.rank, function() {
    return "Batch normalization gradient requires mean and scale to have equal ranks.";
  }), s2 = 0 === c2.rank || 1 === c2.rank ? c2.as4D(1, 1, 1, c2.size) : 2 === c2.rank ? c2.as4D(1, 1, c2.shape[0], c2.shape[1]) : 3 === c2.rank ? c2.as4D(1, c2.shape[0], c2.shape[1], c2.shape[2]) : c2;
  var f2 = [c2, l3, h2, i2];
  return Nt.runKernelFunc(function(t3, e3) {
    var n3 = t3.batchNormalization(s2, Is(l3), Is(h2), a2, Is(i2), Is(u2));
    return e3([c2, l3, h2, i2]), n3;
  }, { x: c2, mean: l3, variance: h2, scale: i2, offset: u2 }, function(t3, e3) {
    var n3 = e3, r3 = n3[0], o3 = n3[1], i3 = n3[2], u3 = n3[3], c3 = null == u3 ? An(1) : u3, l4 = fo(o3.shape, s2.shape), h3 = [];
    if (1 === o3.rank) {
      for (var f3 = 0; f3 < s2.shape.length - 1; ++f3)
        h3.push(s2.shape[f3]);
      h3.push(1);
    }
    var p2 = r3.sub(o3), d2 = t3.mul(c3), v2 = ss(i3.add(An(a2))), m2 = v2.mul(v2).mul(v2).mul(An(-0.5));
    return { x: function() {
      return 1 === o3.rank ? t3.mul(Nr(v2.as4D(1, 1, 1, o3.shape[0]), h3)).mul(c3).reshape(r3.shape) : t3.mul(v2).mul(c3).reshape(r3.shape);
    }, mean: function() {
      var t4 = v2.mul(An(-1)).mul(d2);
      return 1 === o3.rank && (t4 = t4.sum(l4)), t4.reshape(o3.shape);
    }, variance: function() {
      var t4 = m2.mul(p2).mul(d2);
      return 1 === o3.rank && (t4 = t4.sum(l4)), t4.reshape(o3.shape);
    }, scale: function() {
      var e4 = p2.mul(v2), n4 = t3.mul(e4);
      return 1 === o3.rank && (n4 = n4.sum(l4)), n4.reshape(o3.shape);
    }, offset: function() {
      var e4 = t3;
      return 1 === o3.rank && (e4 = e4.sum(l4)), e4.reshape(o3.shape);
    } };
  }, "BatchNormalization", { varianceEpsilon: a2 }, f2).reshape(c2.shape);
}
function Is(t2) {
  return null == t2 ? null : 0 === t2.rank ? t2.as1D() : 1 === t2.rank ? t2 : 2 === t2.rank ? t2.as4D(1, 1, t2.shape[0], t2.shape[1]) : 3 === t2.rank ? t2.as4D(1, t2.shape[0], t2.shape[1], t2.shape[2]) : t2;
}
function ks() {
  ze("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");
}
function bc(t2, e2) {
  for (var n2 = [], r2 = t2; r2 < e2; ++r2)
    n2.push(r2);
  return n2;
}
function wc(t2) {
  for (var e2 = [], n2 = 0; n2 < t2.length; ++n2)
    for (var r2 = 0; r2 < t2[n2].length; ++r2)
      e2.push(t2[n2][r2]);
  return e2;
}
function Ic(t2, e2, n2, r2, o2, a2, i2) {
  void 0 === a2 && (a2 = "NHWC"), g(t2.length === e2.rank, function() {
    return "Length of inShape (" + t2.length + ") and rank of dy (" + e2.rank + ") must match";
  });
  var u2 = t2, s2 = e2, c2 = false;
  3 === e2.rank && (c2 = true, s2 = e2.as4D(1, e2.shape[0], e2.shape[1], e2.shape[2]), u2 = [1, t2[0], t2[1], t2[2]]), g(4 === u2.length, function() {
    return "Error in conv2dDerInput: inShape must be length 4, but got length " + u2.length + ".";
  }), g(4 === s2.rank, function() {
    return "Error in conv2dDerInput: dy must be rank 4, but got rank " + s2.rank;
  }), g(4 === n2.rank, function() {
    return "Error in conv2dDerInput: filter must be rank 4, but got rank " + n2.rank;
  });
  var l3 = "NHWC" === a2 ? u2[3] : u2[1], h2 = "NHWC" === a2 ? s2.shape[3] : s2.shape[1];
  g(l3 === n2.shape[2], function() {
    return "Error in conv2dDerInput: depth of input (" + l3 + ") must match input depth for filter " + n2.shape[2] + ".";
  }), g(h2 === n2.shape[3], function() {
    return "Error in conv2dDerInput: depth of output (" + h2 + ") must match output depth for filter " + n2.shape[3] + ".";
  }), null != i2 && g(E(o2), function() {
    return "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + i2 + " but got pad " + o2 + ".";
  });
  var f2 = ko(a2), p2 = go(u2, n2.shape, r2, 1, o2, i2, false, f2), d2 = Nt.runKernelFunc(function(t3, e3) {
    var r3 = t3.conv2dDerInput(s2, n2, p2);
    return e3([n2, s2]), r3;
  }, { dy4D: s2, filter: n2 }, function(t3, e3) {
    var n3 = e3[0], u3 = e3[1];
    return { dy4D: function() {
      return Dc(t3, n3, r2, o2, a2, 1, i2);
    }, filter: function() {
      return Nc(t3, u3, n3.shape, r2, o2, a2, i2);
    } };
  });
  return c2 ? d2.as3D(d2.shape[1], d2.shape[2], d2.shape[3]) : d2;
}
function kc(t2) {
  var e2 = function(t3) {
    return "number" == typeof t3 ? [t3, t3, t3] : 2 === t3.length ? [t3[0], t3[1], 1] : t3;
  }(t2), n2 = e2[0], r2 = e2[1], o2 = e2[2];
  return 1 === n2 && 1 === r2 && 1 === o2;
}
function Sc(t2, e2, n2, r2, o2) {
  g(t2.length === e2.rank, function() {
    return "Length of inShape (" + t2.length + ") and rank of dy (" + e2.rank + ") must match";
  });
  var a2 = t2, i2 = e2, u2 = false;
  4 === e2.rank && (u2 = true, i2 = e2.as5D(1, e2.shape[0], e2.shape[1], e2.shape[2], e2.shape[3]), a2 = [1, t2[0], t2[1], t2[2], t2[3]]);
  var s2 = a2[4], c2 = i2.shape[4];
  g(5 === a2.length, function() {
    return "Error in conv3dDerInput: inShape must be length 5, but got length " + a2.length + ".";
  }), g(5 === i2.rank, function() {
    return "Error in conv3dDerInput: dy must be rank 5, but got rank " + i2.rank;
  }), g(5 === n2.rank, function() {
    return "Error in conv3dDerInput: filter must be rank 5, but got rank " + n2.rank;
  }), g(s2 === n2.shape[3], function() {
    return "Error in conv3dDerInput: depth of input (" + s2 + ") must match input depth for filter " + n2.shape[3] + ".";
  }), g(c2 === n2.shape[4], function() {
    return "Error in conv3dDerInput: depth of output (" + c2 + ") must match output depth for filter " + n2.shape[4] + ".";
  });
  var l3 = yo(a2, n2.shape, r2, 1, o2), h2 = Nt.runKernelFunc(function(t3) {
    return t3.conv3dDerInput(i2, n2, l3);
  }, { dy5D: i2 });
  return u2 ? h2.as4D(h2.shape[1], h2.shape[2], h2.shape[3], h2.shape[4]) : h2;
}
function jc(t2, e2, n2, r2, o2, a2) {
  var i2 = ln(t2, "x", "maxPool"), u2 = i2, s2 = false;
  3 === i2.rank && (s2 = true, u2 = i2.as4D(1, i2.shape[0], i2.shape[1], i2.shape[2])), null == r2 && (r2 = [1, 1]), g(4 === u2.rank, function() {
    return "Error in maxPool: input must be rank 4 but got rank " + u2.rank + ".";
  }), g(Io(n2, r2), function() {
    return "Error in maxPool: Either strides or dilations must be 1. Got strides " + n2 + " and dilations '" + r2 + "'";
  }), null != a2 && g(E(o2), function() {
    return "Error in maxPool: pad must be an integer when using, dimRoundingMode " + a2 + " but got pad " + o2 + ".";
  });
  var c2 = vo(u2.shape, e2, n2, r2, o2, a2), l3 = Nt.runKernelFunc(function(t3, e3) {
    var n3 = t3.maxPool(u2, c2);
    return e3([u2, n3]), n3;
  }, { x: u2 }, function(t3, a3) {
    var i3 = a3[0], u3 = a3[1];
    return { x: function() {
      return function(t4, e3, n3, r3, o3, a4, i4, u4) {
        var s3 = ln(t4, "dy", "maxPoolBackprop"), c3 = ln(e3, "input", "maxPoolBackprop"), l4 = ln(n3, "output", "maxPoolBackprop");
        g(c3.rank === s3.rank, function() {
          return "Rank of input (" + c3.rank + ") does not match rank of dy (" + s3.rank + ")";
        }), null == a4 && (a4 = [1, 1]), g(Io(o3, a4), function() {
          return "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " + o3 + " and dilations '" + a4 + "'";
        }), g(4 === s3.rank, function() {
          return "Error in maxPoolBackprop: dy must be rank 4 but got rank " + s3.rank + ".";
        }), g(4 === c3.rank, function() {
          return "Error in maxPoolBackprop: input must be rank 4 but got rank " + c3.rank + ".";
        }), null != u4 && g(E(i4), function() {
          return "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + u4 + " but got pad " + i4 + ".";
        });
        var h2 = vo(c3.shape, r3, o3, a4, i4, u4);
        return Nt.runKernelFunc(function(t5) {
          return t5.maxPoolBackprop(s3, c3, l4, h2);
        }, { $dy: s3, $input: c3 });
      }(t3, i3, u3, e2, n2, r2, o2);
    } };
  });
  return s2 ? l3.as3D(l3.shape[1], l3.shape[2], l3.shape[3]) : l3;
}
function Xc(t2, e2, n2, r2, o2, a2) {
  var i2 = ln(t2, "x", "avgPool", "float32");
  null == r2 && (r2 = [1, 1]), g(Io(n2, r2), function() {
    return "Error in avgPool: Either strides or dilations must be 1. Got strides " + n2 + " and dilations '" + r2 + "'";
  });
  var u2 = i2, s2 = false;
  3 === i2.rank && (s2 = true, u2 = i2.as4D(1, i2.shape[0], i2.shape[1], i2.shape[2])), g(4 === u2.rank, function() {
    return "Error in avgPool: x must be rank 4 but got rank " + u2.rank + ".";
  }), null != a2 && g(E(o2), function() {
    return "Error in avgPool: pad must be an integer when using, dimRoundingMode " + a2 + " but got pad " + o2 + ".";
  });
  var c2 = vo(u2.shape, e2, n2, r2, o2, a2), l3 = Nt.runKernelFunc(function(t3) {
    return t3.avgPool(u2, c2);
  }, { x: u2 }, function(t3) {
    return { x: function() {
      return function(t4, e3, n3, r3, o3, a3) {
        var i3 = ln(t4, "dy", "avgPoolBackprop"), u3 = ln(e3, "input", "avgPoolBackprop");
        g(u3.rank === i3.rank, function() {
          return "Rank of input (" + u3.rank + ") does not match rank of dy (" + i3.rank + ")";
        }), null == o3 && (o3 = [1, 1]), g(Io(r3, o3), function() {
          return "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " + r3 + " and dilations '" + o3 + "'";
        });
        var s3 = u3, c3 = i3, l4 = false;
        3 === u3.rank && (l4 = true, s3 = u3.as4D(1, u3.shape[0], u3.shape[1], u3.shape[2]), c3 = i3.as4D(1, i3.shape[0], i3.shape[1], i3.shape[2])), g(4 === c3.rank, function() {
          return "Error in avgPoolBackprop: dy must be rank 4 but got rank " + c3.rank + ".";
        }), g(4 === s3.rank, function() {
          return "Error in avgPoolBackprop: input must be rank 4 but got rank " + s3.rank + ".";
        });
        var h2 = vo(s3.shape, n3, r3, o3, a3), f2 = Nt.runKernelFunc(function(t5) {
          return t5.avgPoolBackprop(c3, s3, h2);
        }, { dy4D: c3, input4D: s3 });
        return l4 ? f2.as3D(f2.shape[1], f2.shape[2], f2.shape[3]) : f2;
      }(t3, u2, e2, n2, r2, o2);
    } };
  });
  return l3 = l3.cast(i2.dtype), s2 ? l3.as3D(l3.shape[1], l3.shape[2], l3.shape[3]) : l3;
}
function al(t2, e2, n2, r2, o2) {
  return e2.rank < n2.rank && (e2 = e2.reshape(vn(e2.shape, r2))), t2.rank < n2.rank && (t2 = t2.reshape(vn(t2.shape, r2))), { $x: function() {
    var r3 = t2.mul(n2.equal(e2).cast(t2.dtype));
    return null == o2 ? r3 : r3.transpose(o2);
  } };
}
function Vl(t2, e2, n2) {
  for (var r2 = 1 - t2 % 2, o2 = new Float32Array(t2), a2 = 0; a2 < t2; ++a2) {
    var i2 = 2 * Math.PI * a2 / (t2 + r2 - 1);
    o2[a2] = e2 - n2 * Math.cos(i2);
  }
  return Dn(o2, "float32");
}
function ah(t2, e2) {
  return void 0 === e2 && (e2 = false), Nt.tidy(function() {
    if (2 !== t2.shape.length)
      throw new Error("qr2d() requires a 2D Tensor, but got a " + t2.shape.length + "D Tensor.");
    for (var n2 = t2.shape[0], r2 = t2.shape[1], o2 = vr(n2), a2 = t2.clone(), i2 = Tn([[1]], [1, 1]), u2 = i2.clone(), s2 = n2 >= r2 ? r2 : n2, c2 = function(t3) {
      var e3, s3 = a2, c3 = u2, l4 = o2;
      e3 = Nt.tidy(function() {
        var e4 = a2.slice([t3, t3], [n2 - t3, 1]), s4 = e4.norm(), c4 = a2.slice([t3, t3], [1, 1]), l5 = Tn([[-1]]).where(c4.greater(0), Tn([[1]])), h2 = c4.sub(l5.mul(s4)), f2 = e4.div(h2);
        u2 = 1 === f2.shape[0] ? i2.clone() : i2.concat(f2.slice([1, 0], [f2.shape[0] - 1, f2.shape[1]]), 0);
        var p2 = l5.matMul(h2).div(s4).neg(), d2 = a2.slice([t3, 0], [n2 - t3, r2]), v2 = p2.mul(u2);
        if (0 === t3)
          a2 = d2.sub(v2.matMul(u2.transpose().matMul(d2)));
        else {
          var m2 = d2.sub(v2.matMul(u2.transpose().matMul(d2)));
          a2 = a2.slice([0, 0], [t3, r2]).concat(m2, 0);
        }
        var g2 = o2.slice([0, t3], [n2, o2.shape[1] - t3]);
        if (0 === t3)
          o2 = g2.sub(g2.matMul(u2).matMul(v2.transpose()));
        else {
          var y2 = g2.sub(g2.matMul(u2).matMul(v2.transpose()));
          o2 = o2.slice([0, 0], [n2, t3]).concat(y2, 1);
        }
        return [u2, a2, o2];
      }), u2 = e3[0], a2 = e3[1], o2 = e3[2], Xe([s3, c3, l4]);
    }, l3 = 0; l3 < s2; ++l3)
      c2(l3);
    return !e2 && n2 > r2 && (o2 = o2.slice([0, 0], [n2, r2]), a2 = a2.slice([0, 0], [r2, r2])), [o2, a2];
  });
}
function ch(t2, e2, n2, r2, o2) {
  null == r2 && (r2 = 0.5), null == o2 && (o2 = Number.NEGATIVE_INFINITY);
  var a2 = t2.shape[0];
  return n2 = Math.min(n2, a2), g(0 <= r2 && r2 <= 1, function() {
    return "iouThreshold must be in [0, 1], but was '" + r2 + "'";
  }), g(2 === t2.rank, function() {
    return "boxes must be a 2D tensor, but was of rank '" + t2.rank + "'";
  }), g(4 === t2.shape[1], function() {
    return "boxes must have 4 columns, but 2nd dimension was " + t2.shape[1];
  }), g(1 === e2.rank, function() {
    return "scores must be a 1D tensor";
  }), g(e2.shape[0] === a2, function() {
    return "scores has incompatible shape with boxes. Expected " + a2 + ", but was " + e2.shape[0];
  }), { maxOutputSize: n2, iouThreshold: r2, scoreThreshold: o2 };
}
function Ih(t2, e2) {
  Array.isArray(t2) || (t2 = [t2]), t2.forEach(function(t3) {
    null != t3 && g("complex64" !== t3.dtype, function() {
      return e2 + " does not support complex64 tensors.";
    });
  });
}
function kh(t2, e2, n2, r2) {
  if ("linear" === n2)
    return t2.linear(e2);
  if ("relu" === n2)
    return t2.relu(e2);
  if ("elu" === n2)
    return t2.elu(e2);
  if ("relu6" === n2)
    return t2.relu6(e2);
  if ("prelu" === n2)
    return t2.prelu(e2, r2);
  throw new Error("Activation " + n2 + " has not been implemented for the CPU backend.");
}
function _h(t2, e2) {
  for (var n2 = {}, r2 = 0, o2 = function(e3) {
    var o3 = e3.name, a3 = e3.dtype, i3 = e3.shape, u2 = w(i3), s2 = void 0;
    if ("quantization" in e3) {
      var c2 = e3.quantization;
      if ("uint8" !== c2.dtype && "uint16" !== c2.dtype)
        throw new Error("Weight " + e3.name + " has unknown quantization dtype " + c2.dtype + ". Supported quantization dtypes are: 'uint8' and 'uint16'.");
      var l3 = Fh[c2.dtype], h2 = t2.slice(r2, r2 + u2 * l3), f2 = "uint8" === c2.dtype ? new Uint8Array(h2) : new Uint16Array(h2);
      if ("float32" === a3)
        s2 = Float32Array.from(f2, function(t3) {
          return t3 * c2.scale + c2.min;
        });
      else {
        if ("int32" !== a3)
          throw new Error("Unsupported dtype in weight '" + o3 + "': " + a3);
        s2 = Int32Array.from(f2, function(t3) {
          return Math.round(t3 * c2.scale + c2.min);
        });
      }
      r2 += u2 * l3;
    } else if ("string" === a3) {
      var p2 = w(e3.shape);
      s2 = [];
      for (var d2 = 0; d2 < p2; d2++) {
        var v2 = new Uint32Array(t2.slice(r2, r2 + Oh))[0];
        r2 += Oh;
        var m2 = new Uint8Array(t2.slice(r2, r2 + v2));
        s2.push(m2), r2 += v2;
      }
    } else {
      var g2 = Fh[a3];
      h2 = t2.slice(r2, r2 + u2 * g2);
      if ("float32" === a3)
        s2 = new Float32Array(h2);
      else if ("int32" === a3)
        s2 = new Int32Array(h2);
      else {
        if ("bool" !== a3)
          throw new Error("Unsupported dtype in weight '" + o3 + "': " + a3);
        s2 = new Uint8Array(h2);
      }
      r2 += u2 * g2;
    }
    n2[o3] = kn(s2, i3, a3);
  }, a2 = 0, i2 = e2; a2 < i2.length; a2++) {
    o2(i2[a2]);
  }
  return n2;
}
function Mh(t2) {
  if (null === t2)
    throw new Error("Invalid input value: " + JSON.stringify(t2));
  var e2 = 0, n2 = [];
  t2.forEach(function(t3) {
    if (e2 += t3.byteLength, n2.push(t3.byteLength === t3.buffer.byteLength ? t3 : new t3.constructor(t3)), !(t3 instanceof Float32Array || t3 instanceof Int32Array || t3 instanceof Uint8Array))
      throw new Error("Unsupported TypedArray subtype: " + t3.constructor.name);
  });
  var r2 = new Uint8Array(e2), o2 = 0;
  return n2.forEach(function(t3) {
    r2.set(new Uint8Array(t3.buffer), o2), o2 += t3.byteLength;
  }), r2.buffer;
}
function Ph(t2) {
  return Bh ? Buffer.byteLength(t2) : new Blob([t2]).size;
}
function Lh(t2) {
  var e2 = 0;
  t2.forEach(function(t3) {
    e2 += t3.byteLength;
  });
  var n2 = new Uint8Array(e2), r2 = 0;
  return t2.forEach(function(t3) {
    n2.set(new Uint8Array(t3), r2), r2 += t3.byteLength;
  }), n2.buffer;
}
function Wh(t2) {
  for (t2 = t2.trim(); t2.endsWith("/"); )
    t2 = t2.slice(0, t2.length - 1);
  var e2 = t2.split("/");
  return e2[e2.length - 1];
}
function Uh(t2) {
  if (t2.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: /* @__PURE__ */ new Date(), modelTopologyType: "JSON", modelTopologyBytes: null == t2.modelTopology ? 0 : Ph(JSON.stringify(t2.modelTopology)), weightSpecsBytes: null == t2.weightSpecs ? 0 : Ph(JSON.stringify(t2.weightSpecs)), weightDataBytes: null == t2.weightData ? 0 : t2.weightData.byteLength };
}
function Hh(t2) {
  if (-1 === t2.indexOf(zh))
    throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + Gh.getSchemes().join(","));
  return { scheme: t2.split(zh)[0], path: t2.split(zh)[1] };
}
function qh(t2, e2, o2) {
  return void 0 === o2 && (o2 = false), n(this, void 0, void 0, function() {
    var n2, a2, i2, u2, s2, c2, l3, h2, f2;
    return r(this, function(r2) {
      switch (r2.label) {
        case 0:
          return g(t2 !== e2, function() {
            return "Old path and new path are the same: '" + t2 + "'";
          }), g((n2 = Vh.getLoadHandlers(t2)).length > 0, function() {
            return "Copying failed because no load handler is found for source URL " + t2 + ".";
          }), g(n2.length < 2, function() {
            return "Copying failed because more than one (" + n2.length + ") load handlers for source URL " + t2 + ".";
          }), a2 = n2[0], g((i2 = Vh.getSaveHandlers(e2)).length > 0, function() {
            return "Copying failed because no save handler is found for destination URL " + e2 + ".";
          }), g(i2.length < 2, function() {
            return "Copying failed because more than one (" + n2.length + ") save handlers for destination URL " + e2 + ".";
          }), u2 = i2[0], s2 = Hh(t2).scheme, c2 = Hh(t2).path, l3 = s2 === Hh(t2).scheme, [4, a2.load()];
        case 1:
          return h2 = r2.sent(), o2 && l3 ? [4, Gh.getManager(s2).removeModel(c2)] : [3, 3];
        case 2:
          r2.sent(), r2.label = 3;
        case 3:
          return [4, u2.save(h2)];
        case 4:
          return f2 = r2.sent(), !o2 || l3 ? [3, 6] : [4, Gh.getManager(s2).removeModel(c2)];
        case 5:
          r2.sent(), r2.label = 6;
        case 6:
          return [2, f2.modelArtifactsInfo];
      }
    });
  });
}
function Xh() {
  if (!a().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  var t2 = window, e2 = t2.indexedDB || t2.mozIndexedDB || t2.webkitIndexedDB || t2.msIndexedDB || t2.shimIndexedDB;
  if (null == e2)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return e2;
}
function $h(t2) {
  var e2 = t2.result;
  e2.createObjectStore(Kh, { keyPath: "modelPath" }), e2.createObjectStore(jh, { keyPath: "modelPath" });
}
function uf(t2) {
  return { info: [tf, t2, ef].join(Zh), topology: [tf, t2, nf].join(Zh), weightSpecs: [tf, t2, rf].join(Zh), weightData: [tf, t2, of].join(Zh), modelMetadata: [tf, t2, af].join(Zh) };
}
function sf(t2) {
  var e2 = t2.split(Zh);
  if (e2.length < 3)
    throw new Error("Invalid key format: " + t2);
  return e2.slice(1, e2.length - 1).join(Zh);
}
function vf(t2) {
  return new Promise(function(t3) {
    return setTimeout(t3);
  }).then(t2);
}
function yf(t2, e2, n2, r2) {
  !function(t3) {
    g(null != t3 && Array.isArray(t3) && t3.length > 0, function() {
      return "promises must be a none empty array";
    });
  }(t2), function(t3, e3) {
    g(t3 >= 0 && t3 <= 1, function() {
      return "Progress fraction must be in range [0, 1], but got startFraction " + t3;
    }), g(e3 >= 0 && e3 <= 1, function() {
      return "Progress fraction must be in range [0, 1], but got endFraction " + e3;
    }), g(e3 >= t3, function() {
      return "startFraction must be no more than endFraction, but got startFraction " + t3 + " and endFraction " + e3;
    });
  }(n2 = null == n2 ? 0 : n2, r2 = null == r2 ? 1 : r2);
  var o2 = 0;
  return Promise.all(t2.map(function(a2) {
    return a2.then(function(a3) {
      var i2 = n2 + ++o2 / t2.length * (r2 - n2);
      return e2(i2), a3;
    }), a2;
  }));
}
function xf(t2, e2) {
  return n(this, void 0, void 0, function() {
    var n2, o2, i2, u2, s2, c2, l3, h2, f2;
    return r(this, function(r2) {
      switch (r2.label) {
        case 0:
          return null == e2 && (e2 = {}), n2 = null == e2.fetchFunc ? a().platform.fetch : e2.fetchFunc, o2 = t2.map(function(t3) {
            return n2(t3, e2.requestInit, { isBinary: true });
          }), i2 = 0, u2 = 0.5, null != e2.onProgress ? [3, 2] : [4, Promise.all(o2)];
        case 1:
          return s2 = r2.sent(), [3, 4];
        case 2:
          return [4, yf(o2, e2.onProgress, i2, u2)];
        case 3:
          s2 = r2.sent(), r2.label = 4;
        case 4:
          return c2 = s2.map(function(t3) {
            return t3.arrayBuffer();
          }), l3 = 0.5, h2 = 1, null != e2.onProgress ? [3, 6] : [4, Promise.all(c2)];
        case 5:
          return f2 = r2.sent(), [3, 8];
        case 6:
          return [4, yf(c2, e2.onProgress, l3, h2)];
        case 7:
          f2 = r2.sent(), r2.label = 8;
        case 8:
          return [2, f2];
      }
    });
  });
}
function bf(t2) {
  var e2 = this;
  return function(o2, a2, i2) {
    return void 0 === a2 && (a2 = ""), n(e2, void 0, void 0, function() {
      var e3, n2, u2, s2, c2, l3, h2, f2, p2, d2;
      return r(this, function(r2) {
        switch (r2.label) {
          case 0:
            if (e3 = o2.map(function() {
              return false;
            }), n2 = {}, u2 = null != i2 ? i2.map(function() {
              return false;
            }) : [], s2 = [], o2.forEach(function(t3, r3) {
              var o3 = 0;
              t3.weights.forEach(function(t4) {
                var a3 = "quantization" in t4 ? t4.quantization.dtype : t4.dtype, c3 = Fh[a3] * w(t4.shape), l4 = function() {
                  e3[r3] = true, null == n2[r3] && (n2[r3] = []), n2[r3].push({ manifestEntry: t4, groupOffset: o3, sizeBytes: c3 });
                };
                null != i2 ? i2.forEach(function(e4, n3) {
                  e4 === t4.name && (l4(), u2[n3] = true);
                }) : l4(), s2.push(t4.name), o3 += c3;
              });
            }), !u2.every(function(t3) {
              return t3;
            }))
              throw c2 = i2.filter(function(t3, e4) {
                return !u2[e4];
              }), new Error("Could not find weights in manifest with names: " + c2.join(", ") + ". \nManifest JSON has weights with names: " + s2.join(", ") + ".");
            return l3 = e3.reduce(function(t3, e4, n3) {
              return e4 && t3.push(n3), t3;
            }, []), h2 = [], l3.forEach(function(t3) {
              o2[t3].paths.forEach(function(t4) {
                var e4 = a2 + (a2.endsWith("/") ? "" : "/") + t4;
                h2.push(e4);
              });
            }), [4, t2(h2)];
          case 1:
            return f2 = r2.sent(), p2 = {}, d2 = 0, l3.forEach(function(t3) {
              for (var e4 = o2[t3].paths.length, r3 = 0, a3 = 0; a3 < e4; a3++)
                r3 += f2[d2 + a3].byteLength;
              for (var i3 = new ArrayBuffer(r3), u3 = new Uint8Array(i3), s3 = 0, c3 = 0; c3 < e4; c3++) {
                var l4 = new Uint8Array(f2[d2 + c3]);
                u3.set(l4, s3), s3 += l4.byteLength;
              }
              n2[t3].forEach(function(t4) {
                var e5 = _h(i3.slice(t4.groupOffset, t4.groupOffset + t4.sizeBytes), [t4.manifestEntry]);
                for (var n3 in e5)
                  p2[n3] = e5[n3];
              }), d2 += e4;
            }), [2, p2];
        }
      });
    });
  };
}
function Cf(t2) {
  return null != t2.match(wf.URL_SCHEME_REGEX);
}
function Rf(t2, e2) {
  return new wf(t2, e2);
}
function _f(t2) {
  g(null != t2.className, function() {
    return "Class being registered does not have the static className property defined.";
  }), g("string" == typeof t2.className, function() {
    return "className is required to be a string, but got type " + typeof t2.className;
  }), g(t2.className.length > 0, function() {
    return "Class being registered has an empty-string as its className, which is disallowed.";
  }), Of.register(t2);
}
function Lf() {
  return 32 === Nt.backend.floatPrecision() ? Bf : Pf;
}
function Wf(t2, e2, n2) {
  var r2 = true;
  if ((B(t2) || B(e2)) && (r2 = false), B(t2) && B(e2) && (r2 = true), r2) {
    var o2 = t2.constructor.name, a2 = e2.constructor.name;
    if (o2 !== a2)
      throw new Error("Arrays are of different type. Actual: " + o2 + ". Expected: " + a2);
  }
  if (Array.isArray(t2) && Array.isArray(e2)) {
    var i2 = sn(t2), u2 = sn(e2);
    if (!C(i2, u2))
      throw new Error("Arrays have different shapes. Actual: [" + i2 + "]. Expected: [" + u2 + "]");
  }
  var s2 = B(t2) ? t2 : b(t2), c2 = B(e2) ? e2 : b(e2);
  if (s2.length !== c2.length)
    throw new Error("Arrays have different lengths actual: " + s2.length + " vs expected: " + c2.length + ".\nActual:   " + s2 + ".\nExpected: " + c2 + ".");
  for (var l3 = 0; l3 < c2.length; ++l3) {
    var h2 = s2[l3], f2 = c2[l3];
    if (!n2(h2, f2))
      throw new Error("Arrays differ: actual[" + l3 + "] = " + h2 + ", expected[" + l3 + "] = " + f2 + ".\nActual:   " + s2 + ".\nExpected: " + c2 + ".");
  }
}
function Uf(t2, e2, n2) {
  return !isFinite(t2) && !isFinite(e2) || !(isNaN(t2) || isNaN(e2) || Math.abs(t2 - e2) > n2);
}
function ep() {
  return new Promise(function(t2) {
    return tp(function() {
      return t2();
    });
  });
}
var t, o, i, u, tt, et, nt, rt, ot, at, lt, ht, ft, pt, dt, vt, mt, gt, yt, xt, bt, wt, St, At, Dt, Tt, Nt, Ot, _t, Mt, Bt, Pt, Lt, jt, Xt, te, ee, ne, Pe, Le, En, Rn, In, Vn, zn, Gn, Hn, qn, Kn, jn, Xn, Yn, Qn, Jn, Zn, tr, er, nr, rr, or, ar, ir, cr, lr, hr, fr, pr, dr, vr, mr, gr, yr, xr, br, wr, Cr, Er, Rr, Ir, kr, Sr, Ar, Dr, Tr, Nr, Fr, Or, _r, Vr, Jr, io, uo, so, co, To, Vo, zo, Go, $o, Zo, ta, ea, na, sa, ca, la, ha, fa, pa, da, va, ma, ga, ya, xa, ba, wa, Ca, Ea, Ra, Ia, ka, Sa, Da, Ta, Na, Fa, Oa, _a, Ma, Ba, Pa, La, Wa, Ua, za, Ga, Ha, qa, Ka, ja, Xa, $a, Ya, Qa, Ja, Za, ti, ei, ni, ri, wi, Ci, Ri, Ii, ki, Si, Ai, Di, Ti, Ni, Fi, Oi, _i, Mi, Bi, Pi, Li, Wi, Ui, Vi, zi, Gi, Hi, qi, Ki, ji, Xi, $i, Yi, Qi, Ji, Zi, tu, ru, ou, au, iu, uu, su, cu, lu, hu, fu, pu, du, vu, mu, gu, yu, xu, bu, wu, Cu, Eu, Ru, Iu, ku, Su, Au, Du, Tu, Nu, Fu, Ou, _u, Mu, Bu, Lu, Wu, Uu, Vu, zu, Gu, Hu, qu, Ku, ju, Xu, $u, Yu, Qu, Ju, Zu, ts, es, ns, rs, os, as, is, us, ss, cs, ls, hs, fs, ps, ds, vs, ms, gs, ys, xs, bs, Ss, As, Ds, Ts, Ns, Fs, Os, _s, Ms, Bs, Ps, Ls, Ws, Us, Vs, zs, Gs, Hs, qs, Ks, js, Xs, $s, Ys, Qs, Js, Zs, tc, ec, nc, rc, oc, ac, ic, uc, sc, cc, lc, hc, fc, pc, dc, vc, mc, gc, yc, xc, Cc, Ec, Rc, Ac, Dc, Tc, Nc, Fc, Oc, _c, Mc, Bc, Pc, Lc, Wc, Uc, Vc, zc, Gc, Hc, qc, Kc, $c, Yc, Qc, Jc, Zc, tl, el, nl, rl, ol, il, ul, sl, cl, ll, hl, fl, pl, dl, vl, ml, gl, yl, xl, bl, wl, Cl, El, Rl, Il, kl, Sl, Al, Dl, Tl, Nl, Fl, Ol, _l, Ml, Bl, Pl, Ll, Wl, Ul, zl, Gl, Hl, ql, Kl, jl, Xl, $l, Yl, Ql, Jl, Zl, th, eh, nh, rh, oh, ih, uh, sh, lh, hh, fh, ph, dh, vh, mh, gh, yh, xh, bh, wh, Ch, Eh, Rh, Sh, Ah, Dh, Th, Nh, Fh, Oh, Bh, Vh, zh, Gh, Kh, jh, Yh, Qh, Jh, Zh, tf, ef, nf, rf, of, af, cf, lf, hf, ff, pf, df, mf, gf, wf, Ef, If, kf, Sf, Af, Df, Tf, Nf, Ff, Of, Mf, Bf, Pf, Vf, zf, Gf, Hf, qf, Kf, jf, Xf, $f, Yf, Qf, Jf, Zf, tp;
var init_tf_core_esm = __esm({
  "node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js"() {
    t = function(e2, n2) {
      return (t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t2, e3) {
        t2.__proto__ = e3;
      } || function(t2, e3) {
        for (var n3 in e3)
          e3.hasOwnProperty(n3) && (t2[n3] = e3[n3]);
      })(e2, n2);
    };
    o = function() {
      function t2(t3) {
        this.global = t3, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.populateURLFlags();
      }
      return t2.prototype.setPlatform = function(t3, e2) {
        null != this.platform && console.warn("Platform " + this.platformName + " has already been set. Overwriting the platform with " + e2 + "."), this.platformName = t3, this.platform = e2;
      }, t2.prototype.registerFlag = function(t3, e2, n2) {
        if (this.flagRegistry[t3] = { evaluationFn: e2, setHook: n2 }, null != this.urlFlags[t3]) {
          var r2 = this.urlFlags[t3];
          console.warn("Setting feature override from URL " + t3 + ": " + r2 + "."), this.set(t3, r2);
        }
      }, t2.prototype.get = function(t3) {
        return t3 in this.flags ? this.flags[t3] : (this.flags[t3] = this.evaluateFlag(t3), this.flags[t3]);
      }, t2.prototype.getNumber = function(t3) {
        return this.get(t3);
      }, t2.prototype.getBool = function(t3) {
        return this.get(t3);
      }, t2.prototype.getFlags = function() {
        return this.flags;
      }, Object.defineProperty(t2.prototype, "features", { get: function() {
        return this.flags;
      }, enumerable: true, configurable: true }), t2.prototype.set = function(t3, e2) {
        if (null == this.flagRegistry[t3])
          throw new Error("Cannot set flag " + t3 + " as it has not been registered.");
        this.flags[t3] = e2, null != this.flagRegistry[t3].setHook && this.flagRegistry[t3].setHook(e2);
      }, t2.prototype.evaluateFlag = function(t3) {
        if (null == this.flagRegistry[t3])
          throw new Error("Cannot evaluate flag '" + t3 + "': no evaluation function found.");
        return this.flagRegistry[t3].evaluationFn();
      }, t2.prototype.setFlags = function(t3) {
        this.flags = Object.assign({}, t3);
      }, t2.prototype.reset = function() {
        this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
      }, t2.prototype.populateURLFlags = function() {
        var t3 = this;
        if (void 0 !== this.global && void 0 !== this.global.location && void 0 !== this.global.location.search) {
          var e2, n2, r2 = (e2 = this.global.location.search, n2 = {}, e2.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function(t4) {
            for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
              e3[r3 - 1] = arguments[r3];
            return function(t5, e4, n3) {
              t5[decodeURIComponent(e4)] = decodeURIComponent(n3 || "");
            }(n2, e3[0], e3[1]), e3.join("=");
          }), n2);
          if ("tfjsflags" in r2)
            r2.tfjsflags.split(",").forEach(function(e3) {
              var n3 = e3.split(":"), r3 = n3[0], o2 = n3[1];
              t3.urlFlags[r3] = function(t4, e4) {
                if ("true" === (e4 = e4.toLowerCase()) || "false" === e4)
                  return "true" === e4;
                if ("" + +e4 === e4)
                  return +e4;
                throw new Error("Could not parse value flag value " + e4 + " for flag " + t4 + ".");
              }(r3, o2);
            });
        }
      }, t2;
    }();
    i = null;
    u = /* @__PURE__ */ new Map();
    tt = Object.freeze({ shuffle: p, clamp: d, nearestLargerEven: v, sum: m, randUniform: function(t2, e2) {
      var n2 = Math.random();
      return e2 * n2 + (1 - n2) * t2;
    }, distSquared: function(t2, e2) {
      for (var n2 = 0, r2 = 0; r2 < t2.length; r2++) {
        var o2 = Number(t2[r2]) - Number(e2[r2]);
        n2 += o2 * o2;
      }
      return n2;
    }, assert: g, assertShapesMatch: y, assertNonNull: x, flatten: b, sizeFromShape: w, isScalarShape: function(t2) {
      return 0 === t2.length;
    }, arraysEqual: C, isInt: E, tanh: R, sizeToSquarishShape: I, createShuffledIndices: function(t2) {
      for (var e2 = new Uint32Array(t2), n2 = 0; n2 < t2; ++n2)
        e2[n2] = n2;
      return p(e2), e2;
    }, rightPad: k, repeatedTry: S, inferFromImplicitShape: A, parseAxisParam: D, squeezeShape: T, getTypedArrayFromDType: N, getArrayFromDType: F, checkConversionForErrors: O, isValidDtype: _, hasEncodingLoss: M, isTypedArray: B, bytesPerElement: P, bytesFromStringArray: L, isString: W, isBoolean: U, isNumber: V, inferDtype: z, isFunction: G, nearestDivisor: H, computeStrides: q, toTypedArray: K, toNestedArray: j, makeOnesTypedArray: X, makeZerosTypedArray: $, now: Y, assertNonNegativeIntegerDimensions: Q, fetch: function(t2, e2) {
      return a().platform.fetch(t2, e2);
    }, encodeString: J, decodeString: Z });
    et = function() {
      function t2(t3, e2) {
        this.backendTimer = t3, this.logger = e2, null == e2 && (this.logger = new nt());
      }
      return t2.prototype.profileKernel = function(t3, e2, n2) {
        var r2, o2 = this, a2 = this.backendTimer.time(function() {
          r2 = n2();
        });
        return r2.forEach(function(n3) {
          n3.data().then(function(r3) {
            !function(t4, e3, n4) {
              if ("float32" !== e3)
                return false;
              for (var r4 = 0; r4 < t4.length; r4++) {
                var o3 = t4[r4];
                if (isNaN(o3) || !isFinite(o3))
                  return console.warn("Found " + o3 + " in the result of '" + n4 + "'"), true;
              }
            }(r3, n3.dtype, t3), a2.then(function(a3) {
              var i2 = "";
              null != a3.getExtraProfileInfo && (i2 = a3.getExtraProfileInfo()), o2.logger.logKernelProfile(t3, n3, r3, a3.kernelMs, e2, i2);
            });
          });
        }), r2;
      }, t2;
    }();
    nt = function() {
      function t2() {
      }
      return t2.prototype.logKernelProfile = function(t3, e2, n2, r2, o2, a2) {
        var i2 = k(r2 + "ms", 9), u2 = k(t3, 25), s2 = e2.rank, c2 = e2.size, l3 = k(e2.shape.toString(), 14), h2 = "";
        for (var f2 in o2) {
          var p2 = o2[f2].shape, d2 = p2.length;
          h2 += f2 + ": " + d2 + "D " + (d2 > 0 ? p2 : "") + " ";
        }
        console.log("%c" + u2 + "	%c" + i2 + "	%c" + s2 + "D " + l3 + "	%c" + c2 + "	%c" + h2 + "	%c" + a2, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
      }, t2;
    }();
    rt = 20;
    ot = 3;
    at = 7;
    lt = function() {
      function t2(t3, e2, n2) {
        var r2 = this;
        if (this.dtype = e2, this.shape = t3.slice(), this.size = w(t3), null != n2) {
          var o2 = n2.length;
          g(o2 === this.size, function() {
            return "Length of values '" + o2 + "' does not match the size inferred by the shape '" + r2.size + "'.";
          });
        }
        if ("complex64" === e2)
          throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
        this.values = n2 || F(e2, this.size), this.strides = q(t3);
      }
      return t2.prototype.set = function(t3) {
        for (var e2 = this, n2 = [], r2 = 1; r2 < arguments.length; r2++)
          n2[r2 - 1] = arguments[r2];
        0 === n2.length && (n2 = [0]), g(n2.length === this.rank, function() {
          return "The number of provided coordinates (" + n2.length + ") must match the rank (" + e2.rank + ")";
        });
        var o2 = this.locToIndex(n2);
        this.values[o2] = t3;
      }, t2.prototype.get = function() {
        for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
          t3[e2] = arguments[e2];
        0 === t3.length && (t3 = [0]);
        for (var n2 = 0, r2 = 0, o2 = t3; r2 < o2.length; r2++) {
          var a2 = o2[r2];
          if (a2 < 0 || a2 >= this.shape[n2]) {
            var i2 = "Requested out of range element at " + t3 + ".   Buffer shape=" + this.shape;
            throw new Error(i2);
          }
          n2++;
        }
        for (var u2 = t3[t3.length - 1], s2 = 0; s2 < t3.length - 1; ++s2)
          u2 += this.strides[s2] * t3[s2];
        return this.values[u2];
      }, t2.prototype.locToIndex = function(t3) {
        if (0 === this.rank)
          return 0;
        if (1 === this.rank)
          return t3[0];
        for (var e2 = t3[t3.length - 1], n2 = 0; n2 < t3.length - 1; ++n2)
          e2 += this.strides[n2] * t3[n2];
        return e2;
      }, t2.prototype.indexToLoc = function(t3) {
        if (0 === this.rank)
          return [];
        if (1 === this.rank)
          return [t3];
        for (var e2 = new Array(this.shape.length), n2 = 0; n2 < e2.length - 1; ++n2)
          e2[n2] = Math.floor(t3 / this.strides[n2]), t3 -= e2[n2] * this.strides[n2];
        return e2[e2.length - 1] = t3, e2;
      }, Object.defineProperty(t2.prototype, "rank", { get: function() {
        return this.shape.length;
      }, enumerable: true, configurable: true }), t2.prototype.toTensor = function() {
        return ht().makeTensor(this.values, this.shape, this.dtype);
      }, t2;
    }();
    ht = null;
    ft = null;
    pt = null;
    dt = function() {
      function t2(t3, e2, n2, r2) {
        this.kept = false, this.isDisposedInternal = false, this.shape = t3.slice(), this.dtype = e2 || "float32", this.size = w(t3), this.strides = q(t3), this.dataId = n2, this.id = r2, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
      }
      return t2.prototype.flatten = function() {
        return this.throwIfDisposed(), this.as1D();
      }, t2.prototype.asScalar = function() {
        return this.throwIfDisposed(), g(1 === this.size, function() {
          return "The array must have only 1 element.";
        }), this.reshape([]);
      }, t2.prototype.as1D = function() {
        return this.throwIfDisposed(), this.reshape([this.size]);
      }, t2.prototype.as2D = function(t3, e2) {
        return this.throwIfDisposed(), this.reshape([t3, e2]);
      }, t2.prototype.as3D = function(t3, e2, n2) {
        return this.throwIfDisposed(), this.reshape([t3, e2, n2]);
      }, t2.prototype.as4D = function(t3, e2, n2, r2) {
        return this.throwIfDisposed(), this.reshape([t3, e2, n2, r2]);
      }, t2.prototype.as5D = function(t3, e2, n2, r2, o2) {
        return this.throwIfDisposed(), this.reshape([t3, e2, n2, r2, o2]);
      }, t2.prototype.asType = function(t3) {
        return this.throwIfDisposed(), ft.cast(this, t3);
      }, Object.defineProperty(t2.prototype, "rank", { get: function() {
        return this.shape.length;
      }, enumerable: true, configurable: true }), t2.prototype.buffer = function() {
        return n(this, void 0, void 0, function() {
          var t3;
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return [4, this.data()];
              case 1:
                return t3 = e2.sent(), [2, ft.buffer(this.shape, this.dtype, t3)];
            }
          });
        });
      }, t2.prototype.bufferSync = function() {
        return ft.buffer(this.shape, this.dtype, this.dataSync());
      }, t2.prototype.array = function() {
        return n(this, void 0, void 0, function() {
          var t3;
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return [4, this.data()];
              case 1:
                return t3 = e2.sent(), [2, j(this.shape, t3)];
            }
          });
        });
      }, t2.prototype.arraySync = function() {
        return j(this.shape, this.dataSync());
      }, t2.prototype.data = function() {
        return n(this, void 0, void 0, function() {
          var t3, e2;
          return r(this, function(n2) {
            switch (n2.label) {
              case 0:
                return this.throwIfDisposed(), t3 = ht().read(this.dataId), "string" !== this.dtype ? [3, 2] : [4, t3];
              case 1:
                e2 = n2.sent();
                try {
                  return [2, e2.map(function(t4) {
                    return Z(t4);
                  })];
                } catch (t4) {
                  throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
                }
                n2.label = 2;
              case 2:
                return [2, t3];
            }
          });
        });
      }, t2.prototype.dataSync = function() {
        this.throwIfDisposed();
        var t3 = ht().readSync(this.dataId);
        if ("string" === this.dtype)
          try {
            return t3.map(function(t4) {
              return Z(t4);
            });
          } catch (t4) {
            throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
          }
        return t3;
      }, t2.prototype.bytes = function() {
        return n(this, void 0, void 0, function() {
          var t3;
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return this.throwIfDisposed(), [4, ht().read(this.dataId)];
              case 1:
                return t3 = e2.sent(), "string" === this.dtype ? [2, t3] : [2, new Uint8Array(t3.buffer)];
            }
          });
        });
      }, t2.prototype.dispose = function() {
        this.isDisposed || (ht().disposeTensor(this), this.isDisposedInternal = true);
      }, Object.defineProperty(t2.prototype, "isDisposed", { get: function() {
        return this.isDisposedInternal;
      }, enumerable: true, configurable: true }), t2.prototype.throwIfDisposed = function() {
        if (this.isDisposed)
          throw new Error("Tensor is disposed.");
      }, t2.prototype.toFloat = function() {
        return this.asType("float32");
      }, t2.prototype.toInt = function() {
        return this.asType("int32");
      }, t2.prototype.toBool = function() {
        return this.asType("bool");
      }, t2.prototype.print = function(t3) {
        return void 0 === t3 && (t3 = false), ft.print(this, t3);
      }, t2.prototype.reshape = function(t3) {
        return this.throwIfDisposed(), ft.reshape(this, t3);
      }, t2.prototype.reshapeAs = function(t3) {
        return this.throwIfDisposed(), this.reshape(t3.shape);
      }, t2.prototype.expandDims = function(t3) {
        return void 0 === t3 && (t3 = 0), ft.expandDims(this, t3);
      }, t2.prototype.cumsum = function(t3, e2, n2) {
        return void 0 === t3 && (t3 = 0), void 0 === e2 && (e2 = false), void 0 === n2 && (n2 = false), ft.cumsum(this, t3, e2, n2);
      }, t2.prototype.squeeze = function(t3) {
        return this.throwIfDisposed(), ft.squeeze(this, t3);
      }, t2.prototype.clone = function() {
        return this.throwIfDisposed(), ft.clone(this);
      }, t2.prototype.oneHot = function(t3, e2, n2) {
        return this.throwIfDisposed(), ft.oneHot(this, t3, e2, n2);
      }, t2.prototype.toString = function(t3) {
        return void 0 === t3 && (t3 = false), it(this.dataSync(), this.shape, this.dtype, t3);
      }, t2.prototype.tile = function(t3) {
        return this.throwIfDisposed(), ft.tile(this, t3);
      }, t2.prototype.gather = function(t3, e2) {
        return void 0 === e2 && (e2 = 0), this.throwIfDisposed(), ft.gather(this, t3, e2);
      }, t2.prototype.matMul = function(t3, e2, n2) {
        return void 0 === e2 && (e2 = false), void 0 === n2 && (n2 = false), this.throwIfDisposed(), ft.matMul(this, t3, e2, n2);
      }, t2.prototype.dot = function(t3) {
        return this.throwIfDisposed(), ft.dot(this, t3);
      }, t2.prototype.norm = function(t3, e2, n2) {
        return void 0 === t3 && (t3 = "euclidean"), void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false), this.throwIfDisposed(), ft.norm(this, t3, e2, n2);
      }, t2.prototype.slice = function(t3, e2) {
        return this.throwIfDisposed(), ft.slice(this, t3, e2);
      }, t2.prototype.reverse = function(t3) {
        return this.throwIfDisposed(), ft.reverse(this, t3);
      }, t2.prototype.concat = function(e2, n2) {
        return void 0 === n2 && (n2 = 0), this.throwIfDisposed(), e2 instanceof t2 && (e2 = [e2]), ft.concat([this].concat(e2), n2);
      }, t2.prototype.split = function(t3, e2) {
        return void 0 === e2 && (e2 = 0), this.throwIfDisposed(), ft.split(this, t3, e2);
      }, t2.prototype.stack = function(t3, e2) {
        return void 0 === e2 && (e2 = 0), ft.stack([this, t3], e2);
      }, t2.prototype.unstack = function(t3) {
        return void 0 === t3 && (t3 = 0), ft.unstack(this, t3);
      }, t2.prototype.pad = function(t3, e2) {
        return void 0 === e2 && (e2 = 0), ft.pad(this, t3, e2);
      }, t2.prototype.batchNormalization = function(t3, e2, n2, r2, o2) {
        return void 0 === n2 && (n2 = 1e-3), pt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(t3, e2, o2, r2, n2);
      }, t2.prototype.batchNorm = function(t3, e2, n2, r2, o2) {
        return void 0 === o2 && (o2 = 1e-3), this.throwIfDisposed(), ft.batchNorm(this, t3, e2, n2, r2, o2);
      }, t2.prototype.all = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.all(this, t3, e2);
      }, t2.prototype.any = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.any(this, t3, e2);
      }, t2.prototype.logSumExp = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.logSumExp(this, t3, e2);
      }, t2.prototype.sum = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.sum(this, t3, e2);
      }, t2.prototype.prod = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.prod(this, t3, e2);
      }, t2.prototype.mean = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.mean(this, t3, e2);
      }, t2.prototype.min = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.min(this, t3, e2);
      }, t2.prototype.max = function(t3, e2) {
        return void 0 === t3 && (t3 = null), void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.max(this, t3, e2);
      }, t2.prototype.argMin = function(t3) {
        return void 0 === t3 && (t3 = null), this.throwIfDisposed(), ft.argMin(this, t3);
      }, t2.prototype.argMax = function(t3) {
        return void 0 === t3 && (t3 = null), this.throwIfDisposed(), ft.argMax(this, t3);
      }, t2.prototype.cast = function(t3) {
        return this.throwIfDisposed(), ft.cast(this, t3);
      }, t2.prototype.add = function(t3) {
        return this.throwIfDisposed(), ft.add(this, t3);
      }, t2.prototype.addStrict = function(t3) {
        return this.throwIfDisposed(), ft.addStrict(this, t3);
      }, t2.prototype.atan2 = function(t3) {
        return this.throwIfDisposed(), ft.atan2(this, t3);
      }, t2.prototype.sub = function(t3) {
        return this.throwIfDisposed(), ft.sub(this, t3);
      }, t2.prototype.subStrict = function(t3) {
        return this.throwIfDisposed(), ft.subStrict(this, t3);
      }, t2.prototype.pow = function(t3) {
        return this.throwIfDisposed(), ft.pow(this, t3);
      }, t2.prototype.powStrict = function(t3) {
        return this.throwIfDisposed(), ft.powStrict(this, t3);
      }, t2.prototype.mul = function(t3) {
        return this.throwIfDisposed(), ft.mul(this, t3);
      }, t2.prototype.mulStrict = function(t3) {
        return this.throwIfDisposed(), ft.mulStrict(this, t3);
      }, t2.prototype.div = function(t3) {
        return this.throwIfDisposed(), ft.div(this, t3);
      }, t2.prototype.floorDiv = function(t3) {
        return this.throwIfDisposed(), ft.floorDiv(this, t3);
      }, t2.prototype.divStrict = function(t3) {
        return this.throwIfDisposed(), ft.divStrict(this, t3);
      }, t2.prototype.minimum = function(t3) {
        return this.throwIfDisposed(), ft.minimum(this, t3);
      }, t2.prototype.minimumStrict = function(t3) {
        return this.throwIfDisposed(), ft.minimumStrict(this, t3);
      }, t2.prototype.maximum = function(t3) {
        return this.throwIfDisposed(), ft.maximum(this, t3);
      }, t2.prototype.maximumStrict = function(t3) {
        return this.throwIfDisposed(), ft.maximumStrict(this, t3);
      }, t2.prototype.mod = function(t3) {
        return this.throwIfDisposed(), ft.mod(this, t3);
      }, t2.prototype.modStrict = function(t3) {
        return this.throwIfDisposed(), ft.modStrict(this, t3);
      }, t2.prototype.squaredDifference = function(t3) {
        return this.throwIfDisposed(), ft.squaredDifference(this, t3);
      }, t2.prototype.squaredDifferenceStrict = function(t3) {
        return this.throwIfDisposed(), ft.squaredDifferenceStrict(this, t3);
      }, t2.prototype.transpose = function(t3) {
        return this.throwIfDisposed(), ft.transpose(this, t3);
      }, t2.prototype.notEqual = function(t3) {
        return this.throwIfDisposed(), ft.notEqual(this, t3);
      }, t2.prototype.notEqualStrict = function(t3) {
        return this.throwIfDisposed(), ft.notEqualStrict(this, t3);
      }, t2.prototype.less = function(t3) {
        return this.throwIfDisposed(), ft.less(this, t3);
      }, t2.prototype.lessStrict = function(t3) {
        return this.throwIfDisposed(), ft.lessStrict(this, t3);
      }, t2.prototype.equal = function(t3) {
        return this.throwIfDisposed(), ft.equal(this, t3);
      }, t2.prototype.equalStrict = function(t3) {
        return this.throwIfDisposed(), ft.equalStrict(this, t3);
      }, t2.prototype.lessEqual = function(t3) {
        return this.throwIfDisposed(), ft.lessEqual(this, t3);
      }, t2.prototype.lessEqualStrict = function(t3) {
        return this.throwIfDisposed(), ft.lessEqualStrict(this, t3);
      }, t2.prototype.greater = function(t3) {
        return this.throwIfDisposed(), ft.greater(this, t3);
      }, t2.prototype.greaterStrict = function(t3) {
        return this.throwIfDisposed(), ft.greaterStrict(this, t3);
      }, t2.prototype.greaterEqual = function(t3) {
        return this.throwIfDisposed(), ft.greaterEqual(this, t3);
      }, t2.prototype.greaterEqualStrict = function(t3) {
        return this.throwIfDisposed(), ft.greaterEqualStrict(this, t3);
      }, t2.prototype.logicalAnd = function(t3) {
        return this.throwIfDisposed(), ft.logicalAnd(this, t3);
      }, t2.prototype.logicalOr = function(t3) {
        return this.throwIfDisposed(), ft.logicalOr(this, t3);
      }, t2.prototype.logicalNot = function() {
        return this.throwIfDisposed(), ft.logicalNot(this);
      }, t2.prototype.logicalXor = function(t3) {
        return this.throwIfDisposed(), ft.logicalXor(this, t3);
      }, t2.prototype.where = function(t3, e2) {
        return this.throwIfDisposed(), ft.where(t3, this, e2);
      }, t2.prototype.neg = function() {
        return this.throwIfDisposed(), ft.neg(this);
      }, t2.prototype.ceil = function() {
        return this.throwIfDisposed(), ft.ceil(this);
      }, t2.prototype.floor = function() {
        return this.throwIfDisposed(), ft.floor(this);
      }, t2.prototype.sign = function() {
        return this.throwIfDisposed(), ft.sign(this);
      }, t2.prototype.isNaN = function() {
        return this.throwIfDisposed(), ft.isNaN(this);
      }, t2.prototype.isInf = function() {
        return this.throwIfDisposed(), ft.isInf(this);
      }, t2.prototype.isFinite = function() {
        return this.throwIfDisposed(), ft.isFinite(this);
      }, t2.prototype.exp = function() {
        return this.throwIfDisposed(), ft.exp(this);
      }, t2.prototype.expm1 = function() {
        return this.throwIfDisposed(), ft.expm1(this);
      }, t2.prototype.log = function() {
        return this.throwIfDisposed(), ft.log(this);
      }, t2.prototype.log1p = function() {
        return this.throwIfDisposed(), ft.log1p(this);
      }, t2.prototype.sqrt = function() {
        return this.throwIfDisposed(), ft.sqrt(this);
      }, t2.prototype.rsqrt = function() {
        return this.throwIfDisposed(), ft.rsqrt(this);
      }, t2.prototype.square = function() {
        return this.throwIfDisposed(), ft.square(this);
      }, t2.prototype.reciprocal = function() {
        return this.throwIfDisposed(), ft.reciprocal(this);
      }, t2.prototype.abs = function() {
        return this.throwIfDisposed(), ft.abs(this);
      }, t2.prototype.clipByValue = function(t3, e2) {
        return this.throwIfDisposed(), ft.clipByValue(this, t3, e2);
      }, t2.prototype.relu = function() {
        return this.throwIfDisposed(), ft.relu(this);
      }, t2.prototype.relu6 = function() {
        return this.throwIfDisposed(), ft.relu6(this);
      }, t2.prototype.elu = function() {
        return this.throwIfDisposed(), ft.elu(this);
      }, t2.prototype.selu = function() {
        return this.throwIfDisposed(), ft.selu(this);
      }, t2.prototype.leakyRelu = function(t3) {
        return void 0 === t3 && (t3 = 0.2), this.throwIfDisposed(), ft.leakyRelu(this, t3);
      }, t2.prototype.prelu = function(t3) {
        return this.throwIfDisposed(), ft.prelu(this, t3);
      }, t2.prototype.sigmoid = function() {
        return this.throwIfDisposed(), ft.sigmoid(this);
      }, t2.prototype.logSigmoid = function() {
        return this.throwIfDisposed(), ft.logSigmoid(this);
      }, t2.prototype.softplus = function() {
        return this.throwIfDisposed(), ft.softplus(this);
      }, t2.prototype.zerosLike = function() {
        return this.throwIfDisposed(), ft.zerosLike(this);
      }, t2.prototype.onesLike = function() {
        return this.throwIfDisposed(), ft.onesLike(this);
      }, t2.prototype.sin = function() {
        return this.throwIfDisposed(), ft.sin(this);
      }, t2.prototype.cos = function() {
        return this.throwIfDisposed(), ft.cos(this);
      }, t2.prototype.tan = function() {
        return this.throwIfDisposed(), ft.tan(this);
      }, t2.prototype.asin = function() {
        return this.throwIfDisposed(), ft.asin(this);
      }, t2.prototype.acos = function() {
        return this.throwIfDisposed(), ft.acos(this);
      }, t2.prototype.atan = function() {
        return this.throwIfDisposed(), ft.atan(this);
      }, t2.prototype.sinh = function() {
        return this.throwIfDisposed(), ft.sinh(this);
      }, t2.prototype.cosh = function() {
        return this.throwIfDisposed(), ft.cosh(this);
      }, t2.prototype.tanh = function() {
        return this.throwIfDisposed(), ft.tanh(this);
      }, t2.prototype.asinh = function() {
        return this.throwIfDisposed(), ft.asinh(this);
      }, t2.prototype.acosh = function() {
        return this.throwIfDisposed(), ft.acosh(this);
      }, t2.prototype.atanh = function() {
        return this.throwIfDisposed(), ft.atanh(this);
      }, t2.prototype.erf = function() {
        return this.throwIfDisposed(), ft.erf(this);
      }, t2.prototype.round = function() {
        return this.throwIfDisposed(), ft.round(this);
      }, t2.prototype.step = function(t3) {
        return void 0 === t3 && (t3 = 0), this.throwIfDisposed(), ft.step(this, t3);
      }, t2.prototype.softmax = function(t3) {
        return void 0 === t3 && (t3 = -1), this.throwIfDisposed(), ft.softmax(this, t3);
      }, t2.prototype.logSoftmax = function(t3) {
        return void 0 === t3 && (t3 = -1), this.throwIfDisposed(), ft.logSoftmax(this, t3);
      }, t2.prototype.resizeBilinear = function(t3, e2) {
        return void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.image.resizeBilinear(this, t3, e2);
      }, t2.prototype.resizeNearestNeighbor = function(t3, e2) {
        return void 0 === e2 && (e2 = false), this.throwIfDisposed(), ft.image.resizeNearestNeighbor(this, t3, e2);
      }, t2.prototype.conv1d = function(t3, e2, n2, r2, o2, a2) {
        return void 0 === r2 && (r2 = "NWC"), void 0 === o2 && (o2 = 1), this.throwIfDisposed(), ft.conv1d(this, t3, e2, n2, r2, o2, a2);
      }, t2.prototype.conv2d = function(t3, e2, n2, r2, o2, a2) {
        return void 0 === r2 && (r2 = "NHWC"), void 0 === o2 && (o2 = [1, 1]), this.throwIfDisposed(), ft.conv2d(this, t3, e2, n2, r2, o2, a2);
      }, t2.prototype.conv2dTranspose = function(t3, e2, n2, r2, o2) {
        return this.throwIfDisposed(), ft.conv2dTranspose(this, t3, e2, n2, r2, o2);
      }, t2.prototype.depthwiseConv2D = function(t3, e2, n2, r2, o2, a2) {
        return void 0 === r2 && (r2 = "NHWC"), void 0 === o2 && (o2 = [1, 1]), this.throwIfDisposed(), ft.depthwiseConv2d(this, t3, e2, n2, r2, o2, a2);
      }, t2.prototype.separableConv2d = function(t3, e2, n2, r2, o2, a2) {
        return void 0 === o2 && (o2 = [1, 1]), void 0 === a2 && (a2 = "NHWC"), this.throwIfDisposed(), ft.separableConv2d(this, t3, e2, n2, r2, o2, a2);
      }, t2.prototype.avgPool = function(t3, e2, n2, r2) {
        return this.throwIfDisposed(), ft.avgPool(this, t3, e2, n2, r2);
      }, t2.prototype.maxPool = function(t3, e2, n2, r2) {
        return this.throwIfDisposed(), ft.maxPool(this, t3, e2, n2, r2);
      }, t2.prototype.localResponseNormalization = function(t3, e2, n2, r2) {
        return void 0 === t3 && (t3 = 5), void 0 === e2 && (e2 = 1), void 0 === n2 && (n2 = 1), void 0 === r2 && (r2 = 0.5), ft.localResponseNormalization(this, t3, e2, n2, r2);
      }, t2.prototype.pool = function(t3, e2, n2, r2, o2) {
        return this.throwIfDisposed(), ft.pool(this, t3, e2, n2, r2, o2);
      }, t2.prototype.variable = function(t3, e2, n2) {
        return void 0 === t3 && (t3 = true), this.throwIfDisposed(), ht().makeVariable(this, t3, e2, n2);
      }, t2.prototype.unsortedSegmentSum = function(t3, e2) {
        return this.throwIfDisposed(), ft.unsortedSegmentSum(this, t3, e2);
      }, t2.prototype.batchToSpaceND = function(t3, e2) {
        return this.throwIfDisposed(), ft.batchToSpaceND(this, t3, e2);
      }, t2.prototype.spaceToBatchND = function(t3, e2) {
        return this.throwIfDisposed(), ft.spaceToBatchND(this, t3, e2);
      }, t2.prototype.topk = function(t3, e2) {
        return void 0 === t3 && (t3 = 1), void 0 === e2 && (e2 = true), this.throwIfDisposed(), ft.topk(this, t3, e2);
      }, t2.prototype.stridedSlice = function(t3, e2, n2, r2, o2, a2, i2, u2) {
        return void 0 === r2 && (r2 = 0), void 0 === o2 && (o2 = 0), void 0 === a2 && (a2 = 0), void 0 === i2 && (i2 = 0), void 0 === u2 && (u2 = 0), this.throwIfDisposed(), ft.stridedSlice(this, t3, e2, n2, r2, o2, a2, i2, u2);
      }, t2.prototype.depthToSpace = function(t3, e2) {
        return this.throwIfDisposed(), ft.depthToSpace(this, t3, e2);
      }, t2.prototype.fft = function() {
        return this.throwIfDisposed(), ft.spectral.fft(this);
      }, t2.prototype.ifft = function() {
        return this.throwIfDisposed(), ft.spectral.ifft(this);
      }, t2.prototype.rfft = function() {
        return this.throwIfDisposed(), ft.spectral.rfft(this);
      }, t2.prototype.irfft = function() {
        return this.throwIfDisposed(), ft.spectral.irfft(this);
      }, t2;
    }();
    Object.defineProperty(dt, Symbol.hasInstance, { value: function(t2) {
      return !!t2 && null != t2.dataId && null != t2.shape && null != t2.dtype;
    } });
    bt = function(t2) {
      function n2(e2, n3, r2, o2) {
        var a2 = t2.call(this, e2.shape, e2.dtype, e2.dataId, o2) || this;
        return a2.trainable = n3, a2.name = r2, a2;
      }
      return e(n2, t2), n2.prototype.assign = function(t3) {
        if (t3.dtype !== this.dtype)
          throw new Error("dtype of the new value (" + t3.dtype + ") and previous value (" + this.dtype + ") must match");
        if (!C(t3.shape, this.shape))
          throw new Error("shape of the new value (" + t3.shape + ") and previous value (" + this.shape + ") must match");
        ht().disposeTensor(this), this.dataId = t3.dataId, ht().incRef(this, null);
      }, n2.prototype.dispose = function() {
        ht().disposeVariable(this), this.isDisposedInternal = true;
      }, n2;
    }(dt);
    Object.defineProperty(bt, Symbol.hasInstance, { value: function(t2) {
      return t2 instanceof dt && null != t2.assign && t2.assign instanceof Function;
    } }), function(t2) {
      t2.R0 = "R0", t2.R1 = "R1", t2.R2 = "R2", t2.R3 = "R3", t2.R4 = "R4", t2.R5 = "R5", t2.R6 = "R6";
    }(vt || (vt = {})), function(t2) {
      t2.float32 = "float32", t2.int32 = "int32", t2.bool = "int32", t2.complex64 = "complex64";
    }(mt || (mt = {})), function(t2) {
      t2.float32 = "float32", t2.int32 = "int32", t2.bool = "bool", t2.complex64 = "complex64";
    }(gt || (gt = {})), function(t2) {
      t2.float32 = "float32", t2.int32 = "float32", t2.bool = "float32", t2.complex64 = "complex64";
    }(yt || (yt = {})), function(t2) {
      t2.float32 = "complex64", t2.int32 = "complex64", t2.bool = "complex64", t2.complex64 = "complex64";
    }(xt || (xt = {}));
    wt = { float32: yt, int32: mt, bool: gt, complex64: xt };
    At = Object.freeze({ makeTypesMatch: Rt, assertTypesMatch: It, isTensorInList: function(t2, e2) {
      for (var n2 = 0; n2 < e2.length; n2++)
        if (e2[n2].id === t2.id)
          return true;
      return false;
    }, getTensorsInContainer: kt });
    Dt = function() {
      function t2() {
        this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null };
      }
      return t2.prototype.dispose = function() {
        for (var t3 in this.registeredVariables)
          this.registeredVariables[t3].dispose();
      }, t2;
    }();
    Tt = function() {
      function t2(t3) {
        this.ENV = t3, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Dt();
      }
      return t2.prototype.ready = function() {
        return n(this, void 0, void 0, function() {
          var t3, e2, n2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                if (null != this.pendingBackendInit)
                  return [2, this.pendingBackendInit.then(function() {
                  })];
                if (null != this.backendInstance)
                  return [2];
                t3 = this.getSortedBackends(), e2 = 0, r2.label = 1;
              case 1:
                return e2 < t3.length ? (n2 = t3[e2], [4, this.initializeBackend(n2).success]) : [3, 5];
              case 2:
                return r2.sent() ? [4, this.setBackend(n2)] : [3, 4];
              case 3:
                return r2.sent(), [2];
              case 4:
                return e2++, [3, 1];
              case 5:
                throw new Error("Could not initialize any backends, all backend initializations failed.");
            }
          });
        });
      }, Object.defineProperty(t2.prototype, "backend", { get: function() {
        if (null != this.pendingBackendInit)
          throw new Error("Backend '" + this.backendName + "' has not yet been initialized. Make sure to await tf.ready() before calling other methods");
        if (null == this.backendInstance) {
          var t3 = this.initializeBackendsAndReturnBest(), e2 = t3.name;
          if (t3.asyncInit)
            throw new Error("The highest priority backend '" + e2 + "' has not yet been initialized. Make sure to await tf.ready() before calling other methods");
          this.setBackend(e2);
        }
        return this.backendInstance;
      }, enumerable: true, configurable: true }), t2.prototype.backendNames = function() {
        return Object.keys(this.registryFactory);
      }, t2.prototype.findBackend = function(t3) {
        if (!(t3 in this.registry)) {
          if (!(t3 in this.registryFactory))
            return null;
          if (this.initializeBackend(t3).asyncInit)
            return null;
        }
        return this.registry[t3];
      }, t2.prototype.findBackendFactory = function(t3) {
        return t3 in this.registryFactory ? this.registryFactory[t3].factory : null;
      }, t2.prototype.registerBackend = function(t3, e2, n2) {
        return void 0 === n2 && (n2 = 1), t3 in this.registryFactory ? (console.warn(t3 + " backend was already registered. Reusing existing backend factory."), false) : (this.registryFactory[t3] = { factory: e2, priority: n2 }, true);
      }, t2.prototype.setBackend = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2, o2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                if (null == this.registryFactory[t3])
                  throw new Error("Backend name '" + t3 + "' not found in registry");
                return this.backendName = t3, null != this.registry[t3] ? [3, 4] : (this.backendInstance = null, e2 = this.initializeBackend(t3), n2 = e2.success, e2.asyncInit ? [4, n2] : [3, 2]);
              case 1:
                return o2 = r2.sent(), [3, 3];
              case 2:
                o2 = n2, r2.label = 3;
              case 3:
                if (!o2)
                  return [2, false];
                r2.label = 4;
              case 4:
                return this.backendInstance = this.registry[t3], this.setupRegisteredKernels(), this.profiler = new et(this.backendInstance), [2, true];
            }
          });
        });
      }, t2.prototype.setupRegisteredKernels = function() {
        var t3 = this;
        c(this.backendName).forEach(function(e2) {
          null != e2.setupFunc && e2.setupFunc(t3.backendInstance);
        });
      }, t2.prototype.disposeRegisteredKernels = function(t3) {
        var e2 = this;
        c(t3).forEach(function(n2) {
          null != n2.disposeFunc && n2.disposeFunc(e2.registry[t3]);
        });
      }, t2.prototype.initializeBackend = function(t3) {
        var e2 = this, n2 = this.registryFactory[t3];
        if (null == n2)
          throw new Error("Cannot initialize backend " + t3 + ", no registration found.");
        try {
          var r2 = n2.factory();
          if (Promise.resolve(r2) === r2) {
            var o2 = ++this.pendingBackendInitId, a2 = r2.then(function(n3) {
              return !(o2 < e2.pendingBackendInitId) && (e2.registry[t3] = n3, e2.pendingBackendInit = null, true);
            }).catch(function(n3) {
              return !(o2 < e2.pendingBackendInitId) && (e2.pendingBackendInit = null, console.warn("Initialization of backend " + t3 + " failed"), console.warn(n3.stack || n3.message), false);
            });
            return this.pendingBackendInit = a2, { success: a2, asyncInit: true };
          }
          return this.registry[t3] = r2, { success: true, asyncInit: false };
        } catch (e3) {
          return console.warn("Initialization of backend " + t3 + " failed"), console.warn(e3.stack || e3.message), { success: false, asyncInit: false };
        }
      }, t2.prototype.removeBackend = function(t3) {
        if (!(t3 in this.registryFactory))
          throw new Error(t3 + " backend not found in registry");
        this.backendName === t3 && null != this.pendingBackendInit && this.pendingBackendInitId++, t3 in this.registry && (this.disposeRegisteredKernels(t3), this.registry[t3].dispose(), delete this.registry[t3]), delete this.registryFactory[t3], this.backendName === t3 && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
      }, t2.prototype.getSortedBackends = function() {
        var t3 = this;
        if (0 === Object.keys(this.registryFactory).length)
          throw new Error("No backend found in registry.");
        return Object.keys(this.registryFactory).sort(function(e2, n2) {
          return t3.registryFactory[n2].priority - t3.registryFactory[e2].priority;
        });
      }, t2.prototype.initializeBackendsAndReturnBest = function() {
        for (var t3 = this.getSortedBackends(), e2 = 0; e2 < t3.length; e2++) {
          var n2 = t3[e2], r2 = this.initializeBackend(n2), o2 = r2.success, a2 = r2.asyncInit;
          if (a2 || o2)
            return { name: n2, asyncInit: a2 };
        }
        throw new Error("Could not initialize any backends, all backend initializations failed.");
      }, t2.prototype.moveData = function(t3, e2) {
        var n2 = this.state.tensorInfo.get(e2), r2 = n2.backend, o2 = this.readSync(e2);
        r2.disposeData(e2), n2.backend = t3, t3.move(e2, o2, n2.shape, n2.dtype), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
      }, t2.prototype.tidy = function(t3, e2) {
        var n2, r2 = this, o2 = null;
        if (null == e2) {
          if ("function" != typeof t3)
            throw new Error("Please provide a function to tidy()");
          e2 = t3;
        } else {
          if ("string" != typeof t3 && !(t3 instanceof String))
            throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
          if ("function" != typeof e2)
            throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
          o2 = t3;
        }
        return this.scopedRun(function() {
          return r2.startScope(o2);
        }, function() {
          return r2.endScope(n2);
        }, function() {
          return (n2 = e2()) instanceof Promise && console.error("Cannot return a Promise inside of tidy."), n2;
        });
      }, t2.prototype.scopedRun = function(t3, e2, n2) {
        t3();
        try {
          var r2 = n2();
          return e2(), r2;
        } catch (t4) {
          throw e2(), t4;
        }
      }, t2.prototype.nextTensorId = function() {
        return t2.nextTensorId++;
      }, t2.prototype.nextVariableId = function() {
        return t2.nextVariableId++;
      }, t2.prototype.clone = function(t3) {
        var e2 = this.makeTensorFromDataId(t3.dataId, t3.shape, t3.dtype), n2 = { x: t3 };
        return this.addTapeNode(this.state.activeScope.name, n2, [e2], function(t4) {
          return { x: function() {
            return t4.toFloat();
          } };
        }, []), e2;
      }, t2.prototype.runKernel = function(t3, e2, n2, r2, o2) {
        return this.runKernelFunc(null, e2, null, t3, n2, r2, o2);
      }, t2.prototype.shouldCheckForMemLeaks = function() {
        return this.ENV.getBool("IS_TEST");
      }, t2.prototype.checkKernelForMemLeak = function(t3, e2, n2) {
        var r2 = this.backend.numDataIds(), o2 = 0;
        n2.forEach(function(t4) {
          o2 += "complex64" === t4.dtype ? 3 : 1;
        });
        var a2 = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i2 = r2 - e2 - o2 - a2;
        if (i2 > 0)
          throw new Error("Backend '" + this.backendName + "' has an internal memory leak (" + i2 + " data ids) after running '" + t3 + "'");
      }, t2.prototype.runKernelFunc = function(t3, e2, n2, r2, o2, a2, i2) {
        var u2, c2 = this;
        void 0 === a2 && (a2 = []), void 0 === i2 && (i2 = []);
        var l3, h2 = [], f2 = this.isTapeOn(), p2 = null != this.state.activeScope ? this.state.activeScope.name : "", d2 = function(t4) {
          f2 && (h2 = t4.map(function(t5) {
            return c2.keep(c2.clone(t5));
          }));
        }, v2 = this.state.numBytes, m2 = this.state.numTensors;
        this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
        var g2, y2 = s(r2, this.backendName);
        return l3 = null != y2 ? function() {
          var t4 = c2.backend.numDataIds();
          g2 = y2.kernelFunc({ inputs: e2, attrs: o2, backend: c2.backend });
          var n3 = Array.isArray(g2) ? g2 : [g2];
          c2.shouldCheckForMemLeaks() && c2.checkKernelForMemLeak(p2, t4, n3);
          var r3 = n3.map(function(t5) {
            var e3 = t5.dataId, n4 = t5.shape, r4 = t5.dtype;
            return c2.makeTensorFromDataId(e3, n4, r4);
          }), u3 = r3.filter(function(t5, e3) {
            return i2[e3];
          });
          return d2(a2.slice().concat(u3)), r3;
        } : function() {
          var e3 = c2.backend.numDataIds();
          g2 = c2.tidy(function() {
            return t3(c2.backend, d2);
          });
          var n3 = Array.isArray(g2) ? g2 : [g2];
          return c2.shouldCheckForMemLeaks() && c2.checkKernelForMemLeak(p2, e3, n3), n3;
        }, this.scopedRun(function() {
          return c2.state.kernelDepth++;
        }, function() {
          return c2.state.kernelDepth--;
        }, function() {
          u2 = c2.ENV.getBool("DEBUG") ? c2.profiler.profileKernel(p2, e2, function() {
            return l3();
          }) : l3();
        }), f2 && this.addTapeNode(p2, e2, u2, n2, h2), this.state.profiling && this.state.activeProfile.kernels.push({ name: p2, bytesAdded: this.state.numBytes - v2, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - m2, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(e2).map(function(t4) {
          return e2[t4].shape;
        }), outputShapes: u2.map(function(t4) {
          return t4.shape;
        }) }), Array.isArray(g2) ? u2 : u2[0];
      }, t2.prototype.makeTensor = function(t3, e2, n2, r2) {
        if (null == t3)
          throw new Error("Values passed to engine.makeTensor() are null");
        n2 = n2 || "float32", r2 = r2 || this.backend;
        var o2 = t3;
        "string" === n2 && W(t3[0]) && (o2 = t3.map(function(t4) {
          return J(t4);
        }));
        var a2 = r2.write(o2, e2, n2), i2 = new dt(e2, n2, a2, this.nextTensorId());
        if (this.incRef(i2, r2), "string" === n2) {
          var u2 = this.state.tensorInfo.get(a2), s2 = L(o2);
          this.state.numBytes += s2 - u2.bytes, u2.bytes = s2;
        }
        return i2;
      }, t2.prototype.makeTensorFromDataId = function(t3, e2, n2, r2) {
        var o2 = new dt(e2, n2 = n2 || "float32", t3, this.nextTensorId());
        return this.incRef(o2, r2), o2;
      }, t2.prototype.makeVariable = function(t3, e2, n2, r2) {
        void 0 === e2 && (e2 = true), n2 = n2 || this.nextVariableId().toString(), null != r2 && r2 !== t3.dtype && (t3 = t3.asType(r2));
        var o2 = new bt(t3, e2, n2, this.nextTensorId());
        if (null != this.state.registeredVariables[o2.name])
          throw new Error("Variable with name " + o2.name + " was already registered");
        return this.state.registeredVariables[o2.name] = o2, this.incRef(o2, this.backend), o2;
      }, t2.prototype.incRef = function(t3, e2) {
        var n2 = this.state.tensorInfo.has(t3.dataId) ? this.state.tensorInfo.get(t3.dataId).refCount : 0;
        if (this.state.numTensors++, "string" === t3.dtype && this.state.numStringTensors++, 0 === n2) {
          this.state.numDataBuffers++;
          var r2 = 0;
          "complex64" !== t3.dtype && "string" !== t3.dtype && (r2 = t3.size * P(t3.dtype)), this.state.tensorInfo.set(t3.dataId, { backend: e2 || this.backend, dtype: t3.dtype, shape: t3.shape, bytes: r2, refCount: 0 }), this.state.numBytes += r2;
        }
        this.state.tensorInfo.get(t3.dataId).refCount++, t3 instanceof bt || this.track(t3);
      }, t2.prototype.disposeTensor = function(t3) {
        if (this.state.tensorInfo.has(t3.dataId)) {
          this.state.numTensors--, "string" === t3.dtype && this.state.numStringTensors--;
          var e2 = this.state.tensorInfo.get(t3.dataId);
          e2.refCount <= 1 ? ("complex64" !== t3.dtype && (this.state.numBytes -= e2.bytes), this.state.numDataBuffers--, e2.backend.disposeData(t3.dataId), this.state.tensorInfo.delete(t3.dataId)) : this.state.tensorInfo.get(t3.dataId).refCount--;
        }
      }, t2.prototype.disposeVariables = function() {
        for (var t3 in this.state.registeredVariables) {
          var e2 = this.state.registeredVariables[t3];
          this.disposeVariable(e2);
        }
      }, t2.prototype.disposeVariable = function(t3) {
        this.disposeTensor(t3), null != this.state.registeredVariables[t3.name] && delete this.state.registeredVariables[t3.name];
      }, t2.prototype.memory = function() {
        var t3 = this.backend.memory();
        return t3.numTensors = this.state.numTensors, t3.numDataBuffers = this.state.numDataBuffers, t3.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t3.unreliable = true, null == t3.reasons && (t3.reasons = []), t3.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t3;
      }, t2.prototype.profile = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2;
          return r(this, function(r2) {
            return this.state.profiling = true, e2 = this.state.numBytes, n2 = this.state.numTensors, this.state.activeProfile.kernels = [], this.state.activeProfile.result = t3(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max.apply(Math, this.state.activeProfile.kernels.map(function(t4) {
              return t4.totalBytesSnapshot;
            })), this.state.activeProfile.newBytes = this.state.numBytes - e2, this.state.activeProfile.newTensors = this.state.numTensors - n2, [2, this.state.activeProfile];
          });
        });
      }, t2.prototype.isTapeOn = function() {
        return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;
      }, t2.prototype.addTapeNode = function(t3, e2, n2, r2, o2) {
        var a2 = this, i2 = { id: this.state.nextTapeNodeId++, name: t3, inputs: e2, outputs: n2, saved: o2 };
        null != r2 && (i2.gradient = function(t4) {
          return t4 = t4.map(function(t5, e3) {
            if (null == t5) {
              var r3 = n2[e3], o3 = $(r3.size, r3.dtype);
              return a2.makeTensor(o3, r3.shape, r3.dtype);
            }
            return t5;
          }), r2(t4.length > 1 ? t4 : t4[0], o2);
        }), this.state.activeTape.push(i2);
      }, t2.prototype.keep = function(t3) {
        return t3.kept = true, t3;
      }, t2.prototype.startTape = function() {
        0 === this.state.gradientDepth && (this.state.activeTape = []), this.state.gradientDepth++;
      }, t2.prototype.endTape = function() {
        this.state.gradientDepth--;
      }, t2.prototype.startScope = function(t3) {
        var e2 = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
        t3 && (e2.name = t3), this.state.scopeStack.push(e2), this.state.activeScope = e2;
      }, t2.prototype.endScope = function(t3) {
        for (var e2 = this, n2 = kt(t3), r2 = new Set(n2.map(function(t4) {
          return t4.id;
        })), o2 = 0; o2 < this.state.activeScope.track.length; o2++) {
          var a2 = this.state.activeScope.track[o2];
          a2.kept || r2.has(a2.id) || a2.dispose();
        }
        var i2 = this.state.scopeStack.pop();
        this.state.activeScope = 0 === this.state.scopeStack.length ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n2.forEach(function(t4) {
          t4.kept || t4.scopeId !== i2.id || e2.track(t4);
        });
      }, t2.prototype.gradients = function(t3, e2, n2, r2) {
        var o2 = this;
        if (void 0 === r2 && (r2 = false), g(e2.length > 0, function() {
          return "gradients() received an empty list of xs.";
        }), null != n2 && "float32" !== n2.dtype)
          throw new Error("dy must have 'float32' dtype, but has '" + n2.dtype + "'");
        var a2 = this.scopedRun(function() {
          return o2.startTape();
        }, function() {
          return o2.endTape();
        }, function() {
          return o2.tidy("forward", t3);
        });
        g(a2 instanceof dt, function() {
          return "The result y returned by f() must be a tensor.";
        });
        var i2 = function(t4, e3, n3) {
          for (var r3 = {}, o3 = {}, a3 = 0; a3 < e3.length; a3++)
            r3[e3[a3].id] = true;
          for (a3 = 0; a3 < t4.length; a3++) {
            var i3 = (d2 = t4[a3]).inputs;
            for (var u2 in i3) {
              for (var s2 = i3[u2], c2 = false, l3 = 0; l3 < e3.length; l3++)
                if (r3[s2.id]) {
                  d2.outputs.forEach(function(t5) {
                    return r3[t5.id] = true;
                  }), c2 = true, o3[d2.id] = true;
                  break;
                }
              if (c2)
                break;
            }
          }
          var h2 = {};
          h2[n3.id] = true;
          var f2 = {};
          for (a3 = t4.length - 1; a3 >= 0; a3--)
            for (i3 = (d2 = t4[a3]).inputs, l3 = 0; l3 < d2.outputs.length; l3++)
              if (h2[d2.outputs[l3].id]) {
                for (var u2 in i3)
                  h2[i3[u2].id] = true, f2[d2.id] = true;
                break;
              }
          var p2 = [];
          for (a3 = 0; a3 < t4.length; a3++) {
            var d2;
            if (o3[(d2 = t4[a3]).id] && f2[d2.id]) {
              var v2 = {};
              for (var u2 in d2.inputs) {
                var m2 = d2.inputs[u2];
                r3[m2.id] && (v2[u2] = m2);
              }
              var g2 = Object.assign({}, d2);
              g2.inputs = v2, g2.outputs = d2.outputs, p2.push(g2);
            }
          }
          return p2;
        }(this.state.activeTape, e2, a2);
        if (!r2 && 0 === i2.length && e2.length > 0)
          throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
        return this.tidy("backward", function() {
          var t4, r3, u2 = {};
          u2[a2.id] = null == n2 ? (t4 = a2.shape, r3 = X(w(t4), "float32"), Nt.makeTensor(r3, t4, "float32")) : n2, function(t5, e3, n3) {
            for (var r4 = function(r5) {
              var o4 = e3[r5], a3 = [];
              if (o4.outputs.forEach(function(e4) {
                var n4 = t5[e4.id];
                null != n4 ? a3.push(n4) : a3.push(null);
              }), null == o4.gradient)
                throw new Error("Cannot compute gradient: gradient function not found for " + o4.name + ".");
              var i3 = o4.gradient(a3), u3 = function(e4) {
                if (!(e4 in i3))
                  throw new Error("Cannot backprop through input " + e4 + ". Available gradients found: " + Object.keys(i3) + ".");
                var r6 = n3(function() {
                  return i3[e4]();
                });
                if ("float32" !== r6.dtype)
                  throw new Error("Error in gradient for op " + o4.name + ". The gradient of input " + e4 + " must have 'float32' dtype, but has '" + r6.dtype + "'");
                var a4 = o4.inputs[e4];
                if (!C(r6.shape, a4.shape))
                  throw new Error("Error in gradient for op " + o4.name + ". The gradient of input '" + e4 + "' has shape '" + r6.shape + "', which does not match the shape of the input '" + a4.shape + "'");
                if (null == t5[a4.id])
                  t5[a4.id] = r6;
                else {
                  var u4 = t5[a4.id];
                  t5[a4.id] = u4.add(r6), u4.dispose();
                }
              };
              for (var s3 in o4.inputs)
                u3(s3);
            }, o3 = e3.length - 1; o3 >= 0; o3--)
              r4(o3);
          }(u2, i2, function(t5) {
            return o2.tidy(t5);
          });
          var s2 = e2.map(function(t5) {
            return u2[t5.id];
          });
          return 0 === o2.state.gradientDepth && (o2.state.activeTape.forEach(function(t5) {
            for (var e3 in t5.saved)
              t5.saved[e3].dispose();
          }), o2.state.activeTape = null), { value: a2, grads: s2 };
        });
      }, t2.prototype.customGrad = function(t3) {
        var e2 = this;
        return g(G(t3), function() {
          return "The f passed in customGrad(f) must be a function.";
        }), function() {
          for (var n2, r2 = [], o2 = 0; o2 < arguments.length; o2++)
            r2[o2] = arguments[o2];
          g(r2.every(function(t4) {
            return t4 instanceof dt;
          }), function() {
            return "The args passed in customGrad(f)(x1, x2,...) must all be tensors";
          });
          var a2 = {};
          return r2.forEach(function(t4, e3) {
            a2[e3] = t4;
          }), e2.runKernelFunc(function(e3, o3) {
            return g((n2 = t3.apply(void 0, r2.concat([o3]))).value instanceof dt, function() {
              return "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor";
            }), g(G(n2.gradFunc), function() {
              return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.";
            }), n2.value;
          }, a2, function(t4, e3) {
            var o3 = n2.gradFunc(t4, e3), a3 = Array.isArray(o3) ? o3 : [o3];
            g(a3.length === r2.length, function() {
              return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).";
            }), g(a3.every(function(t5) {
              return t5 instanceof dt;
            }), function() {
              return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.";
            });
            var i2 = {};
            return a3.forEach(function(t5, e4) {
              i2[e4] = function() {
                return t5;
              };
            }), i2;
          });
        };
      }, t2.prototype.readSync = function(t3) {
        return this.state.tensorInfo.get(t3).backend.readSync(t3);
      }, t2.prototype.read = function(t3) {
        return this.state.tensorInfo.get(t3).backend.read(t3);
      }, t2.prototype.fromPixels = function(t3, e2) {
        return this.backend.fromPixels(t3, e2);
      }, t2.prototype.time = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                return e2 = Y(), [4, this.backend.time(t3)];
              case 1:
                return (n2 = r2.sent()).wallMs = Y() - e2, [2, n2];
            }
          });
        });
      }, t2.prototype.track = function(t3) {
        return null != this.state.activeScope && (t3.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t3)), t3;
      }, Object.defineProperty(t2.prototype, "registeredVariables", { get: function() {
        return this.state.registeredVariables;
      }, enumerable: true, configurable: true }), t2.prototype.reset = function() {
        for (var t3 in this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Dt(), this.registry)
          this.disposeRegisteredKernels(t3), this.registry[t3].dispose(), delete this.registry[t3];
        this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
      }, t2.nextTensorId = 0, t2.nextVariableId = 0, t2;
    }();
    Nt = function() {
      var t2 = function() {
        if (null == St) {
          var t3 = void 0;
          if ("undefined" != typeof window)
            t3 = window;
          else if ("undefined" != typeof global)
            t3 = global;
          else if ("undefined" != typeof process)
            t3 = process;
          else {
            if ("undefined" == typeof self)
              throw new Error("Could not find a global object");
            t3 = self;
          }
          St = t3;
        }
        return St;
      }();
      if (null == t2._tfengine) {
        var e2 = new o(t2);
        t2._tfengine = new Tt(e2);
      }
      return function(t3) {
        i = t3;
      }(t2._tfengine.ENV), ht = function() {
        return t2._tfengine;
      }, t2._tfengine;
    }();
    Ot = a();
    Ot.registerFlag("DEBUG", function() {
      return false;
    }, function(t2) {
      t2 && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
    }), Ot.registerFlag("IS_BROWSER", function() {
      return Ft();
    }), Ot.registerFlag("IS_NODE", function() {
      return "undefined" != typeof process && void 0 !== process.versions && void 0 !== process.versions.node;
    }), Ot.registerFlag("IS_CHROME", function() {
      return "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    }), Ot.registerFlag("PROD", function() {
      return false;
    }), Ot.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", function() {
      return Ot.getBool("DEBUG");
    }), Ot.registerFlag("DEPRECATION_WARNINGS_ENABLED", function() {
      return true;
    }), Ot.registerFlag("IS_TEST", function() {
      return false;
    });
    Pt = {};
    Lt = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
    !function(t2) {
      t2[t2.DENSE = 0] = "DENSE", t2[t2.SHARED_BATCH = 1] = "SHARED_BATCH";
    }(_t || (_t = {})), function(t2) {
      t2[t2.RENDER = 0] = "RENDER", t2[t2.UPLOAD = 1] = "UPLOAD", t2[t2.PIXELS = 2] = "PIXELS", t2[t2.DOWNLOAD = 3] = "DOWNLOAD";
    }(Mt || (Mt = {})), function(t2) {
      t2[t2.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", t2[t2.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", t2[t2.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", t2[t2.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", t2[t2.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
    }(Bt || (Bt = {}));
    jt = 596e-10;
    Xt = 65504;
    ne = /ERROR: [0-9]+:([0-9]+):/g;
    Pe = Object.freeze({ callAndCheck: Kt, canBeRepresented: $t, getWebGLErrorMessage: Yt, getExtensionOrThrow: Qt, createVertexShader: Jt, createFragmentShader: Zt, createProgram: re, linkProgram: oe, validateProgram: ae, createStaticVertexBuffer: ie, createStaticIndexBuffer: ue, getNumChannels: function() {
      return 2 === a().getNumber("WEBGL_VERSION") ? 1 : 4;
    }, createTexture: se, validateTextureSize: ce, createFramebuffer: le, bindVertexBufferToProgramAttribute: he, bindTextureUnit: fe, unbindTextureUnit: function(t2, e2, n2) {
      we(t2, n2), Kt(t2, e2, function() {
        return t2.activeTexture(t2.TEXTURE0 + n2);
      }), Kt(t2, e2, function() {
        return t2.bindTexture(t2.TEXTURE_2D, null);
      });
    }, getProgramUniformLocationOrThrow: pe, getProgramUniformLocation: de, bindTextureToProgramUniformSampler: ve, bindCanvasToFramebuffer: function(t2, e2) {
      Kt(t2, e2, function() {
        return t2.bindFramebuffer(t2.FRAMEBUFFER, null);
      }), Kt(t2, e2, function() {
        return t2.viewport(0, 0, t2.canvas.width, t2.canvas.height);
      }), Kt(t2, e2, function() {
        return t2.scissor(0, 0, t2.canvas.width, t2.canvas.height);
      });
    }, bindColorTextureToFramebuffer: me, unbindColorTextureFromFramebuffer: ge, validateFramebuffer: ye, getFramebufferErrorMessage: xe, getBatchDim: Ce, getRowsCols: Ee, getShapeAs3D: Re, getTextureShapeFromLogicalShape: Ie, isReshapeFree: Se, getWebGLMaxTextureSize: Ae, resetMaxTextureSize: function() {
      te = null;
    }, resetMaxTexturesInShader: function() {
      ee = null;
    }, getMaxTexturesInShader: De, getWebGLDisjointQueryTimerVersion: Te, hasExtension: Ne, isWebGLVersionEnabled: Fe, isCapableOfRenderingToFloatTexture: Oe, isDownloadFloatTextureEnabled: _e, isWebGLFenceEnabled: Be });
    Le = a();
    Le.registerFlag("HAS_WEBGL", function() {
      return Le.getNumber("WEBGL_VERSION") > 0;
    }), Le.registerFlag("WEBGL_VERSION", function() {
      return Fe(2) ? 2 : Fe(1) ? 1 : 0;
    }), Le.registerFlag("WEBGL_BUFFER_SUPPORTED", function() {
      return 2 === Le.get("WEBGL_VERSION");
    }), Le.registerFlag("WEBGL_CPU_FORWARD", function() {
      return true;
    }), Le.registerFlag("WEBGL_FORCE_F16_TEXTURES", function() {
      return false;
    }), Le.registerFlag("WEBGL_PACK", function() {
      return Le.getBool("HAS_WEBGL");
    }), Le.registerFlag("WEBGL_PACK_NORMALIZATION", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_PACK_CLIP", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_PACK_DEPTHWISECONV", function() {
      return false;
    }), Le.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_PACK_REDUCE", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_LAZILY_UNPACK", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_CONV_IM2COL", function() {
      return Le.getBool("WEBGL_PACK");
    }), Le.registerFlag("WEBGL_MAX_TEXTURE_SIZE", function() {
      return Ae(Le.getNumber("WEBGL_VERSION"));
    }), Le.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", function() {
      return De(Le.getNumber("WEBGL_VERSION"));
    }), Le.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", function() {
      var t2 = Le.getNumber("WEBGL_VERSION");
      return 0 === t2 ? 0 : Te(t2);
    }), Le.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", function() {
      return Le.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && (t2 = navigator.userAgent || navigator.vendor || window.opera, !(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t2) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t2.substr(0, 4))));
      var t2;
    }), Le.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", function() {
      return Oe(Le.getNumber("WEBGL_VERSION"));
    }), Le.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", function() {
      return !Le.getBool("WEBGL_FORCE_F16_TEXTURES") && Le.getBool("WEBGL_RENDER_FLOAT32_CAPABLE");
    }), Le.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", function() {
      return _e(Le.getNumber("WEBGL_VERSION"));
    }), Le.registerFlag("WEBGL_FENCE_API_ENABLED", function() {
      return Be(Le.getNumber("WEBGL_VERSION"));
    }), Le.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", function() {
      return Le.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
    }), pt = ze;
    En = Cn({ complex_: function(t2, e2) {
      var n2 = ln(t2, "real", "complex"), r2 = ln(e2, "imag", "complex");
      return y(n2.shape, r2.shape, "real and imag shapes, " + n2.shape + " and " + r2.shape + ", must match in call to tf.complex()."), Nt.runKernelFunc(function(t3) {
        return t3.complex(n2, r2);
      }, { $real: n2, $imag: r2 });
    } });
    Rn = Cn({ real_: function(t2) {
      var e2 = ln(t2, "input", "real");
      return Nt.runKernelFunc(function(t3) {
        return t3.real(e2);
      }, { $input: e2 });
    } });
    In = Cn({ imag_: function(t2) {
      var e2 = ln(t2, "input", "imag");
      return Nt.runKernelFunc(function(t3) {
        return t3.imag(e2);
      }, { $input: e2 });
    } });
    Vn = Cn({ onesLike_: function(t2) {
      var e2 = ln(t2, "x", "onesLike");
      if ("complex64" === e2.dtype) {
        var n2 = Vn(Rn(e2)), r2 = zn(In(e2));
        return En(n2, r2);
      }
      return Nt.runKernelFunc(function(t3) {
        return t3.onesLike(e2);
      }, { $x: e2 }, function(t3, e3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    zn = Cn({ zerosLike_: function(t2) {
      var e2 = ln(t2, "x", "zerosLike");
      return Nt.runKernelFunc(function(t3) {
        return t3.zerosLike(e2);
      }, { $x: e2 }, function(t3, e3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    Gn = Cn({ concat_: function(t2, e2) {
      void 0 === e2 && (e2 = 0), g(t2.length >= 1, function() {
        return "Pass at least one tensor to concat";
      });
      var n2 = hn(t2, "tensors", "concat");
      "complex64" === n2[0].dtype && n2.forEach(function(t3) {
        if ("complex64" !== t3.dtype)
          throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype " + t3.dtype + ". ");
      }), e2 = D(e2, n2[0].shape)[0];
      var r2 = wn(n2.map(function(t3) {
        return t3.shape;
      }), e2);
      if (0 === w(r2))
        return kn([], r2);
      if (1 === (n2 = n2.filter(function(t3) {
        return t3.size > 0;
      })).length)
        return n2[0];
      var o2 = n2.map(function(t3) {
        return t3.shape;
      });
      bn(o2, e2);
      var a2 = n2;
      return Nt.runKernelFunc(function(t3) {
        return t3.concat(n2, e2);
      }, a2, function(t3) {
        var n3 = o2.map(function(t4) {
          return t4[e2];
        });
        return Xn(t3, n3, e2).map(function(t4) {
          return function() {
            return t4;
          };
        });
      });
    } });
    Hn = Cn({ concat1d_: function(t2) {
      return Gn(t2, 0);
    } });
    qn = Cn({ concat2d_: function(t2, e2) {
      return Gn(t2, e2);
    } });
    Kn = Cn({ concat3d_: function(t2, e2) {
      return Gn(t2, e2);
    } });
    jn = Cn({ concat4d_: function(t2, e2) {
      return Gn(t2, e2);
    } });
    Xn = Cn({ split_: function(t2, e2, n2) {
      void 0 === n2 && (n2 = 0);
      var r2, o2 = ln(t2, "x", "split");
      return n2 = D(n2, o2.shape)[0], "number" == typeof e2 ? (g(o2.shape[n2] % e2 == 0, function() {
        return "Number of splits must evenly divide the axis.";
      }), r2 = new Array(e2).fill(o2.shape[n2] / e2)) : (g(o2.shape[n2] === e2.reduce(function(t3, e3) {
        return t3 + e3;
      }), function() {
        return "The sum of sizes must match the size of the axis dimension.";
      }), r2 = e2), Nt.runKernelFunc(function(t3) {
        return t3.split(o2, r2, n2);
      }, { $x: o2 }, function(t3) {
        return { $x: function() {
          return Gn(t3, n2);
        } };
      });
    } });
    Yn = $n(function(t2) {
      !function(t3, e2, n2) {
        function r2(t4) {
          var e3, n3 = this, r3 = (e3 = 4022871197, function(t5) {
            t5 = t5.toString();
            for (var n4 = 0; n4 < t5.length; n4++) {
              var r4 = 0.02519603282416938 * (e3 += t5.charCodeAt(n4));
              r4 -= e3 = r4 >>> 0, e3 = (r4 *= e3) >>> 0, e3 += 4294967296 * (r4 -= e3);
            }
            return 23283064365386963e-26 * (e3 >>> 0);
          });
          n3.next = function() {
            var t5 = 2091639 * n3.s0 + 23283064365386963e-26 * n3.c;
            return n3.s0 = n3.s1, n3.s1 = n3.s2, n3.s2 = t5 - (n3.c = 0 | t5);
          }, n3.c = 1, n3.s0 = r3(" "), n3.s1 = r3(" "), n3.s2 = r3(" "), n3.s0 -= r3(t4), n3.s0 < 0 && (n3.s0 += 1), n3.s1 -= r3(t4), n3.s1 < 0 && (n3.s1 += 1), n3.s2 -= r3(t4), n3.s2 < 0 && (n3.s2 += 1), r3 = null;
        }
        function o2(t4, e3) {
          return e3.c = t4.c, e3.s0 = t4.s0, e3.s1 = t4.s1, e3.s2 = t4.s2, e3;
        }
        function a2(t4, e3) {
          var n3 = new r2(t4), a3 = e3 && e3.state, i2 = n3.next;
          return i2.int32 = function() {
            return 4294967296 * n3.next() | 0;
          }, i2.double = function() {
            return i2() + 11102230246251565e-32 * (2097152 * i2() | 0);
          }, i2.quick = i2, a3 && ("object" == typeof a3 && o2(a3, n3), i2.state = function() {
            return o2(n3, {});
          }), i2;
        }
        e2 && e2.exports ? e2.exports = a2 : n2 && n2.amd ? n2(function() {
          return a2;
        }) : this.alea = a2;
      }(0, t2, false);
    });
    Qn = $n(function(t2) {
      !function(t3, e2, n2) {
        function r2(t4) {
          var e3 = this, n3 = "";
          e3.x = 0, e3.y = 0, e3.z = 0, e3.w = 0, e3.next = function() {
            var t5 = e3.x ^ e3.x << 11;
            return e3.x = e3.y, e3.y = e3.z, e3.z = e3.w, e3.w ^= e3.w >>> 19 ^ t5 ^ t5 >>> 8;
          }, t4 === (0 | t4) ? e3.x = t4 : n3 += t4;
          for (var r3 = 0; r3 < n3.length + 64; r3++)
            e3.x ^= 0 | n3.charCodeAt(r3), e3.next();
        }
        function o2(t4, e3) {
          return e3.x = t4.x, e3.y = t4.y, e3.z = t4.z, e3.w = t4.w, e3;
        }
        function a2(t4, e3) {
          var n3 = new r2(t4), a3 = e3 && e3.state, i2 = function() {
            return (n3.next() >>> 0) / 4294967296;
          };
          return i2.double = function() {
            do {
              var t5 = ((n3.next() >>> 11) + (n3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, i2.int32 = n3.next, i2.quick = i2, a3 && ("object" == typeof a3 && o2(a3, n3), i2.state = function() {
            return o2(n3, {});
          }), i2;
        }
        e2 && e2.exports ? e2.exports = a2 : n2 && n2.amd ? n2(function() {
          return a2;
        }) : this.xor128 = a2;
      }(0, t2, false);
    });
    Jn = $n(function(t2) {
      !function(t3, e2, n2) {
        function r2(t4) {
          var e3 = this, n3 = "";
          e3.next = function() {
            var t5 = e3.x ^ e3.x >>> 2;
            return e3.x = e3.y, e3.y = e3.z, e3.z = e3.w, e3.w = e3.v, (e3.d = e3.d + 362437 | 0) + (e3.v = e3.v ^ e3.v << 4 ^ t5 ^ t5 << 1) | 0;
          }, e3.x = 0, e3.y = 0, e3.z = 0, e3.w = 0, e3.v = 0, t4 === (0 | t4) ? e3.x = t4 : n3 += t4;
          for (var r3 = 0; r3 < n3.length + 64; r3++)
            e3.x ^= 0 | n3.charCodeAt(r3), r3 == n3.length && (e3.d = e3.x << 10 ^ e3.x >>> 4), e3.next();
        }
        function o2(t4, e3) {
          return e3.x = t4.x, e3.y = t4.y, e3.z = t4.z, e3.w = t4.w, e3.v = t4.v, e3.d = t4.d, e3;
        }
        function a2(t4, e3) {
          var n3 = new r2(t4), a3 = e3 && e3.state, i2 = function() {
            return (n3.next() >>> 0) / 4294967296;
          };
          return i2.double = function() {
            do {
              var t5 = ((n3.next() >>> 11) + (n3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, i2.int32 = n3.next, i2.quick = i2, a3 && ("object" == typeof a3 && o2(a3, n3), i2.state = function() {
            return o2(n3, {});
          }), i2;
        }
        e2 && e2.exports ? e2.exports = a2 : n2 && n2.amd ? n2(function() {
          return a2;
        }) : this.xorwow = a2;
      }(0, t2, false);
    });
    Zn = $n(function(t2) {
      !function(t3, e2, n2) {
        function r2(t4) {
          var e3 = this;
          e3.next = function() {
            var t5, n3, r3 = e3.x, o3 = e3.i;
            return t5 = r3[o3], n3 = (t5 ^= t5 >>> 7) ^ t5 << 24, n3 ^= (t5 = r3[o3 + 1 & 7]) ^ t5 >>> 10, n3 ^= (t5 = r3[o3 + 3 & 7]) ^ t5 >>> 3, n3 ^= (t5 = r3[o3 + 4 & 7]) ^ t5 << 7, t5 = r3[o3 + 7 & 7], n3 ^= (t5 ^= t5 << 13) ^ t5 << 9, r3[o3] = n3, e3.i = o3 + 1 & 7, n3;
          }, function(t5, e4) {
            var n3, r3 = [];
            if (e4 === (0 | e4))
              r3[0] = e4;
            else
              for (e4 = "" + e4, n3 = 0; n3 < e4.length; ++n3)
                r3[7 & n3] = r3[7 & n3] << 15 ^ e4.charCodeAt(n3) + r3[n3 + 1 & 7] << 13;
            for (; r3.length < 8; )
              r3.push(0);
            for (n3 = 0; n3 < 8 && 0 === r3[n3]; ++n3)
              ;
            for (8 == n3 ? r3[7] = -1 : r3[n3], t5.x = r3, t5.i = 0, n3 = 256; n3 > 0; --n3)
              t5.next();
          }(e3, t4);
        }
        function o2(t4, e3) {
          return e3.x = t4.x.slice(), e3.i = t4.i, e3;
        }
        function a2(t4, e3) {
          null == t4 && (t4 = +/* @__PURE__ */ new Date());
          var n3 = new r2(t4), a3 = e3 && e3.state, i2 = function() {
            return (n3.next() >>> 0) / 4294967296;
          };
          return i2.double = function() {
            do {
              var t5 = ((n3.next() >>> 11) + (n3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, i2.int32 = n3.next, i2.quick = i2, a3 && (a3.x && o2(a3, n3), i2.state = function() {
            return o2(n3, {});
          }), i2;
        }
        e2 && e2.exports ? e2.exports = a2 : n2 && n2.amd ? n2(function() {
          return a2;
        }) : this.xorshift7 = a2;
      }(0, t2, false);
    });
    tr = $n(function(t2) {
      !function(t3, e2, n2) {
        function r2(t4) {
          var e3 = this;
          e3.next = function() {
            var t5, n3, r3 = e3.w, o3 = e3.X, a3 = e3.i;
            return e3.w = r3 = r3 + 1640531527 | 0, n3 = o3[a3 + 34 & 127], t5 = o3[a3 = a3 + 1 & 127], n3 ^= n3 << 13, t5 ^= t5 << 17, n3 ^= n3 >>> 15, t5 ^= t5 >>> 12, n3 = o3[a3] = n3 ^ t5, e3.i = a3, n3 + (r3 ^ r3 >>> 16) | 0;
          }, function(t5, e4) {
            var n3, r3, o3, a3, i2, u2 = [], s2 = 128;
            for (e4 === (0 | e4) ? (r3 = e4, e4 = null) : (e4 += "\0", r3 = 0, s2 = Math.max(s2, e4.length)), o3 = 0, a3 = -32; a3 < s2; ++a3)
              e4 && (r3 ^= e4.charCodeAt((a3 + 32) % e4.length)), 0 === a3 && (i2 = r3), r3 ^= r3 << 10, r3 ^= r3 >>> 15, r3 ^= r3 << 4, r3 ^= r3 >>> 13, a3 >= 0 && (i2 = i2 + 1640531527 | 0, o3 = 0 == (n3 = u2[127 & a3] ^= r3 + i2) ? o3 + 1 : 0);
            for (o3 >= 128 && (u2[127 & (e4 && e4.length || 0)] = -1), o3 = 127, a3 = 512; a3 > 0; --a3)
              r3 = u2[o3 + 34 & 127], n3 = u2[o3 = o3 + 1 & 127], r3 ^= r3 << 13, n3 ^= n3 << 17, r3 ^= r3 >>> 15, n3 ^= n3 >>> 12, u2[o3] = r3 ^ n3;
            t5.w = i2, t5.X = u2, t5.i = o3;
          }(e3, t4);
        }
        function o2(t4, e3) {
          return e3.i = t4.i, e3.w = t4.w, e3.X = t4.X.slice(), e3;
        }
        function a2(t4, e3) {
          null == t4 && (t4 = +/* @__PURE__ */ new Date());
          var n3 = new r2(t4), a3 = e3 && e3.state, i2 = function() {
            return (n3.next() >>> 0) / 4294967296;
          };
          return i2.double = function() {
            do {
              var t5 = ((n3.next() >>> 11) + (n3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, i2.int32 = n3.next, i2.quick = i2, a3 && (a3.X && o2(a3, n3), i2.state = function() {
            return o2(n3, {});
          }), i2;
        }
        e2 && e2.exports ? e2.exports = a2 : n2 && n2.amd ? n2(function() {
          return a2;
        }) : this.xor4096 = a2;
      }(0, t2, false);
    });
    er = $n(function(t2) {
      !function(t3, e2, n2) {
        function r2(t4) {
          var e3 = this, n3 = "";
          e3.next = function() {
            var t5 = e3.b, n4 = e3.c, r4 = e3.d, o3 = e3.a;
            return t5 = t5 << 25 ^ t5 >>> 7 ^ n4, n4 = n4 - r4 | 0, r4 = r4 << 24 ^ r4 >>> 8 ^ o3, o3 = o3 - t5 | 0, e3.b = t5 = t5 << 20 ^ t5 >>> 12 ^ n4, e3.c = n4 = n4 - r4 | 0, e3.d = r4 << 16 ^ n4 >>> 16 ^ o3, e3.a = o3 - t5 | 0;
          }, e3.a = 0, e3.b = 0, e3.c = -1640531527, e3.d = 1367130551, t4 === Math.floor(t4) ? (e3.a = t4 / 4294967296 | 0, e3.b = 0 | t4) : n3 += t4;
          for (var r3 = 0; r3 < n3.length + 20; r3++)
            e3.b ^= 0 | n3.charCodeAt(r3), e3.next();
        }
        function o2(t4, e3) {
          return e3.a = t4.a, e3.b = t4.b, e3.c = t4.c, e3.d = t4.d, e3;
        }
        function a2(t4, e3) {
          var n3 = new r2(t4), a3 = e3 && e3.state, i2 = function() {
            return (n3.next() >>> 0) / 4294967296;
          };
          return i2.double = function() {
            do {
              var t5 = ((n3.next() >>> 11) + (n3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, i2.int32 = n3.next, i2.quick = i2, a3 && ("object" == typeof a3 && o2(a3, n3), i2.state = function() {
            return o2(n3, {});
          }), i2;
        }
        e2 && e2.exports ? e2.exports = a2 : n2 && n2.amd ? n2(function() {
          return a2;
        }) : this.tychei = a2;
      }(0, t2, false);
    });
    nr = $n(function(t2) {
      !function(e2, n2) {
        var r2, o2 = this, a2 = 256, i2 = 6, u2 = "random", s2 = n2.pow(a2, i2), c2 = n2.pow(2, 52), l3 = 2 * c2, h2 = a2 - 1;
        function f2(t3, h3, f3) {
          var g2 = [], y2 = v2(function t4(e3, n3) {
            var r3, o3 = [], a3 = typeof e3;
            if (n3 && "object" == a3)
              for (r3 in e3)
                try {
                  o3.push(t4(e3[r3], n3 - 1));
                } catch (t5) {
                }
            return o3.length ? o3 : "string" == a3 ? e3 : e3 + "\0";
          }((h3 = 1 == h3 ? { entropy: true } : h3 || {}).entropy ? [t3, m2(e2)] : null == t3 ? function() {
            try {
              var t4;
              return r2 && (t4 = r2.randomBytes) ? t4 = t4(a2) : (t4 = new Uint8Array(a2), (o2.crypto || o2.msCrypto).getRandomValues(t4)), m2(t4);
            } catch (t5) {
              var n3 = o2.navigator, i3 = n3 && n3.plugins;
              return [+/* @__PURE__ */ new Date(), o2, i3, o2.screen, m2(e2)];
            }
          }() : t3, 3), g2), x2 = new p2(g2), b2 = function() {
            for (var t4 = x2.g(i2), e3 = s2, n3 = 0; t4 < c2; )
              t4 = (t4 + n3) * a2, e3 *= a2, n3 = x2.g(1);
            for (; t4 >= l3; )
              t4 /= 2, e3 /= 2, n3 >>>= 1;
            return (t4 + n3) / e3;
          };
          return b2.int32 = function() {
            return 0 | x2.g(4);
          }, b2.quick = function() {
            return x2.g(4) / 4294967296;
          }, b2.double = b2, v2(m2(x2.S), e2), (h3.pass || f3 || function(t4, e3, r3, o3) {
            return o3 && (o3.S && d2(o3, x2), t4.state = function() {
              return d2(x2, {});
            }), r3 ? (n2[u2] = t4, e3) : t4;
          })(b2, y2, "global" in h3 ? h3.global : this == n2, h3.state);
        }
        function p2(t3) {
          var e3, n3 = t3.length, r3 = this, o3 = 0, i3 = r3.i = r3.j = 0, u3 = r3.S = [];
          for (n3 || (t3 = [n3++]); o3 < a2; )
            u3[o3] = o3++;
          for (o3 = 0; o3 < a2; o3++)
            u3[o3] = u3[i3 = h2 & i3 + t3[o3 % n3] + (e3 = u3[o3])], u3[i3] = e3;
          (r3.g = function(t4) {
            for (var e4, n4 = 0, o4 = r3.i, i4 = r3.j, u4 = r3.S; t4--; )
              e4 = u4[o4 = h2 & o4 + 1], n4 = n4 * a2 + u4[h2 & (u4[o4] = u4[i4 = h2 & i4 + e4]) + (u4[i4] = e4)];
            return r3.i = o4, r3.j = i4, n4;
          })(a2);
        }
        function d2(t3, e3) {
          return e3.i = t3.i, e3.j = t3.j, e3.S = t3.S.slice(), e3;
        }
        function v2(t3, e3) {
          for (var n3, r3 = t3 + "", o3 = 0; o3 < r3.length; )
            e3[h2 & o3] = h2 & (n3 ^= 19 * e3[h2 & o3]) + r3.charCodeAt(o3++);
          return m2(e3);
        }
        function m2(t3) {
          return String.fromCharCode.apply(0, t3);
        }
        if (n2["seed" + u2] = f2, v2(n2.random(), e2), t2.exports) {
          t2.exports = f2;
          try {
            r2 = require_crypto();
          } catch (t3) {
          }
        }
      }([], Math);
    });
    nr.alea = Yn, nr.xor128 = Qn, nr.xorwow = Jn, nr.xorshift7 = Zn, nr.xor4096 = tr, nr.tychei = er;
    rr = nr.alea;
    or = function() {
      function t2(t3, e2, n2, r2, o2) {
        this.mean = t3, this.stdDev = e2, this.dtype = n2, this.nextVal = NaN, this.truncated = r2, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);
        var a2 = o2 || Math.random();
        this.random = rr(a2.toString());
      }
      return t2.prototype.nextValue = function() {
        if (!isNaN(this.nextVal)) {
          var t3 = this.nextVal;
          return this.nextVal = NaN, t3;
        }
        for (var e2, n2, r2 = false; !r2; ) {
          var o2 = void 0, a2 = void 0, i2 = void 0;
          do {
            i2 = (o2 = 2 * this.random() - 1) * o2 + (a2 = 2 * this.random() - 1) * a2;
          } while (i2 >= 1 || 0 === i2);
          var u2 = Math.sqrt(-2 * Math.log(i2) / i2);
          e2 = this.mean + this.stdDev * o2 * u2, n2 = this.mean + this.stdDev * a2 * u2, this.truncated && !this.isValidTruncated(e2) || (r2 = true);
        }
        return this.truncated && !this.isValidTruncated(n2) || (this.nextVal = this.convertValue(n2)), this.convertValue(e2);
      }, t2.prototype.convertValue = function(t3) {
        return null == this.dtype || "float32" === this.dtype ? t3 : Math.round(t3);
      }, t2.prototype.isValidTruncated = function(t3) {
        return t3 <= this.upper && t3 >= this.lower;
      }, t2;
    }();
    ar = function() {
      function t2(t3, e2, n2, r2) {
        this.alpha = t3, this.beta = 1 / e2, this.dtype = n2;
        var o2 = r2 || Math.random();
        this.randu = rr(o2.toString()), this.randn = new or(0, 1, n2, false, this.randu()), this.d = t3 < 1 ? t3 + 2 / 3 : t3 - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
      }
      return t2.prototype.nextValue = function() {
        for (var t3, e2, n2, r2, o2, a2; ; ) {
          do {
            r2 = this.randn.nextValue(), a2 = 1 + this.c * r2;
          } while (a2 <= 0);
          if (a2 *= a2 * a2, e2 = 1 - 0.331 * (t3 = r2 * r2) * t3, n2 = 0.5 * t3 + this.d * (1 - a2 + Math.log(a2)), (o2 = this.randu()) < e2 || Math.log(o2) < n2)
            break;
        }
        return a2 = 1 / this.beta * this.d * a2, this.alpha < 1 && (a2 *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a2);
      }, t2.prototype.convertValue = function(t3) {
        return "float32" === this.dtype ? t3 : Math.round(t3);
      }, t2;
    }();
    ir = function() {
      function t2(t3, e2, n2, r2) {
        var o2 = this;
        if (void 0 === t3 && (t3 = 0), void 0 === e2 && (e2 = 1), this.canReturnFloat = function() {
          return null == o2.dtype || "float32" === o2.dtype;
        }, this.min = t3, this.range = e2 - t3, this.dtype = n2, null == r2 && (r2 = Math.random()), "number" == typeof r2 && (r2 = r2.toString()), !this.canReturnFloat() && this.range <= 1)
          throw new Error("The difference between " + t3 + " - " + e2 + " <= 1 and dtype is not float");
        this.random = rr(r2);
      }
      return t2.prototype.convertValue = function(t3) {
        return this.canReturnFloat() ? t3 : Math.round(t3);
      }, t2.prototype.nextValue = function() {
        return this.convertValue(this.min + this.range * this.random());
      }, t2;
    }();
    cr = Cn({ batchToSpaceND_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "batchToSpaceND"), o2 = e2.reduce(function(t3, e3) {
        return t3 * e3;
      });
      return g(r2.rank >= 1 + e2.length, function() {
        return "input rank is " + r2.rank + " but should be > than blockShape.length " + e2.length;
      }), g(n2.length === e2.length, function() {
        return "crops.length is " + n2.length + " but should be equal to blockShape.length  " + e2.length;
      }), g(r2.shape[0] % o2 == 0, function() {
        return "input tensor batch is " + r2.shape[0] + " but is not divisible by the product of the elements of blockShape " + e2.join(" * ") + " === " + o2;
      }), Nt.runKernelFunc(function(t3) {
        return t3.batchToSpaceND(r2, e2, n2);
      }, { $x: r2 }, function(t3) {
        return { $x: function() {
          return t3.spaceToBatchND(e2, n2);
        } };
      });
    } });
    lr = Cn({ cast_: function(t2, e2) {
      var n2 = ln(t2, "x", "cast");
      if (!_(e2))
        throw new Error("Failed to cast to unknown dtype " + e2);
      if ("string" === e2 && "string" !== n2.dtype || "string" !== e2 && "string" === n2.dtype)
        throw new Error("Only strings can be casted to strings");
      var r2 = { dtype: e2 };
      return Nt.runKernelFunc(function(t3) {
        return t3.cast(n2, e2);
      }, { x: n2 }, function(t3) {
        return { x: function() {
          return t3.clone();
        } };
      }, "Cast", r2);
    } });
    hr = Cn({ clone_: function(t2) {
      var e2 = ln(t2, "x", "clone", null);
      return Nt.runKernelFunc(function() {
        return Nt.makeTensorFromDataId(e2.dataId, e2.shape, e2.dtype);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return t3.toFloat();
        } };
      });
    } });
    fr = Cn({ cumsum_: function(t2, e2, n2, r2) {
      void 0 === e2 && (e2 = 0), void 0 === n2 && (n2 = false), void 0 === r2 && (r2 = false);
      var o2 = ln(t2, "x", "cumsum"), a2 = gn([e2 |= 0], o2.rank), i2 = o2;
      null != a2 && (i2 = o2.transpose(a2));
      var u2 = xn(1, o2.rank)[0], s2 = Nt.runKernelFunc(function(t3) {
        return t3.cumsum(i2, u2, n2, r2);
      }, { permutedX: i2 }, function(t3) {
        return { permutedX: function() {
          return t3.cumsum(e2, n2, !r2);
        } };
      });
      return null != a2 && (s2 = s2.transpose(a2)), s2;
    } });
    pr = Cn({ depthToSpace_: function(t2, e2, n2) {
      void 0 === n2 && (n2 = "NHWC");
      var r2 = ln(t2, "x", "depthToSpace"), o2 = "NHWC" === n2 ? r2.shape[1] : r2.shape[2], a2 = "NHWC" === n2 ? r2.shape[2] : r2.shape[3], i2 = "NHWC" === n2 ? r2.shape[3] : r2.shape[1];
      return g(o2 * e2 >= 0, function() {
        return "Negative dimension size caused by overflow when multiplying\n      " + o2 + " and " + e2 + "  for depthToSpace with input shape\n      " + r2.shape;
      }), g(a2 * e2 >= 0, function() {
        return "Negative dimension size caused by overflow when multiplying\n      " + a2 + " and " + e2 + " for depthToSpace with input shape\n          " + r2.shape;
      }), g(i2 % (e2 * e2) == 0, function() {
        return "Dimension size must be evenly divisible by " + e2 * e2 + " but is " + i2 + " for depthToSpace with input shape " + r2.shape;
      }), Nt.runKernelFunc(function(t3) {
        return t3.depthToSpace(r2, e2, n2);
      }, { $x: r2 });
    } });
    dr = Cn({ expandDims_: function(t2, e2) {
      void 0 === e2 && (e2 = 0);
      var n2 = ln(t2, "x", "expandDims", null);
      g(e2 <= n2.rank, function() {
        return "Axis must be <= rank of the tensor";
      });
      var r2 = n2.shape.slice();
      return e2 < 0 && (g(-(n2.rank + 1) <= e2, function() {
        return "Axis must be in the interval [" + -(n2.rank + 1) + ", " + n2.rank + "]";
      }), e2 = n2.rank + e2 + 1), r2.splice(e2, 0, 1), Sr(n2, r2);
    } });
    vr = Cn({ eye_: function(t2, e2, n2, r2) {
      void 0 === r2 && (r2 = "float32"), null == e2 && (e2 = t2);
      for (var o2 = ur([t2, e2], r2), a2 = t2 <= e2 ? t2 : e2, i2 = 0; i2 < a2; ++i2)
        o2.set(1, i2, i2);
      var u2 = o2.toTensor().as2D(t2, e2);
      if (null == n2)
        return u2;
      if (1 === n2.length)
        return Nr(dr(u2, 0), [n2[0], 1, 1]);
      if (2 === n2.length)
        return Nr(dr(dr(u2, 0), 0), [n2[0], n2[1], 1, 1]);
      if (3 === n2.length)
        return Nr(dr(dr(dr(u2, 0), 0), 0), [n2[0], n2[1], n2[2], 1, 1]);
      throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + n2.length + "D.");
    } });
    mr = Cn({ multinomial_: function(t2, e2, n2, r2) {
      void 0 === r2 && (r2 = false);
      var o2 = ln(t2, "logits", "multinomial"), a2 = o2.size, i2 = o2.rank;
      if (a2 < 2)
        throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + a2 + ".");
      if (i2 > 2)
        throw new Error("Rank of probabilities must be 1 or 2, but is " + i2);
      n2 = n2 || Math.random();
      var u2 = 1 === i2 ? o2.as2D(1, -1) : o2, s2 = Nt.runKernelFunc(function(t3) {
        return t3.multinomial(u2, r2, e2, n2);
      }, { logits2D: u2 });
      return 1 === i2 ? s2.as1D() : s2;
    } });
    gr = Cn({ oneHot_: function(t2, e2, n2, r2) {
      if (void 0 === n2 && (n2 = 1), void 0 === r2 && (r2 = 0), e2 < 2)
        throw new Error("Error in oneHot: depth must be >=2, but it is " + e2);
      var o2 = ln(t2, "indices", "oneHot", "int32"), a2 = o2.shape.concat([e2]);
      return o2 = o2.flatten(), Nt.runKernelFunc(function(t3) {
        return t3.oneHot(o2, e2, n2, r2);
      }, { $indices: o2 }, function(t3) {
        return { $indices: function() {
          return Pn(o2.shape, "float32");
        } };
      }).reshape(a2);
    } });
    yr = Cn({ pad_: function(t2, e2, n2) {
      void 0 === n2 && (n2 = 0);
      var r2 = ln(t2, "x", "pad");
      if (0 === r2.rank)
        throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
      var o2 = e2.map(function(t3) {
        return t3[0];
      });
      return Nt.runKernelFunc(function(t3) {
        return t3.pad(r2, e2, n2);
      }, { $x: r2 }, function(t3) {
        return { $x: function() {
          return t3.slice(o2, r2.shape);
        } };
      });
    } });
    xr = Cn({ pad1d_: function(t2, e2, n2) {
      return void 0 === n2 && (n2 = 0), g(2 === e2.length, function() {
        return "Invalid number of paddings. Must be length of 2.";
      }), yr(t2, [e2], n2);
    } });
    br = Cn({ pad2d_: function(t2, e2, n2) {
      return void 0 === n2 && (n2 = 0), g(2 === e2.length && 2 === e2[0].length && 2 === e2[1].length, function() {
        return "Invalid number of paddings. Must be length of 2 each.";
      }), yr(t2, e2, n2);
    } });
    wr = Cn({ pad3d_: function(t2, e2, n2) {
      return void 0 === n2 && (n2 = 0), g(3 === e2.length && 2 === e2[0].length && 2 === e2[1].length && 2 === e2[2].length, function() {
        return "Invalid number of paddings. Must be length of 2 each.";
      }), yr(t2, e2, n2);
    } });
    Cr = Cn({ pad4d_: function(t2, e2, n2) {
      return void 0 === n2 && (n2 = 0), g(4 === e2.length && 2 === e2[0].length && 2 === e2[1].length && 2 === e2[2].length && 2 === e2[3].length, function() {
        return "Invalid number of paddings. Must be length of 2 each.";
      }), yr(t2, e2, n2);
    } });
    Er = Cn({ rand_: function(t2, e2, n2) {
      var r2 = w(t2), o2 = null;
      if (null == n2 || "float32" === n2)
        o2 = new Float32Array(r2);
      else if ("int32" === n2)
        o2 = new Int32Array(r2);
      else {
        if ("bool" !== n2)
          throw new Error("Unknown data type " + n2);
        o2 = new Uint8Array(r2);
      }
      for (var a2 = 0; a2 < r2; a2++)
        o2[a2] = e2();
      return Nt.makeTensor(o2, t2, n2);
    } });
    Rr = Cn({ randomNormal_: function(t2, e2, n2, r2, o2) {
      if (void 0 === e2 && (e2 = 0), void 0 === n2 && (n2 = 1), null != r2 && "bool" === r2)
        throw new Error("Unsupported data type " + r2);
      for (var a2 = new or(e2, n2, r2, false, o2), i2 = ur(t2, r2), u2 = 0; u2 < i2.values.length; u2++)
        i2.values[u2] = a2.nextValue();
      return i2.toTensor();
    } });
    Ir = Cn({ randomGamma_: function(t2, e2, n2, r2, o2) {
      if (void 0 === n2 && (n2 = 1), void 0 === r2 && (r2 = "float32"), null == n2 && (n2 = 1), null == r2 && (r2 = "float32"), "float32" !== r2 && "int32" !== r2)
        throw new Error("Unsupported data type " + r2);
      for (var a2 = new ar(e2, n2, r2, o2), i2 = ur(t2, r2), u2 = 0; u2 < i2.values.length; u2++)
        i2.values[u2] = a2.nextValue();
      return i2.toTensor();
    } });
    kr = Cn({ randomUniform_: function(t2, e2, n2, r2, o2) {
      void 0 === e2 && (e2 = 0), void 0 === n2 && (n2 = 1), void 0 === r2 && (r2 = "float32");
      for (var a2 = ur(t2, r2), i2 = new ir(e2, n2, null, o2), u2 = 0; u2 < a2.values.length; u2++)
        a2.values[u2] = i2.nextValue();
      return a2.toTensor();
    } });
    Sr = Cn({ reshape_: function(t2, e2) {
      var n2 = ln(t2, "x", "reshape", null);
      e2 = A(e2, n2.size), g(n2.size === w(e2), function() {
        return "new shape and old shape must have the same number of elements.";
      });
      var r2 = { shape: e2 };
      return Nt.runKernelFunc(function(t3) {
        return t3.reshape(n2, e2);
      }, { x: n2 }, function(t3) {
        return { x: function() {
          return t3.reshape(n2.shape);
        } };
      }, "Reshape", r2);
    } });
    Ar = Cn({ spaceToBatchND_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "spaceToBatchND");
      return g(r2.rank >= 1 + e2.length, function() {
        return "input rank " + r2.rank + " should be > than [blockShape] " + e2.length;
      }), g(n2.length === e2.length, function() {
        return "paddings.shape[0] " + n2.length + " must be equal to [blockShape] " + e2.length;
      }), g(r2.shape.reduce(function(t3, r3, o2) {
        return o2 > 0 && o2 <= e2.length ? t3 && (r3 + n2[o2 - 1][0] + n2[o2 - 1][1]) % e2[o2 - 1] == 0 : t3;
      }, true), function() {
        return "input spatial dimensions " + r2.shape.slice(1) + " with paddings " + n2.toString() + " must be divisible by blockShapes " + e2.toString();
      }), Nt.runKernelFunc(function(t3) {
        return t3.spaceToBatchND(r2, e2, n2);
      }, { $x: r2 }, function(t3) {
        return { $x: function() {
          return t3.batchToSpaceND(e2, n2);
        } };
      });
    } });
    Dr = Cn({ squeeze_: function(t2, e2) {
      var n2 = ln(t2, "x", "squeeze");
      return Sr(n2, T(n2.shape, e2).newShape);
    } });
    Tr = Cn({ stack_: function(t2, e2) {
      void 0 === e2 && (e2 = 0);
      var n2 = hn(t2, "tensors", "stack");
      if (g(n2.length >= 1, function() {
        return "Pass at least one tensor to tf.stack";
      }), 1 === n2.length)
        return n2[0].expandDims(e2);
      var r2 = n2[0].rank, o2 = n2[0].shape, a2 = n2[0].dtype;
      g(e2 <= r2, function() {
        return "Axis must be <= rank of the tensor";
      }), n2.forEach(function(t3) {
        y(o2, t3.shape, "All tensors passed to stack must have matching shapes");
      }), n2.forEach(function(t3) {
        g(a2 === t3.dtype, function() {
          return "All tensors passed to stack must have matching dtypes";
        });
      });
      var i2 = n2.map(function(t3) {
        return t3.expandDims(e2);
      });
      return Gn(i2, e2);
    } });
    Nr = Cn({ tile_: function(t2, e2) {
      var n2 = ln(t2, "x", "tile", null);
      return g(n2.rank === e2.length, function() {
        return "Error in transpose: rank of input " + n2.rank + " must match length of reps " + e2 + ".";
      }), Nt.runKernelFunc(function(t3, r2) {
        var o2 = t3.tile(n2, e2);
        return r2([n2]), o2;
      }, { $x: n2 }, function(t3, n3) {
        var r2 = n3[0];
        return { $x: function() {
          var n4 = zn(r2);
          if (1 === r2.rank)
            for (var o2 = 0; o2 < e2[0]; ++o2)
              n4 = n4.add(t3.slice([o2 * r2.shape[0]], [r2.shape[0]]));
          else if (2 === r2.rank)
            for (o2 = 0; o2 < e2[0]; ++o2)
              for (var a2 = 0; a2 < e2[1]; ++a2)
                n4 = n4.add(t3.slice([o2 * r2.shape[0], a2 * r2.shape[1]], [r2.shape[0], r2.shape[1]]));
          else if (3 === r2.rank)
            for (o2 = 0; o2 < e2[0]; ++o2)
              for (a2 = 0; a2 < e2[1]; ++a2)
                for (var i2 = 0; i2 < e2[2]; ++i2)
                  n4 = n4.add(t3.slice([o2 * r2.shape[0], a2 * r2.shape[1], i2 * r2.shape[2]], [r2.shape[0], r2.shape[1], r2.shape[2]]));
          else {
            if (4 !== r2.rank)
              throw new Error("Gradient for tile operation is not implemented for rank-" + r2.rank + " tensors yet.");
            for (o2 = 0; o2 < e2[0]; ++o2)
              for (a2 = 0; a2 < e2[1]; ++a2)
                for (i2 = 0; i2 < e2[2]; ++i2)
                  for (var u2 = 0; u2 < e2[3]; ++u2)
                    n4 = n4.add(t3.slice([o2 * r2.shape[0], a2 * r2.shape[1], i2 * r2.shape[2], u2 * r2.shape[3]], [r2.shape[0], r2.shape[1], r2.shape[2], r2.shape[3]]));
          }
          return n4;
        } };
      });
    } });
    Fr = Cn({ truncatedNormal_: function(t2, e2, n2, r2, o2) {
      if (void 0 === e2 && (e2 = 0), void 0 === n2 && (n2 = 1), null != r2 && "bool" === r2)
        throw new Error("Unsupported data type " + r2);
      for (var a2 = new or(e2, n2, r2, true, o2), i2 = ur(t2, r2), u2 = 0; u2 < i2.values.length; u2++)
        i2.values[u2] = a2.nextValue();
      return i2.toTensor();
    } });
    Or = Cn({ unstack_: function(t2, e2) {
      void 0 === e2 && (e2 = 0), e2 = e2 || 0;
      var n2 = ln(t2, "x", "unstack");
      return g(e2 >= -n2.shape.length && e2 < n2.shape.length, function() {
        return "Axis = " + e2 + " is not in [-" + n2.shape.length + ", " + n2.shape.length + ")";
      }), e2 < 0 && (e2 += n2.shape.length), Nt.runKernelFunc(function(t3) {
        return t3.unstack(n2, e2);
      }, { $x: n2 }, function(t3) {
        return { $x: function() {
          return Tr(t3, e2);
        } };
      });
    } });
    _r = function(t2, e2) {
      return n(this, void 0, void 0, function() {
        var n2, o2, a2, i2, u2, s2, c2, l3, h2, f2;
        return r(this, function(r2) {
          switch (r2.label) {
            case 0:
              return n2 = ln(t2, "x", "setdiff1d"), o2 = ln(e2, "y", "setdiff1d"), g(n2.dtype === o2.dtype, function() {
                return "x and y should have the same dtype, but got x (" + n2.dtype + ") and y (" + o2.dtype + ").";
              }), g(1 === n2.rank, function() {
                return "x should be 1D tensor, but got x (" + n2.shape + ").";
              }), g(1 === o2.rank, function() {
                return "y should be 1D tensor, but got y (" + o2.shape + ").";
              }), [4, n2.data()];
            case 1:
              return a2 = r2.sent(), [4, o2.data()];
            case 2:
              for (i2 = r2.sent(), u2 = new Set(i2), s2 = 0, h2 = 0; h2 < a2.length; h2++)
                u2.has(a2[h2]) || s2++;
              for (c2 = new lt([s2], n2.dtype), l3 = new lt([s2], "int32"), h2 = 0, f2 = 0; h2 < a2.length; h2++)
                u2.has(a2[h2]) || (c2.values[f2] = a2[h2], l3.values[f2] = h2, f2++);
              return [2, [c2.toTensor(), l3.toTensor()]];
          }
        });
      });
    };
    Vr = 30;
    Jr = Object.freeze({ assertParamsValid: qr, maskToAxes: Kr, computeOutShape: jr, startForAxis: Xr, stopForAxis: $r, isSliceContinous: Yr, computeFlatOffset: Qr });
    io = Cn({ softmax_: function(t2, e2) {
      void 0 === e2 && (e2 = -1);
      var n2 = ln(t2, "logits", "softmax");
      if (-1 === e2 && (e2 = n2.rank - 1), e2 !== n2.rank - 1)
        throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + n2.rank + " and dim was " + e2);
      return oo(function(t3, n3) {
        var r2 = t3.logSumExp([e2], true), o2 = t3.toFloat().sub(r2).exp();
        return n3([o2]), { value: o2, gradFunc: function(t4, n4) {
          var r3 = n4[0], o3 = t4.mul(r3);
          return o3.sub(o3.sum([e2], true).mul(r3));
        } };
      })(n2);
    } });
    uo = Cn({ logSoftmax_: function(t2, e2) {
      void 0 === e2 && (e2 = -1);
      var n2 = ln(t2, "logits", "logSoftmax");
      if (-1 === e2 && (e2 = n2.rank - 1), e2 !== n2.rank - 1)
        throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank " + n2.rank + " and axis was " + e2);
      return oo(function(t3, n3) {
        var r2 = t3.max(e2, true), o2 = t3.sub(r2), a2 = o2.toFloat().sub(o2.exp().sum(e2, true).log());
        return n3([a2]), { value: a2, gradFunc: function(t4, n4) {
          var r3 = n4[0].exp();
          return t4.sub(t4.sum(e2, true).mul(r3));
        } };
      })(n2);
    } });
    so = function() {
      function t2(t3, e2) {
        this.backend = t3, this.dataMover = e2, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
      }
      return t2.prototype.get = function(t3) {
        return this.data.has(t3) || this.dataMover.moveData(this.backend, t3), this.data.get(t3);
      }, t2.prototype.set = function(t3, e2) {
        this.dataIdsCount++, this.data.set(t3, e2);
      }, t2.prototype.has = function(t3) {
        return this.data.has(t3);
      }, t2.prototype.delete = function(t3) {
        return this.dataIdsCount--, this.data.delete(t3);
      }, t2.prototype.numDataIds = function() {
        return this.dataIdsCount;
      }, t2;
    }();
    co = function() {
      function t2() {
      }
      return t2.prototype.time = function(t3) {
        return lo();
      }, t2.prototype.read = function(t3) {
        return lo();
      }, t2.prototype.readSync = function(t3) {
        return lo();
      }, t2.prototype.numDataIds = function() {
        return lo();
      }, t2.prototype.disposeData = function(t3) {
        return lo();
      }, t2.prototype.fromPixels = function(t3, e2) {
        return lo();
      }, t2.prototype.write = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.move = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.memory = function() {
        return lo();
      }, t2.prototype.floatPrecision = function() {
        return lo();
      }, t2.prototype.epsilon = function() {
        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
      }, t2.prototype.batchMatMul = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.fusedBatchMatMul = function(t3) {
        t3.a, t3.b, t3.transposeA, t3.transposeB, t3.bias, t3.activation, t3.preluActivationWeights;
        return lo();
      }, t2.prototype.slice = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.stridedSlice = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.unstack = function(t3, e2) {
        return lo();
      }, t2.prototype.reverse = function(t3, e2) {
        return lo();
      }, t2.prototype.concat = function(t3, e2) {
        return lo();
      }, t2.prototype.neg = function(t3) {
        return lo();
      }, t2.prototype.add = function(t3, e2) {
        return lo();
      }, t2.prototype.addN = function(t3) {
        return lo();
      }, t2.prototype.subtract = function(t3, e2) {
        return lo();
      }, t2.prototype.multiply = function(t3, e2) {
        return lo();
      }, t2.prototype.realDivide = function(t3, e2) {
        return lo();
      }, t2.prototype.floorDiv = function(t3, e2) {
        return lo();
      }, t2.prototype.sum = function(t3, e2) {
        return lo();
      }, t2.prototype.prod = function(t3, e2) {
        return lo();
      }, t2.prototype.unsortedSegmentSum = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.argMin = function(t3, e2) {
        return lo();
      }, t2.prototype.argMax = function(t3, e2) {
        return lo();
      }, t2.prototype.equal = function(t3, e2) {
        return lo();
      }, t2.prototype.notEqual = function(t3, e2) {
        return lo();
      }, t2.prototype.less = function(t3, e2) {
        return lo();
      }, t2.prototype.lessEqual = function(t3, e2) {
        return lo();
      }, t2.prototype.greater = function(t3, e2) {
        return lo();
      }, t2.prototype.greaterEqual = function(t3, e2) {
        return lo();
      }, t2.prototype.logicalNot = function(t3) {
        return lo();
      }, t2.prototype.logicalAnd = function(t3, e2) {
        return lo();
      }, t2.prototype.logicalOr = function(t3, e2) {
        return lo();
      }, t2.prototype.where = function(t3) {
        return lo();
      }, t2.prototype.select = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.topk = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.min = function(t3, e2) {
        return lo();
      }, t2.prototype.minimum = function(t3, e2) {
        return lo();
      }, t2.prototype.mod = function(t3, e2) {
        return lo();
      }, t2.prototype.max = function(t3, e2) {
        return lo();
      }, t2.prototype.maximum = function(t3, e2) {
        return lo();
      }, t2.prototype.all = function(t3, e2) {
        return lo();
      }, t2.prototype.any = function(t3, e2) {
        return lo();
      }, t2.prototype.squaredDifference = function(t3, e2) {
        return lo();
      }, t2.prototype.ceil = function(t3) {
        return lo();
      }, t2.prototype.floor = function(t3) {
        return lo();
      }, t2.prototype.round = function(t3) {
        return lo();
      }, t2.prototype.sign = function(t3) {
        return lo();
      }, t2.prototype.isNaN = function(t3) {
        return lo();
      }, t2.prototype.isInf = function(t3) {
        return lo();
      }, t2.prototype.isFinite = function(t3) {
        return lo();
      }, t2.prototype.pow = function(t3, e2) {
        return lo();
      }, t2.prototype.exp = function(t3) {
        return lo();
      }, t2.prototype.expm1 = function(t3) {
        return lo();
      }, t2.prototype.log = function(t3) {
        return lo();
      }, t2.prototype.log1p = function(t3) {
        return lo();
      }, t2.prototype.sqrt = function(t3) {
        return lo();
      }, t2.prototype.rsqrt = function(t3) {
        return lo();
      }, t2.prototype.square = function(t3) {
        return lo();
      }, t2.prototype.reciprocal = function(t3) {
        return lo();
      }, t2.prototype.relu = function(t3) {
        return lo();
      }, t2.prototype.relu6 = function(t3) {
        return lo();
      }, t2.prototype.prelu = function(t3, e2) {
        return lo();
      }, t2.prototype.elu = function(t3) {
        return lo();
      }, t2.prototype.eluDer = function(t3, e2) {
        return lo();
      }, t2.prototype.selu = function(t3) {
        return lo();
      }, t2.prototype.int = function(t3) {
        return lo();
      }, t2.prototype.clip = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.abs = function(t3) {
        return lo();
      }, t2.prototype.complexAbs = function(t3) {
        return lo();
      }, t2.prototype.sigmoid = function(t3) {
        return lo();
      }, t2.prototype.softplus = function(t3) {
        return lo();
      }, t2.prototype.sin = function(t3) {
        return lo();
      }, t2.prototype.cos = function(t3) {
        return lo();
      }, t2.prototype.tan = function(t3) {
        return lo();
      }, t2.prototype.asin = function(t3) {
        return lo();
      }, t2.prototype.acos = function(t3) {
        return lo();
      }, t2.prototype.atan = function(t3) {
        return lo();
      }, t2.prototype.atan2 = function(t3, e2) {
        return lo();
      }, t2.prototype.sinh = function(t3) {
        return lo();
      }, t2.prototype.cosh = function(t3) {
        return lo();
      }, t2.prototype.tanh = function(t3) {
        return lo();
      }, t2.prototype.asinh = function(t3) {
        return lo();
      }, t2.prototype.acosh = function(t3) {
        return lo();
      }, t2.prototype.atanh = function(t3) {
        return lo();
      }, t2.prototype.erf = function(t3) {
        return lo();
      }, t2.prototype.step = function(t3, e2) {
        return lo();
      }, t2.prototype.fusedConv2d = function(t3) {
        t3.input, t3.filter, t3.convInfo, t3.bias, t3.activation, t3.preluActivationWeights;
        return lo();
      }, t2.prototype.conv2d = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.conv2dDerInput = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.conv2dDerFilter = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.fusedDepthwiseConv2D = function(t3) {
        t3.input, t3.filter, t3.convInfo, t3.bias, t3.activation, t3.preluActivationWeights;
        return lo();
      }, t2.prototype.depthwiseConv2D = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.depthwiseConv2DDerInput = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.depthwiseConv2DDerFilter = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.conv3d = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.conv3dDerInput = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.conv3dDerFilter = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.maxPool = function(t3, e2) {
        return lo();
      }, t2.prototype.maxPoolBackprop = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.avgPool = function(t3, e2) {
        return lo();
      }, t2.prototype.avgPoolBackprop = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.avgPool3d = function(t3, e2) {
        return lo();
      }, t2.prototype.avgPool3dBackprop = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.maxPool3d = function(t3, e2) {
        return lo();
      }, t2.prototype.maxPool3dBackprop = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.reshape = function(t3, e2) {
        return lo();
      }, t2.prototype.cast = function(t3, e2) {
        return lo();
      }, t2.prototype.tile = function(t3, e2) {
        return lo();
      }, t2.prototype.pad = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.transpose = function(t3, e2) {
        return lo();
      }, t2.prototype.gather = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.gatherND = function(t3, e2) {
        return lo();
      }, t2.prototype.scatterND = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.batchToSpaceND = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.spaceToBatchND = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.resizeBilinear = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.resizeBilinearBackprop = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.resizeNearestNeighbor = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.resizeNearestNeighborBackprop = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.batchNormalization = function(t3, e2, n2, r2, o2, a2) {
        return lo();
      }, t2.prototype.localResponseNormalization4D = function(t3, e2, n2, r2, o2) {
        return lo();
      }, t2.prototype.LRNGrad = function(t3, e2, n2, r2, o2, a2, i2) {
        return lo();
      }, t2.prototype.multinomial = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.oneHot = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.cumsum = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.nonMaxSuppression = function(t3, e2, n2, r2, o2) {
        return lo();
      }, t2.prototype.fft = function(t3) {
        return lo();
      }, t2.prototype.ifft = function(t3) {
        return lo();
      }, t2.prototype.complex = function(t3, e2) {
        return lo();
      }, t2.prototype.real = function(t3) {
        return lo();
      }, t2.prototype.imag = function(t3) {
        return lo();
      }, t2.prototype.cropAndResize = function(t3, e2, n2, r2, o2, a2) {
        return lo();
      }, t2.prototype.depthToSpace = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.split = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.sparseToDense = function(t3, e2, n2, r2) {
        return lo();
      }, t2.prototype.diag = function(t3) {
        return lo();
      }, t2.prototype.fill = function(t3, e2, n2) {
        throw new Error("Not yet implemented.");
      }, t2.prototype.onesLike = function(t3) {
        return lo();
      }, t2.prototype.zerosLike = function(t3) {
        return lo();
      }, t2.prototype.linspace = function(t3, e2, n2) {
        return lo();
      }, t2.prototype.dispose = function() {
        return lo();
      }, t2;
    }();
    To = Object.freeze({ castTensor: So, reshapeTensor: Ao, linspaceImpl: Do, upcastType: Ct, axesAreInnerMostDims: fn, combineLocations: pn, computeOutAndReduceShapes: dn, expandShapeToKeepDim: vn, assertAxesAreInnerMostDims: mn, getAxesPermutation: gn, getUndoAxesPermutation: yn, getInnerMostAxes: xn, getBroadcastDims: ho, getReductionAxes: fo, assertAndGetBroadcastShape: po, assertParamsConsistent: bn, computeOutShape: wn, computePool2DInfo: vo, computePool3DInfo: mo, computeConv2DInfo: go, computeConv3DInfo: yo, computeDefaultPad: xo, tupleValuesAreOne: Ro, eitherStridesOrDilationsAreOne: Io, convertConv2DDataFormat: ko });
    Vo = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.outputShape = [], this.outputShape = t2, this.variableNames = e2.map(function(t3, e3) {
          return "T" + e3;
        });
        var n2 = [];
        this.variableNames.forEach(function(t3) {
          n2.push("float v" + t3 + " = get" + t3 + "AtOutCoords();");
        });
        var r2 = this.variableNames.map(function(t3) {
          return "v" + t3;
        }).join(" + ");
        this.userCode = "\n      void main() {\n        " + n2.join("\n        ") + "\n\n        float result = " + r2 + ";\n        setOutput(result);\n      }\n    ";
      };
    }();
    zo = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = t2, this.variableNames = e2.map(function(t3, e3) {
          return "T" + e3;
        });
        var n2 = [];
        this.variableNames.forEach(function(t3) {
          n2.push("vec4 v" + t3 + " = get" + t3 + "AtOutCoords();");
        });
        var r2 = this.variableNames.map(function(t3) {
          return "v" + t3;
        }).join(" + ");
        this.userCode = "\n      void main() {\n        " + n2.join("\n        ") + "\n\n        vec4 result = " + r2 + ";\n        setOutput(result);\n      }\n    ";
      };
    }();
    Go = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["A"];
        var r2 = t2.windowSize, o2 = t2.batchSize, a2 = t2.inSize, i2 = Math.ceil(a2 / r2);
        n2 || this.variableNames.push("bestIndicesA"), this.outputShape = [o2, i2];
        var u2 = "max" === e2 ? ">" : "<", s2 = n2 ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r2 + ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " + r2 + "; i++) {\n          int inIdx = " + s2 + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + u2 + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
      };
    }();
    $o = "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";
    Zo = "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
    ta = "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
    ea = "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
    na = "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
    sa = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, g(t2.length > 2, function() {
          return "Packed arg" + (n2.charAt(0).toUpperCase() + n2.slice(1)) + " supports only inputs with rank above 2.";
        });
        var o2 = t2[t2.length - 1], a2 = Math.ceil(o2 / e2);
        this.outputShape = t2.slice(0, -1), a2 > 1 && this.outputShape.push(a2), r2 || this.variableNames.push("bestIndicesA");
        var i2, u2, s2 = this.outputShape, c2 = s2.length, l3 = aa(c2), h2 = qo("coords", c2);
        if (1 === a2) {
          var f2 = aa(u2 = c2 + 1);
          i2 = "\n        " + f2 + " sourceLocR = " + f2 + "(" + h2.join() + ", 0);\n        ++" + h2[c2 - 1] + ";\n        " + f2 + " sourceLocG = " + f2 + "(" + h2.join() + ", 0);\n        ++" + h2[c2 - 2] + ";\n        " + f2 + " sourceLocA = " + f2 + "(" + h2.join() + ", 0);\n        --" + h2[c2 - 1] + ";\n        " + f2 + " sourceLocB = " + f2 + "(" + h2.join() + ", 0);\n        --" + h2[c2 - 2] + ";";
        } else
          u2 = c2, i2 = "\n        " + l3 + " sourceLocR = coords;\n        ++" + h2[c2 - 1] + ";\n        " + l3 + " sourceLocG = coords;\n        ++" + h2[c2 - 2] + ";\n        " + l3 + " sourceLocA = coords;\n        --" + h2[c2 - 1] + ";\n        " + l3 + " sourceLocB = coords;\n        --" + h2[c2 - 2] + ";";
        var p2 = ["x", "y", "z", "w", "u", "v"].slice(0, u2), d2 = "." + p2[u2 - 1], v2 = p2.map(function(t3) {
          return "int " + t3;
        }), m2 = qo("sourceLocR", u2 - 1).concat("inIdx.r"), y2 = qo("sourceLocG", u2 - 1).concat("inIdx.g"), x2 = qo("sourceLocB", u2 - 1).concat("inIdx.b"), b2 = qo("sourceLocA", u2 - 1).concat("inIdx.a"), w2 = "max" === n2 ? "greaterThan" : "lessThan", C2 = r2 ? "" : "\n          inIdx = round(vec4(getBestIndicesAChannel(" + m2.join() + "),\n                             getBestIndicesAChannel(" + y2.join() + "),\n                             getBestIndicesAChannel(" + x2.join() + "),\n                             getBestIndicesAChannel(" + b2.join() + ")));", E2 = "vec4(\n            getAChannel(" + m2.join() + "),\n            hasNextCol ? getAChannel(" + y2.join() + ") : 0.,\n            hasNextRow ? getAChannel(" + x2.join() + ") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(" + b2.join() + ") : 0.)", R2 = r2 ? "" : "\n      float getBestIndicesAChannel(" + v2.join() + ") {\n        return getChannel(getBestIndicesA(" + p2.join() + "),\n                                          vec2(" + p2.slice(-2).join() + "));\n      }";
        this.userCode = "\n      float getAChannel(" + v2.join() + ") {\n        return getChannel(getA(" + p2.join() + "),\n                               vec2(" + p2.slice(-2).join() + "));\n      }\n      " + R2 + "\n      void main() {\n        " + l3 + " coords = getOutputCoords();\n        bool hasNextCol = " + h2[c2 - 1] + " < " + (s2[c2 - 1] - 1) + ";\n        bool hasNextRow = " + h2[c2 - 2] + " < " + (s2[c2 - 2] - 1) + ";\n        " + i2 + "\n        ivec4 srcIdx = ivec4(sourceLocR" + d2 + ", sourceLocG" + d2 + ",\n          sourceLocB" + d2 + ", sourceLocA" + d2 + ") * " + e2 + ";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = " + E2 + ";\n\n        for (int i = 0; i < " + e2 + "; i++) {\n          inIdx = srcIdx;\n          " + C2 + "\n          vec4 candidate = " + E2 + ";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(" + w2 + "(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";
      };
    }();
    ca = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["dy"], this.outputShape = t2.inShape;
        var e2 = t2.filterHeight, n2 = t2.filterWidth, r2 = t2.strideHeight, o2 = t2.strideWidth, a2 = t2.dilationHeight, i2 = t2.dilationWidth, u2 = t2.effectiveFilterHeight, s2 = t2.effectiveFilterWidth, c2 = u2 - 1 - t2.padInfo.top, l3 = s2 - 1 - t2.padInfo.left, h2 = 1 / (e2 * n2);
        this.userCode = "\n      const ivec2 pads = ivec2(" + c2 + ", " + l3 + ");\n      const float avgMultiplier = float(" + h2 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + u2 + ";\n            wR += " + a2 + ") {\n          float dyR = float(dyRCorner + wR) / " + r2 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t2.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + s2 + ";\n            wC+= " + i2 + ") {\n            float dyC = float(dyCCorner + wC) / " + o2 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t2.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    la = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["dy"], this.outputShape = t2.inShape;
        var e2 = t2.filterDepth, n2 = t2.filterHeight, r2 = t2.filterWidth, o2 = t2.strideDepth, a2 = t2.strideHeight, i2 = t2.strideWidth, u2 = t2.dilationDepth, s2 = t2.dilationHeight, c2 = t2.dilationWidth, l3 = t2.effectiveFilterDepth, h2 = t2.effectiveFilterHeight, f2 = t2.effectiveFilterWidth, p2 = l3 - 1 - t2.padInfo.front, d2 = h2 - 1 - t2.padInfo.top, v2 = f2 - 1 - t2.padInfo.left, m2 = 1 / (e2 * n2 * r2);
        this.userCode = "\n      const ivec3 pads = ivec3(" + p2 + ", " + d2 + ", " + v2 + ");\n      const float avgMultiplier = float(" + m2 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + l3 + ";\n            wD += " + u2 + ") {\n          float dyD = float(dyDCorner + wD) / " + o2 + ".0;\n\n          if (dyD < 0.0 || dyD >= " + t2.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + h2 + ";\n              wR += " + s2 + ") {\n            float dyR = float(dyRCorner + wR) / " + a2 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t2.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + f2 + ";\n                wC += " + c2 + ") {\n              float dyC = float(dyCCorner + wC) / " + i2 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t2.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    ha = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2, a2) {
        this.outputShape = [], this.variableNames = ["x", "mean", "variance"], po(t2, e2), po(t2, n2);
        var i2 = "0.0";
        null != r2 && (po(t2, r2), this.variableNames.push("offset"), i2 = "getOffsetAtOutCoords()");
        var u2 = "1.0";
        null != o2 && (po(t2, o2), this.variableNames.push("scale"), u2 = "getScaleAtOutCoords()"), this.outputShape = t2, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + i2 + ";\n        float scale = " + u2 + ";\n        float inv = scale * inversesqrt(variance + float(" + a2 + "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";
      };
    }();
    fa = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2, a2) {
        this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], po(t2, e2), po(t2, n2);
        var i2 = "vec4(0.0)";
        null != r2 && (po(t2, r2), this.variableNames.push("offset"), i2 = "getOffsetAtOutCoords()");
        var u2 = "vec4(1.0)";
        null != o2 && (po(t2, o2), this.variableNames.push("scale"), u2 = "getScaleAtOutCoords()"), this.outputShape = t2, this.userCode = "\n      void main() {\n        vec4 offset = " + i2 + ";\n        vec4 scale = " + u2 + ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" + a2 + "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
      };
    }();
    pa = "return areal * breal - aimag * bimag;";
    da = "return areal * bimag + aimag * breal;";
    va = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = po(e2, n2), this.userCode = "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " + t2 + "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";
      };
    }();
    ma = "return a + b;";
    ga = "return a - b;";
    ya = "return a * b;";
    xa = "return (a < 0.) ? b * a : a;";
    ba = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["A", "B"], this.outputShape = po(e2, n2), this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + t2 + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
      };
    }();
    wa = "\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";
    Ca = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        void 0 === r2 && (r2 = false), this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = po(e2, n2);
        var o2 = this.outputShape.length, a2 = "";
        if (r2)
          if (0 === o2 || 1 === w(this.outputShape))
            a2 = "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
          else if (a2 = "\n          " + aa(o2) + " coords = getOutputCoords();\n        ", 1 === o2)
            a2 += "\n            result.y = (coords + 1) >= " + this.outputShape[0] + " ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";
          else {
            var i2 = qo("coords", o2);
            a2 += "\n            bool nextRowOutOfBounds =\n              (" + i2[o2 - 2] + " + 1) >= " + this.outputShape[o2 - 2] + ";\n            bool nextColOutOfBounds =\n              (" + i2[o2 - 1] + " + 1) >= " + this.outputShape[o2 - 1] + ";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";
          }
        this.userCode = "\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " + t2 + "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        " + a2 + "\n\n        setOutput(result);\n      }\n    ";
      };
    }();
    Ea = function() {
      function t2(t3) {
        this.variableNames = ["A"], this.outputShape = t3, this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ";
      }
      return t2.prototype.getCustomSetupFunc = function(t3, e2) {
        var n2 = this;
        return function(r2, o2) {
          null == n2.minLoc && (n2.minLoc = r2.getUniformLocationNoThrow(o2, "minVal"), n2.maxLoc = r2.getUniformLocationNoThrow(o2, "maxVal")), r2.gl.uniform1f(n2.minLoc, t3), r2.gl.uniform1f(n2.maxLoc, e2);
        };
      }, t2;
    }();
    Ra = function() {
      function t2(t3) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t3, this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ";
      }
      return t2.prototype.getCustomSetupFunc = function(t3, e2) {
        var n2 = this;
        return function(r2, o2) {
          null == n2.minLoc && (n2.minLoc = r2.getUniformLocationNoThrow(o2, "minVal"), n2.maxLoc = r2.getUniformLocationNoThrow(o2, "maxVal")), r2.gl.uniform1f(n2.minLoc, t3), r2.gl.uniform1f(n2.maxLoc, e2);
        };
      }, t2;
    }();
    Ia = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["real", "imag"], this.outputShape = t2, this.userCode = "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";
      };
    }();
    ka = /* @__PURE__ */ function() {
      return function(t2) {
        this.outputShape = [], this.outputShape = wn(t2, 1), this.variableNames = t2.map(function(t3, e3) {
          return "T" + e3;
        });
        var e2 = new Array(t2.length - 1);
        e2[0] = t2[0][1];
        for (var n2 = 1; n2 < e2.length; n2++)
          e2[n2] = e2[n2 - 1] + t2[n2][1];
        var r2 = ["if (yC < " + e2[0] + ") setOutput(getT0(yR, yC));"];
        for (n2 = 1; n2 < e2.length; n2++) {
          var o2 = e2[n2 - 1];
          r2.push("else if (yC < " + e2[n2] + ") setOutput(getT" + n2 + "(yR, yC-" + o2 + "));");
        }
        var a2 = e2.length, i2 = e2[e2.length - 1];
        r2.push("else setOutput(getT" + a2 + "(yR, yC-" + i2 + "));"), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + r2.join("\n        ") + "\n      }\n    ";
      };
    }();
    Sa = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = wn(t2, e2);
        var n2 = this.outputShape, r2 = n2.length, o2 = aa(r2), a2 = qo("coords", r2), i2 = ["x", "y", "z", "w", "u", "v"].slice(0, r2);
        this.variableNames = t2.map(function(t3, e3) {
          return "T" + e3;
        });
        var u2 = new Array(t2.length - 1);
        u2[0] = t2[0][e2];
        for (var s2 = 1; s2 < u2.length; s2++)
          u2[s2] = u2[s2 - 1] + t2[s2][e2];
        var c2 = i2[e2], l3 = i2.slice(-2), h2 = i2.join(), f2 = "if (" + c2 + " < " + u2[0] + ") {\n        return getChannel(\n            getT0(" + h2 + "), vec2(" + l3.join() + "));\n        }";
        for (s2 = 1; s2 < u2.length; s2++) {
          var p2 = u2[s2 - 1];
          f2 += "\n        if (" + c2 + " < " + u2[s2] + "  && " + c2 + " >= " + u2[s2 - 1] + ") {\n          return getChannel(\n            getT" + s2 + "(" + Aa(i2, c2, p2) + "),\n            vec2(" + Aa(l3, c2, p2) + "));\n        }";
        }
        var d2 = u2.length, v2 = u2[u2.length - 1];
        f2 += "\n        return getChannel(\n          getT" + d2 + "(" + Aa(i2, c2, v2) + "),\n          vec2(" + Aa(l3, c2, v2) + "));", this.userCode = "\n      float getValue(" + i2.map(function(t3) {
          return "int " + t3;
        }) + ") {\n        " + f2 + "\n      }\n\n      void main() {\n        " + o2 + " coords = getOutputCoords();\n        vec4 result = vec4(getValue(" + a2 + "), 0., 0., 0.);\n\n        " + a2[r2 - 1] + " = " + a2[r2 - 1] + " + 1;\n        if (" + a2[r2 - 1] + " < " + n2[r2 - 1] + ") {\n          result.g = getValue(" + a2 + ");\n        }\n\n        " + a2[r2 - 2] + " = " + a2[r2 - 2] + " + 1;\n        if (" + a2[r2 - 2] + " < " + n2[r2 - 2] + ") {\n          result.a = getValue(" + a2 + ");\n        }\n\n        " + a2[r2 - 1] + " = " + a2[r2 - 1] + " - 1;\n        if (" + a2[r2 - 2] + " < " + n2[r2 - 2] + " &&\n            " + a2[r2 - 1] + " < " + n2[r2 - 1] + ") {\n          result.b = getValue(" + a2 + ");\n        }\n        setOutput(result);\n      }\n    ";
      };
    }();
    Da = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["x", "dy"], this.outputShape = t2.filterShape;
        var e2 = t2.strideHeight, n2 = t2.strideWidth, r2 = t2.padInfo.top, o2 = t2.padInfo.left, a2 = "channelsLast" === t2.dataFormat;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t2.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t2.outHeight + "; yR++) {\n            int xR = wR + yR * " + e2 + " - " + r2 + ";\n\n            if (xR < 0 || xR >= " + t2.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t2.outWidth + "; yC++) {\n              int xC = wC + yC * " + n2 + " - " + o2 + ";\n\n              if (xC < 0 || xC >= " + t2.inWidth + ") {\n                continue;\n              }\n\n              if (" + a2 + ") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Ta = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["dy", "W"], this.outputShape = t2.inShape;
        var e2 = t2.filterHeight, n2 = t2.filterWidth, r2 = t2.strideHeight, o2 = t2.strideWidth, a2 = "channelsLast" === t2.dataFormat, i2 = e2 - 1 - t2.padInfo.top, u2 = n2 - 1 - t2.padInfo.left, s2 = a2 ? 1 : 2, c2 = a2 ? 2 : 3, l3 = a2 ? 3 : 1;
        this.userCode = "\n      const ivec2 pads = ivec2(" + i2 + ", " + u2 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[" + l3 + "];\n\n        ivec2 dyCorner = ivec2(coords[" + s2 + "], coords[" + c2 + "]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + e2 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r2 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t2.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e2 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n2 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o2 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t2.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n2 + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + t2.outChannels + "; d2++) {\n\n              if (" + a2 + ") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Na = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["x", "dy"], this.outputShape = t2.filterShape;
        var e2 = t2.strideDepth, n2 = t2.strideHeight, r2 = t2.strideWidth, o2 = t2.padInfo.front, a2 = t2.padInfo.top, i2 = t2.padInfo.left;
        this.userCode = "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t2.batchSize + "; b++) {\n          for (int yF = 0; yF < " + t2.outDepth + "; yF++) {\n            int xF = wF + yF * " + e2 + " - " + o2 + ";\n\n            if (xF < 0 || xF >= " + t2.inDepth + ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " + t2.outHeight + "; yR++) {\n              int xR = wR + yR * " + n2 + " - " + a2 + ";\n\n              if (xR < 0 || xR >= " + t2.inHeight + ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " + t2.outWidth + "; yC++) {\n                int xC = wC + yC * " + r2 + " - " + i2 + ";\n\n                if (xC < 0 || xC >= " + t2.inWidth + ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Fa = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["dy", "W"], this.outputShape = t2.inShape;
        var e2 = t2.filterDepth, n2 = t2.filterHeight, r2 = t2.filterWidth, o2 = t2.strideDepth, a2 = t2.strideHeight, i2 = t2.strideWidth, u2 = e2 - 1 - t2.padInfo.front, s2 = n2 - 1 - t2.padInfo.top, c2 = r2 - 1 - t2.padInfo.left;
        this.userCode = "\n      const ivec3 pads = ivec3(" + u2 + ", " + s2 + ", " + c2 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + e2 + "; wF++) {\n          float dyF = float(dyFCorner + wF) / " + o2 + ".0;\n\n          if (dyF < 0.0 || dyF >= " + t2.outDepth + ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " + e2 + " - 1 - wF;\n\n          for (int wR = 0; wR < " + n2 + "; wR++) {\n            float dyR = float(dyRCorner + wR) / " + a2 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t2.outHeight + ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " + n2 + " - 1 - wR;\n\n            for (int wC = 0; wC < " + r2 + "; wC++) {\n              float dyC = float(dyCCorner + wC) / " + i2 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t2.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " + r2 + " - 1 - wC;\n\n              for (int d2 = 0; d2 < " + t2.outChannels + "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Oa = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["x", "dy"], this.outputShape = t2.filterShape;
        var e2 = t2.strideHeight, n2 = t2.strideWidth, r2 = t2.padInfo.top, o2 = t2.padInfo.left, a2 = t2.outChannels / t2.inChannels;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + a2 + " + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < " + t2.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t2.outHeight + "; yR++) {\n            int xR = wR + yR * " + e2 + " - " + r2 + ";\n\n            if (xR < 0 || xR >= " + t2.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t2.outWidth + "; yC++) {\n              int xC = wC + yC * " + n2 + " - " + o2 + ";\n\n              if (xC < 0 || xC >= " + t2.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    _a = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["dy", "W"], this.outputShape = t2.inShape;
        var e2 = t2.filterHeight, n2 = t2.filterWidth, r2 = t2.strideHeight, o2 = t2.strideWidth, a2 = e2 - 1 - t2.padInfo.top, i2 = n2 - 1 - t2.padInfo.left, u2 = t2.outChannels / t2.inChannels;
        this.userCode = "\n      const ivec2 pads = ivec2(" + a2 + ", " + i2 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + e2 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r2 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t2.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e2 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n2 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o2 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t2.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n2 + " - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + u2 + "; dm++) {\n              int d2 = d1 * " + u2 + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Ma = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        void 0 === e2 && (e2 = false), void 0 === n2 && (n2 = null), void 0 === r2 && (r2 = false), this.variableNames = ["x", "W"], this.outputShape = t2.outShape;
        var o2 = t2.padInfo.top, a2 = t2.padInfo.left, i2 = t2.strideHeight, u2 = t2.strideWidth, s2 = t2.dilationHeight, c2 = t2.dilationWidth, l3 = t2.filterHeight, h2 = t2.filterWidth, f2 = 4 * Math.floor(t2.inChannels / 4), p2 = t2.inChannels % 4, d2 = "channelsLast" === t2.dataFormat, v2 = d2 ? 1 : 2, m2 = d2 ? 2 : 3, g2 = d2 ? 3 : 1, y2 = "", x2 = "";
        n2 && (y2 = r2 ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n2 + "\n        }" : "\n          float activation(float x) {\n            " + n2 + "\n          }\n        ", x2 = "result = activation(result);");
        var b2 = e2 ? "result += getBiasAtOutCoords();" : "";
        e2 && this.variableNames.push("bias"), r2 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + y2 + "\n\n      const ivec2 strides = ivec2(" + i2 + ", " + u2 + ");\n      const ivec2 pads = ivec2(" + o2 + ", " + a2 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[" + g2 + "];\n\n        ivec2 xRCCorner =\n            ivec2(coords[" + v2 + "], coords[" + m2 + "]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + l3 + "; wR++) {\n          int xR = xRCorner + wR * " + s2 + ";\n\n          if (xR < 0 || xR >= " + t2.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + h2 + "; wC++) {\n            int xC = xCCorner + wC * " + c2 + ";\n\n            if (xC < 0 || xC >= " + t2.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + f2 + "; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (" + d2 + ") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (" + (1 === p2) + ") {\n\n              if (" + d2 + ") {\n                dotProd +=\n                    getX(batch, xR, xC, " + f2 + ") *\n                    getW(wR, wC, " + f2 + ", d2);\n              } else {\n                dotProd +=\n                    getX(batch, " + f2 + ", xR, xC) *\n                    getW(wR, wC, " + f2 + ", d2);\n              }\n\n            } else if (" + (2 === p2) + ") {\n              vec2 wValues = vec2(\n                getW(wR, wC, " + f2 + ", d2),\n                getW(wR, wC, " + f2 + " + 1, d2)\n              );\n\n              if (" + d2 + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, " + f2 + "),\n                  getX(batch, xR, xC, " + f2 + " + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, " + f2 + ", xR, xC),\n                  getX(batch, " + f2 + " + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (" + (3 === p2) + ") {\n              vec3 wValues = vec3(\n                getW(wR, wC, " + f2 + ", d2),\n                getW(wR, wC, " + f2 + " + 1, d2),\n                getW(wR, wC, " + f2 + " + 2, d2)\n              );\n\n              if (" + d2 + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, " + f2 + "),\n                  getX(batch, xR, xC, " + f2 + " + 1),\n                  getX(batch, xR, xC, " + f2 + " + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, " + f2 + ", xR, xC),\n                  getX(batch, " + f2 + " + 1, xR, xC),\n                  getX(batch, " + f2 + " + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        " + b2 + "\n        " + x2 + "\n        setOutput(result);\n      }\n    ";
      };
    }();
    Ba = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["x", "W"], this.outputShape = t2.outShape;
        var e2 = t2.padInfo.front, n2 = t2.padInfo.top, r2 = t2.padInfo.left, o2 = t2.strideDepth, a2 = t2.strideHeight, i2 = t2.strideWidth, u2 = t2.dilationDepth, s2 = t2.dilationHeight, c2 = t2.dilationWidth, l3 = t2.filterDepth, h2 = t2.filterHeight, f2 = t2.filterWidth, p2 = 4 * Math.floor(t2.inChannels / 4), d2 = t2.inChannels % 4;
        this.userCode = "\n      const ivec3 strides = ivec3(" + o2 + ", " + a2 + ", " + i2 + ");\n      const ivec3 pads = ivec3(" + e2 + ", " + n2 + ", " + r2 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + l3 + "; wF++) {\n          int xF = xFCorner + wF * " + u2 + ";\n\n          if (xF < 0 || xF >= " + t2.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + h2 + "; wR++) {\n            int xR = xRCorner + wR * " + s2 + ";\n\n            if (xR < 0 || xR >= " + t2.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + f2 + "; wC++) {\n              int xC = xCCorner + wC * " + c2 + ";\n\n              if (xC < 0 || xC >= " + t2.inWidth + ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " + p2 + "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" + (1 === d2) + ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " + p2 + ") *\n                  getW(wF, wR, wC, " + p2 + ", d2);\n              } else if (" + (2 === d2) + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " + p2 + "),\n                  getX(batch, xF, xR, xC, " + p2 + " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " + p2 + ", d2),\n                  getW(wF, wR, wC, " + p2 + " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" + (3 === d2) + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " + p2 + "),\n                  getX(batch, xF, xR, xC, " + p2 + " + 1),\n                  getX(batch, xF, xR, xC, " + p2 + " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " + p2 + ", d2),\n                  getW(wF, wR, wC, " + p2 + " + 1, d2),\n                  getW(wF, wR, wC, " + p2 + " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Pa = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        void 0 === e2 && (e2 = false), void 0 === n2 && (n2 = null), void 0 === r2 && (r2 = false), this.variableNames = ["x", "W"], this.outputShape = t2.outShape;
        var o2 = t2.inHeight, a2 = t2.inWidth, i2 = t2.padInfo.top, u2 = t2.padInfo.left, s2 = t2.strideHeight, c2 = t2.strideWidth, l3 = t2.dilationHeight, h2 = t2.dilationWidth, f2 = t2.filterHeight, p2 = t2.filterWidth, d2 = t2.outChannels / t2.inChannels, v2 = "", m2 = "";
        n2 && (v2 = r2 ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n2 + "\n        }" : "\n          float activation(float x) {\n            " + n2 + "\n          }\n        ", m2 = "result = activation(result);");
        var g2 = e2 ? "result += getBiasAtOutCoords();" : "";
        e2 && this.variableNames.push("bias"), r2 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + v2 + "\n\n      const ivec2 strides = ivec2(" + s2 + ", " + c2 + ");\n      const ivec2 pads = ivec2(" + i2 + ", " + u2 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + d2 + ";\n        int q = d2 - d1 * " + d2 + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + f2 + "; wR++) {\n          int xR = xRCorner + wR * " + l3 + ";\n\n          if (xR < 0 || xR >= " + o2 + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + p2 + "; wC++) {\n            int xC = xCCorner + wC * " + h2 + ";\n\n            if (xC < 0 || xC >= " + a2 + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        " + g2 + "\n        " + m2 + "\n        setOutput(result);\n      }\n    ";
      };
    }();
    La = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        void 0 === e2 && (e2 = false), void 0 === n2 && (n2 = null), void 0 === r2 && (r2 = false), this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t2.outShape;
        for (var o2 = t2.inHeight, a2 = t2.inWidth, i2 = t2.padInfo.top, u2 = t2.padInfo.left, s2 = t2.strideHeight, c2 = t2.strideWidth, l3 = t2.dilationHeight, h2 = t2.dilationWidth, f2 = t2.filterHeight, p2 = t2.filterWidth, d2 = p2, m2 = "int xR; int xC; int xCOffset;", g2 = 0; g2 < f2; g2++)
          for (var y2 = 0; y2 < p2; y2++)
            m2 += "\n          vec4 xTexelR" + g2 + "C" + 2 * y2 + " = vec4(0.);\n          vec4 wR" + g2 + "C" + y2 + " = vec4(0.);\n          vec4 xR" + g2 + "C" + y2 + " = vec4(0.);";
        for (g2 = 0; g2 < f2; g2++)
          for (var x2 = 0; x2 < d2; x2++) {
            if (m2 += "\n          xR = xRCorner + " + g2 * l3 + ";\n          xC = xCCorner + " + (y2 = 2 * x2) * h2 + ";\n        ", 1 === c2) {
              if (y2 < p2 && (m2 += u2 % 2 == 1 ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " + o2 + " && xCOffset >= 0 && xCOffset < " + a2 + ") {\n                  xTexelR" + g2 + "C" + y2 + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + g2 + "C" + y2 + " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " + o2 + " && xCOffset >= 0 && xCOffset < " + a2 + ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR" + g2 + "C" + y2 + " = vec4(previous.zw, xTexelR" + g2 + "C" + y2 + ".xy);\n                } else {\n                  xR" + g2 + "C" + y2 + " = vec4(0, 0, xTexelR" + g2 + "C" + y2 + ".xy);\n                }\n              " : "\n                if(xR >= 0 && xR < " + o2 + " && xC >= 0 && xC < " + a2 + ") {\n                  xTexelR" + g2 + "C" + y2 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + g2 + "C" + y2 + " = vec4(0.);\n                }\n\n                xR" + g2 + "C" + y2 + " = xTexelR" + g2 + "C" + y2 + ";\n              ", y2 + 1 < p2)) {
                var b2 = u2 % 2 == 0 ? v(h2) : h2;
                h2 % 2 == 0 && u2 % 2 == 1 || h2 % 2 != 0 && u2 % 2 != 1 ? (m2 += "\n                  xCOffset = xC + " + u2 % 2 + " + " + b2 + ";\n\n                  if(xR >= 0 && xR < " + o2 + " &&\n                    xCOffset >= 0 && xCOffset < " + a2 + ") {\n                    xTexelR" + g2 + "C" + (y2 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n                ", h2 > 1 && (m2 += "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " + o2 + " &&\n                      xCOffset >= 0 && xCOffset < " + a2 + ") {\n                      xTexelR" + g2 + "C" + y2 + " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" + g2 + "C" + y2 + " = vec4(0.);\n                    }\n                  "), m2 += "\n                  xR" + g2 + "C" + (y2 + 1) + " = vec4(\n                    xTexelR" + g2 + "C" + y2 + ".zw, xTexelR" + g2 + "C" + (y2 + 2) + ".xy);\n                ") : m2 += "\n                  xCOffset = xC + " + b2 + ";\n\n                  if(xR >= 0 && xR < " + o2 + " &&\n                    xCOffset >= 0 && xCOffset < " + a2 + ") {\n                    xTexelR" + g2 + "C" + (y2 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" + g2 + "C" + (y2 + 1) + " = xTexelR" + g2 + "C" + (y2 + 2) + ";\n                ";
              }
            } else
              y2 < p2 && (m2 += "\n              if(xR >= 0 && xR < " + o2 + ") {\n            ", u2 % 2 == 1 ? (m2 += "\n                xCOffset = xC + 1 - " + c2 + ";\n                if(xCOffset >= 0 && xCOffset < " + a2 + ") {\n                  xTexelR" + g2 + "C" + y2 + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + g2 + "C" + y2 + " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " + a2 + ") {\n                  xTexelR" + g2 + "C" + (y2 + 2) + " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" + g2 + "C" + (y2 + 2) + " = vec4(0.);\n                }\n\n                xR" + g2 + "C" + y2 + " = vec4(\n                  xTexelR" + g2 + "C" + y2 + ".zw, xTexelR" + g2 + "C" + (y2 + 2) + ".zw);\n              ", y2 + 1 < p2 && (m2 += "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " + c2 + ";\n                  if(xCOffset >= 0 && xCOffset < " + a2 + ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" + g2 + "C" + (y2 + 1) + " = vec4(xTexelR" + g2 + "C" + (y2 + 2) + ".xy, final.xy);\n                ")) : (m2 += "\n                if(xC >= 0 && xC < " + a2 + ") {\n                  xTexelR" + g2 + "C" + y2 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + g2 + "C" + y2 + " = vec4(0.);\n                }\n\n                xCOffset = xC + " + c2 + ";\n                if(xCOffset >= 0 && xCOffset < " + a2 + ") {\n                  xTexelR" + g2 + "C" + (y2 + 2) + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + g2 + "C" + (y2 + 2) + " = vec4(0.);\n                }\n\n                xR" + g2 + "C" + y2 + " = vec4(\n                  xTexelR" + g2 + "C" + y2 + ".xy, xTexelR" + g2 + "C" + (y2 + 2) + ".xy);\n              ", y2 + 1 < p2 && (m2 += "\n                  xR" + g2 + "C" + (y2 + 1) + " = vec4(\n                    xTexelR" + g2 + "C" + y2 + ".zw, xTexelR" + g2 + "C" + (y2 + 2) + ".zw);\n                ")), m2 += "}");
            y2 < p2 && (m2 += "\n            vec4 wTexelR" + g2 + "C" + y2 + " = getW(" + g2 + ", " + y2 + ", d1, q);\n            wR" + g2 + "C" + y2 + " = vec4(wTexelR" + g2 + "C" + y2 + ".xz, wTexelR" + g2 + "C" + y2 + ".xz);\n          ", y2 + 1 < p2 && (m2 += "\n              vec4 wTexelR" + g2 + "C" + (y2 + 1) + " = getW(" + g2 + ", " + (y2 + 1) + ", d1, q);\n              wR" + g2 + "C" + (y2 + 1) + " =\n                vec4(wTexelR" + g2 + "C" + (y2 + 1) + ".xz, wTexelR" + g2 + "C" + (y2 + 1) + ".xz);"));
          }
        for (g2 = 0; g2 < f2; g2++)
          for (y2 = 0; y2 < p2; y2++)
            m2 += "dotProd += xR" + g2 + "C" + y2 + " * wR" + g2 + "C" + y2 + ";";
        var w2 = "", C2 = "";
        n2 && (w2 = r2 ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + n2 + "\n        }" : "vec4 activation(vec4 x) {\n          " + n2 + "\n        }", C2 = "result = activation(result);");
        var E2 = e2 ? "result += getBiasAtOutCoords();" : "";
        e2 && this.variableNames.push("bias"), r2 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + w2 + "\n\n      const ivec2 strides = ivec2(" + s2 + ", " + c2 + ");\n      const ivec2 pads = ivec2(" + i2 + ", " + u2 + ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        " + m2 + "\n\n        vec4 result = dotProd;\n        " + E2 + "\n        " + C2 + "\n        setOutput(result);\n      }\n    ";
      };
    }();
    Wa = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2) {
        this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
        var a2 = t2[0], i2 = t2[1], u2 = t2[2], s2 = t2[3], c2 = e2[0], l3 = n2[0], h2 = n2[1];
        this.outputShape = [c2, l3, h2, s2];
        var f2 = "bilinear" === r2 ? 1 : 0, p2 = [i2 - 1 + ".0", u2 - 1 + ".0"], d2 = p2[0], v2 = p2[1], m2 = l3 > 1 ? ["" + (i2 - 1) / (l3 - 1), "(y2-y1) * height_ratio", "y1*" + d2 + " + float(y)*(height_scale)"] : ["0.0", "0.0", "0.5 * (y1+y2) * " + d2], g2 = m2[0], y2 = m2[1], x2 = m2[2], b2 = h2 > 1 ? ["" + (u2 - 1) / (h2 - 1), "(x2-x1) * width_ratio", "x1*" + v2 + " + float(x)*(width_scale)"] : ["0.0", "0.0", "0.5 * (x1+x2) * " + v2], w2 = b2[0], C2 = b2[1], E2 = b2[2];
        this.userCode = "\n      const float height_ratio = float(" + g2 + ");\n      const float width_ratio = float(" + w2 + ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " + a2 + ") {\n          return;\n        }\n\n        float height_scale = " + y2 + ";\n        float width_scale = " + C2 + ";\n\n        float in_y = " + x2 + ";\n        if( in_y < 0.0 || in_y > " + d2 + " ) {\n          setOutput(float(" + o2 + "));\n          return;\n        }\n        float in_x = " + E2 + ";\n        if( in_x < 0.0 || in_x > " + v2 + " ) {\n          setOutput(float(" + o2 + "));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(" + f2 + " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";
      };
    }();
    Ua = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["x"], this.outputShape = t2;
        var r2 = t2.length, o2 = t2[t2.length - 1], a2 = n2 ? "<" : ">";
        this.userCode = "\n      int getIndex(int i) {\n        " + (n2 ? "return " + o2 + " -i - 1;" : "return i;") + "\n      }\n\n      void main() {\n        " + aa(r2) + " coords = getOutputCoords();\n        int end = " + Va(r2, "coords") + ";\n        float val = 0.0;\n        for (int i = " + o2 + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + a2 + " end) {\n            continue;\n          }\n          if (idx == end && " + e2 + ") {\n            continue;\n          }\n          " + Va(r2, "coords") + " = idx;\n          val += getX(" + function(t3, e3) {
          if (1 === t3)
            return "" + e3;
          if (2 === t3)
            return e3 + ".x, " + e3 + ".y";
          if (3 === t3)
            return e3 + ".x, " + e3 + ".y, " + e3 + ".z";
          if (4 === t3)
            return e3 + ".x, " + e3 + ".y, " + e3 + ".z, " + e3 + ".w";
          throw Error("Cumulative sum for rank " + t3 + " is not yet supported");
        }(r2, "coords") + ");\n        }\n        setOutput(val);\n      }\n    ";
      };
    }();
    za = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = _t.DENSE;
        var e2 = Gt(t2), n2 = Ko();
        this.outputShape = t2, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + jo(["r", "c", "d"], t2) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e2[0] + ", " + e2[1] + "));\n        int index = 4 * (resTexRC.x * " + e2[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        " + n2.output + " = result;\n      }\n    ";
      };
    }();
    Ga = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = _t.DENSE;
        var e2 = Gt(t2), n2 = Ko();
        this.outputShape = t2, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + jo(["r", "c", "d"], t2) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e2[0] + ", " + e2[1] + "));\n        int index = 4 * (resTexRC.x * " + e2[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        " + n2.output + " = result;\n      }\n    ";
      };
    }();
    Ha = function() {
      function t2(t3, e2, n2) {
        this.variableNames = ["x"], this.outputShape = [], this.outputShape = t3, this.blockSize = e2, this.dataFormat = n2, this.userCode = "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " + this.getHeightCoordString() + ";\n      int w = " + this.getWidthCoordString() + ";\n      int d = " + this.getDepthCoordString() + ";\n\n      int in_h = h / " + e2 + ";\n      int offset_h = imod(h, " + e2 + ");\n      int in_w = w / " + e2 + ";\n      int offset_w = imod(w, " + e2 + ");\n      int offset_d = (offset_h * " + e2 + " + offset_w) *\n        " + this.getOutputDepthSize() + ";\n      int in_d = d + offset_d;\n\n      float result = " + this.getInputSamplingString() + ";\n      setOutput(result);\n    }\n  ";
      }
      return t2.prototype.getHeightCoordString = function() {
        return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
      }, t2.prototype.getWidthCoordString = function() {
        return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
      }, t2.prototype.getDepthCoordString = function() {
        return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
      }, t2.prototype.getOutputDepthSize = function() {
        return "NHWC" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];
      }, t2.prototype.getInputSamplingString = function() {
        return "NHWC" === this.dataFormat ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
      }, t2;
    }();
    qa = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["X"], this.outputShape = [t2, t2], this.userCode = "\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ";
      };
    }();
    Ka = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"], this.outTexUsage = Mt.DOWNLOAD;
        var e2 = Ko();
        this.outputShape = t2, this.userCode = "\n      " + $o + "\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + e2.output + " = encode_float(x);\n      }\n    ";
      };
    }();
    ja = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = Mt.DOWNLOAD;
        var e2 = Ko();
        this.outputShape = t2, this.userCode = "\n      " + $o + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        " + e2.output + " = encode_float(x);\n      }\n    ";
      };
    }();
    Xa = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        void 0 === n2 && (n2 = false), this.variableNames = ["A"];
        var r2 = Ko(), o2 = e2[0], a2 = e2[1];
        this.outputShape = t2;
        var i2 = "result";
        n2 && (i2 = "floor(result * 255. + 0.5)"), this.userCode = "\n      " + Xo(t2) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / " + a2 + ";\n        int c = imod(flatIndex, " + a2 + ");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(" + a2 + ".0, " + o2 + ".0);\n        vec4 values = " + r2.texture2D + "(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        " + r2.output + " = vec4(" + i2 + ", 0., 0., 0.);\n      }\n    ";
      };
    }();
    $a = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        void 0 === n2 && (n2 = false), this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
        var r2 = Ko(), o2 = e2[0], a2 = e2[1];
        this.outputShape = t2;
        var i2 = "", u2 = "result";
        n2 && (u2 = "floor(result * 255. + 0.5)");
        for (var s2 = 0; s2 <= 1; s2++)
          for (var c2 = 0; c2 <= 1; c2++) {
            var l3 = 2 * s2 + c2;
            i2 += "\n          localCoords = coords;\n          if(localCoords[2] + " + c2 + " < " + t2[2] + ") {\n            localCoords[2] += " + c2 + ";\n            if(localCoords[1] + " + s2 + " < " + t2[1] + ") {\n              localCoords[1] += " + s2 + ";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / " + a2 + ";\n              c = imod(flatIndex, " + a2 + ");\n              uv = (vec2(c, r) + halfCR) / vec2(" + a2 + ".0, " + o2 + ".0);\n              values = " + r2.texture2D + "(A, uv);\n\n              if(offset == 0) {\n                result[" + l3 + "] = values[0];\n              } else if(offset == 1) {\n                result[" + l3 + "] = values[1];\n              } else if(offset == 2) {\n                result[" + l3 + "] = values[2];\n              } else {\n                result[" + l3 + "] = values[3];\n              }\n            }\n          }\n        ";
          }
        this.userCode = "\n      " + Xo(t2) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        " + i2 + "\n\n        " + r2.output + " = " + u2 + ";\n      }\n    ";
      };
    }();
    Ya = "return real * expR - imag * expI;";
    Qa = "return real * expI + imag * expR;";
    Ja = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["real", "imag"];
        var r2 = e2[1];
        this.outputShape = e2;
        var o2 = n2 ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI, a2 = n2 ? r2 + ".0" : "1.0";
        this.userCode = "\n      const float exponentMultiplier = " + o2 + ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " + t2 + "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" + r2 + ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " + r2 + "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " + a2 + ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
      };
    }();
    Za = function() {
      function t2(t3, e2) {
        this.outputShape = [], this.variableNames = ["x"], this.outputShape = t3, this.userCode = "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ";
      }
      return t2.prototype.getCustomSetupFunc = function(t3) {
        var e2 = this;
        return function(n2, r2) {
          null == e2.valueLoc && (e2.valueLoc = n2.getUniformLocationNoThrow(r2, "value")), n2.gl.uniform1f(e2.valueLoc, t3);
        };
      }, t2;
    }();
    ti = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"];
        var e2 = Ko(), n2 = t2[0], r2 = t2[1];
        this.outputShape = t2, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + r2 + ".0, " + n2 + ".0);\n\n        vec4 values = " + e2.texture2D + "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
      };
    }();
    ei = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
        var e2 = Ko(), n2 = t2[0], r2 = t2[1];
        this.outputShape = t2, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(" + r2 + ".0, " + n2 + ".0);\n            vec4 values = " + e2.texture2D + "(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        " + e2.output + " = result;\n      }\n    ";
      };
    }();
    ni = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["A", "indices"];
        var r2 = t2.slice();
        r2[n2] = e2, this.outputShape = r2, this.rank = r2.length;
        var o2 = aa(this.rank), a2 = function(t3, e3) {
          var n3 = t3.length;
          if (n3 > 4)
            throw Error("Gather for rank " + n3 + " is not yet supported");
          if (1 === n3)
            return "int(getIndices(resRC))";
          for (var r3 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o3 = [], a3 = 0; a3 < t3.length; a3++)
            a3 === e3 ? o3.push("int(getIndices(" + r3[a3] + "))") : o3.push("" + r3[a3]);
          return o3.join();
        }(t2, n2);
        this.userCode = "\n      void main() {\n        " + o2 + " resRC = getOutputCoords();\n        setOutput(getA(" + a2 + "));\n      }\n    ";
      };
    }();
    ri = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.sliceDim = t2, this.strides = e2, this.variableNames = ["x", "indices"], this.outputShape = n2;
        var r2 = aa(e2.length), o2 = aa(n2.length), a2 = this.sliceDim > 1 ? "strides[j]" : "strides";
        this.userCode = "\n        " + r2 + " strides = " + r2 + "(" + this.strides + ");\n         void main() {\n          " + o2 + " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " + this.sliceDim + "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " + a2 + ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
      };
    }();
    wi = Object.freeze({ createVertexShader: oi, createVertexBuffer: ai, createIndexBuffer: ii, createFloat32MatrixTexture: si, createFloat16MatrixTexture: ci, createUnsignedBytesMatrixTexture: li, createPackedMatrixTexture: hi, createFloat16PackedMatrixTexture: fi, bindVertexProgramAttributeStreams: pi, uploadDenseMatrixToTexture: di, uploadPixelDataToTexture: vi, createBufferFromOutputTexture: mi, downloadFloat32MatrixFromBuffer: gi, downloadByteEncodedFloatMatrixFromOutputTexture: yi, downloadPackedMatrixFromBuffer: xi, downloadMatrixFromPackedOutputTexture: bi });
    Ci = function() {
      function t2(t3) {
        this.outputTexture = null, this.program = null, this.disposed = false, this.vertexAttrsAreBound = false, this.itemsToPoll = [];
        var e2 = a().getNumber("WEBGL_VERSION");
        if (null != t3 ? (this.gl = t3, Wt(e2, t3)) : this.gl = Ut(e2), 1 === a().getNumber("WEBGL_VERSION"))
          this.textureFloatExtension = Qt(this.gl, this.debug, "OES_texture_float"), this.colorBufferFloatExtension = this.gl.getExtension("WEBGL_color_buffer_float"), this.textureHalfFloatExtension = Qt(this.gl, this.debug, "OES_texture_half_float"), this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float");
        else {
          if (Ne(this.gl, "EXT_color_buffer_float"))
            this.colorBufferFloatExtension = this.gl.getExtension("EXT_color_buffer_float");
          else {
            if (!Ne(this.gl, "EXT_color_buffer_half_float"))
              throw new Error("GL context does not support color renderable floats");
            this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float");
          }
        }
        this.vertexBuffer = ai(this.gl, this.debug), this.indexBuffer = ii(this.gl, this.debug), this.framebuffer = le(this.gl, this.debug), this.textureConfig = qt(this.gl, this.textureHalfFloatExtension);
      }
      return Object.defineProperty(t2.prototype, "debug", { get: function() {
        return a().getBool("DEBUG");
      }, enumerable: true, configurable: true }), t2.prototype.dispose = function() {
        var t3 = this;
        if (!this.disposed) {
          null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
          var e2 = this.gl;
          Kt(e2, this.debug, function() {
            return e2.finish();
          }), Kt(e2, this.debug, function() {
            return e2.bindFramebuffer(e2.FRAMEBUFFER, null);
          }), Kt(e2, this.debug, function() {
            return e2.deleteFramebuffer(t3.framebuffer);
          }), Kt(e2, this.debug, function() {
            return e2.bindBuffer(e2.ARRAY_BUFFER, null);
          }), Kt(e2, this.debug, function() {
            return e2.bindBuffer(e2.ELEMENT_ARRAY_BUFFER, null);
          }), Kt(e2, this.debug, function() {
            return e2.deleteBuffer(t3.indexBuffer);
          }), this.disposed = true;
        }
      }, t2.prototype.createFloat32MatrixTexture = function(t3, e2) {
        return this.throwIfDisposed(), si(this.gl, this.debug, t3, e2, this.textureConfig);
      }, t2.prototype.createFloat16MatrixTexture = function(t3, e2) {
        return this.throwIfDisposed(), ci(this.gl, this.debug, t3, e2, this.textureConfig);
      }, t2.prototype.createUnsignedBytesMatrixTexture = function(t3, e2) {
        return this.throwIfDisposed(), li(this.gl, this.debug, t3, e2, this.textureConfig);
      }, t2.prototype.uploadPixelDataToTexture = function(t3, e2) {
        this.throwIfDisposed(), vi(this.gl, this.debug, t3, e2);
      }, t2.prototype.uploadDenseMatrixToTexture = function(t3, e2, n2, r2) {
        this.throwIfDisposed(), di(this.gl, this.debug, t3, e2, n2, r2, this.textureConfig);
      }, t2.prototype.createFloat16PackedMatrixTexture = function(t3, e2) {
        return this.throwIfDisposed(), fi(this.gl, this.debug, t3, e2, this.textureConfig);
      }, t2.prototype.createPackedMatrixTexture = function(t3, e2) {
        return this.throwIfDisposed(), hi(this.gl, this.debug, t3, e2, this.textureConfig);
      }, t2.prototype.deleteMatrixTexture = function(t3) {
        var e2 = this;
        this.throwIfDisposed(), this.outputTexture === t3 && (ge(this.gl, this.debug, this.framebuffer), this.outputTexture = null), Kt(this.gl, this.debug, function() {
          return e2.gl.deleteTexture(t3);
        });
      }, t2.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function(t3, e2, n2) {
        var r2 = this;
        return this.downloadMatrixDriver(t3, function() {
          return yi(r2.gl, r2.debug, e2, n2, r2.textureConfig);
        });
      }, t2.prototype.downloadPackedMatrixFromBuffer = function(t3, e2, n2, r2, o2, a2) {
        return xi(this.gl, t3, 0, 0, 0, o2, a2, this.textureConfig);
      }, t2.prototype.downloadFloat32MatrixFromBuffer = function(t3, e2) {
        return gi(this.gl, t3, e2);
      }, t2.prototype.createBufferFromTexture = function(t3, e2, n2) {
        this.bindTextureToFrameBuffer(t3);
        var r2 = mi(this.gl, this.debug, e2, n2, this.textureConfig);
        return this.unbindTextureToFrameBuffer(), r2;
      }, t2.prototype.createAndWaitForFence = function() {
        var t3 = this.createFence(this.gl);
        return this.pollFence(t3);
      }, t2.prototype.createFence = function(t3) {
        var e2, n2, r2 = this;
        if (a().getBool("WEBGL_FENCE_API_ENABLED")) {
          var o2 = t3, i2 = o2.fenceSync(o2.SYNC_GPU_COMMANDS_COMPLETE, 0);
          t3.flush(), n2 = function() {
            var t4 = o2.clientWaitSync(i2, 0, 0);
            return t4 === o2.ALREADY_SIGNALED || t4 === o2.CONDITION_SATISFIED;
          }, e2 = i2;
        } else
          a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e2 = this.beginQuery(), this.endQuery(), n2 = function() {
            return r2.isQueryAvailable(e2, a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
          }) : n2 = function() {
            return true;
          };
        return { query: e2, isFencePassed: n2 };
      }, t2.prototype.downloadMatrixFromPackedTexture = function(t3, e2, n2) {
        var r2 = this;
        return this.downloadMatrixDriver(t3, function() {
          return bi(r2.gl, r2.debug, e2, n2);
        });
      }, t2.prototype.createProgram = function(t3) {
        this.throwIfDisposed();
        var e2 = this.gl, n2 = Zt(e2, this.debug, t3), r2 = oi(e2, this.debug), o2 = re(e2, this.debug);
        return Kt(e2, this.debug, function() {
          return e2.attachShader(o2, r2);
        }), Kt(e2, this.debug, function() {
          return e2.attachShader(o2, n2);
        }), oe(e2, this.debug, o2), this.debug && ae(e2, this.debug, o2), this.vertexAttrsAreBound || (this.setProgram(o2), this.vertexAttrsAreBound = pi(e2, this.debug, this.program, this.vertexBuffer)), o2;
      }, t2.prototype.deleteProgram = function(t3) {
        var e2 = this;
        this.throwIfDisposed(), t3 === this.program && (this.program = null), null != t3 && Kt(this.gl, this.debug, function() {
          return e2.gl.deleteProgram(t3);
        });
      }, t2.prototype.setProgram = function(t3) {
        var e2 = this;
        this.throwIfDisposed(), this.program = t3, null != this.program && this.debug && ae(this.gl, this.debug, this.program), Kt(this.gl, this.debug, function() {
          return e2.gl.useProgram(t3);
        });
      }, t2.prototype.getUniformLocation = function(t3, e2, n2) {
        return void 0 === n2 && (n2 = true), this.throwIfDisposed(), n2 ? pe(this.gl, this.debug, t3, e2) : de(this.gl, t3, e2);
      }, t2.prototype.getAttributeLocation = function(t3, e2) {
        var n2 = this;
        return this.throwIfDisposed(), Kt(this.gl, this.debug, function() {
          return n2.gl.getAttribLocation(t3, e2);
        });
      }, t2.prototype.getUniformLocationNoThrow = function(t3, e2) {
        return this.throwIfDisposed(), this.gl.getUniformLocation(t3, e2);
      }, t2.prototype.setInputMatrixTexture = function(t3, e2, n2) {
        this.throwIfDisposed(), this.throwIfNoProgram(), ve(this.gl, this.debug, this.program, t3, e2, n2);
      }, t2.prototype.setOutputMatrixTexture = function(t3, e2, n2) {
        this.setOutputMatrixTextureDriver(t3, n2, e2);
      }, t2.prototype.setOutputPackedMatrixTexture = function(t3, e2, n2) {
        this.throwIfDisposed();
        var r2 = Ht(e2, n2), o2 = r2[0], a2 = r2[1];
        this.setOutputMatrixTextureDriver(t3, o2, a2);
      }, t2.prototype.setOutputMatrixWriteRegion = function(t3, e2, n2, r2) {
        this.setOutputMatrixWriteRegionDriver(n2, t3, r2, e2);
      }, t2.prototype.setOutputPackedMatrixWriteRegion = function(t3, e2, n2, r2) {
        throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
      }, t2.prototype.debugValidate = function() {
        null != this.program && ae(this.gl, this.debug, this.program), ye(this.gl);
      }, t2.prototype.executeProgram = function() {
        this.throwIfDisposed(), this.throwIfNoProgram();
        var t3 = this.gl;
        this.debug && this.debugValidate(), Kt(t3, this.debug, function() {
          return t3.drawElements(t3.TRIANGLES, 6, t3.UNSIGNED_SHORT, 0);
        });
      }, t2.prototype.blockUntilAllProgramsCompleted = function() {
        var t3 = this;
        this.throwIfDisposed(), Kt(this.gl, this.debug, function() {
          return t3.gl.finish();
        });
      }, t2.prototype.getQueryTimerExtension = function() {
        return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = Qt(this.gl, this.debug, 2 === a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
      }, t2.prototype.getQueryTimerExtensionWebGL2 = function() {
        return this.getQueryTimerExtension();
      }, t2.prototype.getQueryTimerExtensionWebGL1 = function() {
        return this.getQueryTimerExtension();
      }, t2.prototype.beginQuery = function() {
        if (2 === a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
          var t3 = this.gl, e2 = this.getQueryTimerExtensionWebGL2(), n2 = t3.createQuery();
          return t3.beginQuery(e2.TIME_ELAPSED_EXT, n2), n2;
        }
        var r2 = this.getQueryTimerExtensionWebGL1(), o2 = r2.createQueryEXT();
        return r2.beginQueryEXT(r2.TIME_ELAPSED_EXT, o2), o2;
      }, t2.prototype.endQuery = function() {
        if (2 !== a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
          var t3 = this.getQueryTimerExtensionWebGL1();
          t3.endQueryEXT(t3.TIME_ELAPSED_EXT);
        } else {
          var e2 = this.gl, n2 = this.getQueryTimerExtensionWebGL2();
          e2.endQuery(n2.TIME_ELAPSED_EXT);
        }
      }, t2.prototype.waitForQueryAndGetTime = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2 = this;
          return r(this, function(n2) {
            switch (n2.label) {
              case 0:
                return [4, S(function() {
                  return e2.disposed || e2.isQueryAvailable(t3, a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
                })];
              case 1:
                return n2.sent(), [2, this.getQueryTime(t3, a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))];
            }
          });
        });
      }, t2.prototype.getQueryTime = function(t3, e2) {
        if (0 === e2)
          return null;
        if (2 === e2) {
          var n2 = this.gl;
          return n2.getQueryParameter(t3, n2.QUERY_RESULT) / 1e6;
        }
        var r2 = this.getQueryTimerExtensionWebGL1();
        return r2.getQueryObjectEXT(t3, r2.QUERY_RESULT_EXT) / 1e6;
      }, t2.prototype.isQueryAvailable = function(t3, e2) {
        if (0 === e2)
          return true;
        if (2 === e2) {
          var n2 = this.gl, r2 = this.getQueryTimerExtensionWebGL2(), o2 = n2.getQueryParameter(t3, n2.QUERY_RESULT_AVAILABLE);
          return null == this.disjoint && (this.disjoint = this.gl.getParameter(r2.GPU_DISJOINT_EXT)), o2 && !this.disjoint;
        }
        o2 = (r2 = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t3, r2.QUERY_RESULT_AVAILABLE_EXT);
        return null == this.disjoint && (this.disjoint = this.gl.getParameter(r2.GPU_DISJOINT_EXT)), o2 && !this.disjoint;
      }, t2.prototype.pollFence = function(t3) {
        var e2 = this;
        return new Promise(function(n2) {
          e2.addItemToPoll(function() {
            return t3.isFencePassed();
          }, function() {
            return n2();
          });
        });
      }, t2.prototype.pollItems = function() {
        for (var t3 = function(t4) {
          for (var e3 = 0; e3 < t4.length; ++e3) {
            var n2 = t4[e3]();
            if (!n2)
              break;
          }
          return e3 - 1;
        }(this.itemsToPoll.map(function(t4) {
          return t4.isDoneFn;
        })), e2 = 0; e2 <= t3; ++e2) {
          (0, this.itemsToPoll[e2].resolveFn)();
        }
        this.itemsToPoll = this.itemsToPoll.slice(t3 + 1);
      }, t2.prototype.addItemToPoll = function(t3, e2) {
        var n2 = this;
        this.itemsToPoll.push({ isDoneFn: t3, resolveFn: e2 }), this.itemsToPoll.length > 1 || S(function() {
          return n2.pollItems(), 0 === n2.itemsToPoll.length;
        });
      }, t2.prototype.bindTextureToFrameBuffer = function(t3) {
        this.throwIfDisposed(), me(this.gl, this.debug, t3, this.framebuffer), this.debug && ye(this.gl);
      }, t2.prototype.unbindTextureToFrameBuffer = function() {
        null != this.outputTexture ? (me(this.gl, this.debug, this.outputTexture, this.framebuffer), this.debug && ye(this.gl)) : ge(this.gl, this.debug, this.framebuffer);
      }, t2.prototype.downloadMatrixDriver = function(t3, e2) {
        this.bindTextureToFrameBuffer(t3);
        var n2 = e2();
        return this.unbindTextureToFrameBuffer(), n2;
      }, t2.prototype.setOutputMatrixTextureDriver = function(t3, e2, n2) {
        this.throwIfDisposed();
        var r2 = this.gl;
        me(r2, this.debug, t3, this.framebuffer), this.debug && ye(r2), this.outputTexture = t3, Kt(r2, this.debug, function() {
          return r2.viewport(0, 0, e2, n2);
        }), Kt(r2, this.debug, function() {
          return r2.scissor(0, 0, e2, n2);
        });
      }, t2.prototype.setOutputMatrixWriteRegionDriver = function(t3, e2, n2, r2) {
        var o2 = this;
        this.throwIfDisposed(), Kt(this.gl, this.debug, function() {
          return o2.gl.scissor(t3, e2, n2, r2);
        });
      }, t2.prototype.throwIfDisposed = function() {
        if (this.disposed)
          throw new Error("Attempted to use disposed GPGPUContext.");
      }, t2.prototype.throwIfNoProgram = function() {
        if (null == this.program)
          throw new Error("No GPU program is currently set.");
      }, t2;
    }();
    Ri = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t2;
        for (var r2 = n2.filterWidth, o2 = n2.inChannels, a2 = n2.strideWidth, i2 = n2.strideHeight, u2 = n2.padInfo, s2 = n2.outWidth, c2 = n2.dilationWidth, l3 = n2.dilationHeight, h2 = n2.dataFormat, f2 = u2.left, p2 = u2.top, d2 = o2 * r2, v2 = Ko(), m2 = "channelsLast" === h2, g2 = m2 ? 0 : 1, y2 = m2 ? 1 : 2, x2 = "", b2 = 0; b2 <= 1; b2++)
          for (var w2 = 0; w2 <= 1; w2++)
            x2 += "\n          blockIndex = rc.y + " + w2 + ";\n          pos = rc.x + " + b2 + ";\n\n          if(blockIndex < " + t2[1] + " && pos < " + t2[0] + ") {\n            offsetY = int(blockIndex / (" + s2 + ")) * " + i2 + " - " + p2 + ";\n            d0 = offsetY + " + l3 + " * (pos / " + d2 + ");\n\n            if(d0 < " + e2[g2] + " && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), " + s2 + ".) * " + a2 + ". - " + f2 + ".);\n              d1 = offsetX + " + c2 + " * (int(mod(float(pos), " + d2 + ".) / " + o2 + ".));\n\n              if(d1 < " + e2[y2] + " && d1 >= 0) {\n\n                ch = int(mod(float(pos), " + o2 + ".));\n\n                if (" + m2 + ") {\n                  innerDims = vec2(d1, ch);\n                  result[" + (2 * b2 + w2) + "] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[" + (2 * b2 + w2) + "] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";
        this.userCode = "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        " + x2 + "\n\n        " + v2.output + " = result;\n      }\n    ";
      };
    }();
    Ii = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2) {
        this.variableNames = ["x"], this.outputShape = [];
        var a2, i2 = e2, u2 = t2[3] - 1;
        this.outputShape = t2;
        var s2 = "float(" + n2 + ") + float(" + r2 + ") * sum";
        a2 = 0.5 === o2 ? "inversesqrt(" + s2 + ")" : 1 === o2 ? "1.0/(" + s2 + ")" : "exp(log(" + s2 + ") * float(-" + o2 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + i2 + "; j <= " + i2 + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + u2 + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + a2 + ";\n        setOutput(val);\n      }\n    ";
      };
    }();
    ki = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2) {
        this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t2, this.depth = t2[3], this.depthRadius = e2, this.bias = n2, this.alpha = r2, this.beta = o2, this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " + this.depth + "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " + e2 + ")));\n          int depthEnd = int(min(float(" + this.depth + "),\n              float(d + " + e2 + " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " + this.depth + ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" + r2 + ") * norm + float(" + n2 + ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" + r2 + ")\n                * float(" + o2 + ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " + o2 + ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";
      };
    }();
    Si = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2) {
        this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
        var a2, i2 = e2, u2 = t2[3] - 1;
        this.outputShape = t2;
        var s2 = "float(" + n2 + ") + float(" + r2 + ") * sum";
        a2 = 0.5 === o2 ? "inversesqrt(" + s2 + ")" : 1 === o2 ? "1.0/(" + s2 + ")" : "exp(log(" + s2 + ") * float(-" + o2 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < " + this.outputShape[3] + ";\n        bool hasNextRow = c < " + this.outputShape[2] + ";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - " + i2 + ";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - " + i2 + "; j <= " + i2 + "; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(" + u2 + "));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * " + a2 + ";\n        setOutput(result);\n      }\n    ";
      };
    }();
    Ai = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["dy", "maxPos"], this.outputShape = t2.inShape;
        var e2 = t2.strideHeight, n2 = t2.strideWidth, r2 = t2.dilationHeight, o2 = t2.effectiveFilterHeight, a2 = t2.effectiveFilterWidth, i2 = o2 - 1 - t2.padInfo.top, u2 = a2 - 1 - t2.padInfo.left, s2 = o2 * a2 - 1;
        this.userCode = "\n      const ivec2 pads = ivec2(" + i2 + ", " + u2 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + o2 + ";\n          wR += " + r2 + ") {\n          float dyR = float(dyRCorner + wR) / " + e2 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t2.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + a2 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + n2 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t2.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + s2 + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + a2 + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Di = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["dy", "maxPos"], this.outputShape = t2.inShape;
        var e2 = t2.strideDepth, n2 = t2.strideHeight, r2 = t2.strideWidth, o2 = t2.dilationDepth, a2 = t2.dilationHeight, i2 = t2.dilationWidth, u2 = t2.effectiveFilterDepth, s2 = t2.effectiveFilterHeight, c2 = t2.effectiveFilterWidth, l3 = u2 - 1 - t2.padInfo.front, h2 = s2 - 1 - t2.padInfo.top, f2 = c2 - 1 - t2.padInfo.left, p2 = u2 * s2 * c2 - 1;
        this.userCode = "\n      const ivec3 pads = ivec3(" + l3 + ", " + h2 + ", " + f2 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + u2 + ";\n           wD += " + o2 + ") {\n          float dyD = float(dyDCorner + wD) / " + e2 + ".0;\n\n          if (dyD < 0.0 || dyD >= " + t2.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + s2 + ";\n              wR += " + a2 + ") {\n            float dyR = float(dyRCorner + wR) / " + n2 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t2.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + c2 + ";\n                wC += " + i2 + ") {\n              float dyC = float(dyCCorner + wC) / " + r2 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t2.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = " + p2 + " -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * " + s2 + " * " + c2 + " +\n                  wR * " + c2 + " + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      };
    }();
    Ti = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2, a2, i2) {
        void 0 === n2 && (n2 = false), void 0 === r2 && (r2 = false), void 0 === o2 && (o2 = false), void 0 === a2 && (a2 = null), void 0 === i2 && (i2 = false), this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e2;
        var u2 = n2 ? t2[1] : t2[2], s2 = Math.ceil(u2 / 2), c2 = n2 ? "i * 2, rc.y" : "rc.y, i * 2", l3 = r2 ? "rc.z, i * 2" : "i * 2, rc.z", h2 = n2 ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], f2 = r2 ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], p2 = "", d2 = "";
        a2 && (p2 = i2 ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + a2 + "\n        }" : "vec4 activation(vec4 x) {\n          " + a2 + "\n        }", d2 = "result = activation(result);");
        var v2 = o2 ? "result += getBiasAtOutCoords();" : "";
        o2 && this.variableNames.push("bias"), i2 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + p2 + "\n\n      const float sharedDimension = " + s2 + ".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " + s2 + "; i++) {\n          vec4 a = getMatrixA(rc.x, " + c2 + ");\n          vec4 b = getMatrixB(rc.x, " + l3 + ");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (" + h2[0] + " * " + f2[0] + ");\n          result += (" + h2[1] + " * " + f2[1] + ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " + v2 + "\n\n        " + d2 + "\n\n        setOutput(result);\n      }\n    ";
      };
    }();
    Ni = function() {
      function t2(t3, e2, n2) {
        this.variableNames = ["probs"], this.outputShape = [t3, n2], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (e2 - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (e2 - 1) + "));\n      }\n    ";
      }
      return t2.prototype.getCustomSetupFunc = function(t3) {
        var e2 = this;
        return function(n2, r2) {
          null == e2.seedLoc && (e2.seedLoc = n2.getUniformLocation(r2, "seed")), n2.gl.uniform1f(e2.seedLoc, t3);
        };
      }, t2;
    }();
    Fi = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        this.variableNames = ["indices"], this.outputShape = [t2, e2], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + r2 + "), float(" + n2 + "),\n                      float(index == coords.y)));\n      }\n    ";
      };
    }();
    Oi = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = t2;
        var e2 = t2.length;
        if (0 === e2)
          this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
        else {
          var n2 = qo("rc", e2), r2 = aa(e2), o2 = function(t3, e3, n3) {
            if (1 === t3)
              return "rc > " + e3[0];
            for (var r3 = "", o3 = t3 - 2; o3 < t3; o3++)
              r3 += n3[o3] + " >= " + e3[o3], o3 < t3 - 1 && (r3 += "||");
            return r3;
          }(e2, t2, n2), a2 = function(t3, e3, n3, r3) {
            if (1 === t3)
              return "";
            var o3 = r3.slice(-2);
            return "\n    int r = " + o3[0] + ";\n    int c = " + o3[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + e3 + ";\n    bool rEdge = rp1 >= " + n3 + ";\n  ";
          }(e2, t2[t2.length - 1], t2[t2.length - 2], n2), i2 = function(t3, e3) {
            var n3 = t3.length, r3 = function(t4, e4) {
              for (var n4 = [], r4 = 0; r4 <= 1; r4++)
                for (var o3 = 0; o3 <= 1; o3++) {
                  for (var a3 = (0 === r4 ? "r" : "rp1") + ", " + (0 === o3 ? "c" : "cp1"), i3 = 2; i3 < t4; i3++)
                    a3 = e4[e4.length - 1 - i3] + "," + a3;
                  n4.push(a3);
                }
              return n4;
            }(n3, e3);
            return 1 === n3 ? "getA(rc),\n            rc + 1 >= " + t3[0] + " ? 0. : getA(rc + 1),\n            0, 0" : "getA(" + r3[0] + "),\n          cEdge ? 0. : getA(" + r3[1] + "),\n          rEdge ? 0. : getA(" + r3[2] + "),\n          rEdge || cEdge ? 0. : getA(" + r3[3] + ")";
          }(t2, n2);
          this.userCode = "\n        void main() {\n          " + r2 + " rc = getOutputCoords();\n\n          if(" + o2 + ") {\n            setOutput(vec4(0));\n          } else {\n            " + a2 + "\n\n            setOutput(vec4(" + i2 + "));\n          }\n        }\n      ";
        }
      };
    }();
    _i = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["x"], this.outputShape = e2.map(function(e3, n3) {
          return e3[0] + t2[n3] + e3[1];
        });
        var r2 = t2.length, o2 = aa(r2), a2 = e2.map(function(t3) {
          return t3[0];
        }).join(","), i2 = e2.map(function(e3, n3) {
          return e3[0] + t2[n3];
        }).join(","), u2 = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r2);
        this.userCode = 1 !== r2 ? "\n      " + o2 + " start = " + o2 + "(" + a2 + ");\n      " + o2 + " end = " + o2 + "(" + i2 + ");\n\n      void main() {\n        " + o2 + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + n2 + "));\n        } else {\n          " + o2 + " coords = outC - start;\n          setOutput(getX(" + u2 + "));\n        }\n      }\n    " : "\n        int start = " + a2 + ";\n        int end = " + i2 + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + n2 + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
      };
    }();
    Mi = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e2.map(function(e3, n3) {
          return e3[0] + t2[n3] + e3[1];
        });
        for (var r2 = t2.length, o2 = aa(r2), a2 = e2.map(function(t3) {
          return t3[0];
        }).join(","), i2 = e2.map(function(e3, n3) {
          return e3[0] + t2[n3];
        }).join(","), u2 = qo("rc", r2), s2 = qo("source", r2), c2 = u2[r2 - 1] + " < " + this.outputShape[r2 - 1], l3 = 1 === r2 ? "source" : "vec2(" + s2.slice(-2).join() + ")", h2 = [o2 + " rc = outputLoc;", u2[r2 - 1] + " += 1;\n       if(" + c2 + ") {\n      ", 1 === r2 ? "" : "}\n       rc = outputLoc;\n       " + u2[r2 - 2] + " += 1;\n       if(" + u2[r2 - 2] + " < " + this.outputShape[r2 - 2] + ") {", 1 === r2 ? "" : "  " + u2[r2 - 1] + " += 1;\n         if(" + c2 + ") {"], f2 = 1 === r2 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", p2 = "", d2 = 0, v2 = 1 === r2 ? 2 : 4; d2 < v2; d2++)
          p2 += "\n        " + h2[d2] + "\n        if (" + f2 + ") {\n          result[" + d2 + "] = float(" + n2 + ");\n        } else {\n          " + o2 + " source = rc - start;\n          result[" + d2 + "] = getChannel(getX(" + s2.join() + "), " + l3 + ");\n        }\n      ";
        p2 += 1 === r2 ? "} " : "}}", this.userCode = "\n      const " + o2 + " start = " + o2 + "(" + a2 + ");\n      const " + o2 + " end = " + o2 + "(" + i2 + ");\n\n      void main() {\n        " + o2 + " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " + p2 + "\n        setOutput(result);\n      }\n    ";
      };
    }();
    Bi = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        if (this.variableNames = ["x"], "avg" === e2 && n2)
          throw new Error("Cannot compute positions for average pool.");
        var r2 = t2.filterWidth, o2 = t2.strideHeight, a2 = t2.strideWidth, i2 = t2.dilationHeight, u2 = t2.dilationWidth, s2 = t2.effectiveFilterHeight, c2 = t2.effectiveFilterWidth, l3 = t2.padInfo.top, h2 = t2.padInfo.left;
        this.outputShape = t2.outShape;
        var f2 = "avg" === e2, p2 = "0.0";
        if (f2 || (p2 = "-1.0 / 1e-20"), n2)
          this.userCode = "\n        const ivec2 strides = ivec2(" + o2 + ", " + a2 + ");\n        const ivec2 pads = ivec2(" + l3 + ", " + h2 + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + s2 + ";\n              wR += " + i2 + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + t2.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + c2 + ";\n                wC += " + u2 + ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + t2.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + c2 + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
        else {
          var d2 = e2 + "(" + e2 + "(" + e2 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
          "avg" === e2 && (d2 = "avgValue / count");
          var v2 = 4 * Math.floor(r2 / 4), m2 = r2 % 4, g2 = "\n      if (" + f2 + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
          this.userCode = "\n      const ivec2 strides = ivec2(" + o2 + ", " + a2 + ");\n      const ivec2 pads = ivec2(" + l3 + ", " + h2 + ");\n      const float initializationValue = " + p2 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + t2.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + p2 + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + s2 + ";\n            wR += " + i2 + ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + t2.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + v2 + "; wC += 4) {\n            int xC = xCCorner + wC * " + u2 + ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + u2 + ", d),\n              getValue(batch, xR, xC + 2 * " + u2 + ", d),\n              getValue(batch, xR, xC + 3 * " + u2 + ", d)\n            );\n\n            " + g2 + "\n          }\n\n          int xC = xCCorner + " + v2 + ";\n          if (" + (1 === m2) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + g2 + "\n          } else if (" + (2 === m2) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + u2 + ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + g2 + "\n          } else if (" + (3 === m2) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + u2 + ", d),\n              getValue(batch, xR, xC + 2 * " + u2 + ", d),\n              initializationValue\n            );\n\n            " + g2 + "\n          }\n        }\n        setOutput(" + d2 + ");\n      }\n    ";
        }
      };
    }();
    Pi = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        if (this.variableNames = ["x"], "avg" === e2 && n2)
          throw new Error("Cannot compute positions for average pool.");
        var r2 = t2.filterWidth, o2 = t2.strideDepth, a2 = t2.strideHeight, i2 = t2.strideWidth, u2 = t2.dilationDepth, s2 = t2.dilationHeight, c2 = t2.dilationWidth, l3 = t2.effectiveFilterDepth, h2 = t2.effectiveFilterHeight, f2 = t2.effectiveFilterWidth, p2 = t2.padInfo.front, d2 = t2.padInfo.top, v2 = t2.padInfo.left;
        this.outputShape = t2.outShape;
        var m2 = "avg" === e2, g2 = "0.0";
        if (m2 || (g2 = "-1.0 / 1e-20"), n2)
          this.userCode = "\n        const ivec3 strides =\n            ivec3(" + o2 + ", " + a2 + ", " + i2 + ");\n        const ivec3 pads = ivec3(" + p2 + ", " + d2 + ", " + v2 + ");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < " + l3 + ";\n              wD += " + u2 + ") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= " + t2.inDepth + ") {\n              continue;\n            }\n\n            for (int wR = 0; wR < " + h2 + ";\n                wR += " + s2 + ") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= " + t2.inHeight + ") {\n                continue;\n              }\n\n              for (int wC = 0; wC < " + f2 + ";\n                  wC += " + c2 + ") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= " + t2.inWidth + ") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * " + h2 + " * " + f2 + " +\n                      wR * " + f2 + " + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
        else {
          var y2 = e2 + "(" + e2 + "(" + e2 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
          "avg" === e2 && (y2 = "avgValue / count");
          var x2 = 4 * Math.floor(r2 / 4), b2 = r2 % 4, w2 = "\n      if (" + m2 + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
          this.userCode = "\n      const ivec3 strides =\n        ivec3(" + o2 + ", " + a2 + ", " + i2 + ");\n      const ivec3 pads = ivec3(" + p2 + ", " + d2 + ", " + v2 + ");\n      const float initializationValue = " + g2 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= " + t2.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + g2 + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < " + l3 + ";\n            wD += " + u2 + ") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= " + t2.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + h2 + ";\n            wR += " + s2 + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + t2.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + x2 + "; wC += 4) {\n              int xC = xCCorner + wC * " + c2 + ";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + c2 + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + c2 + ", ch),\n                getValue(batch, xD, xR, xC + 3 * " + c2 + ", ch)\n              );\n\n              " + w2 + "\n            }\n\n            int xC = xCCorner + " + x2 + ";\n            if (" + (1 === b2) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              " + w2 + "\n            } else if (" + (2 === b2) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + c2 + ", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              " + w2 + "\n            } else if (" + (3 === b2) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + c2 + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + c2 + ", ch),\n                initializationValue\n              );\n\n              " + w2 + "\n            }\n          }\n          setOutput(" + y2 + ");\n        }\n      }\n    ";
        }
      };
    }();
    Li = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["x"];
        var n2 = t2.windowSize, r2 = t2.batchSize, o2 = t2.inSize, a2 = Math.ceil(o2 / n2);
        this.outputShape = [r2, a2];
        var i2 = "0.0", u2 = "";
        "prod" === e2 ? i2 = "1.0" : "min" === e2 ? (i2 = "1.0 / 1e-20", u2 = "min") : "max" === e2 && (i2 = "-1.0 / 1e-20", u2 = "max");
        var s2 = e2 + "(" + e2 + "(" + e2 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
        "sum" === e2 ? s2 = "sumValue" : "prod" === e2 ? s2 = "prodValue" : "all" === e2 ? s2 = "allValue" : "any" === e2 && (s2 = "anyValue");
        var c2 = 4 * Math.floor(n2 / 4), l3 = n2 % 4, h2 = "\n      if (" + ("sum" === e2) + ") {\n        sumValue += dot(values, ones);\n      } else if (" + ("prod" === e2) + ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " + u2 + "(values, minMaxValue);\n      }\n    ", f2 = "vec4";
        "all" === e2 ? (i2 = "1.0", h2 = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ", f2 = "bvec4") : "any" === e2 && (i2 = "0.0", h2 = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ", f2 = "bvec4");
        var p2 = "";
        o2 % n2 > 0 && (p2 = "\n        if (inIdx < 0 || inIdx >= " + o2 + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + i2 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + p2 + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n2 + ";\n\n        vec4 minMaxValue = vec4(" + i2 + ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " + c2 + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + f2 + " values = " + f2 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + h2 + "\n        }\n\n        int inIdx = inOffset + " + c2 + ";\n        if (" + (1 === l3) + ") {\n          " + f2 + " values = " + f2 + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + h2 + "\n        } else if (" + (2 === l3) + ") {\n          " + f2 + " values = " + f2 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + h2 + "\n        } else if (" + (3 === l3) + ") {\n          " + f2 + " values = " + f2 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + h2 + "\n        }\n        setOutput(" + s2 + ");\n      }\n    ";
      };
    }();
    Wi = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t2;
        for (var n2 = "", r2 = 0; r2 < 4; r2++) {
          var o2 = "thisRC = rc;";
          r2 % 2 == 1 && (o2 += "thisRC.z += 1;"), r2 > 1 && (o2 += "thisRC.y += 1;"), n2 += "\n        " + o2 + "\n        " + (r2 > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") + "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + r2 + "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " + (r2 > 0 ? "}" : "") + "\n      ";
        }
        this.userCode = "\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + jo(["r", "c", "d"], e2) + "\n      return ivec3(r, c, d);\n    }\n  \n      " + Xo(t2) + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " + t2[1] + ";\n        int cols = " + t2[2] + ";\n\n        " + n2 + "\n\n        setOutput(result);\n      }\n    ";
      };
    }();
    Ui = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e2.shape;
        var r2 = e2.shape, o2 = r2[1], a2 = r2[2], i2 = t2.shape, u2 = i2[1], s2 = i2[2], c2 = [n2 && u2 > 1 ? o2 - 1 : o2, n2 && s2 > 1 ? a2 - 1 : a2], l3 = [n2 && u2 > 1 ? u2 - 1 : u2, n2 && s2 > 1 ? s2 - 1 : s2], h2 = c2[0] / l3[0], f2 = c2[1] / l3[1], p2 = 1 / h2, d2 = 1 / f2, v2 = 2 * Math.ceil(p2) + 2, m2 = 2 * Math.ceil(d2) + 2;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h2 + ");\n        const float widthScale = float(" + f2 + ");\n\n        const float invHeightScale = float(" + p2 + ");\n        const float invWidthScale = float(" + d2 + ");\n\n        const int winHeight = int(" + v2 + ");\n        const int winWidth = int(" + m2 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + u2 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + s2 + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (o2 - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (a2 - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
      };
    }();
    Vi = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        this.variableNames = ["A"], this.outputShape = [];
        var o2 = t2[0], a2 = t2[1], i2 = t2[2], u2 = t2[3];
        this.outputShape = [o2, e2, n2, u2];
        var s2 = [r2 && e2 > 1 ? a2 - 1 : a2, r2 && n2 > 1 ? i2 - 1 : i2], c2 = [r2 && e2 > 1 ? e2 - 1 : e2, r2 && n2 > 1 ? n2 - 1 : n2];
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + s2[0] / c2[0] + ",\n          " + s2[1] / c2[1] + ");\n      const vec2 inputShapeRC = vec2(" + a2 + ".0, " + i2 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
      };
    }();
    zi = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
        var o2 = t2[0], a2 = t2[1], i2 = t2[2], u2 = t2[3];
        this.outputShape = [o2, e2, n2, u2];
        var s2 = [r2 && e2 > 1 ? a2 - 1 : a2, r2 && n2 > 1 ? i2 - 1 : i2], c2 = [r2 && e2 > 1 ? e2 - 1 : e2, r2 && n2 > 1 ? n2 - 1 : n2];
        this.userCode = "\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          " + s2[0] / c2[0] + ",\n          " + s2[1] / c2[1] + ",\n          " + s2[1] / c2[1] + ");\n      const vec3 inputShapeRC = vec3(" + a2 + ".0, " + i2 + ".0,\n                                     " + i2 + ".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < " + (u2 - 1) + ";\n        bool hasNextRow = coords.z < " + (n2 - 1) + ";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";
      };
    }();
    Gi = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e2.shape;
        var r2 = e2.shape, o2 = r2[1], a2 = r2[2], i2 = t2.shape, u2 = i2[1], s2 = i2[2], c2 = [n2 && u2 > 1 ? o2 - 1 : o2, n2 && s2 > 1 ? a2 - 1 : a2], l3 = [n2 && u2 > 1 ? u2 - 1 : u2, n2 && s2 > 1 ? s2 - 1 : s2], h2 = c2[0] / l3[0], f2 = c2[1] / l3[1], p2 = 1 / h2, d2 = 1 / f2, v2 = 2 * Math.ceil(p2) + 2, m2 = 2 * Math.ceil(d2) + 2;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h2 + ");\n        const float widthScale = float(" + f2 + ");\n\n        const float invHeightScale = float(" + p2 + ");\n        const float invWidthScale = float(" + d2 + ");\n\n        const int winHeight = int(" + v2 + ");\n        const int winWidth = int(" + m2 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + u2 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + s2 + ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" + c2[0] + ") *\n                (float(dyR) / float(" + l3[0] + "));\n\n            float sourceFracCol =\n                float(" + c2[1] + ") *\n                  (float(dyC) / float(" + l3[1] + "));\n\n            int sourceNearestRow = int(min(\n                float(int(" + o2 + ") - 1),\n                " + n2 + " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" + a2 + ") - 1),\n                " + n2 + " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
      };
    }();
    Hi = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2) {
        this.variableNames = ["A"], this.outputShape = [];
        var o2 = t2[0], a2 = t2[1], i2 = t2[2], u2 = t2[3];
        this.outputShape = [o2, e2, n2, u2];
        var s2 = [r2 && e2 > 1 ? a2 - 1 : a2, r2 && n2 > 1 ? i2 - 1 : i2], c2 = [r2 && e2 > 1 ? e2 - 1 : e2, r2 && n2 > 1 ? n2 - 1 : n2], l3 = r2 ? "0.5" : "0.0";
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + s2[0] / c2[0] + ",\n          " + s2[1] / c2[1] + ");\n      const vec2 inputShapeRC = vec2(" + a2 + ".0, " + i2 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + l3 + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
      };
    }();
    qi = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["x"];
        var n2 = t2.length;
        if (n2 > 4)
          throw new Error("WebGL backend: Reverse of rank-" + n2 + " tensor is not yet supported");
        if (this.outputShape = t2, 1 !== n2) {
          var r2 = t2.map(function(n3, r3) {
            return function(n4) {
              return -1 !== e2.indexOf(n4) && 1 !== t2[n4] ? t2[n4] + " - coords[" + n4 + "] - 1" : "coords[" + n4 + "]";
            }(r3);
          }).join(","), o2 = aa(n2);
          this.userCode = "\n      void main() {\n        " + o2 + " coords = getOutputCoords();\n        setOutput(getX(" + r2 + "));\n      }\n    ";
        } else
          this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + t2[0] + " - coord - 1));\n        }\n      ";
      };
    }();
    Ki = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
        var n2 = t2.length;
        if (n2 > 4)
          throw new Error("WebGL backend: Reverse of rank-" + n2 + " tensor is not yet supported");
        this.outputShape = t2;
        var r2 = qo("rc", n2), o2 = r2[n2 - 1] + " + 1 < " + this.outputShape[n2 - 1], a2 = r2[n2 - 2] + " + 1 < " + this.outputShape[n2 - 2], i2 = aa(n2);
        function u2(n3) {
          var r3 = t2.map(function(r4, o3) {
            return function(n4, r5) {
              return -1 !== e2.indexOf(n4) && 1 !== t2[n4] ? t2[n4] + " - " + r5[n4] + " - 1" : "" + r5[n4];
            }(o3, n3);
          });
          return "getChannel(getX(" + r3.join(",") + "), vec2(" + r3.slice(-2).join(",") + "))";
        }
        this.userCode = 1 === n2 ? "\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(" + t2[0] + " - rc - 1),\n            " + t2[0] + " - rc - 1);\n          if(" + o2 + "){\n              result.g = getChannel(getX(" + t2[0] + " - (rc  + 1) - 1),\n                " + t2[0] + " - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      " : "\n        void main() {\n          " + i2 + " rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = " + function(t3) {
          return u2(t3);
        }(r2.slice()) + ";\n          if(" + o2 + "){\n            result.g = " + function(t3) {
          return t3[n2 - 1] = "(" + t3[n2 - 1] + " + 1)", u2(t3);
        }(r2.slice()) + ";\n          }\n          if(" + a2 + ") {\n            result.b = " + function(t3) {
          return t3[n2 - 2] = "(" + t3[n2 - 2] + " + 1)", u2(t3);
        }(r2.slice()) + ";\n            if(" + o2 + ") {\n              result.a = " + function(t3) {
          return t3[n2 - 1] = "(" + t3[n2 - 1] + " + 1)", t3[n2 - 2] = "(" + t3[n2 - 2] + " + 1)", u2(t3);
        }(r2.slice()) + ";\n            }\n          }\n          setOutput(result);\n        }\n    ";
      };
    }();
    ji = /* @__PURE__ */ function() {
      return function(t2, e2, n2, r2, o2, a2, i2) {
        void 0 === i2 && (i2 = true), this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a2;
        var u2 = aa(o2.length), s2 = aa(a2.length), c2 = "";
        1 === n2 ? c2 = "i" : 2 === n2 && (c2 = "i, j");
        var l3 = "getIndices(" + c2 + ")", h2 = "";
        1 === r2 ? h2 = "i" : 2 === r2 && (h2 = "i, coords[1]");
        var f2 = "getUpdates(" + h2 + ")", p2 = e2 > 1 ? "strides[j]" : "strides";
        this.userCode = "\n        " + u2 + " strides = " + u2 + "(" + o2 + ");\n\n        void main() {\n          " + s2 + " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " + t2 + "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " + e2 + "; j++) {\n              int index = round(" + l3 + ");\n              flattenedIndex += index * " + p2 + ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " + f2 + ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
      };
    }();
    Xi = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["x", "segmentIds"];
        var n2 = t2.windowSize, r2 = t2.batchSize, o2 = t2.inSize, a2 = t2.numSegments, i2 = a2 * Math.ceil(o2 / n2);
        this.outputShape = [r2, i2];
        var u2 = 4 * Math.floor(n2 / 4), s2 = n2 % 4, c2 = "\n        sumValue += dot(values, segFilter);\n    ", l3 = "";
        o2 % n2 > 0 && (l3 = "\n        if (inIdx < 0 || inIdx >= " + o2 + ") {\n          return initializationValue;\n        }\n      ");
        var h2 = "";
        o2 % n2 > 0 && (h2 = "\n        if (inIdx < 0 || inIdx >= " + o2 + ") {\n          return -1.0;\n        }\n      "), this.userCode = "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " + l3 + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + h2 + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + a2 + ")) * float(" + n2 + "));\n        int currentSeg = int(mod(float(outIdx), float(" + a2 + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + u2 + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + c2 + "\n        }\n\n        int inIdx = inOffset + " + u2 + ";\n        if (" + (1 === s2) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + c2 + "\n        } else if (" + (2 === s2) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + c2 + "\n        } else if (" + (3 === s2) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + c2 + "\n        }\n        setOutput(sumValue);\n      }\n    ";
      };
    }();
    $i = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        var r2, o2;
        if (this.variableNames = ["c", "a", "b"], this.outputShape = e2, n2 > 4)
          throw Error("Where for rank " + n2 + " is not yet supported");
        if (1 === n2)
          o2 = "resRC", r2 = "resRC";
        else {
          for (var a2 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], i2 = [], u2 = [], s2 = 0; s2 < e2.length; s2++)
            u2.push("" + a2[s2]), s2 < t2 && i2.push("" + a2[s2]);
          r2 = i2.join(), o2 = u2.join();
        }
        var c2 = aa(n2);
        this.userCode = "\n      void main() {\n        " + c2 + " resRC = getOutputCoords();\n        float cVal = getC(" + r2 + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + o2 + "));\n        } else {\n          setOutput(getB(" + o2 + "));\n        }\n      }\n    ";
      };
    }();
    Yi = function() {
      function t2(t3) {
        this.variableNames = ["source"], this.outputShape = t3, this.rank = t3.length;
        var e2, n2 = aa(this.rank), r2 = "uniform int start[" + this.rank + "];", o2 = function(t4) {
          if (1 === t4)
            return "sourceLoc";
          if (t4 <= 6)
            return Qi.slice(0, t4).map(function(t5) {
              return "sourceLoc." + t5;
            }).join(",");
          throw Error("Slicing for rank " + t4 + " is not yet supported");
        }(this.rank);
        e2 = "\n        " + n2 + " sourceLoc;\n        " + n2 + " coords = getOutputCoords();\n        " + t3.map(function(t4, e3) {
          return "sourceLoc." + Qi[e3] + " = start[" + e3 + "] + coords." + Qi[e3] + ";";
        }).join("\n") + "\n      ", this.userCode = "\n      " + r2 + "\n      void main() {\n        " + e2 + "\n        setOutput(getSource(" + o2 + "));\n      }\n    ";
      }
      return t2.prototype.getCustomSetupFunc = function(t3) {
        var e2 = this;
        if (t3.length !== this.rank)
          throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t3.length + ")");
        return function(n2, r2) {
          null == e2.startLoc && (e2.startLoc = n2.getUniformLocationNoThrow(r2, "start"), null == e2.startLoc) || n2.gl.uniform1iv(e2.startLoc, t3);
        };
      }, t2;
    }();
    Qi = ["x", "y", "z", "w", "u", "v"];
    Ji = function() {
      function t2(t3) {
        this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t3, this.rank = t3.length;
        var e2 = aa(this.rank), n2 = qo("coords", this.rank), r2 = qo("sourceLoc", this.rank), o2 = 1 === this.rank ? "sourceLoc" : "vec2(" + r2.slice(-2).join() + ")", a2 = "getChannel(getSource(" + r2.join() + "), " + o2 + ")", i2 = "\n      result.x = " + a2 + ";\n      if (++" + n2[this.rank - 1] + " < " + t3[this.rank - 1] + ") {\n        ++" + r2[this.rank - 1] + ";\n        result.y = " + a2 + ";\n        --" + r2[this.rank - 1] + ";\n      }\n    ", u2 = 1 === this.rank ? "" : "\n      --" + n2[this.rank - 1] + ";\n      if (++" + n2[this.rank - 2] + " < " + t3[this.rank - 2] + ") {\n        ++" + r2[this.rank - 2] + ";\n        result.z = " + a2 + ";\n        if (++" + n2[this.rank - 1] + " < " + t3[this.rank - 1] + ") {\n          ++" + r2[this.rank - 1] + ";\n          result.w = " + a2 + ";\n        }\n      }\n    ", s2 = this.rank <= 4 ? "sourceLoc = coords +\n            " + e2 + "(" + t3.map(function(t4, e3) {
          return "start[" + e3 + "]";
        }).join() + ");" : t3.map(function(t4, e3) {
          return r2[e3] + " = " + n2[e3] + " + start[" + e3 + "];";
        }).join("\n");
        this.userCode = "\n      uniform int start[" + this.rank + "];\n      void main() {\n        " + e2 + " coords = getOutputCoords();\n        " + e2 + " sourceLoc;\n        " + s2 + "\n        vec4 result = vec4(0.);\n        " + i2 + "\n        " + u2 + "\n        setOutput(result);\n      }\n    ";
      }
      return t2.prototype.getCustomSetupFunc = function(t3) {
        var e2 = this;
        if (t3.length !== this.rank)
          throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t3.length + ")");
        return function(n2, r2) {
          null == e2.startLoc && (e2.startLoc = n2.getUniformLocationNoThrow(r2, "start"), null == e2.startLoc) || n2.gl.uniform1iv(e2.startLoc, t3);
        };
      }, t2;
    }();
    Zi = /* @__PURE__ */ function() {
      return function(t2, e2, n2) {
        this.variableNames = ["x"], this.outputShape = n2;
        var r2 = n2.length, o2 = aa(n2.length), a2 = aa(n2.length), i2 = "";
        if (1 === r2)
          i2 = "coords * strides + begin";
        else {
          var u2 = 0;
          i2 = n2.map(function(t3, e3) {
            return u2++, 1 === n2.length ? "coords * strides[" + e3 + "] + begin[" + e3 + "]" : "coords[" + (u2 - 1) + "] * strides[" + e3 + "] + begin[" + e3 + "]";
          }).join(",");
        }
        this.userCode = "\n      " + o2 + " begin = " + o2 + "(" + t2 + ");\n      " + o2 + " strides = " + o2 + "(" + e2 + ");\n\n      void main() {\n        " + a2 + " coords = getOutputCoords();\n        setOutput(getX(" + i2 + "));\n      }\n    ";
      };
    }();
    tu = function() {
      function t2(t3) {
        this.gpgpu = t3, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = false, this.usedTextures = {};
      }
      return t2.prototype.acquireTexture = function(t3, e2, n2) {
        var r2, o2 = eu(e2, n2), a2 = nu(t3, o2, n2);
        if (a2 in this.freeTextures || (this.freeTextures[a2] = []), a2 in this.usedTextures || (this.usedTextures[a2] = []), this.freeTextures[a2].length > 0) {
          this.numFreeTextures--, this.numUsedTextures++, this.log();
          var i2 = this.freeTextures[a2].shift();
          return this.usedTextures[a2].push(i2), i2;
        }
        return this.numUsedTextures++, this.log(), o2 === Bt.PACKED_2X2_FLOAT32 ? r2 = this.gpgpu.createPackedMatrixTexture(t3[0], t3[1]) : o2 === Bt.PACKED_2X2_FLOAT16 ? r2 = this.gpgpu.createFloat16PackedMatrixTexture(t3[0], t3[1]) : o2 === Bt.UNPACKED_FLOAT32 ? r2 = this.gpgpu.createFloat32MatrixTexture(t3[0], t3[1]) : o2 === Bt.UNPACKED_FLOAT16 ? r2 = this.gpgpu.createFloat16MatrixTexture(t3[0], t3[1]) : o2 === Bt.PACKED_4X1_UNSIGNED_BYTE && (r2 = this.gpgpu.createUnsignedBytesMatrixTexture(t3[0], t3[1])), this.usedTextures[a2].push(r2), r2;
      }, t2.prototype.releaseTexture = function(t3, e2, n2, r2) {
        if (null != this.freeTextures) {
          var o2 = nu(e2, eu(n2, r2), r2);
          o2 in this.freeTextures || (this.freeTextures[o2] = []), this.freeTextures[o2].push(t3), this.numFreeTextures++, this.numUsedTextures--;
          var a2 = this.usedTextures[o2], i2 = a2.indexOf(t3);
          if (i2 < 0)
            throw new Error("Cannot release a texture that was never provided by this texture manager");
          a2.splice(i2, 1), this.log();
        }
      }, t2.prototype.log = function() {
        if (this.logEnabled) {
          var t3 = this.numFreeTextures + this.numUsedTextures;
          console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + t3 + ")");
        }
      }, t2.prototype.getNumUsedTextures = function() {
        return this.numUsedTextures;
      }, t2.prototype.getNumFreeTextures = function() {
        return this.numFreeTextures;
      }, t2.prototype.dispose = function() {
        var t3 = this;
        if (null != this.freeTextures) {
          for (var e2 in this.freeTextures)
            this.freeTextures[e2].forEach(function(e3) {
              t3.gpgpu.deleteMatrixTexture(e3);
            });
          for (var e2 in this.usedTextures)
            this.usedTextures[e2].forEach(function(e3) {
              t3.gpgpu.deleteMatrixTexture(e3);
            });
          this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;
        }
      }, t2;
    }();
    ru = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["A"];
        for (var n2 = new Array(t2.length), r2 = 0; r2 < n2.length; r2++)
          n2[r2] = t2[r2] * e2[r2];
        this.outputShape = n2, this.rank = n2.length;
        var o2 = aa(this.rank), a2 = function(t3) {
          var e3 = t3.length;
          if (e3 > 5)
            throw Error("Tile for rank " + e3 + " is not yet supported");
          if (1 === e3)
            return "imod(resRC, " + t3[0] + ")";
          for (var n3 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], r3 = [], o3 = 0; o3 < t3.length; o3++)
            r3.push("imod(" + n3[o3] + ", " + t3[o3] + ")");
          return r3.join();
        }(t2);
        this.userCode = "\n      void main() {\n        " + o2 + " resRC = getOutputCoords();\n        setOutput(getA(" + a2 + "));\n      }\n    ";
      };
    }();
    ou = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["A"];
        for (var n2 = new Array(t2.length), r2 = 0; r2 < n2.length; r2++)
          n2[r2] = t2[e2[r2]];
        this.outputShape = n2, this.rank = n2.length;
        var o2 = aa(this.rank), a2 = function(t3) {
          var e3 = t3.length;
          if (e3 > 6)
            throw Error("Transpose for rank " + e3 + " is not yet supported");
          for (var n3 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], r3 = new Array(e3), o3 = 0; o3 < t3.length; o3++)
            r3[t3[o3]] = n3[o3];
          return r3.join();
        }(e2);
        this.userCode = "\n    void main() {\n      " + o2 + " resRC = getOutputCoords();\n      setOutput(getA(" + a2 + "));\n    }\n    ";
      };
    }();
    au = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
        for (var n2 = new Array(t2.length), r2 = 0; r2 < n2.length; r2++)
          n2[r2] = t2[e2[r2]];
        if (this.outputShape = n2, this.rank = n2.length, this.rank > 6)
          throw Error("Packed transpose for rank " + this.rank + " is not yet supported.");
        var o2 = aa(this.rank), a2 = Ho("rc", this.rank), i2 = new Array(this.rank);
        for (r2 = 0; r2 < e2.length; r2++)
          i2[e2[r2]] = a2[r2];
        var u2 = "vec2(" + i2.slice(-2).join() + ")", s2 = "++" + a2[this.rank - 1] + " < " + n2[this.rank - 1], c2 = "getChannel(getA(" + i2.join() + "), " + u2 + ")";
        this.userCode = "\n    void main() {\n      " + o2 + " rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = " + c2 + ";\n      if(" + s2 + ") {\n        result[1] = " + c2 + ";\n      }\n      --" + a2[this.rank - 1] + ";\n      if(++" + a2[this.rank - 2] + " < " + n2[this.rank - 2] + ") {\n        result[2] = " + c2 + ";\n        if(" + s2 + ") {\n          result[3] = " + c2 + ";\n        }\n      }\n      setOutput(result);\n    }\n    ";
      };
    }();
    iu = 1.7580993408473768;
    uu = 1.0507009873554805;
    su = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["A"], this.outputShape = t2, this.userCode = "\n      float unaryOperation(float x) {\n        " + e2 + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
      };
    }();
    cu = "if (isnan(x)) return x;";
    lu = "return x;";
    hu = "return abs(x);";
    fu = cu + "\n  return (x < 0.0) ? 0.0 : x;\n";
    pu = cu + "\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";
    du = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
    vu = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + iu + ";\n  float scale = " + uu + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
    mu = "return -x;";
    gu = "return ceil(x);";
    yu = "return floor(x);";
    xu = "return exp(x);";
    bu = "return exp(x) - 1.0;";
    wu = cu + "\n  return sin(x);\n";
    Cu = cu + "\n  return cos(x);\n";
    Eu = cu + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n";
    Ru = cu + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n";
    Iu = cu + "\n  return atan(x);\n";
    ku = cu + "return log(x + sqrt(x * x + 1.0));";
    Su = cu + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));";
    Au = cu + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;";
    Du = "return x;";
    Tu = "return x;";
    Nu = "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";
    Fu = "\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";
    Ou = "\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";
    _u = /* @__PURE__ */ function() {
      return function(t2, e2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t2, this.userCode = "\n      vec4 unaryOperation(vec4 x) {\n        " + e2 + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
      };
    }();
    Mu = /* @__PURE__ */ function() {
      return function(t2) {
        this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = t2;
        var e2 = t2.length, n2 = qo("rc", e2), r2 = aa(e2), o2 = function(t3, e3) {
          if (1 === t3)
            return "rc";
          for (var n3 = "", r3 = 0; r3 < t3; r3++)
            n3 += e3[r3], r3 < t3 - 1 && (n3 += ",");
          return n3;
        }(e2, n2), a2 = n2.slice(-2), i2 = e2 <= 1 ? "rc" : "vec2(" + a2.join(",") + ")";
        this.userCode = "\n      void main() {\n        " + r2 + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + o2 + ");\n\n        setOutput(getChannel(packedInput, " + i2 + "));\n      }\n    ";
      };
    }();
    Bu = {};
    Lu = 600;
    Wu = function(t2) {
      function o2(e2) {
        var n2, r2 = t2.call(this) || this;
        if (r2.gpgpu = e2, r2.pendingRead = /* @__PURE__ */ new WeakMap(), r2.pendingDisposal = /* @__PURE__ */ new WeakSet(), r2.dataRefCount = /* @__PURE__ */ new WeakMap(), r2.numBytesInGPU = 0, r2.uploadWaitMs = 0, r2.downloadWaitMs = 0, r2.warnedAboutMemory = false, r2.pendingDeletes = 0, r2.disposed = false, !a().getBool("HAS_WEBGL"))
          throw new Error("WebGL is not supported on this device");
        if (null == e2) {
          var o3 = Ut(a().getNumber("WEBGL_VERSION"));
          r2.binaryCache = (n2 = a().getNumber("WEBGL_VERSION")) in Bu ? Bu[n2] : (Bu[n2] = {}, Bu[n2]), r2.gpgpu = new Ci(o3), r2.canvas = o3.canvas, r2.gpgpuCreatedLocally = true;
        } else
          r2.binaryCache = {}, r2.gpgpuCreatedLocally = false, r2.canvas = e2.gl.canvas;
        return r2.textureManager = new tu(r2.gpgpu), r2.numMBBeforeWarning = null == a().global.screen ? 1024 : a().global.screen.height * a().global.screen.width * window.devicePixelRatio * Lu / 1024 / 1024, r2.texData = new so(r2, Nt), r2;
      }
      return e(o2, t2), o2.prototype.numDataIds = function() {
        return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;
      }, o2.prototype.fromPixels = function(t3, e2) {
        if (null == t3)
          throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
        var n2 = "undefined" != typeof OffscreenCanvas && t3 instanceof OffscreenCanvas || "undefined" != typeof HTMLCanvasElement && t3 instanceof HTMLCanvasElement, r2 = t3.data instanceof Uint8Array, o3 = "undefined" != typeof ImageData && t3 instanceof ImageData, i2 = "undefined" != typeof HTMLVideoElement && t3 instanceof HTMLVideoElement, u2 = "undefined" != typeof HTMLImageElement && t3 instanceof HTMLImageElement, s2 = i2 ? [t3.videoWidth, t3.videoHeight] : [t3.width, t3.height], c2 = s2[0], l3 = s2[1], h2 = [l3, c2], f2 = [l3, c2, e2];
        if (!(n2 || r2 || o3 || i2 || u2))
          throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was " + t3.constructor.name);
        (u2 || i2) && (null == this.fromPixels2DContext && (this.fromPixels2DContext = Vt(a().getNumber("WEBGL_VERSION")).getContext("2d")), this.fromPixels2DContext.canvas.width = c2, this.fromPixels2DContext.canvas.height = l3, this.fromPixels2DContext.drawImage(t3, 0, 0, c2, l3), t3 = this.fromPixels2DContext.canvas);
        var p2, d2, v2 = this.makeTensorInfo(h2, "int32");
        return this.texData.get(v2.dataId).usage = Mt.PIXELS, this.gpgpu.uploadPixelDataToTexture(this.getTexture(v2.dataId), t3), a().getBool("WEBGL_PACK") ? (p2 = new ei(f2), d2 = this.compileAndRun(p2, [v2])) : (p2 = new ti(f2), d2 = this.compileAndRun(p2, [v2])), this.disposeData(v2.dataId), d2;
      }, o2.prototype.write = function(t3, e2, n2) {
        if (a().getBool("DEBUG") && this.checkNumericalProblems(t3), "complex64" === n2 && null != t3)
          throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
        var r2 = {};
        return this.texData.set(r2, { shape: e2, dtype: n2, values: t3, usage: Mt.UPLOAD }), r2;
      }, o2.prototype.move = function(t3, e2, n2, r2) {
        if (a().getBool("DEBUG") && this.checkNumericalProblems(e2), "complex64" === r2)
          throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
        this.texData.set(t3, { shape: n2, dtype: r2, values: e2, usage: Mt.UPLOAD });
      }, o2.prototype.readSync = function(t3) {
        var e2 = this.texData.get(t3), n2 = e2.values, r2 = e2.dtype, o3 = e2.complexTensors, a2 = e2.slice, i2 = e2.shape, u2 = e2.isPacked;
        if (null != a2) {
          var s2 = void 0;
          s2 = u2 ? new _u(i2, Du) : new su(i2, Du);
          var c2 = this.runWebGLProgram(s2, [{ dataId: t3, shape: i2, dtype: r2 }], r2), l3 = this.readSync(c2.dataId);
          return this.disposeData(c2.dataId), l3;
        }
        if (null != n2)
          return this.convertAndCacheOnCPU(t3);
        if ("string" === r2)
          return n2;
        var h2, f2, p2 = null != this.activeTimers;
        (p2 && (h2 = Y()), "complex64" === r2) ? f2 = No(o3.real.dataSync(), o3.imag.dataSync()) : f2 = this.getValuesFromTexture(t3);
        return p2 && (this.downloadWaitMs += Y() - h2), this.convertAndCacheOnCPU(t3, f2);
      }, o2.prototype.read = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2, o3, i2, u2, s2, c2, l3, h2, f2, p2, d2, v2, m2, g2, y2, x2, b2, C2, E2, R2, I2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                if (this.pendingRead.has(t3))
                  return e2 = this.pendingRead.get(t3), [2, new Promise(function(t4) {
                    return e2.push(t4);
                  })];
                if (n2 = this.texData.get(t3), o3 = n2.values, i2 = n2.shape, u2 = n2.slice, s2 = n2.dtype, c2 = n2.complexTensors, l3 = n2.isPacked, null != u2)
                  return h2 = void 0, h2 = l3 ? new _u(i2, Du) : new su(i2, Du), f2 = this.runWebGLProgram(h2, [{ dataId: t3, shape: i2, dtype: s2 }], s2), p2 = this.read(f2.dataId), this.disposeData(f2.dataId), [2, p2];
                if (null != o3)
                  return [2, this.convertAndCacheOnCPU(t3)];
                if (!a().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && 2 === a().getNumber("WEBGL_VERSION"))
                  throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
                return d2 = null, "complex64" !== s2 && a().get("WEBGL_BUFFER_SUPPORTED") && (v2 = this.decode(t3), m2 = this.texData.get(v2.dataId), d2 = (I2 = this.gpgpu).createBufferFromTexture.apply(I2, [m2.texture].concat(Gt(i2)))), this.pendingRead.set(t3, []), "complex64" === s2 ? [3, 2] : [4, this.gpgpu.createAndWaitForFence()];
              case 1:
                r2.sent(), r2.label = 2;
              case 2:
                return "complex64" !== s2 ? [3, 4] : [4, Promise.all([c2.real.data(), c2.imag.data()])];
              case 3:
                return y2 = r2.sent(), x2 = y2[0], b2 = y2[1], g2 = No(x2, b2), [3, 5];
              case 4:
                null == d2 ? g2 = this.getValuesFromTexture(t3) : (C2 = w(i2), g2 = this.gpgpu.downloadFloat32MatrixFromBuffer(d2, C2)), r2.label = 5;
              case 5:
                return null != v2 && this.disposeData(v2.dataId), E2 = this.convertAndCacheOnCPU(t3, g2), R2 = this.pendingRead.get(t3), this.pendingRead.delete(t3), R2.forEach(function(t4) {
                  return t4(E2);
                }), this.pendingDisposal.has(t3) && (this.pendingDisposal.delete(t3), this.disposeData(t3), this.pendingDeletes--), [2, E2];
            }
          });
        });
      }, o2.prototype.checkNumericalProblems = function(t3) {
        if (null != t3)
          for (var e2 = 0; e2 < t3.length; e2++) {
            var n2 = t3[e2];
            if (!$t(n2)) {
              if (a().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))
                throw Error("The value " + n2 + " cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");
              throw Error("The value " + n2 + " cannot be represented on this device.");
            }
          }
      }, o2.prototype.getValuesFromTexture = function(t3) {
        var e2, n2 = this.texData.get(t3), r2 = n2.shape, o3 = n2.dtype, i2 = n2.isPacked, u2 = w(r2);
        if (a().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
          var s2 = this.decode(t3), c2 = this.texData.get(s2.dataId), l3 = (e2 = this.gpgpu).downloadMatrixFromPackedTexture.apply(e2, [c2.texture].concat(Gt(r2))).subarray(0, u2);
          return this.disposeData(s2.dataId), l3;
        }
        var h2 = a().getBool("WEBGL_PACK") && true === i2, f2 = h2 ? Re(r2) : r2, p2 = h2 ? new ja(f2) : new Ka(f2), d2 = this.runWebGLProgram(p2, [{ shape: f2, dtype: o3, dataId: t3 }], "float32"), v2 = this.texData.get(d2.dataId), m2 = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v2.texture, v2.texShape[0], v2.texShape[1]).subarray(0, u2);
        return this.disposeData(d2.dataId), m2;
      }, o2.prototype.time = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2, o3, a2, i2, u2, s2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                return e2 = this.activeTimers, n2 = [], o3 = false, null == this.programTimersStack ? (this.programTimersStack = n2, o3 = true) : this.activeTimers.push(n2), this.activeTimers = n2, t3(), a2 = b(this.activeTimers.map(function(t4) {
                  return t4.query;
                })).filter(function(t4) {
                  return null != t4;
                }), i2 = b(this.activeTimers.map(function(t4) {
                  return t4.name;
                })).filter(function(t4) {
                  return null != t4;
                }), this.activeTimers = e2, o3 && (this.programTimersStack = null), [4, Promise.all(a2)];
              case 1:
                return u2 = r2.sent(), s2 = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: m(u2), getExtraProfileInfo: function() {
                  return u2.map(function(t4, e3) {
                    return { name: i2[e3], ms: t4 };
                  }).map(function(t4) {
                    return t4.name + ": " + t4.ms;
                  }).join(", ");
                }, wallMs: null }, this.uploadWaitMs = 0, this.downloadWaitMs = 0, [2, s2];
            }
          });
        });
      }, o2.prototype.memory = function() {
        return { unreliable: false, numBytesInGPU: this.numBytesInGPU };
      }, o2.prototype.startTimer = function() {
        return a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? this.gpgpu.beginQuery() : { startMs: Y(), endMs: null };
      }, o2.prototype.endTimer = function(t3) {
        return a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (this.gpgpu.endQuery(), t3) : (t3.endMs = Y(), t3);
      }, o2.prototype.getQueryTime = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2;
          return r(this, function(n2) {
            return a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? [2, this.gpgpu.waitForQueryAndGetTime(t3)] : [2, (e2 = t3).endMs - e2.startMs];
          });
        });
      }, o2.prototype.disposeData = function(t3) {
        if (!this.pendingDisposal.has(t3)) {
          if (this.pendingRead.has(t3))
            return this.pendingDisposal.add(t3), void this.pendingDeletes++;
          if (this.texData.has(t3)) {
            this.releaseGPUData(t3);
            var e2 = this.texData.get(t3).complexTensors;
            null != e2 && (e2.real.dispose(), e2.imag.dispose()), this.texData.delete(t3);
          }
        }
      }, o2.prototype.releaseGPUData = function(t3) {
        var e2 = this.texData.get(t3), n2 = e2.texture, r2 = e2.dtype, o3 = e2.texShape, a2 = e2.usage, i2 = e2.isPacked, u2 = e2.slice, s2 = u2 && u2.origDataId || t3, c2 = this.dataRefCount.get(s2);
        c2 > 1 ? this.dataRefCount.set(s2, c2 - 1) : (this.dataRefCount.delete(s2), null != n2 && (this.numBytesInGPU -= this.computeBytes(o3, r2), this.textureManager.releaseTexture(n2, o3, a2, i2)));
        var l3 = this.texData.get(t3);
        l3.texture = null, l3.texShape = null, l3.isPacked = false, l3.slice = null;
      }, o2.prototype.getTexture = function(t3) {
        return this.uploadToGPU(t3), this.texData.get(t3).texture;
      }, o2.prototype.getDataInfo = function(t3) {
        return this.texData.get(t3);
      }, o2.prototype.getCPUBackend = function() {
        return a().getBool("WEBGL_CPU_FORWARD") ? (null == this.cpuBackend && (this.cpuBackend = Nt.findBackend("cpu")), this.cpuBackend) : null;
      }, o2.prototype.shouldExecuteOnCPU = function(t3, e2) {
        var n2 = this;
        return void 0 === e2 && (e2 = 128), null != this.getCPUBackend() && t3.every(function(t4) {
          return null == n2.texData.get(t4.dataId).texture && t4.size < e2;
        });
      }, o2.prototype.getGPGPUContext = function() {
        return this.gpgpu;
      }, o2.prototype.complex = function(t3, e2) {
        var n2 = this.makeOutput(t3.shape, "complex64");
        return this.texData.get(n2.dataId).complexTensors = { real: Nt.keep(t3.clone()), imag: Nt.keep(e2.clone()) }, n2;
      }, o2.prototype.real = function(t3) {
        return this.texData.get(t3.dataId).complexTensors.real.clone();
      }, o2.prototype.imag = function(t3) {
        return this.texData.get(t3.dataId).complexTensors.imag.clone();
      }, o2.prototype.slice = function(t3, e2, n2) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.slice(t3, e2, n2);
        if (0 === w(n2))
          return kn([], n2, t3.dtype);
        var r2 = this.texData.get(t3.dataId).isPacked, o3 = Yr(t3.shape, e2, n2);
        if (r2 || !o3) {
          var i2 = a().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ji(n2) : new Yi(n2), u2 = i2.getCustomSetupFunc(e2);
          return this.compileAndRun(i2, [t3], null, u2);
        }
        return this.uploadToGPU(t3.dataId), this.shallowSlice(t3, e2, n2);
      }, o2.prototype.shallowSlice = function(t3, e2, n2) {
        var r2 = this.texData.get(t3.dataId), o3 = this.makeOutput(n2, t3.dtype), a2 = this.texData.get(o3.dataId);
        Object.assign(a2, r2), a2.shape = n2, a2.dtype = t3.dtype;
        var i2 = Qr(e2, t3.strides);
        r2.slice && (i2 += r2.slice.flatOffset), a2.slice = { flatOffset: i2, origDataId: r2.slice && r2.slice.origDataId || t3.dataId };
        var u2 = this.dataRefCount.get(a2.slice.origDataId) || 1;
        return this.dataRefCount.set(a2.slice.origDataId, u2 + 1), o3;
      }, o2.prototype.stridedSlice = function(t3, e2, n2, r2) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.stridedSlice(t3, e2, n2, r2);
        var o3 = jr(e2, n2, r2);
        if (o3.some(function(t4) {
          return 0 === t4;
        }))
          return kn([], o3);
        var a2 = new Zi(e2, r2, o3);
        return this.compileAndRun(a2, [t3]);
      }, o2.prototype.reverse = function(t3, e2) {
        var n2 = a().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ki(t3.shape, e2) : new qi(t3.shape, e2);
        return this.compileAndRun(n2, [t3]);
      }, o2.prototype.concat = function(t3, e2) {
        if ("complex64" === t3[0].dtype) {
          var n2 = t3.map(function(t4) {
            return Rn(t4);
          }), r2 = t3.map(function(t4) {
            return In(t4);
          });
          return En(this.concat(n2, e2), this.concat(r2, e2));
        }
        if (this.shouldExecuteOnCPU(t3))
          return this.cpuBackend.concat(t3, e2);
        if (1 === t3.length)
          return t3[0];
        if (t3.length > a().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
          var o3 = Math.floor(t3.length / 2), i2 = this.concat(t3.slice(0, o3), e2), u2 = this.concat(t3.slice(o3), e2);
          return this.concat([i2, u2], e2);
        }
        if (a().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && t3[0].rank > 1) {
          var s2 = new Sa(t3.map(function(t4) {
            return t4.shape;
          }), e2);
          return this.compileAndRun(s2, t3);
        }
        var c2 = wn(t3.map(function(t4) {
          return t4.shape;
        }), e2), l3 = t3.map(function(t4) {
          return t4.as2D(-1, w(t4.shape.slice(e2)));
        }), h2 = new ka(l3.map(function(t4) {
          return t4.shape;
        }));
        return this.compileAndRun(h2, l3).reshape(c2);
      }, o2.prototype.neg = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.neg(t3);
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, mu, t3.dtype);
        var e2 = new su(t3.shape, mu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.batchMatMul = function(t3, e2, n2, r2) {
        var o3 = n2 ? t3.shape[2] : t3.shape[1], a2 = r2 ? e2.shape[1] : e2.shape[2], i2 = n2 ? t3.shape[1] : t3.shape[2], u2 = t3.shape[0];
        if ((1 === o3 || 1 === a2) && i2 > 1e3) {
          n2 && (t3 = t3.transpose([0, 2, 1])), r2 && (e2 = e2.transpose([0, 2, 1]));
          var s2 = 1 === a2 ? t3 : t3.as3D(u2, i2, 1), c2 = 1 === a2 ? 2 : 1, l3 = 1 === a2 ? e2.as3D(u2, 1, i2) : e2;
          return this.multiply(s2, l3).sum(c2, true);
        }
        var h2 = Ct(t3.dtype, e2.dtype), f2 = new Ti(t3.shape, [u2, o3, a2], n2, r2);
        return this.compileAndRun(f2, [t3, e2], h2);
      }, o2.prototype.fusedBatchMatMul = function(t3) {
        var e2 = t3.a, n2 = t3.b, r2 = t3.transposeA, o3 = t3.transposeB, a2 = t3.bias, i2 = t3.activation, u2 = t3.preluActivationWeights, s2 = r2 ? e2.shape[2] : e2.shape[1], c2 = o3 ? n2.shape[1] : n2.shape[2], l3 = e2.shape[0], h2 = Ct(e2.dtype, n2.dtype), f2 = null != a2, p2 = null != u2, d2 = i2 ? Pu(i2, true) : null, v2 = new Ti(e2.shape, [l3, s2, c2], r2, o3, f2, d2, p2), m2 = [e2, n2];
        return a2 && m2.push(a2), u2 && m2.push(u2), this.compileAndRun(v2, m2, h2);
      }, o2.prototype.multiply = function(t3, e2) {
        if ("complex64" === t3.dtype) {
          var n2 = this.texData.get(t3.dataId), r2 = this.texData.get(e2.dataId), o3 = new va(pa, t3.shape, e2.shape), i2 = new va(da, t3.shape, e2.shape), u2 = [this.makeComplexComponentTensorInfo(t3, n2.complexTensors.real), this.makeComplexComponentTensorInfo(t3, n2.complexTensors.imag), this.makeComplexComponentTensorInfo(e2, r2.complexTensors.real), this.makeComplexComponentTensorInfo(e2, r2.complexTensors.imag)], s2 = this.compileAndRun(o3, u2), c2 = this.compileAndRun(i2, u2), l3 = this.complex(s2, c2);
          return s2.dispose(), c2.dispose(), l3;
        }
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.multiply(t3, e2);
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, ya, t3.dtype);
        var h2 = new ba(ya, t3.shape, e2.shape);
        return this.compileAndRun(h2, [t3, e2], t3.dtype);
      }, o2.prototype.batchNormalization = function(t3, e2, n2, r2, o3, i2) {
        var u2 = [t3, e2, n2], s2 = null;
        null != i2 && (s2 = i2.shape, u2.push(i2));
        var c2 = null;
        if (null != o3 && (c2 = o3.shape, u2.push(o3)), a().getBool("WEBGL_PACK_NORMALIZATION")) {
          var l3 = new fa(t3.shape, e2.shape, n2.shape, s2, c2, r2);
          return this.compileAndRun(l3, u2);
        }
        var h2 = new ha(t3.shape, e2.shape, n2.shape, s2, c2, r2);
        return this.compileAndRun(h2, u2);
      }, o2.prototype.localResponseNormalization4D = function(t3, e2, n2, r2, o3) {
        var i2 = a().getBool("WEBGL_PACK_NORMALIZATION") ? new Si(t3.shape, e2, n2, r2, o3) : new Ii(t3.shape, e2, n2, r2, o3);
        return this.compileAndRun(i2, [t3]);
      }, o2.prototype.LRNGrad = function(t3, e2, n2, r2, o3, a2, i2) {
        var u2 = new ki(e2.shape, r2, o3, a2, i2);
        return this.compileAndRun(u2, [e2, n2, t3]);
      }, o2.prototype.tile = function(t3, e2) {
        if ("string" === t3.dtype) {
          var n2 = this.readSync(t3.dataId).map(function(t4) {
            return Z(t4);
          });
          return Lo(ur(t3.shape, t3.dtype, n2), e2);
        }
        var r2 = new ru(t3.shape, e2);
        return this.compileAndRun(r2, [t3]);
      }, o2.prototype.pad = function(t3, e2, n2) {
        var r2 = a().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Mi(t3.shape, e2, n2) : new _i(t3.shape, e2, n2);
        return this.compileAndRun(r2, [t3]);
      }, o2.prototype.transpose = function(t3, e2) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.transpose(t3, e2);
        var n2 = a().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new au(t3.shape, e2) : new ou(t3.shape, e2);
        return this.compileAndRun(n2, [t3]);
      }, o2.prototype.gather = function(t3, e2, n2) {
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.gather(t3, e2, n2);
        var r2 = new ni(t3.shape, e2.size, n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.batchToSpaceND = function(t3, e2, n2) {
        g(t3.rank <= 4, function() {
          return "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet";
        });
        var r2 = e2.reduce(function(t4, e3) {
          return t4 * e3;
        }), o3 = Mr(t3.shape, e2, r2), a2 = Br(o3.length, e2.length), i2 = Pr(t3.shape, e2, r2), u2 = Lr(n2, e2.length), s2 = Wr(i2, n2, e2.length);
        return t3.reshape(o3).transpose(a2).reshape(i2).slice(u2, s2);
      }, o2.prototype.spaceToBatchND = function(t3, e2, n2) {
        g(t3.rank <= 4, function() {
          return "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet";
        });
        var r2 = e2.reduce(function(t4, e3) {
          return t4 * e3;
        }), o3 = [[0, 0]];
        o3.push.apply(o3, n2);
        for (var a2 = 1 + e2.length; a2 < t3.shape.length; ++a2)
          o3.push([0, 0]);
        var i2 = t3.pad(o3), u2 = Mr(i2.shape, e2, r2, false), s2 = Br(u2.length, e2.length, false), c2 = Pr(i2.shape, e2, r2, false);
        return i2.reshape(u2).transpose(s2).reshape(c2);
      }, o2.prototype.reduce = function(t3, e2, n2) {
        var r2 = t3.shape[0], o3 = t3.shape[1], a2 = zr(o3), i2 = new Li({ windowSize: a2, inSize: o3, batchSize: r2 }, e2), u2 = this.compileAndRun(i2, [t3], n2);
        return 1 === u2.shape[1] ? u2 : this.reduce(u2, e2, n2);
      }, o2.prototype.argReduce = function(t3, e2, n2) {
        void 0 === n2 && (n2 = null);
        var r2 = t3.shape[0], o3 = t3.shape[1];
        null != n2 && (r2 = n2.shape[0], o3 = n2.shape[1]);
        var a2 = zr(o3), i2 = new Go({ windowSize: a2, inSize: o3, batchSize: r2 }, e2, null == n2), u2 = [t3];
        null != n2 && u2.push(n2);
        var s2 = this.compileAndRun(i2, u2, "int32");
        return 1 === s2.shape[1] ? s2 : this.argReduce(t3, e2, s2);
      }, o2.prototype.argReducePacked = function(t3, e2, n2) {
        void 0 === n2 && (n2 = null);
        var r2 = null != n2 ? n2.shape : t3.shape, o3 = zr(r2[r2.length - 1]), a2 = new sa(r2, o3, e2, null == n2), i2 = null == n2 ? [t3] : [t3, n2], u2 = this.compileAndRun(a2, i2, "int32");
        return u2.rank === t3.rank ? this.argReducePacked(t3, e2, u2) : u2;
      }, o2.prototype.sum = function(t3, e2) {
        mn("sum", e2, t3.rank);
        var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = w(n2[1]), a2 = t3.as2D(-1, o3), i2 = Et(t3.dtype);
        return this.reduce(a2, "sum", i2).reshape(r2);
      }, o2.prototype.prod = function(t3, e2) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.prod(t3, e2);
        var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = w(n2[1]), a2 = t3.as2D(-1, o3), i2 = Et(t3.dtype);
        return this.reduce(a2, "prod", i2).reshape(r2);
      }, o2.prototype.unsortedSegmentSum = function(t3, e2, n2) {
        var r2 = 0, o3 = gn([r2], t3.rank), a2 = t3;
        null != o3 && (a2 = t3.transpose(o3), r2 = xn(1, t3.rank)[0]);
        var i2 = function(t4, e3, n3) {
          for (var r3 = [], o4 = t4.length, a3 = 0; a3 < o4; a3++)
            a3 !== e3 ? r3.push(t4[a3]) : r3.push(n3);
          return r3;
        }(a2.shape, r2, n2), u2 = w([a2.shape[r2]]), s2 = a2.as2D(-1, u2), c2 = Et(t3.dtype), l3 = this.segOpCompute(s2, "unsortedSegmentSum", e2, c2, n2).reshape(i2);
        return null != o3 && (l3 = l3.transpose(yn(o3))), l3;
      }, o2.prototype.segOpCompute = function(t3, e2, n2, r2, o3) {
        var a2 = t3.shape[0], i2 = t3.shape[1], u2 = function(t4, e3) {
          var n3, r3 = false;
          for (t4 <= Vr ? (n3 = t4, r3 = true) : n3 = H(t4, Math.floor(Math.sqrt(t4))); !r3; )
            n3 > e3 || n3 === t4 ? r3 = true : n3 = H(t4, n3 + 1);
          return n3;
        }(i2, o3), s2 = new Xi({ windowSize: u2, inSize: i2, batchSize: a2, numSegments: o3 }, e2), c2 = this.compileAndRun(s2, [t3, n2], r2);
        return c2.shape[1] === o3 ? c2 : (n2 = Un(0, o3).tile([i2 / u2]), this.segOpCompute(c2, e2, n2, r2, o3));
      }, o2.prototype.argMinMaxReduce = function(t3, e2, n2) {
        var r2 = [e2];
        if (mn("arg" + n2.charAt(0).toUpperCase() + n2.slice(1), r2, t3.rank), !a().getBool("WEBGL_PACK_REDUCE") || t3.rank <= 2) {
          var o3 = dn(t3.shape, r2), i2 = o3[0], u2 = w(o3[1]), s2 = t3.as2D(-1, u2);
          return this.argReduce(s2, n2).reshape(i2);
        }
        return this.argReducePacked(t3, n2);
      }, o2.prototype.argMin = function(t3, e2) {
        return this.argMinMaxReduce(t3, e2, "min");
      }, o2.prototype.argMax = function(t3, e2) {
        return this.argMinMaxReduce(t3, e2, "max");
      }, o2.prototype.cumsum = function(t3, e2, n2, r2) {
        if (e2 !== t3.rank - 1)
          throw new Error("WebGL cumsum shader expects an inner-most axis=" + (t3.rank - 1) + " but got axis=" + e2);
        var o3 = new Ua(t3.shape, n2, r2);
        return this.compileAndRun(o3, [t3]);
      }, o2.prototype.equal = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return vec4(equal(a, b));\n", "bool");
        var n2 = new ba("return float(a == b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.notEqual = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return vec4(notEqual(a, b));\n", "bool");
        var n2 = new ba("return float(a != b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.less = function(t3, e2) {
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.less(t3, e2);
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return vec4(lessThan(a, b));\n", "bool");
        var n2 = new ba("return float(a < b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.lessEqual = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return vec4(lessThanEqual(a, b));\n", "bool");
        var n2 = new ba("return float(a <= b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.greater = function(t3, e2) {
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.greater(t3, e2);
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return vec4(greaterThan(a, b));\n", "bool");
        var n2 = new ba("return float(a > b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.greaterEqual = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return vec4(greaterThanEqual(a, b));\n", "bool");
        var n2 = new ba("return float(a >= b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.logicalNot = function(t3) {
        var e2 = new su(t3.shape, "return float(!(x >= 1.0));");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.logicalAnd = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n", "bool");
        var n2 = new ba("return float(a >= 1.0 && b >= 1.0);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.logicalOr = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n", "bool");
        var n2 = new ba("return float(a >= 1.0 || b >= 1.0);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "bool");
      }, o2.prototype.select = function(t3, e2, n2) {
        var r2 = new $i(t3.rank, e2.shape, e2.rank);
        return this.compileAndRun(r2, [t3, e2, n2], Ct(e2.dtype, n2.dtype));
      }, o2.prototype.where = function(t3) {
        un("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
        var e2 = t3.dataSync();
        return Uo(t3.shape, e2);
      }, o2.prototype.topk = function(t3, e2, n2) {
        return Wo(t3.dataSync(), t3.shape, t3.dtype, e2);
      }, o2.prototype.min = function(t3, e2) {
        mn("min", e2, t3.rank);
        var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = w(n2[1]), a2 = t3.as2D(-1, o3);
        return this.reduce(a2, "min", a2.dtype).reshape(r2);
      }, o2.prototype.minimum = function(t3, e2) {
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.minimum(t3, e2);
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t3.shape, e2.shape) : new ba("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2]);
      }, o2.prototype.mod = function(t3, e2) {
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t3.shape, e2.shape) : new ba("if (b == 0.0) return NAN;\n  return mod(a, b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2]);
      }, o2.prototype.max = function(t3, e2) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.max(t3, e2);
        mn("max", e2, t3.rank);
        var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = w(n2[1]), a2 = t3.as2D(-1, o3);
        return this.reduce(a2, "max", a2.dtype).reshape(r2);
      }, o2.prototype.maximum = function(t3, e2) {
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.maximum(t3, e2);
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t3.shape, e2.shape) : new ba("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2]);
      }, o2.prototype.all = function(t3, e2) {
        mn("all", e2, t3.rank);
        var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = w(n2[1]), a2 = t3.as2D(-1, o3);
        return this.reduce(a2, "all", a2.dtype).reshape(r2);
      }, o2.prototype.any = function(t3, e2) {
        mn("any", e2, t3.rank);
        var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = w(n2[1]), a2 = t3.as2D(-1, o3);
        return this.reduce(a2, "any", a2.dtype).reshape(r2);
      }, o2.prototype.squaredDifference = function(t3, e2) {
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca("return (a - b) * (a - b);", t3.shape, e2.shape) : new ba("return (a - b) * (a - b);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2]);
      }, o2.prototype.realDivide = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS")) {
          return this.packedBinaryOp(t3, e2, "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n", "float32", true);
        }
        var n2 = new ba("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "float32");
      }, o2.prototype.floorDiv = function(t3, e2) {
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n", "int32");
        var n2 = new ba("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2], "int32");
      }, o2.prototype.add = function(t3, e2) {
        if ("complex64" === t3.dtype && "complex64" === e2.dtype)
          return this.complexSeparableBinaryOp(t3, e2, ma);
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.add(t3, e2);
        var n2 = Ct(t3.dtype, e2.dtype);
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, ma, n2);
        var r2 = new ba(ma, t3.shape, e2.shape);
        return this.compileAndRun(r2, [t3, e2], n2);
      }, o2.prototype.packedUnaryOp = function(t3, e2, n2) {
        var r2 = new _u(t3.shape, e2);
        return this.compileAndRun(r2, [t3], n2);
      }, o2.prototype.packedBinaryOp = function(t3, e2, n2, r2, o3) {
        void 0 === o3 && (o3 = false);
        var a2 = new Ca(n2, t3.shape, e2.shape, o3);
        return this.compileAndRun(a2, [t3, e2], r2);
      }, o2.prototype.complexSeparableBinaryOp = function(t3, e2, n2) {
        var r2 = this, o3 = this.texData.get(t3.dataId), a2 = this.texData.get(e2.dataId), i2 = [[o3.complexTensors.real, a2.complexTensors.real], [o3.complexTensors.imag, a2.complexTensors.imag]].map(function(o4) {
          var a3 = o4[0], i3 = o4[1], u3 = r2.makeComplexComponentTensorInfo(t3, a3), s3 = r2.makeComplexComponentTensorInfo(e2, i3), c3 = new ba(n2, t3.shape, e2.shape);
          return r2.compileAndRun(c3, [u3, s3], Ct(a3.dtype, i3.dtype));
        }), u2 = i2[0], s2 = i2[1], c2 = this.complex(u2, s2);
        return u2.dispose(), s2.dispose(), c2;
      }, o2.prototype.makeComplexComponentTensorInfo = function(t3, e2) {
        return { dataId: e2.dataId, dtype: e2.dtype, shape: t3.shape };
      }, o2.prototype.addN = function(t3) {
        if (1 === t3.length)
          return t3[0];
        if (t3.length > a().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
          var e2 = Math.floor(t3.length / 2), n2 = this.addN(t3.slice(0, e2)), r2 = this.addN(t3.slice(e2));
          return this.addN([n2, r2]);
        }
        var o3 = t3.map(function(t4) {
          return t4.dtype;
        }).reduce(function(t4, e3) {
          return Ct(t4, e3);
        }), i2 = t3.map(function(t4) {
          return t4.shape;
        }), u2 = a().getBool("WEBGL_PACK") ? new zo(t3[0].shape, i2) : new Vo(t3[0].shape, i2);
        return this.compileAndRun(u2, t3, o3);
      }, o2.prototype.subtract = function(t3, e2) {
        if ("complex64" === t3.dtype && "complex64" === e2.dtype)
          return this.complexSeparableBinaryOp(t3, e2, ga);
        if (this.shouldExecuteOnCPU([t3, e2]))
          return this.cpuBackend.subtract(t3, e2);
        var n2 = Ct(t3.dtype, e2.dtype);
        if (a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
          return this.packedBinaryOp(t3, e2, ga, t3.dtype);
        var r2 = new ba(ga, t3.shape, e2.shape);
        return this.compileAndRun(r2, [t3, e2], n2);
      }, o2.prototype.pow = function(t3, e2) {
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t3.shape, e2.shape) : new ba("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n", t3.shape, e2.shape), r2 = Ct(t3.dtype, e2.dtype);
        return this.compileAndRun(n2, [t3, e2], r2);
      }, o2.prototype.ceil = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.ceil(t3);
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, gu, t3.dtype);
        var e2 = new su(t3.shape, gu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.floor = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.floor(t3);
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, yu, t3.dtype);
        var e2 = new su(t3.shape, yu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.sign = function(t3) {
        var e2 = new su(t3.shape, "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.isNaN = function(t3) {
        var e2 = new su(t3.shape, "return float(isnan(x));");
        return this.compileAndRun(e2, [t3], "bool");
      }, o2.prototype.isInf = function(t3) {
        var e2 = new su(t3.shape, "return float(isinf(x));");
        return this.compileAndRun(e2, [t3], "bool");
      }, o2.prototype.isFinite = function(t3) {
        var e2 = new su(t3.shape, "return float(!isnan(x) && !isinf(x));");
        return this.compileAndRun(e2, [t3], "bool");
      }, o2.prototype.round = function(t3) {
        var e2 = new su(t3.shape, "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.exp = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.exp(t3);
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, xu, t3.dtype);
        var e2 = new su(t3.shape, xu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.expm1 = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.expm1(t3);
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, bu, t3.dtype);
        var e2 = new su(t3.shape, bu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.log = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.log(t3);
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n", t3.dtype);
        var e2 = new su(t3.shape, "if (x < 0.0) return NAN;\n  return log(x);");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.log1p = function(t3) {
        var e2 = new su(t3.shape, "return log(1.0 + x);");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.sqrt = function(t3) {
        var e2 = new su(t3.shape, "return sqrt(x);");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.rsqrt = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.rsqrt(t3);
        var e2 = new su(t3.shape, "return inversesqrt(x);");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.reciprocal = function(t3) {
        var e2 = new su(t3.shape, "return 1.0 / x;");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.relu = function(t3) {
        var e2;
        return e2 = a().getBool("WEBGL_PACK") ? new _u(t3.shape, Nu) : new su(t3.shape, fu), this.compileAndRun(e2, [t3]);
      }, o2.prototype.relu6 = function(t3) {
        var e2;
        return e2 = a().getBool("WEBGL_PACK") ? new _u(t3.shape, Fu) : new su(t3.shape, pu), this.compileAndRun(e2, [t3]);
      }, o2.prototype.prelu = function(t3, e2) {
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca(wa, t3.shape, e2.shape) : new ba(xa, t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2]);
      }, o2.prototype.elu = function(t3) {
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, Ou, t3.dtype);
        var e2 = new su(t3.shape, du);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.eluDer = function(t3, e2) {
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n", t3.shape, e2.shape) : new ba("return (b >= 1.0) ? a : a * (b + 1.0);", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2]);
      }, o2.prototype.selu = function(t3) {
        var e2 = new su(t3.shape, vu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.int = function(t3) {
        var e2 = new su(t3.shape, "return float(int(x));");
        return this.compileAndRun(e2, [t3], "int32");
      }, o2.prototype.clip = function(t3, e2, n2) {
        var r2, o3 = (r2 = a().getBool("WEBGL_PACK_CLIP") ? new Ra(t3.shape) : new Ea(t3.shape)).getCustomSetupFunc(e2, n2);
        return this.compileAndRun(r2, [t3], null, o3);
      }, o2.prototype.abs = function(t3) {
        if (this.shouldExecuteOnCPU([t3]))
          return this.cpuBackend.abs(t3);
        if (a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
          return this.packedUnaryOp(t3, hu, t3.dtype);
        var e2 = new su(t3.shape, hu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.complexAbs = function(t3) {
        var e2 = this.texData.get(t3.dataId), n2 = new Ia(t3.shape), r2 = [this.makeComplexComponentTensorInfo(t3, e2.complexTensors.real), this.makeComplexComponentTensorInfo(t3, e2.complexTensors.imag)];
        return this.compileAndRun(n2, r2);
      }, o2.prototype.sigmoid = function(t3) {
        var e2 = new su(t3.shape, "return 1.0 / (1.0 + exp(-1.0 * x));");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.softplus = function(t3) {
        var e2 = new su(t3.shape, "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.sin = function(t3) {
        var e2 = new su(t3.shape, wu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.cos = function(t3) {
        var e2 = new su(t3.shape, Cu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.tan = function(t3) {
        var e2 = new su(t3.shape, "return tan(x);");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.asin = function(t3) {
        var e2 = new su(t3.shape, Eu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.acos = function(t3) {
        var e2 = new su(t3.shape, Ru);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.atan = function(t3) {
        var e2 = new su(t3.shape, Iu);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.atan2 = function(t3, e2) {
        var n2 = a().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ca("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t3.shape, e2.shape) : new ba("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n", t3.shape, e2.shape);
        return this.compileAndRun(n2, [t3, e2]);
      }, o2.prototype.sinh = function(t3) {
        var e2 = new su(t3.shape, "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.cosh = function(t3) {
        var e2 = new su(t3.shape, "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.tanh = function(t3) {
        var e2 = new su(t3.shape, "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.asinh = function(t3) {
        var e2 = new su(t3.shape, ku);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.acosh = function(t3) {
        var e2 = new su(t3.shape, Su);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.atanh = function(t3) {
        var e2 = new su(t3.shape, Au);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.erf = function(t3) {
        var e2 = new su(t3.shape, '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.step = function(t3, e2) {
        var n2 = new su(t3.shape, function(t4) {
          return void 0 === t4 && (t4 = 0), cu + "\n    return x > 0.0 ? 1.0 : float(" + t4 + ");\n  ";
        }(e2));
        return this.compileAndRun(n2, [t3]);
      }, o2.prototype.conv2dByMatMul = function(t3, e2, n2, r2, o3, i2) {
        var u2 = t3.shape, s2 = this.texData.get(t3.dataId), c2 = n2.inChannels, l3 = u2[0] * u2[1] * u2[2], h2 = n2.outChannels, f2 = "channelsLast" === n2.dataFormat, p2 = (1 === l3 || 1 === h2) && c2 > 1e3, d2 = u2[2] % 2 != 0 && !!s2.isPacked;
        if (p2 || !a().getBool("WEBGL_LAZILY_UNPACK") || !a().getBool("WEBGL_PACK_BINARY_OPERATIONS") || !d2) {
          var v2 = f2 ? u2[0] * u2[1] * u2[2] : u2[0] * u2[2] * u2[3], m2 = this.reshape(t3, [1, v2, n2.inChannels]), y2 = this.reshape(e2, [1, n2.inChannels, n2.outChannels]);
          return this.reshape(this.fusedBatchMatMul({ a: m2, b: y2, transposeA: false, transposeB: false, bias: r2, activation: o3, preluActivationWeights: i2 }), n2.outShape);
        }
        var x2 = f2 ? u2[0] * u2[1] * (u2[2] + 1) : u2[0] * u2[2] * (u2[3] + 1), b2 = { dataId: t3.dataId, shape: [1, x2, n2.inChannels], dtype: t3.dtype }, w2 = s2.shape;
        s2.shape = s2.shape.slice(), s2.shape[s2.shape.length - 2]++, g(Se(s2.shape, b2.shape), function() {
          return "packed reshape " + s2.shape + " to " + b2.shape + " isn't free";
        });
        var C2 = this.reshape(e2, [1, n2.inChannels, n2.outChannels]), E2 = this.fusedBatchMatMul({ a: b2, b: C2, transposeA: false, transposeB: false, bias: r2, activation: o3, preluActivationWeights: i2 }), R2 = this.texData.get(E2.dataId);
        return g(R2.isPacked, function() {
          return "batchMatMul result is expected to be packed";
        }), s2.shape = w2, R2.shape = n2.outShape, Nt.makeTensorFromDataId(E2.dataId, n2.outShape, E2.dtype);
      }, o2.prototype.conv2dWithIm2Row = function(t3, e2, n2, r2, o3, a2) {
        var i2 = n2.filterWidth, u2 = n2.filterHeight, s2 = n2.inChannels, c2 = n2.outWidth, l3 = n2.outHeight, h2 = "channelsLast" === n2.dataFormat, f2 = i2 * u2 * s2, p2 = l3 * c2, d2 = [f2, p2], v2 = t3.squeeze([0]), m2 = e2.reshape([1, f2, -1]), g2 = new Ri(d2, v2.shape, n2), y2 = this.compileAndRun(g2, [v2]).reshape([1, d2[0], d2[1]]), x2 = null != r2, b2 = null != a2, w2 = o3 ? Pu(o3, true) : null, C2 = new Ti(y2.shape, [1, p2, n2.outChannels], true, false, x2, w2, b2), E2 = [y2, m2];
        r2 && E2.push(r2), b2 && E2.push(a2);
        var R2 = this.compileAndRun(C2, E2);
        return h2 ? R2.reshape([1, l3, c2, n2.outChannels]) : R2.reshape([1, n2.outChannels, l3, c2]);
      }, o2.prototype.fusedConv2d = function(t3) {
        var e2 = t3.input, n2 = t3.filter, r2 = t3.convInfo, o3 = t3.bias, i2 = t3.activation, u2 = t3.preluActivationWeights;
        if (1 === r2.filterHeight && 1 === r2.filterWidth && 1 === r2.dilationHeight && 1 === r2.dilationWidth && 1 === r2.strideHeight && 1 === r2.strideWidth && ("SAME" === r2.padInfo.type || "VALID" === r2.padInfo.type))
          return this.conv2dByMatMul(e2, n2, r2, o3, i2, u2);
        if (a().getBool("WEBGL_CONV_IM2COL") && 1 === e2.shape[0])
          return this.conv2dWithIm2Row(e2, n2, r2, o3, i2, u2);
        var s2 = null != o3, c2 = null != u2, l3 = i2 ? Pu(i2, false) : null, h2 = new Ma(r2, s2, l3, c2), f2 = [e2, n2];
        return o3 && f2.push(o3), u2 && f2.push(u2), this.compileAndRun(h2, f2);
      }, o2.prototype.conv2d = function(t3, e2, n2) {
        if (1 === n2.filterHeight && 1 === n2.filterWidth && 1 === n2.dilationHeight && 1 === n2.dilationWidth && 1 === n2.strideHeight && 1 === n2.strideWidth && ("SAME" === n2.padInfo.type || "VALID" === n2.padInfo.type))
          return this.conv2dByMatMul(t3, e2, n2);
        if (a().getBool("WEBGL_CONV_IM2COL") && 1 === t3.shape[0])
          return this.conv2dWithIm2Row(t3, e2, n2);
        var r2 = new Ma(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.conv2dDerInput = function(t3, e2, n2) {
        var r2 = new Ta(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.conv2dDerFilter = function(t3, e2, n2) {
        var r2 = new Da(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.fusedDepthwiseConv2D = function(t3) {
        var e2, n2 = t3.input, r2 = t3.filter, o3 = t3.convInfo, i2 = t3.bias, u2 = t3.activation, s2 = t3.preluActivationWeights, c2 = a().getBool("WEBGL_PACK_DEPTHWISECONV") && o3.strideWidth <= 2 && o3.outChannels / o3.inChannels == 1, l3 = u2 ? Pu(u2, c2) : null, h2 = [n2, r2], f2 = null != i2, p2 = null != s2;
        return f2 && h2.push(i2), p2 && h2.push(s2), c2 ? (e2 = new La(o3, f2, l3, p2), this.compileAndRun(e2, h2)) : (e2 = new Pa(o3, f2, l3, p2), this.compileAndRun(e2, h2));
      }, o2.prototype.depthwiseConv2D = function(t3, e2, n2) {
        var r2;
        return a().getBool("WEBGL_PACK_DEPTHWISECONV") && n2.strideWidth <= 2 && n2.outChannels / n2.inChannels == 1 ? (r2 = new La(n2), this.compileAndRun(r2, [t3, e2])) : (r2 = new Pa(n2), this.compileAndRun(r2, [t3, e2]));
      }, o2.prototype.depthwiseConv2DDerInput = function(t3, e2, n2) {
        var r2 = new _a(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.depthwiseConv2DDerFilter = function(t3, e2, n2) {
        var r2 = new Oa(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.conv3d = function(t3, e2, n2) {
        var r2 = new Ba(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.conv3dDerInput = function(t3, e2, n2) {
        var r2 = new Fa(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.conv3dDerFilter = function(t3, e2, n2) {
        var r2 = new Na(n2);
        return this.compileAndRun(r2, [t3, e2]);
      }, o2.prototype.maxPool = function(t3, e2) {
        var n2 = new Bi(e2, "max", false);
        return this.compileAndRun(n2, [t3]);
      }, o2.prototype.avgPool = function(t3, e2) {
        var n2 = new Bi(e2, "avg", false);
        return this.compileAndRun(n2, [t3], "float32");
      }, o2.prototype.maxPoolBackprop = function(t3, e2, n2, r2) {
        var o3 = new Bi(r2, "max", true), a2 = this.compileAndRun(o3, [e2]), i2 = new Ai(r2), u2 = this.compileAndRun(i2, [t3, a2], e2.dtype);
        return a2.dispose(), u2;
      }, o2.prototype.avgPoolBackprop = function(t3, e2, n2) {
        var r2 = new ca(n2);
        return this.compileAndRun(r2, [t3], e2.dtype);
      }, o2.prototype.cast = function(t3, e2) {
        return So(t3, e2, this);
      }, o2.prototype.unstack = function(t3, e2) {
        for (var n2 = t3.shape[e2], r2 = new Array(t3.rank - 1), o3 = 0, a2 = 0; a2 < t3.rank; a2++)
          a2 !== e2 && (r2[o3++] = t3.shape[a2]);
        var i2 = new Array(t3.rank).fill(0), u2 = t3.shape.slice();
        u2[e2] = 1;
        var s2 = new Array(n2);
        for (a2 = 0; a2 < s2.length; a2++)
          i2[e2] = a2, s2[a2] = this.slice(t3, i2, u2).reshape(r2);
        return s2;
      }, o2.prototype.avgPool3d = function(t3, e2) {
        var n2 = new Pi(e2, "avg", false);
        return this.compileAndRun(n2, [t3], "float32");
      }, o2.prototype.avgPool3dBackprop = function(t3, e2, n2) {
        var r2 = new la(n2);
        return this.compileAndRun(r2, [t3], e2.dtype);
      }, o2.prototype.maxPool3d = function(t3, e2) {
        var n2 = new Pi(e2, "max", false);
        return this.compileAndRun(n2, [t3], "float32");
      }, o2.prototype.maxPool3dBackprop = function(t3, e2, n2, r2) {
        var o3 = new Pi(r2, "max", true), a2 = this.compileAndRun(o3, [e2]), i2 = new Di(r2), u2 = this.compileAndRun(i2, [t3, a2], e2.dtype);
        return a2.dispose(), u2;
      }, o2.prototype.reshape = function(t3, e2) {
        var n2 = this.texData.get(t3.dataId);
        if (n2.isPacked && !Se(t3.shape, e2) && (null === n2.texture || !Se(n2.shape, e2))) {
          var r2 = this.packedReshape(t3, e2);
          return Nt.makeTensorFromDataId(r2.dataId, r2.shape, r2.dtype);
        }
        return Ao(t3, e2);
      }, o2.prototype.resizeBilinear = function(t3, e2, n2, r2) {
        var o3 = a().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new zi(t3.shape, e2, n2, r2) : new Vi(t3.shape, e2, n2, r2);
        return this.compileAndRun(o3, [t3]);
      }, o2.prototype.resizeBilinearBackprop = function(t3, e2, n2) {
        var r2 = new Ui(t3, e2, n2);
        return this.compileAndRun(r2, [t3]);
      }, o2.prototype.resizeNearestNeighbor = function(t3, e2, n2, r2) {
        var o3 = new Hi(t3.shape, e2, n2, r2);
        return this.compileAndRun(o3, [t3]);
      }, o2.prototype.resizeNearestNeighborBackprop = function(t3, e2, n2) {
        var r2 = new Gi(t3, e2, n2);
        return this.compileAndRun(r2, [t3]);
      }, o2.prototype.multinomial = function(t3, e2, n2, r2) {
        var o3 = e2 ? t3 : io(t3), a2 = o3.shape[0], i2 = o3.shape[1], u2 = new Ni(a2, i2, n2), s2 = u2.getCustomSetupFunc(r2);
        return this.compileAndRun(u2, [o3], "int32", s2);
      }, o2.prototype.oneHot = function(t3, e2, n2, r2) {
        var o3 = new Fi(t3.size, e2, n2, r2);
        return this.compileAndRun(o3, [t3]);
      }, o2.prototype.diag = function(t3) {
        var e2 = new qa(t3.size);
        return this.compileAndRun(e2, [t3]);
      }, o2.prototype.nonMaxSuppression = function(t3, e2, n2, r2, o3) {
        return un("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"), Mo(t3.dataSync(), e2.dataSync(), n2, r2, o3);
      }, o2.prototype.cropAndResize = function(t3, e2, n2, r2, o3, a2) {
        var i2 = new Wa(t3.shape, e2.shape, r2, o3, a2);
        return this.compileAndRun(i2, [t3, e2, n2]);
      }, o2.prototype.depthToSpace = function(t3, e2, n2) {
        g(e2 > 1, function() {
          return "blockSize should be > 1 for depthToSpace, but was: " + e2;
        });
        var r2 = t3.shape[0], o3 = "NHWC" === n2 ? t3.shape[1] : t3.shape[2], a2 = "NHWC" === n2 ? t3.shape[2] : t3.shape[3], i2 = "NHWC" === n2 ? t3.shape[3] : t3.shape[1], u2 = o3 * e2, s2 = a2 * e2, c2 = i2 / (e2 * e2), l3 = new Ha("NHWC" === n2 ? [r2, u2, s2, c2] : [r2, c2, u2, s2], e2, n2);
        return this.compileAndRun(l3, [t3]);
      }, o2.prototype.split = function(t3, e2, n2) {
        return Po(t3, e2, n2);
      }, o2.prototype.scatterND = function(t3, e2, n2) {
        var r2 = Hr(0, t3, n2), o3 = r2.sliceRank, a2 = r2.numUpdates, i2 = r2.sliceSize, u2 = r2.strides, s2 = r2.outputSize, c2 = [s2 / i2, i2], l3 = t3.reshape([a2, o3]), h2 = e2.reshape([a2, i2]);
        if (0 === s2)
          return Ao(kn([]), n2);
        var f2 = An(0), p2 = new ji(a2, o3, l3.rank, h2.rank, u2, c2);
        return this.compileAndRun(p2, [h2, l3, f2]).reshape(n2);
      }, o2.prototype.sparseToDense = function(t3, e2, n2, r2) {
        var o3 = Hr(0, t3, n2), a2 = o3.sliceRank, i2 = o3.numUpdates, u2 = o3.strides, s2 = o3.outputSize, c2 = new ji(i2, a2, t3.rank, e2.rank, u2, [s2, 1], false);
        return this.compileAndRun(c2, [e2, t3, r2]).reshape(n2);
      }, o2.prototype.fft = function(t3) {
        return this.fftImpl(t3, false);
      }, o2.prototype.ifft = function(t3) {
        return this.fftImpl(t3, true);
      }, o2.prototype.fftImpl = function(t3, e2) {
        var n2 = this.texData.get(t3.dataId), r2 = new Ja(Ya, t3.shape, e2), o3 = new Ja(Qa, t3.shape, e2), a2 = [this.makeComplexComponentTensorInfo(t3, n2.complexTensors.real), this.makeComplexComponentTensorInfo(t3, n2.complexTensors.imag)], i2 = this.compileAndRun(r2, a2), u2 = this.compileAndRun(o3, a2), s2 = this.complex(i2, u2).as2D(t3.shape[0], t3.shape[1]);
        return i2.dispose(), u2.dispose(), s2;
      }, o2.prototype.gatherND = function(t3, e2) {
        var n2 = e2.shape, r2 = n2[n2.length - 1], o3 = Ur(t3, e2), a2 = o3[0], i2 = o3[1], u2 = o3[2], s2 = o3[3], c2 = e2.reshape([i2, r2]), l3 = t3.reshape([t3.size / u2, u2]), h2 = new ri(r2, s2, [i2, u2]);
        return this.compileAndRun(h2, [l3, c2]).reshape(a2);
      }, o2.prototype.fill = function(t3, e2, n2) {
        if ("string" === (n2 = n2 || z(e2))) {
          var r2 = F(n2, w(t3));
          return r2.fill(e2), Nt.makeTensor(r2, t3, n2, this);
        }
        var o3 = new Za(t3, e2), a2 = o3.getCustomSetupFunc(e2);
        return this.compileAndRun(o3, [], n2, a2);
      }, o2.prototype.onesLike = function(t3) {
        if ("string" === t3.dtype)
          throw new Error("onesLike is not supported under string dtype");
        return this.fill(t3.shape, 1, t3.dtype);
      }, o2.prototype.zerosLike = function(t3) {
        return this.fill(t3.shape, "string" === t3.dtype ? "" : 0, t3.dtype);
      }, o2.prototype.linspace = function(t3, e2, n2) {
        return Do(t3, e2, n2);
      }, o2.prototype.makeTensorInfo = function(t3, e2) {
        var n2 = this.write(null, t3, e2);
        return this.texData.get(n2).usage = null, { dataId: n2, shape: t3, dtype: e2 };
      }, o2.prototype.makeOutput = function(t3, e2) {
        var n2 = this.makeTensorInfo(t3, e2).dataId;
        return Nt.makeTensorFromDataId(n2, t3, e2, this);
      }, o2.prototype.unpackTensor = function(t3) {
        var e2 = new Mu(t3.shape);
        return this.runWebGLProgram(e2, [t3], t3.dtype);
      }, o2.prototype.packTensor = function(t3) {
        var e2 = new Oi(t3.shape);
        return this.runWebGLProgram(e2, [t3], t3.dtype, null, true);
      }, o2.prototype.packedReshape = function(t3, e2) {
        var n2 = [Ce(t3.shape)].concat(Ee(t3.shape)), r2 = { dtype: t3.dtype, shape: n2, dataId: t3.dataId }, o3 = [Ce(e2)].concat(Ee(e2)), a2 = new Wi(o3, n2), i2 = this.runWebGLProgram(a2, [r2], t3.dtype, null, true);
        return { dataId: i2.dataId, shape: e2, dtype: i2.dtype };
      }, o2.prototype.decode = function(t3) {
        var e2, n2 = this.texData.get(t3), r2 = n2.isPacked, o3 = n2.shape, a2 = n2.dtype, i2 = Re(o3);
        e2 = r2 ? new Ga(i2) : new za(i2);
        return { dtype: a2, shape: o3, dataId: this.runWebGLProgram(e2, [{ shape: i2, dtype: a2, dataId: t3 }], a2, null, true).dataId };
      }, o2.prototype.runWebGLProgram = function(t3, e2, n2, r2, o3) {
        var i2 = this;
        void 0 === o3 && (o3 = false);
        var u2 = this.makeTensorInfo(t3.outputShape, n2), s2 = this.texData.get(u2.dataId);
        if (t3.packedOutput && (s2.isPacked = true), t3.outPackingScheme === _t.DENSE) {
          var c2 = Gt(t3.outputShape);
          s2.texShape = c2.map(function(t4) {
            return 2 * t4;
          });
        }
        if (null != t3.outTexUsage && (s2.usage = t3.outTexUsage), 0 === w(u2.shape))
          return s2.values = N(u2.dtype, 0), u2;
        var l3 = [], h2 = e2.map(function(e3) {
          if ("complex64" === e3.dtype)
            throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
          var n3 = i2.texData.get(e3.dataId);
          if (null == n3.texture) {
            if (!t3.packedInputs && w(e3.shape) <= a().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
              return { shape: e3.shape, texData: null, isUniform: true, uniformValues: n3.values };
            t3.packedInputs && (n3.isPacked = true, n3.shape = e3.shape);
          } else if (!!n3.isPacked != !!t3.packedInputs)
            e3 = n3.isPacked ? i2.unpackTensor(e3) : i2.packTensor(e3), l3.push(e3), n3 = i2.texData.get(e3.dataId);
          else if (n3.isPacked && !Se(n3.shape, e3.shape)) {
            var r3 = e3, o4 = e3.shape;
            e3.shape = n3.shape, e3 = i2.packedReshape(e3, o4), l3.push(e3), n3 = i2.texData.get(e3.dataId), r3.shape = o4;
          }
          return i2.uploadToGPU(e3.dataId), { shape: e3.shape, texData: n3, isUniform: false };
        });
        this.uploadToGPU(u2.dataId);
        var f2, p2 = { shape: u2.shape, texData: s2, isUniform: false }, d2 = function(t4, e3, n3) {
          var r3 = "";
          e3.concat(n3).forEach(function(t5) {
            var e4 = null != t5.texData && null != t5.texData.slice && t5.texData.slice.flatOffset > 0, n4 = t5.isUniform ? "uniform" : t5.texData.texShape;
            r3 += t5.shape + "_" + n4 + "_" + e4;
          });
          var o4 = t4.userCode, a2 = t4.constructor.name;
          return a2 += "_" + r3 + "_" + o4;
        }(t3, h2, p2), v2 = this.getAndSaveBinary(d2, function() {
          return function(t4, e3, n3, r3) {
            var o4 = e3.userCode, i3 = n3.map(function(t5, n4) {
              var r4 = { logicalShape: t5.shape, texShape: t5.isUniform ? null : t5.texData.texShape, isUniform: t5.isUniform, isPacked: !t5.isUniform && t5.texData.isPacked, flatOffset: null };
              return null != t5.texData && null != t5.texData.slice && t5.texData.slice.flatOffset > 0 && (r4.flatOffset = t5.texData.slice.flatOffset), { name: e3.variableNames[n4], shapeInfo: r4 };
            }), u3 = i3.map(function(t5) {
              return t5.shapeInfo;
            }), s3 = { logicalShape: r3.shape, texShape: r3.texData.texShape, isUniform: false, isPacked: r3.texData.isPacked, flatOffset: null }, c3 = Yo(i3, s3, o4, e3.packedInputs), l4 = t4.createProgram(c3), h3 = null, f3 = t4.getUniformLocation(l4, "NAN", false);
            1 === a().getNumber("WEBGL_VERSION") && (h3 = t4.getUniformLocation(l4, "INFINITY", false));
            for (var p3 = {}, d3 = 0; d3 < e3.variableNames.length; d3++) {
              var v3 = e3.variableNames[d3];
              p3[v3] = t4.getUniformLocation(l4, v3, false), p3["offset" + v3] = t4.getUniformLocation(l4, "offset" + v3, false);
            }
            return { program: e3, source: c3, webGLProgram: l4, uniformLocations: p3, inShapeInfos: u3, outShapeInfo: s3, infLoc: h3, nanLoc: f3 };
          }(i2.gpgpu, t3, h2, p2);
        }), m2 = null != this.activeTimers;
        if (m2 && (f2 = this.startTimer()), function(t4, e3, n3, r3, o4) {
          Ei(e3.inShapeInfos, n3), Ei([e3.outShapeInfo], [r3]);
          var i3 = r3.texData.texture, u3 = r3.texData.texShape;
          r3.texData.isPacked ? t4.setOutputPackedMatrixTexture(i3, u3[0], u3[1]) : t4.setOutputMatrixTexture(i3, u3[0], u3[1]), t4.setProgram(e3.webGLProgram), 1 === a().getNumber("WEBGL_VERSION") && null !== e3.infLoc && t4.gl.uniform1f(e3.infLoc, 1 / 0), null !== e3.nanLoc && t4.gl.uniform1f(e3.nanLoc, NaN), n3.forEach(function(n4, r4) {
            var o5 = e3.program.variableNames[r4], a2 = e3.uniformLocations[o5], i4 = e3.uniformLocations["offset" + o5];
            if (null != a2)
              if (n4.isUniform)
                if (w(n4.shape) < 2)
                  t4.gl.uniform1f(a2, n4.uniformValues[0]);
                else {
                  var u4 = n4.uniformValues;
                  u4 instanceof Float32Array || (u4 = new Float32Array(u4)), t4.gl.uniform1fv(a2, u4);
                }
              else
                null != n4.texData.slice && null != i4 && t4.gl.uniform1i(i4, n4.texData.slice.flatOffset), t4.setInputMatrixTexture(n4.texData.texture, a2, r4);
          }), null != o4 && o4(t4, e3.webGLProgram), t4.executeProgram();
        }(this.gpgpu, v2, h2, p2, r2), l3.forEach(function(t4) {
          return i2.disposeData(t4.dataId);
        }), m2 && (f2 = this.endTimer(f2), this.activeTimers.push({ name: t3.constructor.name, query: this.getQueryTime(f2) })), !a().getBool("WEBGL_LAZILY_UNPACK") && s2.isPacked && false === o3) {
          var g2 = this.unpackTensor(u2);
          return this.disposeData(u2.dataId), g2;
        }
        return u2;
      }, o2.prototype.compileAndRun = function(t3, e2, n2, r2, o3) {
        void 0 === o3 && (o3 = false), n2 = n2 || e2[0].dtype;
        var a2 = this.runWebGLProgram(t3, e2, n2, r2, o3);
        return Nt.makeTensorFromDataId(a2.dataId, a2.shape, a2.dtype);
      }, o2.prototype.getAndSaveBinary = function(t3, e2) {
        return t3 in this.binaryCache || (this.binaryCache[t3] = e2()), this.binaryCache[t3];
      }, o2.prototype.getTextureManager = function() {
        return this.textureManager;
      }, o2.prototype.dispose = function() {
        this.disposed || (this.textureManager.dispose(), null != this.canvas && "undefined" != typeof HTMLCanvasElement && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, null != this.fromPixels2DContext && this.fromPixels2DContext.canvas.remove && this.fromPixels2DContext.canvas.remove(), this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
      }, o2.prototype.floatPrecision = function() {
        var t3 = this;
        return null == this.floatPrecisionValue && (this.floatPrecisionValue = je(function() {
          if (!a().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
            var e2 = a().getBool("DEBUG");
            a().set("DEBUG", false);
            var n2 = t3.abs(An(1e-8)).dataSync()[0];
            if (a().set("DEBUG", e2), n2 > 0)
              return 32;
          }
          return 16;
        })), this.floatPrecisionValue;
      }, o2.prototype.epsilon = function() {
        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
      }, o2.prototype.uploadToGPU = function(t3) {
        var e2, n2 = this.texData.get(t3), r2 = n2.shape, o3 = n2.dtype, a2 = n2.values, i2 = n2.texture, u2 = n2.usage, s2 = n2.isPacked;
        if (null == i2) {
          var c2, l3 = null != this.activeTimers;
          l3 && (c2 = Y());
          var h2 = n2.texShape;
          if (null == h2 && (h2 = Ie(r2, s2), n2.texShape = h2), null != a2) {
            var f2 = Re(r2), p2 = void 0, d2 = h2[1], v2 = h2[0], m2 = a2 instanceof Uint8Array;
            s2 ? (d2 = (e2 = Ht(h2[0], h2[1]))[0], v2 = e2[1], p2 = new $a(f2, [v2, d2], m2)) : p2 = new Xa(f2, [v2, d2], m2);
            var g2 = this.makeTensorInfo([v2, d2], o3);
            this.texData.get(g2.dataId).usage = m2 ? Mt.PIXELS : Mt.UPLOAD, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g2.dataId), d2, v2, a2);
            var y2 = this.runWebGLProgram(p2, [g2], o3, null, true), x2 = this.texData.get(y2.dataId);
            n2.texture = x2.texture, n2.texShape = x2.texShape, n2.isPacked = x2.isPacked, n2.usage = x2.usage, this.disposeData(g2.dataId), this.texData.delete(y2.dataId), n2.values = null, l3 && (this.uploadWaitMs += Y() - c2);
          } else {
            var b2 = this.acquireTexture(h2, u2, o3, s2);
            n2.texture = b2;
          }
        }
      }, o2.prototype.convertAndCacheOnCPU = function(t3, e2) {
        var n2 = this.texData.get(t3), r2 = n2.dtype;
        return this.releaseGPUData(t3), null != e2 && (n2.values = function(t4, e3) {
          if ("float32" === e3 || "complex64" === e3)
            return t4;
          if ("int32" === e3 || "bool" === e3) {
            for (var n3 = "int32" === e3 ? new Int32Array(t4.length) : new Uint8Array(t4.length), r3 = 0; r3 < n3.length; ++r3)
              n3[r3] = Math.round(t4[r3]);
            return n3;
          }
          throw new Error("Unknown dtype " + e3);
        }(e2, r2)), n2.values;
      }, o2.prototype.acquireTexture = function(t3, e2, n2, r2) {
        if (this.numBytesInGPU += this.computeBytes(t3, n2), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024) {
          var o3 = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
          this.warnedAboutMemory = true, console.warn("High memory usage in GPU: " + o3 + " MB, most likely due to a memory leak");
        }
        return this.textureManager.acquireTexture(t3, e2, r2);
      }, o2.prototype.computeBytes = function(t3, e2) {
        return t3[0] * t3[1] * P(e2);
      }, o2;
    }(co);
    Ft() && Nt.registerBackend("webgl", function() {
      return new Wu();
    }, 2);
    Uu = Cn({ square_: function(t2) {
      var e2 = ln(t2, "x", "square"), n2 = [e2];
      return Nt.runKernelFunc(function(t3, n3) {
        return n3([e2]), t3.square(e2);
      }, { x: e2 }, function(t3, e3) {
        var n3 = e3[0];
        return { x: function() {
          return t3.mul(n3.toFloat().mul(2));
        } };
      }, "Square", {}, n2, []);
    } });
    Vu = Cn({ abs_: function(t2) {
      var e2 = ln(t2, "x", "abs");
      return "complex64" === e2.dtype ? Nt.runKernelFunc(function(t3) {
        return t3.complexAbs(e2);
      }, { $x: e2 }) : Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.abs(e2);
        return n2([e2]), r2;
      }, { x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { x: function() {
          return t3.mul(n2.toFloat().step(-1));
        } };
      }, "Abs");
    } });
    zu = Cn({ acos_: function(t2) {
      var e2 = ln(t2, "x", "acos");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.acos(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.divStrict(An(1).sub(n2.toFloat().square()).sqrt()).neg();
        } };
      });
    } });
    Gu = Cn({ acosh_: function(t2) {
      var e2 = ln(t2, "x", "acosh");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.acosh(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.divStrict(n2.toFloat().square().sub(1).sqrt());
        } };
      });
    } });
    Hu = Cn({ asin_: function(t2) {
      var e2 = ln(t2, "x", "asin");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.asin(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.divStrict(An(1).sub(n2.toFloat().square()).sqrt());
        } };
      });
    } });
    qu = Cn({ asinh_: function(t2) {
      var e2 = ln(t2, "x", "asinh");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.asinh(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.divStrict(An(1).add(n2.toFloat().square()).sqrt());
        } };
      });
    } });
    Ku = Cn({ atan_: function(t2) {
      var e2 = ln(t2, "x", "atan");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.atan(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(n2.toFloat().square().add(1));
        } };
      });
    } });
    ju = Cn({ atanh_: function(t2) {
      var e2 = ln(t2, "x", "atanh");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.atanh(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(An(1).sub(n2.toFloat().square()));
        } };
      });
    } });
    Xu = Cn({ ceil_: function(t2) {
      var e2 = ln(t2, "x", "ceil");
      return Nt.runKernelFunc(function(t3) {
        return t3.ceil(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    $u = Cn({ clipByValue_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "clipByValue");
      return g(e2 <= n2, function() {
        return "Error in clip: min (" + e2 + ") must be less than or equal to max (" + n2 + ").";
      }), Nt.runKernelFunc(function(t3, o2) {
        var a2 = t3.clip(r2, e2, n2);
        return o2([r2]), a2;
      }, { $x: r2 }, function(t3, r3) {
        var o2 = r3[0];
        return { $x: function() {
          return t3.where(o2.greaterEqual(e2).logicalAnd(o2.lessEqual(n2)), zn(t3));
        } };
      });
    } });
    Yu = Cn({ cos_: function(t2) {
      var e2 = ln(t2, "x", "cos");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.cos(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return n2.toFloat().sin().neg().mul(t3);
        } };
      });
    } });
    Qu = Cn({ cosh_: function(t2) {
      var e2 = ln(t2, "x", "cosh");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.cosh(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return n2.toFloat().sinh().mulStrict(t3);
        } };
      });
    } });
    Ju = Cn({ erf_: function(t2) {
      var e2 = ln(t2, "x", "erf");
      return g("int32" === e2.dtype || "float32" === e2.dtype, function() {
        return "Input dtype must be `int32` or `float32`.";
      }), "int32" === e2.dtype && (e2 = e2.toFloat()), Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.erf(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.mul(n2.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));
        } };
      });
    } });
    Zu = Cn({ exp_: function(t2) {
      var e2 = ln(t2, "x", "exp");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.exp(e2);
        return n2([r2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        return { $x: function() {
          return t3.mulStrict(e3[0]);
        } };
      });
    } });
    ts = Cn({ expm1_: function(t2) {
      var e2 = ln(t2, "x", "expm1");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.expm1(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.mul(n2.exp());
        } };
      });
    } });
    es = Cn({ floor_: function(t2) {
      var e2 = ln(t2, "x", "floor");
      return Nt.runKernelFunc(function(t3) {
        return t3.floor(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    ns = Cn({ log_: function(t2) {
      var e2 = ln(t2, "x", "log");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.log(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(n2.toFloat());
        } };
      });
    } });
    rs = Cn({ log1p_: function(t2) {
      var e2 = ln(t2, "x", "log1p");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.log1p(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(n2.add(1));
        } };
      });
    } });
    os = Cn({ logSigmoid_: function(t2) {
      var e2 = ln(t2, "x", "logSigmoid");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.softplus(e2.neg()).neg();
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.mul(n2.neg().sigmoid());
        } };
      });
    } });
    as = Cn({ neg_: function(t2) {
      var e2 = ln(t2, "x", "neg");
      return Nt.runKernelFunc(function(t3) {
        return t3.neg(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return t3.neg();
        } };
      });
    } });
    is = Cn({ reciprocal_: function(t2) {
      var e2 = ln(t2, "x", "reciprocal");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.reciprocal(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(n2.square().neg());
        } };
      });
    } });
    us = Cn({ round_: function(t2) {
      var e2 = ln(t2, "x", "round");
      return Nt.runKernelFunc(function(t3) {
        return t3.round(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    ss = Cn({ rsqrt_: function(t2) {
      var e2 = ln(t2, "x", "rsqrt");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.rsqrt(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(n2.pow(1.5).mul(2)).neg();
        } };
      });
    } });
    cs = Cn({ sigmoid_: function(t2) {
      var e2 = ln(t2, "x", "sigmoid");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.sigmoid(e2);
        return n2([r2]), r2;
      }, { x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { x: function() {
          return t3.mul(n2.mul(An(1).sub(n2)));
        } };
      }, "Sigmoid");
    } });
    ls = Cn({ sign_: function(t2) {
      var e2 = ln(t2, "x", "sign");
      return Nt.runKernelFunc(function(t3) {
        return t3.sign(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    hs = Cn({ isNaN_: function(t2) {
      var e2 = ln(t2, "x", "isNaN");
      return Nt.runKernelFunc(function(t3) {
        return t3.isNaN(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    fs = Cn({ isInf_: function(t2) {
      var e2 = ln(t2, "x", "isInf");
      return Nt.runKernelFunc(function(t3) {
        return t3.isInf(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    ps = Cn({ isFinite_: function(t2) {
      var e2 = ln(t2, "x", "isFinite");
      return Nt.runKernelFunc(function(t3) {
        return t3.isFinite(e2);
      }, { $x: e2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    ds = Cn({ sin_: function(t2) {
      var e2 = ln(t2, "x", "sin");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.sin(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return n2.toFloat().cos().mul(t3);
        } };
      });
    } });
    vs = Cn({ sinh_: function(t2) {
      var e2 = ln(t2, "x", "sinh");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.sinh(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return n2.toFloat().cosh().mulStrict(t3);
        } };
      });
    } });
    ms = Cn({ softplus_: function(t2) {
      var e2 = ln(t2, "x", "softplus");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.softplus(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.mul(n2.sigmoid());
        } };
      });
    } });
    gs = Cn({ sqrt_: function(t2) {
      var e2 = ln(t2, "x", "sqrt");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.sqrt(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(n2.toFloat().sqrt().mul(2));
        } };
      });
    } });
    ys = Cn({ step_: function(t2, e2) {
      void 0 === e2 && (e2 = 0);
      var n2 = ln(t2, "x", "step");
      return Nt.runKernelFunc(function(t3) {
        return t3.step(n2, e2);
      }, { $x: n2 }, function(t3) {
        return { $x: function() {
          return zn(t3);
        } };
      });
    } });
    xs = Cn({ tan_: function(t2) {
      var e2 = ln(t2, "x", "tan");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.tan(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.div(n2.cos().square());
        } };
      });
    } });
    bs = Cn({ tanh_: function(t2) {
      var e2 = ln(t2, "x", "tanh");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.tanh(e2);
        return n2([r2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return An(1).sub(n2.square()).mulStrict(t3);
        } };
      });
    } });
    Ss = Cn({ batchNormalization2d_: function(t2, e2, n2, r2, o2, a2) {
      return void 0 === r2 && (r2 = 1e-3), ks(), ws(t2, e2, n2, a2, o2, r2);
    } });
    As = Cn({ batchNormalization3d_: function(t2, e2, n2, r2, o2, a2) {
      return void 0 === r2 && (r2 = 1e-3), ks(), Cs(t2, e2, n2, a2, o2, r2);
    } });
    Ds = Cn({ batchNormalization4d_: function(t2, e2, n2, r2, o2, a2) {
      return void 0 === r2 && (r2 = 1e-3), ks(), Es(t2, e2, n2, a2, o2, r2);
    } });
    Ts = Cn({ batchNormalization_: function(t2, e2, n2, r2, o2, a2) {
      return void 0 === r2 && (r2 = 1e-3), ks(), Rs(t2, e2, n2, a2, o2, r2);
    } });
    Ns = Cn({ batchNorm_: Rs });
    Fs = Cn({ batchNorm2d_: ws });
    Os = Cn({ batchNorm3d_: Cs });
    _s = Cn({ batchNorm4d_: Es });
    Ms = Cn({ logicalAnd_: function(t2, e2) {
      var n2 = ln(t2, "a", "logicalAnd", "bool"), r2 = ln(e2, "b", "logicalAnd", "bool");
      return po(n2.shape, r2.shape), Nt.runKernelFunc(function(t3) {
        return t3.logicalAnd(n2, r2);
      }, { $a: n2, $b: r2 });
    } });
    Bs = Cn({ logicalNot_: function(t2) {
      var e2 = ln(t2, "x", "logicalNot", "bool");
      return Nt.runKernelFunc(function(t3) {
        return t3.logicalNot(e2);
      }, { $x: e2 });
    } });
    Ps = Cn({ logicalOr_: function(t2, e2) {
      var n2 = ln(t2, "a", "logicalOr", "bool"), r2 = ln(e2, "b", "logicalOr", "bool");
      return po(n2.shape, r2.shape), Nt.runKernelFunc(function(t3) {
        return t3.logicalOr(n2, r2);
      }, { $a: n2, $b: r2 });
    } });
    Ls = Cn({ logicalXor_: function(t2, e2) {
      var n2 = ln(t2, "a", "logicalXor", "bool"), r2 = ln(e2, "b", "logicalXor", "bool");
      return po(n2.shape, r2.shape), Ps(t2, e2).logicalAnd(Ms(t2, e2).logicalNot());
    } });
    Ws = Cn({ where_: function(t2, e2, n2) {
      var r2 = ln(e2, "a", "where"), o2 = ln(n2, "b", "where"), a2 = ln(t2, "condition", "where", "bool");
      return y(r2.shape, o2.shape, "Error in where: "), 1 === a2.rank ? g(a2.shape[0] === r2.shape[0], function() {
        return "The first dimension of `a` must match the size of `condition`.";
      }) : y(a2.shape, o2.shape, "Error in where: "), Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.select(a2, r2, o2);
        return e3([a2]), n3;
      }, { $condition: a2, $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0];
        return { $condition: function() {
          return zn(n3).toFloat();
        }, $a: function() {
          return t3.mul(n3.cast(t3.dtype));
        }, $b: function() {
          return t3.mul(n3.logicalNot().cast(t3.dtype));
        } };
      });
    } });
    Us = function(t2) {
      return n(this, void 0, void 0, function() {
        var e2, n2, o2;
        return r(this, function(r2) {
          switch (r2.label) {
            case 0:
              return [4, (e2 = ln(t2, "condition", "whereAsync", "bool")).data()];
            case 1:
              return n2 = r2.sent(), o2 = Uo(e2.shape, n2), t2 !== e2 && e2.dispose(), [2, o2];
          }
        });
      });
    };
    Vs = Cn({ add_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "add"), o2 = ln(e2, "b", "add");
      n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1];
      var a2 = po(r2.shape, o2.shape);
      return Nt.runKernelFunc(function(t3) {
        return t3.add(r2, o2);
      }, { a: r2, b: o2 }, function(t3) {
        return { a: function() {
          var e3 = t3, n3 = fo(r2.shape, a2);
          return n3.length > 0 && (e3 = e3.sum(n3)), e3.reshape(r2.shape);
        }, b: function() {
          var e3 = t3, n3 = fo(o2.shape, a2);
          return n3.length > 0 && (e3 = e3.sum(n3)), e3.reshape(o2.shape);
        } };
      }, "Add");
    } });
    zs = Cn({ addN_: function(t2) {
      g(Array.isArray(t2), function() {
        return "The argument passed to tf.addN() must be a list of tensors";
      }), g(t2.length >= 1, function() {
        return "Must pass at least one tensor to tf.addN(), but got " + t2.length;
      });
      var e2 = t2.map(function(t3, e3) {
        return ln(t3, "tensors" + e3, "addN");
      }), n2 = e2[0];
      e2.forEach(function(t3) {
        if (t3.dtype !== n2.dtype)
          throw new Error("All tensors passed to tf.addN() must have the same dtype");
      }), e2.forEach(function(t3) {
        if (!C(t3.shape, n2.shape))
          throw new Error("All tensors passed to tf.addN() must have the same shape");
      });
      var r2 = e2;
      return Nt.runKernelFunc(function(t3) {
        return t3.addN(e2);
      }, r2, function(t3) {
        var n3 = {};
        return e2.forEach(function(e3, r3) {
          n3[r3] = function() {
            return t3.clone();
          };
        }), n3;
      });
    } });
    Gs = Cn({ addStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "addStrict"), r2 = ln(e2, "b", "addStrict");
      return y(n2.shape, r2.shape, "Error in addStrict: "), n2.add(r2);
    } });
    Hs = Cn({ atan2_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "atan2"), o2 = ln(e2, "b", "atan2");
      n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1];
      var a2 = po(r2.shape, o2.shape);
      return Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.atan2(r2, o2);
        return e3([r2, o2]), n3;
      }, { $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { $a: function() {
          var e4 = Vs(n3.square(), r3.square()), o3 = t3.mul(r3.div(e4)), i2 = fo(n3.shape, a2);
          return i2.length > 0 && (o3 = o3.sum(i2)), o3.reshape(n3.shape);
        }, $b: function() {
          var e4 = Vs(n3.square(), r3.square()), o3 = as(t3.mul(n3.div(e4))), i2 = fo(r3.shape, a2);
          return i2.length > 0 && (o3 = o3.sum(i2)), o3.reshape(r3.shape);
        } };
      });
    } });
    qs = Cn({ div_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "div"), o2 = ln(e2, "b", "div");
      if (n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], "int32" === r2.dtype && "int32" === o2.dtype)
        return js(r2, o2);
      var a2 = po(r2.shape, o2.shape);
      return Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.realDivide(r2, o2);
        return e3([r2, o2]), n3;
      }, { a: r2, b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { a: function() {
          var e4 = t3.div(r3.toFloat()), o3 = fo(n3.shape, a2);
          return o3.length > 0 ? e4.sum(o3).reshape(n3.shape) : e4;
        }, b: function() {
          var e4 = t3.mul(n3.toFloat()), o3 = fo(r3.shape, a2);
          o3.length > 0 && (e4 = e4.sum(o3).reshape(r3.shape));
          var i2 = r3.square();
          return e4.div(i2.toFloat()).neg();
        } };
      }, "Div");
    } });
    Ks = Cn({ divStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "div"), r2 = ln(e2, "b", "div");
      return y(n2.shape, r2.shape, "Error in divideStrict: "), n2.div(r2);
    } });
    js = Cn({ floorDiv_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "floorDiv"), o2 = ln(e2, "b", "floorDiv");
      n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1];
      var a2 = po(r2.shape, o2.shape);
      return Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.floorDiv(r2, o2);
        return e3([r2, o2]), n3;
      }, { $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { $a: function() {
          var e4 = t3.div(r3.toFloat()), o3 = fo(n3.shape, a2);
          return o3.length > 0 ? e4.sum(o3).reshape(n3.shape) : e4;
        }, $b: function() {
          var e4 = t3.mul(n3.toFloat()), o3 = fo(r3.shape, a2);
          o3.length > 0 && (e4 = e4.sum(o3).reshape(r3.shape));
          var i2 = r3.square();
          return e4.div(i2.toFloat()).neg();
        } };
      });
    } });
    Xs = Cn({ maximum_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "maximum"), o2 = ln(e2, "b", "maximum");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], "bool" === r2.dtype && (r2 = r2.toInt(), o2 = o2.toInt()), po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.maximum(r2, o2);
        return e3([r2, o2]), n3;
      }, { $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { $a: function() {
          return t3.mul(n3.greaterEqual(r3).toFloat());
        }, $b: function() {
          return t3.mul(n3.less(r3).toFloat());
        } };
      });
    } });
    $s = Cn({ maximumStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "maximumStrict"), r2 = ln(e2, "b", "maximumStrict");
      return y(n2.shape, r2.shape, "Error in maximumStrict: "), n2.maximum(r2);
    } });
    Ys = Cn({ minimum_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "minimum"), o2 = ln(e2, "b", "minimum");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], "bool" === r2.dtype && (r2 = r2.toInt(), o2 = o2.toInt()), po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.minimum(r2, o2);
        return e3([r2, o2]), n3;
      }, { $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { $a: function() {
          return t3.mul(n3.lessEqual(r3).toFloat());
        }, $b: function() {
          return t3.mul(n3.greater(r3).toFloat());
        } };
      });
    } });
    Qs = Cn({ minimumStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "minimumStrict"), r2 = ln(e2, "b", "minimumStrict");
      return y(n2.shape, r2.shape, "Error in minimumStrict: "), n2.minimum(r2);
    } });
    Js = Cn({ mod_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "mod"), o2 = ln(e2, "b", "mod");
      n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1];
      var a2 = po(r2.shape, o2.shape);
      return Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.mod(r2, o2);
        return e3([r2, o2]), n3;
      }, { $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { $a: function() {
          var e4 = fo(n3.shape, a2);
          return e4.length > 0 ? t3.sum(e4).reshape(n3.shape) : t3;
        }, $b: function() {
          var e4 = t3.mul(n3.div(r3).floor().neg()), o3 = fo(r3.shape, a2);
          return o3.length > 0 ? e4.sum(o3).reshape(r3.shape) : e4;
        } };
      });
    } });
    Zs = Cn({ modStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "modStrict"), r2 = ln(e2, "b", "modStrict");
      return y(n2.shape, r2.shape, "Error in modStrict: "), n2.mod(r2);
    } });
    tc = Cn({ mul_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "mul"), o2 = ln(e2, "b", "mul");
      n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1];
      var a2 = po(r2.shape, o2.shape);
      return Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.multiply(r2, o2);
        return e3([r2, o2]), n3;
      }, { a: r2, b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { a: function() {
          var e4 = t3.mul(r3.toFloat()), o3 = fo(n3.shape, a2);
          return o3.length > 0 ? e4.sum(o3).reshape(n3.shape) : e4;
        }, b: function() {
          var e4 = t3.mul(n3.toFloat()), o3 = fo(r3.shape, a2);
          return o3.length > 0 ? e4.sum(o3).reshape(r3.shape) : e4;
        } };
      }, "Mul");
    } });
    ec = Cn({ mulStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "mul"), r2 = ln(e2, "b", "mul");
      return y(n2.shape, r2.shape, "Error in multiplyStrict: "), n2.mul(r2);
    } });
    nc = Cn({ pow_: function(t2, e2) {
      var n2 = ln(t2, "base", "pow"), r2 = ln(e2, "exp", "pow"), o2 = po(n2.shape, r2.shape);
      return t2 = n2.cast(Ct(n2.dtype, r2.dtype)), e2 = r2.cast(Ct(n2.dtype, r2.dtype)), Nt.runKernelFunc(function(t3, e3) {
        var o3 = t3.pow(n2, r2);
        return e3([n2, r2, o3]), o3;
      }, { $base: n2, $exp: r2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1], a2 = e3[2];
        return { $base: function() {
          var e4 = r3.toFloat(), a3 = t3.mul(e4.mul(n3.pow(e4.sub(An(1))))), i2 = fo(n3.shape, o2);
          return i2.length > 0 && (a3 = a3.sum(i2)), a3.reshape(n3.shape);
        }, $exp: function() {
          var e4 = n3.greater(0), i2 = n3.log().where(e4, zn(n3)), u2 = t3.mul(a2.mul(i2)), s2 = fo(r3.shape, o2);
          return s2.length > 0 && (u2 = u2.sum(s2)), u2.reshape(r3.shape);
        } };
      });
    } });
    rc = Cn({ powStrict_: function(t2, e2) {
      return y(t2.shape, e2.shape, "Error in powStrict: "), t2.pow(e2);
    } });
    oc = Cn({ squaredDifference_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "squaredDifference"), o2 = ln(e2, "b", "squaredDifference");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.squaredDifference(r2, o2);
        return e3([r2, o2]), n3;
      }, { $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1], o3 = An(2);
        return { $a: function() {
          return t3.mul(n3.sub(r3).mul(o3));
        }, $b: function() {
          return t3.mul(r3.sub(n3).mul(o3));
        } };
      });
    } });
    ac = Cn({ squaredDifferenceStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "squaredDifferenceStrict"), r2 = ln(e2, "b", "squaredDifferenceStrict");
      return y(n2.shape, r2.shape, "Error in squaredDifferenceStrict: "), n2.squaredDifference(r2);
    } });
    ic = Cn({ sub_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "sub"), o2 = ln(e2, "b", "sub");
      n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1];
      var a2 = po(r2.shape, o2.shape);
      return Nt.runKernelFunc(function(t3) {
        return t3.subtract(r2, o2);
      }, { a: r2, b: o2 }, function(t3) {
        return { a: function() {
          var e3 = t3, n3 = fo(r2.shape, a2);
          return n3.length > 0 && (e3 = e3.sum(n3)), e3.reshape(r2.shape);
        }, b: function() {
          var e3 = t3, n3 = fo(o2.shape, a2);
          return n3.length > 0 && (e3 = e3.sum(n3)), e3.neg().reshape(o2.shape);
        } };
      }, "Sub");
    } });
    uc = Cn({ subStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "subStrict"), r2 = ln(e2, "b", "subStrict");
      return y(n2.shape, r2.shape, "Error in subStrict: "), n2.sub(r2);
    } });
    sc = Cn({ equal_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "equal"), o2 = ln(e2, "b", "equal");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3) {
        return t3.equal(r2, o2);
      }, { $a: r2, $b: o2 });
    } });
    cc = Cn({ equalStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "equalStrict"), r2 = ln(e2, "b", "equalStrict");
      return y(n2.shape, r2.shape, "Error in equalStrict: "), n2.equal(r2);
    } });
    lc = Cn({ greater_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "greater"), o2 = ln(e2, "b", "greater");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3) {
        return t3.greater(r2, o2);
      }, { $a: r2, $b: o2 });
    } });
    hc = Cn({ greaterEqual_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "greaterEqual"), o2 = ln(e2, "b", "greaterEqual");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.greaterEqual(r2, o2);
        return e3([r2, o2]), n3;
      }, { $a: r2, $b: o2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1];
        return { $a: function() {
          return zn(n3);
        }, $b: function() {
          return zn(r3);
        } };
      });
    } });
    fc = Cn({ greaterEqualStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "greaterEqualStrict"), r2 = ln(e2, "b", "greaterEqualStrict");
      return y(n2.shape, r2.shape, "Error in greaterEqualStrict: "), n2.greaterEqual(r2);
    } });
    pc = Cn({ greaterStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "greaterStrict"), r2 = ln(e2, "b", "greaterStrict");
      return y(n2.shape, r2.shape, "Error in greaterStrict: "), n2.greater(r2);
    } });
    dc = Cn({ less_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "less"), o2 = ln(e2, "b", "less");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3) {
        return t3.less(r2, o2);
      }, { $a: r2, $b: o2 });
    } });
    vc = Cn({ lessEqual_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "lessEqual"), o2 = ln(e2, "b", "lessEqual");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3) {
        return t3.lessEqual(r2, o2);
      }, { $a: r2, $b: o2 });
    } });
    mc = Cn({ lessEqualStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "lessEqualStrict"), r2 = ln(e2, "b", "lessEqualStrict");
      return y(n2.shape, r2.shape, "Error in lessEqualStrict: "), n2.lessEqual(r2);
    } });
    gc = Cn({ lessStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "lessStrict"), r2 = ln(e2, "b", "lessStrict");
      return y(n2.shape, r2.shape, "Error in lessStrict: "), n2.less(r2);
    } });
    yc = Cn({ notEqual_: function(t2, e2) {
      var n2, r2 = ln(t2, "a", "notEqual"), o2 = ln(e2, "b", "notEqual");
      return n2 = Rt(r2, o2), r2 = n2[0], o2 = n2[1], po(r2.shape, o2.shape), Nt.runKernelFunc(function(t3) {
        return t3.notEqual(r2, o2);
      }, { $a: r2, $b: o2 });
    } });
    xc = Cn({ notEqualStrict_: function(t2, e2) {
      var n2 = ln(t2, "a", "notEqualStrict"), r2 = ln(e2, "b", "notEqualStrict");
      return y(n2.shape, r2.shape, "Error in notEqualStrict: "), n2.notEqual(r2);
    } });
    Cc = Cn({ gather_: function(t2, e2, n2) {
      void 0 === n2 && (n2 = 0);
      var r2 = ln(t2, "x", "gather"), o2 = ln(e2, "indices", "gather", "int32");
      n2 = D(n2, r2.shape)[0];
      var a2 = function(t3, e3, n3) {
        for (var r3 = t3.shape[n3], o3 = [], a3 = 1, i2 = 1, u2 = 0; u2 < n3; u2++)
          o3.push(t3.shape[u2]), a3 *= t3.shape[u2];
        for (u2 = 0; u2 < e3.rank; u2++)
          o3.push(e3.shape[u2]);
        for (u2 = n3 + 1; u2 < t3.rank; u2++)
          o3.push(t3.shape[u2]), i2 *= t3.shape[u2];
        return { batchSize: a3, sliceSize: i2, dimSize: r3, outputShape: o3 };
      }(r2, o2, n2);
      return Nt.runKernelFunc(function(t3, e3) {
        var a3 = t3.gather(r2, o2.flatten(), n2);
        return e3([o2]), a3;
      }, { $x: r2 }, function(t3, e3) {
        var o3 = e3[0];
        return { $x: function() {
          var e4 = r2.shape, a3 = o3.size, i2 = e4.slice(0, n2), u2 = i2.length, s2 = e4.slice(n2, e4.length).slice(1), c2 = s2.length, l3 = bc(0, u2), h2 = bc(u2 + 1, u2 + 1 + c2), f2 = wc([i2, [a3], s2]), p2 = t3.reshape(f2), d2 = o3.reshape([a3]), v2 = wc([[u2], l3, h2]), m2 = p2.transpose(v2), g2 = Ec(m2, d2, r2.shape[n2]), y2 = yn(v2);
          return g2 = g2.transpose(y2);
        } };
      }).reshape(a2.outputShape);
    } });
    Ec = Cn({ unsortedSegmentSum_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "unsortedSegmentSum"), o2 = ln(e2, "segmentIds", "unsortedSegmentSum", "int32");
      return g(E(n2), function() {
        return "numSegments must be of dtype int";
      }), Nt.runKernelFunc(function(t3, e3) {
        var a2 = t3.unsortedSegmentSum(r2, o2, n2);
        return e3([o2]), a2;
      }, { $x: r2 }, function(t3, e3) {
        var n3 = e3[0];
        return { $x: function() {
          return function(t4, e4) {
            for (var n4 = Xs(e4, zn(e4)), r3 = Cc(t4, n4), o3 = hc(e4, An(0, "int32")), a2 = r3.rank - o3.rank, i2 = 0; i2 < a2; ++i2)
              o3 = dr(o3, i2 + 1);
            o3 = Ms(o3, Bn(r3.shape, "bool"));
            var u2 = zn(r3);
            return Ws(o3, r3, u2);
          }(t3, n3);
        } };
      });
    } });
    Rc = function(t2, e2, o2) {
      return n(this, void 0, void 0, function() {
        var n2, a2, i2, u2, s2, c2, l3, h2, f2, p2, d2, v2, m2;
        return r(this, function(r2) {
          switch (r2.label) {
            case 0:
              for (n2 = ln(t2, "tensor", "boolMask"), a2 = ln(e2, "mask", "boolMask", "bool"), i2 = null == o2 ? 0 : o2, u2 = a2.rank, s2 = n2.shape, g(u2 > 0, function() {
                return "mask cannot be scalar";
              }), y(s2.slice(i2, i2 + u2), a2.shape, "mask's shape must match the first K dimensions of tensor's shape,"), c2 = 1, l3 = i2; l3 < i2 + u2; l3++)
                c2 *= s2[l3];
              return h2 = s2.slice(0, i2).concat([c2], s2.slice(i2 + u2)), f2 = n2.reshape(h2), p2 = a2.reshape([-1]), [4, Us(p2)];
            case 1:
              return d2 = r2.sent(), v2 = d2.squeeze([1]), m2 = Cc(f2, v2, i2), t2 !== n2 && n2.dispose(), e2 !== a2 && a2.dispose(), v2.dispose(), f2.dispose(), p2.dispose(), d2.dispose(), [2, m2];
          }
        });
      });
    };
    Ac = Cn({ conv1d_: function(t2, e2, n2, r2, o2, a2, i2) {
      void 0 === o2 && (o2 = "NWC"), void 0 === a2 && (a2 = 1);
      var u2 = ln(t2, "x", "conv1d"), s2 = ln(e2, "filter", "conv1d"), c2 = u2, l3 = false;
      2 === u2.rank && (l3 = true, c2 = u2.as3D(1, u2.shape[0], u2.shape[1])), g(3 === c2.rank, function() {
        return "Error in conv1d: input must be rank 3, but got rank " + c2.rank + ".";
      }), g(3 === s2.rank, function() {
        return "Error in conv1d: filter must be rank 3, but got rank " + s2.rank + ".";
      }), null != i2 && g(E(r2), function() {
        return "Error in conv1d: pad must be an integer when using, dimRoundingMode " + i2 + " but got pad " + r2 + ".";
      }), g(c2.shape[2] === s2.shape[1], function() {
        return "Error in conv1d: depth of input (" + c2.shape[2] + ") must match input depth for filter " + s2.shape[1] + ".";
      }), g(Io(n2, a2), function() {
        return "Error in conv1D: Either stride or dilation must be 1. Got stride " + n2 + " and dilation '" + a2 + "'";
      }), g("NWC" === o2, function() {
        return "Error in conv1d: got dataFormat of " + o2 + " but only NWC is currently supported.";
      });
      var h2 = s2.as4D(1, s2.shape[0], s2.shape[1], s2.shape[2]), f2 = c2.as4D(c2.shape[0], 1, c2.shape[1], c2.shape[2]), p2 = Dc(f2, h2, [1, n2], r2, "NHWC", [1, a2], i2);
      return l3 ? p2.as2D(p2.shape[2], p2.shape[3]) : p2.as3D(p2.shape[0], p2.shape[2], p2.shape[3]);
    } });
    Dc = Cn({ conv2d_: function(t2, e2, n2, r2, o2, a2, i2) {
      void 0 === o2 && (o2 = "NHWC"), void 0 === a2 && (a2 = [1, 1]);
      var u2 = ln(t2, "x", "conv2d"), s2 = ln(e2, "filter", "conv2d"), c2 = u2, l3 = false;
      3 === u2.rank && (l3 = true, c2 = u2.as4D(1, u2.shape[0], u2.shape[1], u2.shape[2])), g(4 === c2.rank, function() {
        return "Error in conv2d: input must be rank 4, but got rank " + c2.rank + ".";
      }), g(4 === s2.rank, function() {
        return "Error in conv2d: filter must be rank 4, but got rank " + s2.rank + ".";
      }), null != i2 && g(E(r2), function() {
        return "Error in conv2d: pad must be an integer when using, dimRoundingMode " + i2 + " but got pad " + r2 + ".";
      });
      var h2 = "NHWC" === o2 ? c2.shape[3] : c2.shape[1];
      g(h2 === s2.shape[2], function() {
        return "Error in conv2d: depth of input (" + h2 + ") must match input depth for filter " + s2.shape[2] + ".";
      }), g(Io(n2, a2), function() {
        return "Error in conv2D: Either strides or dilations must be 1. Got strides " + n2 + " and dilations '" + a2 + "'";
      });
      var f2 = ko(o2), p2 = go(c2.shape, s2.shape, n2, a2, r2, i2, false, f2), d2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.conv2d(c2, s2, p2);
        return e3([s2, c2]), n3;
      }, { x: c2, $filter: s2 }, function(t3, e3) {
        var i3 = e3, u3 = i3[0], s3 = i3[1];
        return g(Ro(a2), function() {
          return "Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a2 + "'";
        }), { x: function() {
          return Fc(s3.shape, t3, u3, n2, r2, o2);
        }, $filter: function() {
          return Nc(s3, t3, u3.shape, n2, r2, o2);
        } };
      });
      return l3 ? d2.as3D(d2.shape[1], d2.shape[2], d2.shape[3]) : d2;
    } });
    Tc = Cn({ conv3d_: function(t2, e2, n2, r2, o2, a2) {
      void 0 === o2 && (o2 = "NDHWC"), void 0 === a2 && (a2 = [1, 1, 1]);
      var i2 = ln(t2, "x", "conv3d"), u2 = ln(e2, "filter", "conv3d"), s2 = i2, c2 = false;
      4 === i2.rank && (c2 = true, s2 = i2.as5D(1, i2.shape[0], i2.shape[1], i2.shape[2], i2.shape[3])), g(5 === s2.rank, function() {
        return "Error in conv3d: input must be rank 5, but got rank " + s2.rank + ".";
      }), g(5 === u2.rank, function() {
        return "Error in conv3d: filter must be rank 5, but got rank " + u2.rank + ".";
      }), g(s2.shape[4] === u2.shape[3], function() {
        return "Error in conv3d: depth of input (" + s2.shape[4] + ") must match input depth for filter " + u2.shape[3] + ".";
      }), g(function(t3, e3) {
        return kc(t3) || kc(e3);
      }(n2, a2), function() {
        return "Error in conv3D: Either strides or dilations must be 1. Got strides " + n2 + " and dilations '" + a2 + "'";
      }), g("NDHWC" === o2, function() {
        return "Error in conv3d: got dataFormat of " + o2 + " but only NDHWC is currently supported.";
      });
      var l3 = yo(s2.shape, u2.shape, n2, a2, r2), h2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.conv3d(s2, u2, l3);
        return e3([s2, u2]), n3;
      }, { x: s2, $filter: u2 }, function(t3, e3) {
        g(kc(a2), function() {
          return "Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a2 + "'";
        });
        var o3 = e3[0], i3 = e3[1];
        return { x: function() {
          return Sc(o3.shape, t3, i3, n2, r2);
        }, $filter: function() {
          return function(t4, e4, n3, r3, o4) {
            var a3 = t4;
            4 === t4.rank && (a3 = t4.as5D(1, t4.shape[0], t4.shape[1], t4.shape[2], t4.shape[3]));
            var i4 = e4;
            4 === i4.rank && (i4 = e4.as5D(1, e4.shape[0], e4.shape[1], e4.shape[2], e4.shape[3])), g(5 === a3.rank, function() {
              return "Error in conv3dDerFilter: input must be rank 5, but got shape " + a3.shape + ".";
            }), g(5 === i4.rank, function() {
              return "Error in conv3dDerFilter: dy must be rank 5, but got shape " + i4.shape + ".";
            }), g(5 === n3.length, function() {
              return "Error in conv3dDerFilter: filterShape must be length 5, but got " + n3 + ".";
            }), g(a3.shape[4] === n3[3], function() {
              return "Error in conv3dDerFilter: depth of input " + a3.shape[4] + ") must match input depth in filter (" + n3[3] + ".";
            }), g(i4.shape[4] === n3[4], function() {
              return "Error in conv3dDerFilter: depth of dy (" + i4.shape[4] + ") must match output depth for filter (" + n3[4] + ").";
            });
            var u3 = yo(a3.shape, n3, r3, 1, o4);
            return Nt.runKernelFunc(function(t5) {
              return t5.conv3dDerFilter(a3, i4, u3);
            }, { x5D: a3, dy5D: i4 });
          }(o3, t3, i3.shape, n2, r2);
        } };
      });
      return c2 ? h2.as4D(h2.shape[1], h2.shape[2], h2.shape[3], h2.shape[4]) : h2;
    } });
    Nc = Cn({ conv2dDerFilter_: function(t2, e2, n2, r2, o2, a2, i2) {
      void 0 === a2 && (a2 = "NHWC");
      var u2 = t2;
      3 === t2.rank && (u2 = t2.as4D(1, t2.shape[0], t2.shape[1], t2.shape[2]));
      var s2 = e2;
      3 === s2.rank && (s2 = e2.as4D(1, e2.shape[0], e2.shape[1], e2.shape[2])), g(4 === u2.rank, function() {
        return "Error in conv2dDerFilter: input must be rank 4, but got shape " + u2.shape + ".";
      }), g(4 === s2.rank, function() {
        return "Error in conv2dDerFilter: dy must be rank 4, but got shape " + s2.shape + ".";
      }), g(4 === n2.length, function() {
        return "Error in conv2dDerFilter: filterShape must be length 4, but got " + n2 + ".";
      });
      var c2 = "NHWC" === a2 ? u2.shape[3] : u2.shape[1], l3 = "NHWC" === a2 ? s2.shape[3] : s2.shape[1];
      g(c2 === n2[2], function() {
        return "Error in conv2dDerFilter: depth of input " + c2 + ") must match input depth in filter (" + n2[2] + ".";
      }), g(l3 === n2[3], function() {
        return "Error in conv2dDerFilter: depth of dy (" + l3 + ") must match output depth for filter (" + n2[3] + ").";
      }), null != i2 && g(E(o2), function() {
        return "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + i2 + " but got pad " + o2 + ".";
      });
      var h2 = ko(a2), f2 = go(u2.shape, n2, r2, 1, o2, i2, false, h2);
      return Nt.runKernelFunc(function(t3) {
        return t3.conv2dDerFilter(u2, s2, f2);
      }, { x4D: u2, dy4D: s2 });
    } });
    Fc = Cn({ conv2dDerInput_: Ic });
    Oc = Cn({ depthwiseConv2d_: function(t2, e2, n2, r2, o2, a2, i2) {
      void 0 === o2 && (o2 = "NHWC"), void 0 === a2 && (a2 = [1, 1]);
      var u2 = ln(t2, "x", "depthwiseConv2d"), s2 = ln(e2, "filter", "depthwiseConv2d"), c2 = u2, l3 = false;
      3 === u2.rank && (l3 = true, c2 = u2.as4D(1, u2.shape[0], u2.shape[1], u2.shape[2])), g(4 === c2.rank, function() {
        return "Error in depthwiseConv2d: input must be rank 4, but got rank " + c2.rank + ".";
      }), g(4 === s2.rank, function() {
        return "Error in depthwiseConv2d: filter must be rank 4, but got rank " + s2.rank + ".";
      }), g(c2.shape[3] === s2.shape[2], function() {
        return "Error in depthwiseConv2d: number of input channels (" + c2.shape[3] + ") must match the inChannels dimension in filter " + s2.shape[2] + ".";
      }), null == a2 && (a2 = [1, 1]), g(Io(n2, a2), function() {
        return "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + n2 + " and dilations '" + a2 + "'";
      }), null != i2 && g(E(r2), function() {
        return "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i2 + " but got pad " + r2 + ".";
      });
      var h2 = go(c2.shape, s2.shape, n2, a2, r2, i2, true), f2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.depthwiseConv2D(c2, s2, h2);
        return e3([c2, s2]), n3;
      }, { x: c2, $filter: s2 }, function(t3, e3) {
        g(Ro(a2), function() {
          return "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + a2 + "'";
        });
        var n3 = e3[0], r3 = e3[1];
        return { x: function() {
          return _c(n3.shape, t3, r3, h2);
        }, $filter: function() {
          return Mc(n3, t3, r3.shape, h2);
        } };
      });
      return l3 ? f2.as3D(f2.shape[1], f2.shape[2], f2.shape[3]) : f2;
    } });
    _c = Cn({ depthwiseConv2dDerInput_: function(t2, e2, n2, r2) {
      var o2 = e2, a2 = false;
      3 === e2.rank && (a2 = true, o2 = e2.as4D(1, e2.shape[0], e2.shape[1], e2.shape[2]));
      var i2 = Nt.runKernelFunc(function(t3) {
        return t3.depthwiseConv2DDerInput(o2, n2, r2);
      }, { dy4D: o2 });
      return a2 ? i2.as3D(i2.shape[1], i2.shape[2], i2.shape[3]) : i2;
    } });
    Mc = Cn({ depthwiseConv2dDerFilter_: function(t2, e2, n2, r2) {
      var o2 = t2;
      3 === t2.rank && (o2 = t2.as4D(1, t2.shape[0], t2.shape[1], t2.shape[2]));
      var a2 = e2;
      return 3 === a2.rank && (a2 = e2.as4D(1, e2.shape[0], e2.shape[1], e2.shape[2])), Nt.runKernelFunc(function(t3) {
        return t3.depthwiseConv2DDerFilter(o2, a2, r2);
      }, { x4D: o2, dy4D: a2 });
    } });
    Bc = Cn({ separableConv2d_: function(t2, e2, n2, r2, o2, a2, i2) {
      void 0 === a2 && (a2 = [1, 1]), void 0 === i2 && (i2 = "NHWC");
      var u2 = ln(t2, "x", "separableConv2d"), s2 = ln(e2, "depthwiseFilter", "separableConv2d"), c2 = ln(n2, "pointwiseFilter", "separableConv2d"), l3 = u2, h2 = false;
      if (3 === u2.rank && (h2 = true, l3 = u2.as4D(1, u2.shape[0], u2.shape[1], u2.shape[2])), "NCHW" === i2)
        throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
      g(4 === l3.rank, function() {
        return "Error in separableConv2d: input must be rank 4, but got rank " + l3.rank + ".";
      }), g(4 === s2.rank, function() {
        return "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + s2.rank + ".";
      }), g(4 === c2.rank, function() {
        return "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + s2.rank + ".";
      }), g(1 === c2.shape[0], function() {
        return "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + c2.shape[0] + ".";
      }), g(1 === c2.shape[1], function() {
        return "Error in separableConv2d: the second dimension of pointwise filter must be 1, but got " + c2.shape[1] + ".";
      });
      var f2 = s2.shape[2], p2 = s2.shape[3];
      g(c2.shape[2] === f2 * p2, function() {
        return "Error in separableConv2d: the third dimension of pointwise filter must be " + f2 * p2 + ", but got " + c2.shape[2] + ".";
      });
      var d2 = Oc(l3, s2, r2, o2, i2, a2), v2 = Dc(d2, c2, 1, "valid", i2);
      return h2 ? v2.as3D(v2.shape[1], v2.shape[2], v2.shape[3]) : v2;
    } });
    Pc = Cn({ conv2dTranspose_: function(t2, e2, n2, r2, o2, a2) {
      return Ic(n2, ln(t2, "x", "conv2dTranspose"), ln(e2, "filter", "conv2dTranspose"), r2, o2, "NHWC", a2);
    } });
    Lc = Cn({ conv3dTranspose_: function(t2, e2, n2, r2, o2) {
      return Sc(n2, ln(t2, "x", "conv3dTranspose"), ln(e2, "filter", "conv3dTranspose"), r2, o2);
    } });
    Wc = Cn({ matMul_: function(t2, e2, n2, r2) {
      var o2;
      void 0 === n2 && (n2 = false), void 0 === r2 && (r2 = false);
      var a2 = ln(t2, "a", "matMul"), i2 = ln(e2, "b", "matMul");
      o2 = Rt(a2, i2), a2 = o2[0], i2 = o2[1];
      var u2 = n2 ? a2.shape[a2.rank - 2] : a2.shape[a2.rank - 1], s2 = r2 ? i2.shape[i2.rank - 1] : i2.shape[i2.rank - 2], c2 = n2 ? a2.shape[a2.rank - 1] : a2.shape[a2.rank - 2], l3 = r2 ? i2.shape[i2.rank - 2] : i2.shape[i2.rank - 1], h2 = a2.shape.slice(0, -2), f2 = i2.shape.slice(0, -2), p2 = w(h2), d2 = w(f2);
      g(a2.rank >= 2 && i2.rank >= 2 && a2.rank === i2.rank, function() {
        return "Error in matMul: inputs must have the same rank of at least 2, got ranks " + a2.rank + " and " + i2.rank + ".";
      }), g(C(h2, f2), function() {
        return "Error in matMul: outer dimensions (" + h2 + ") and (" + f2 + ") of Tensors with shapes " + a2.shape + " and " + i2.shape + " must match.";
      }), g(u2 === s2, function() {
        return "Error in matMul: inner shapes (" + u2 + ") and (" + s2 + ") of Tensors with shapes " + a2.shape + " and " + i2.shape + " and transposeA=" + n2 + " and transposeB=" + r2 + " must match.";
      });
      var v2 = a2.shape.slice(0, -2).concat([c2, l3]), m2 = n2 ? a2.as3D(p2, u2, c2) : a2.as3D(p2, c2, u2), y2 = r2 ? i2.as3D(d2, l3, s2) : i2.as3D(d2, s2, l3), x2 = { transposeA: n2, transposeB: r2 };
      return Nt.runKernelFunc(function(t3, e3) {
        var o3 = t3.batchMatMul(m2, y2, n2, r2);
        return e3([m2, y2]), o3;
      }, { a: m2, b: y2 }, function(t3, e3) {
        var o3 = e3, a3 = o3[0], i3 = o3[1];
        return n2 || r2 ? !n2 && r2 ? { a: function() {
          return t3.matMul(i3, false, false);
        }, b: function() {
          return t3.matMul(a3, true, false);
        } } : n2 && !r2 ? { a: function() {
          return i3.matMul(t3, false, true);
        }, b: function() {
          return a3.matMul(t3, false, false);
        } } : { a: function() {
          return i3.matMul(t3, true, true);
        }, b: function() {
          return t3.matMul(a3, true, true);
        } } : { a: function() {
          return t3.matMul(i3, false, true);
        }, b: function() {
          return a3.matMul(t3, true, false);
        } };
      }, "BatchMatMul", x2).reshape(v2);
    } });
    Uc = Cn({ dot_: function(t2, e2) {
      var n2 = ln(t2, "t1", "dot"), r2 = ln(e2, "t2", "dot");
      g(!(1 !== n2.rank && 2 !== n2.rank || 1 !== r2.rank && 2 !== r2.rank), function() {
        return "Error in dot: inputs must all be rank 1 or 2, but got ranks " + n2.rank + " and " + r2.rank + ".";
      });
      var o2 = 1 === n2.rank ? n2.size : n2.shape[1], a2 = 1 === r2.rank ? r2.size : r2.shape[0];
      return g(o2 === a2, function() {
        return "Error in dot: inner dimensions of inputs must match, but got " + o2 + " and " + a2 + ".";
      }), 1 === n2.rank && 1 === r2.rank ? n2.as2D(1, -1).matMul(r2.as2D(-1, 1)).asScalar() : 1 === n2.rank && 2 === r2.rank ? n2.as2D(1, -1).matMul(r2.as2D(r2.shape[0], r2.shape[1])).as1D() : 2 === n2.rank && 1 === r2.rank ? n2.matMul(r2.as2D(-1, 1)).as1D() : n2.matMul(r2.as2D(r2.shape[0], r2.shape[1]));
    } });
    Vc = Cn({ outerProduct_: function(t2, e2) {
      var n2 = ln(t2, "v1", "outerProduct"), r2 = ln(e2, "v2", "outerProduct");
      return g(1 === n2.rank && 1 === r2.rank, function() {
        return "Error in outerProduct: inputs must be rank 1, but got ranks " + n2.rank + " and " + r2.rank + ".";
      }), n2.as2D(-1, 1).matMul(r2.as2D(1, -1));
    } });
    zc = Cn({ reverse_: function(t2, e2) {
      var n2 = ln(t2, "x", "reverse");
      if (0 === n2.rank)
        return n2.clone();
      var r2 = D(e2, n2.shape);
      return Nt.runKernelFunc(function(t3) {
        return t3.reverse(n2, r2);
      }, { $x: n2 }, function(t3) {
        return { $x: function() {
          return t3.reverse(r2);
        } };
      }).reshapeAs(n2);
    } });
    Gc = Cn({ reverse1d_: function(t2) {
      var e2 = ln(t2, "x", "reverse");
      return g(1 === e2.rank, function() {
        return "Error in reverse1D: x must be rank 1 but got rank " + e2.rank + ".";
      }), zc(e2, 0);
    } });
    Hc = Cn({ reverse2d_: function(t2, e2) {
      var n2 = ln(t2, "x", "reverse");
      return g(2 === n2.rank, function() {
        return "Error in reverse2D: x must be rank 2 but got rank " + n2.rank + ".";
      }), zc(n2, e2);
    } });
    qc = Cn({ reverse3d_: function(t2, e2) {
      var n2 = ln(t2, "x", "reverse");
      return g(3 === n2.rank, function() {
        return "Error in reverse3D: x must be rank 3 but got rank " + n2.rank + ".";
      }), zc(n2, e2);
    } });
    Kc = Cn({ reverse4d_: function(t2, e2) {
      var n2 = ln(t2, "x", "reverse");
      return g(4 === n2.rank, function() {
        return "Error in reverse4D: x must be rank 4 but got rank " + n2.rank + ".";
      }), zc(n2, e2);
    } });
    $c = Cn({ maxPool_: function(t2, e2, n2, r2, o2) {
      return jc(t2, e2, n2, 1, r2, o2);
    } });
    Yc = Cn({ avgPool_: function(t2, e2, n2, r2, o2) {
      return Xc(t2, e2, n2, 1, r2, o2);
    } });
    Qc = Cn({ pool_: function(t2, e2, n2, r2, o2, a2) {
      null == o2 && (o2 = [1, 1]), null == a2 && (a2 = 1), 0 === r2 && (r2 = "valid");
      var i2 = ln(t2, "x", "maxPool"), u2 = i2, s2 = false;
      3 === i2.rank && (s2 = true, u2 = i2.as4D(1, i2.shape[0], i2.shape[1], i2.shape[2])), g(Io(a2, o2), function() {
        return "Error in pool: Either strides or dilations must be 1. Got strides " + a2 + " and dilations '" + o2 + "'";
      });
      var c2, l3 = vo(u2.shape, e2, a2, o2, r2), h2 = [l3.dilationHeight, l3.dilationWidth];
      c2 = "same" === r2 ? function(t3, e3) {
        var n3 = t3.map(function(t4, n4) {
          return t4 + (t4 - 1) * (e3[n4] - 1);
        }).map(function(t4) {
          return t4 - 1;
        }), r3 = n3.map(function(t4) {
          return Math.floor(t4 / 2);
        }), o3 = n3.map(function(t4, e4) {
          return t4 - r3[e4];
        });
        return n3.map(function(t4, e4) {
          return [r3[e4], o3[e4]];
        });
      }([l3.filterHeight, l3.filterWidth], h2) : [[0, 0], [0, 0]];
      var f2 = 1 === h2[0] && 1 === h2[1], p2 = function(t3, e3, n3) {
        var r3 = n3.map(function(t4) {
          return t4[0];
        }), o3 = n3.map(function(t4) {
          return t4[1];
        }), a3 = t3.concat(r3, o3), i3 = e3.map(function(t4, e4) {
          return (t4 - a3[e4] % t4) % t4;
        }), u3 = o3.map(function(t4, e4) {
          return t4 + i3[e4];
        }), s3 = e3.map(function(t4, e4) {
          return [r3[e4], u3[e4]];
        }), c3 = e3.map(function(t4, e4) {
          return [0, i3[e4]];
        });
        return [s3, c3];
      }([l3.inHeight, l3.inWidth], h2, c2), d2 = p2[0], v2 = p2[1], m2 = f2 ? r2 : "valid", y2 = f2 ? u2 : Ar(u2, h2, d2), x2 = ("avg" === n2 ? function() {
        return Xc(y2, e2, a2, 1, m2);
      } : function() {
        return jc(y2, e2, a2, 1, m2);
      })(), b2 = f2 ? x2 : cr(x2, h2, v2);
      return s2 ? b2.as3D(b2.shape[1], b2.shape[2], b2.shape[3]) : b2;
    } });
    Jc = Cn({ maxPool3d_: function(t2, e2, n2, r2, o2, a2, i2) {
      void 0 === a2 && (a2 = "NDHWC");
      var u2 = ln(t2, "x", "maxPool3d"), s2 = u2, c2 = false;
      4 === u2.rank && (c2 = true, s2 = u2.as5D(1, u2.shape[0], u2.shape[1], u2.shape[2], u2.shape[3])), null == i2 && (i2 = [1, 1, 1]), g(5 === s2.rank, function() {
        return "Error in maxPool3d: x must be rank 5 but got rank " + s2.rank + ".";
      }), g("NDHWC" === a2, function() {
        return "Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of " + a2;
      }), g(Io(n2, i2), function() {
        return "Error in maxPool3d: Either strides or dilations must be 1. Got strides " + n2 + " and dilations '" + i2 + "'";
      }), null != o2 && g(E(r2), function() {
        return "Error in maxPool3d: pad must be an integer when using, dimRoundingMode " + o2 + " but got pad " + r2 + ".";
      });
      var l3 = mo(s2.shape, e2, n2, i2, r2, o2, a2), h2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.maxPool3d(s2, l3);
        return e3([s2, n3]), n3;
      }, { x: s2 }, function(t3, a3) {
        var u3 = a3[0], s3 = a3[1];
        return { x: function() {
          return function(t4, e3, n3, r3, o3, a4, i3, u4) {
            var s4 = ln(t4, "dy", "maxPool3dBackprop"), c3 = ln(e3, "input", "maxPool3dBackprop"), l4 = ln(n3, "output", "maxPool3dBackprop"), h3 = s4, f2 = c3, p2 = l4, d2 = false;
            4 === c3.rank && (d2 = true, h3 = s4.as5D(1, s4.shape[0], s4.shape[1], s4.shape[2], s4.shape[3]), f2 = c3.as5D(1, c3.shape[0], c3.shape[1], c3.shape[2], c3.shape[3]), p2 = l4.as5D(1, l4.shape[0], l4.shape[1], l4.shape[2], l4.shape[3])), g(5 === h3.rank, function() {
              return "Error in maxPool3dBackprop: dy must be rank 5 but got rank " + h3.rank + ".";
            }), g(5 === f2.rank, function() {
              return "Error in maxPool3dBackprop: input must be rank 5 but got rank " + f2.rank + ".";
            }), g(5 === p2.rank, function() {
              return "Error in maxPool3dBackprop: output must be rank 5 but got rank " + p2.rank + ".";
            }), null == a4 && (a4 = [1, 1, 1]), g(Io(o3, a4), function() {
              return "Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides " + o3 + " and dilations '" + a4 + "'";
            }), null != u4 && g(E(i3), function() {
              return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + u4 + " but got pad " + i3 + ".";
            });
            var v2 = mo(f2.shape, r3, o3, a4, i3, u4), m2 = Nt.runKernelFunc(function(t5) {
              return t5.maxPool3dBackprop(h3, f2, p2, v2);
            }, { dy5D: h3, input5D: f2 });
            return d2 ? m2.as4D(m2.shape[1], m2.shape[2], m2.shape[3], m2.shape[4]) : m2;
          }(t3, u3, s3, e2, n2, i2, r2, o2);
        } };
      });
      return c2 ? h2.as4D(h2.shape[1], h2.shape[2], h2.shape[3], h2.shape[4]) : h2;
    } });
    Zc = Cn({ avgPool3d_: function(t2, e2, n2, r2, o2, a2, i2) {
      void 0 === a2 && (a2 = "NDHWC");
      var u2 = ln(t2, "x", "avgPool3d", "float32"), s2 = u2, c2 = false;
      4 === u2.rank && (c2 = true, s2 = u2.as5D(1, u2.shape[0], u2.shape[1], u2.shape[2], u2.shape[3])), null == i2 && (i2 = [1, 1, 1]), g(5 === s2.rank, function() {
        return "Error in avgPool3d: x must be rank 5 but got rank " + s2.rank + ".";
      }), g("NDHWC" === a2, function() {
        return "Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of " + a2;
      }), g(Io(n2, i2), function() {
        return "Error in avgPool3d: Either strides or dilations must be 1. Got strides " + n2 + " and dilations '" + i2 + "'";
      }), null != o2 && g(E(r2), function() {
        return "Error in avgPool3d: pad must be an integer when using, dimRoundingMode " + o2 + " but got pad " + r2 + ".";
      });
      var l3 = mo(s2.shape, e2, n2, i2, r2, o2, a2), h2 = Nt.runKernelFunc(function(t3) {
        return t3.avgPool3d(s2, l3);
      }, { x: s2 }, function(t3) {
        return { x: function() {
          return function(t4, e3, n3, r3, o3, a3, i3) {
            var u3 = ln(t4, "dy", "avgPool3dBackprop"), s3 = ln(e3, "input", "avgPool3dBackprop"), c3 = u3, l4 = s3, h3 = false;
            4 === s3.rank && (h3 = true, c3 = u3.as5D(1, u3.shape[0], u3.shape[1], u3.shape[2], u3.shape[3]), l4 = s3.as5D(1, s3.shape[0], s3.shape[1], s3.shape[2], s3.shape[3])), g(5 === c3.rank, function() {
              return "Error in avgPool3dBackprop: dy must be rank 5 but got rank " + c3.rank + ".";
            }), g(5 === l4.rank, function() {
              return "Error in avgPool3dBackprop: input must be rank 5 but got rank " + l4.rank + ".";
            }), null == o3 && (o3 = [1, 1, 1]), g(Io(r3, o3), function() {
              return "Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides " + r3 + " and dilations '" + o3 + "'";
            }), null != i3 && g(E(a3), function() {
              return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + a3 + ".";
            });
            var f2 = mo(l4.shape, n3, r3, o3, a3, i3), p2 = Nt.runKernelFunc(function(t5) {
              return t5.avgPool3dBackprop(c3, l4, f2);
            }, { dy5D: c3, input5D: l4 });
            return h3 ? p2.as4D(p2.shape[1], p2.shape[2], p2.shape[3], p2.shape[4]) : p2;
          }(t3, s2, e2, n2, i2, r2, o2);
        } };
      });
      return h2 = h2.cast(s2.dtype), c2 ? h2.as4D(h2.shape[1], h2.shape[2], h2.shape[3], h2.shape[4]) : h2;
    } });
    tl = Cn({ slice_: function(t2, e2, n2) {
      var r2, o2, a2 = ln(t2, "x", "slice");
      if (0 === a2.rank)
        throw new Error("Slicing scalar is not possible");
      (r2 = "number" == typeof e2 ? [e2].concat(new Array(a2.rank - 1).fill(0)) : e2.length < a2.rank ? e2.concat(new Array(a2.rank - e2.length).fill(0)) : e2.slice()).forEach(function(t3) {
        g(-1 !== t3, function() {
          return "slice() does not support negative begin indexing.";
        });
      }), o2 = (o2 = null == n2 ? new Array(a2.rank).fill(-1) : "number" == typeof n2 ? [n2].concat(new Array(a2.rank - 1).fill(-1)) : n2.length < a2.rank ? n2.concat(new Array(a2.rank - n2.length).fill(-1)) : n2).map(function(t3, e3) {
        return t3 >= 0 ? t3 : (g(-1 === t3, function() {
          return "Negative size values should be exactly -1 but got " + t3 + " for the slice() size at index " + e3 + ".";
        }), a2.shape[e3] - r2[e3]);
      }), qr(a2, r2, o2);
      var i2 = a2.shape, u2 = { begin: r2, size: o2 };
      return Nt.runKernelFunc(function(t3) {
        return t3.slice(a2, r2, o2);
      }, { x: a2 }, function(t3) {
        for (var e3 = [], n3 = 0; n3 < t3.rank; n3++)
          e3.push([r2[n3], i2[n3] - r2[n3] - o2[n3]]);
        return { x: function() {
          return t3.pad(e3);
        } };
      }, "Slice", u2);
    } });
    el = Cn({ slice1d_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "slice1d");
      return g(1 === r2.rank, function() {
        return "slice1d expects a rank-1 tensor, but got a rank-" + r2.rank + " tensor";
      }), tl(r2, [e2], [n2]);
    } });
    nl = Cn({ slice2d_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "slice2d");
      return g(2 === r2.rank, function() {
        return "slice2d expects a rank-2 tensor, but got a rank-" + r2.rank + " tensor";
      }), tl(r2, e2, n2);
    } });
    rl = Cn({ slice3d_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "slice3d");
      return g(3 === r2.rank, function() {
        return "slice3d expects a rank-3 tensor, but got a rank-" + r2.rank + " tensor";
      }), tl(r2, e2, n2);
    } });
    ol = Cn({ slice4d_: function(t2, e2, n2) {
      var r2 = ln(t2, "x", "slice4d");
      return g(4 === r2.rank, function() {
        return "slice4d expects a rank-4 tensor, but got a rank-" + r2.rank + " tensor";
      }), tl(r2, e2, n2);
    } });
    il = Cn({ all_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "all", "bool"), o2 = D(e2, r2.shape), a2 = o2, i2 = gn(a2, r2.rank);
      null != i2 && (r2 = r2.transpose(i2), a2 = xn(a2.length, r2.rank));
      var u2 = Nt.runKernelFunc(function(t3) {
        return t3.all(r2, a2);
      }, { $x: r2 });
      if (n2) {
        var s2 = vn(u2.shape, o2);
        return u2.reshape(s2);
      }
      return u2;
    } });
    ul = Cn({ any_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "any", "bool"), o2 = D(e2, r2.shape), a2 = o2, i2 = gn(a2, r2.rank);
      null != i2 && (r2 = r2.transpose(i2), a2 = xn(a2.length, r2.rank));
      var u2 = Nt.runKernelFunc(function(t3) {
        return t3.any(r2, a2);
      }, { $x: r2 });
      if (n2) {
        var s2 = vn(u2.shape, o2);
        return u2.reshape(s2);
      }
      return u2;
    } });
    sl = Cn({ argMax_: function(t2, e2) {
      void 0 === e2 && (e2 = 0);
      var n2 = ln(t2, "x", "argMax");
      null == e2 && (e2 = 0);
      var r2 = D(e2, n2.shape), o2 = gn(r2, n2.rank);
      return null != o2 && (n2 = n2.transpose(o2), r2 = xn(r2.length, n2.rank)), Nt.runKernelFunc(function(t3, e3) {
        var o3 = t3.argMax(n2, r2[0]);
        return e3([n2]), o3;
      }, { $x: n2 }, function(t3, e3) {
        var n3 = e3[0];
        return { $x: function() {
          return zn(n3);
        } };
      });
    } });
    cl = Cn({ argMin_: function(t2, e2) {
      void 0 === e2 && (e2 = 0);
      var n2 = ln(t2, "x", "argMin");
      null == e2 && (e2 = 0);
      var r2 = D(e2, n2.shape), o2 = gn(r2, n2.rank);
      return null != o2 && (n2 = n2.transpose(o2), r2 = xn(r2.length, n2.rank)), Nt.runKernelFunc(function(t3, e3) {
        var o3 = t3.argMin(n2, r2[0]);
        return e3([n2]), o3;
      }, { $x: n2 }, function(t3, e3) {
        var n3 = e3[0];
        return { $x: function() {
          return zn(n3);
        } };
      });
    } });
    ll = Cn({ logSumExp_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "logSumExp"), o2 = D(e2, r2.shape), a2 = r2.max(o2, true), i2 = r2.sub(a2).exp().sum(o2).log(), u2 = a2.reshape(i2.shape).add(i2);
      if (n2) {
        var s2 = vn(u2.shape, o2);
        return u2.reshape(s2);
      }
      return u2;
    } });
    hl = Cn({ max_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "max"), o2 = r2, a2 = D(e2, r2.shape), i2 = a2, u2 = gn(i2, r2.rank);
      null != u2 && (r2 = r2.transpose(u2), i2 = xn(i2.length, r2.rank));
      var s2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.max(r2, i2);
        return e3([o2, n3]), n3;
      }, { $x: r2 }, function(t3, e3) {
        return al(t3, e3[1], e3[0], a2, u2);
      });
      if (n2) {
        var c2 = vn(s2.shape, a2);
        s2 = s2.reshape(c2);
      }
      return s2;
    } });
    fl = Cn({ mean_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "mean"), o2 = D(e2, r2.shape), a2 = w(dn(r2.shape, o2)[1]);
      return oo(function(t3) {
        var r3 = An(a2);
        return { value: (r3.dtype === t3.dtype ? t3 : t3.cast(r3.dtype)).div(r3).sum(e2, n2), gradFunc: function(e3) {
          var n3 = t3.shape.slice();
          return o2.forEach(function(t4) {
            n3[t4] = 1;
          }), e3.reshape(n3).mul(Bn(t3.shape, "float32")).div(a2);
        } };
      })(r2);
    } });
    pl = Cn({ min_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "min"), o2 = r2, a2 = D(e2, r2.shape), i2 = a2, u2 = gn(i2, r2.rank);
      null != u2 && (r2 = r2.transpose(u2), i2 = xn(i2.length, r2.rank));
      var s2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.min(r2, i2);
        return e3([o2, n3]), n3;
      }, { $x: r2 }, function(t3, e3) {
        return al(t3, e3[1], e3[0], a2, u2);
      });
      if (n2) {
        var c2 = vn(s2.shape, a2);
        s2 = s2.reshape(c2);
      }
      return s2;
    } });
    dl = Cn({ moments_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = D(e2, (t2 = ln(t2, "x", "moments")).shape), o2 = t2.mean(r2, n2), a2 = o2.shape;
      n2 || (a2 = vn(o2.shape, r2));
      var i2 = t2.toFloat().sub(o2.reshape(a2)).square();
      return { mean: o2, variance: i2.mean(r2, n2) };
    } });
    vl = Cn({ sum_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "sum");
      "bool" === r2.dtype && (r2 = r2.toInt());
      var o2 = D(e2, r2.shape);
      return oo(function(t3) {
        var e3 = gn(o2, t3.rank), r3 = o2, a2 = t3;
        null != e3 && (a2 = t3.transpose(e3), r3 = xn(r3.length, t3.rank));
        var i2 = Nt.runKernelFunc(function(t4) {
          return t4.sum(a2, r3);
        }, { permutedX: a2 });
        if (n2) {
          var u2 = vn(i2.shape, o2);
          i2 = i2.reshape(u2);
        }
        return { value: i2, gradFunc: function(e4) {
          var n3 = t3.shape.slice();
          return o2.forEach(function(t4) {
            n3[t4] = 1;
          }), e4.reshape(n3).mul(Bn(t3.shape, "float32"));
        } };
      })(r2);
    } });
    ml = Cn({ prod_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = null), void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "x", "prod");
      "bool" === r2.dtype && (r2 = r2.toInt());
      var o2 = D(e2, r2.shape), a2 = gn(o2, r2.rank), i2 = o2, u2 = r2;
      null != a2 && (u2 = r2.transpose(a2), i2 = xn(i2.length, r2.rank));
      var s2 = Nt.runKernelFunc(function(t3) {
        return t3.prod(u2, i2);
      }, { permutedX: u2 });
      if (n2) {
        var c2 = vn(s2.shape, o2);
        s2 = s2.reshape(c2);
      }
      return s2;
    } });
    gl = Cn({ elu_: function(t2) {
      var e2 = ln(t2, "x", "elu");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.elu(e2);
        return n2([r2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return Nt.runKernelFunc(function(e4) {
            return e4.eluDer(t3, n2);
          }, { dy: t3, y: n2 });
        } };
      });
    } });
    yl = Cn({ leakyRelu_: function(t2, e2) {
      void 0 === e2 && (e2 = 0.2);
      var n2 = ln(t2, "x", "leakyRelu");
      return Xs(An(e2).mul(n2), n2);
    } });
    xl = Cn({ prelu_: function(t2, e2) {
      var n2 = ln(t2, "x", "prelu"), r2 = ln(e2, "alpha", "prelu");
      return Nt.runKernelFunc(function(t3, e3) {
        var o2 = t3.prelu(n2, r2);
        return e3([n2, r2]), o2;
      }, { x: n2, alpha: r2 }, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1], o2 = n3.greater(0);
        return { x: function() {
          return Ws(o2, t3, t3.mul(r3));
        }, alpha: function() {
          var e4 = Ws(o2, zn(t3), t3.mul(n3)), a2 = fo(r3.shape, t3.shape);
          return a2.length > 0 && (e4 = e4.sum(a2)), e4.reshape(r3.shape);
        } };
      }, "Prelu");
    } });
    bl = Cn({ relu_: function(t2) {
      var e2 = ln(t2, "x", "relu");
      return "bool" === e2.dtype ? e2.toInt() : Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.relu(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          return t3.mulStrict(n2.step().toFloat());
        } };
      });
    } });
    wl = Cn({ relu6_: function(t2) {
      var e2 = ln(t2, "x", "relu6");
      return "bool" === e2.dtype ? e2.toInt() : Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.relu6(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0], r2 = n2.lessEqual(6).mul(n2.step());
        return { $x: function() {
          return t3.mulStrict(r2.toFloat());
        } };
      });
    } });
    Cl = Cn({ selu_: function(t2) {
      var e2 = ln(t2, "x", "selu");
      return Nt.runKernelFunc(function(t3, n2) {
        var r2 = t3.selu(e2);
        return n2([e2]), r2;
      }, { $x: e2 }, function(t3, e3) {
        var n2 = e3[0];
        return { $x: function() {
          var e4 = n2.greater(An(0)), r2 = An(iu), o2 = An(uu), a2 = t3.mul(o2), i2 = t3.mul(r2).mul(n2.toFloat().exp());
          return Ws(e4, a2, i2);
        } };
      });
    } });
    El = Cn({ transpose_: function(t2, e2) {
      var n2 = ln(t2, "x", "transpose");
      return null == e2 && (e2 = n2.shape.map(function(t3, e3) {
        return e3;
      }).reverse()), g(n2.rank === e2.length, function() {
        return "Error in transpose: rank of input " + n2.rank + " must match length of perm " + e2 + ".";
      }), e2.forEach(function(t3) {
        g(t3 >= 0 && t3 < n2.rank, function() {
          return "All entries in 'perm' must be between 0 and " + (n2.rank - 1) + " but got " + e2;
        });
      }), n2.rank <= 1 ? n2.clone() : Nt.runKernelFunc(function(t3) {
        return t3.transpose(n2, e2);
      }, { $x: n2 }, function(t3) {
        var n3 = yn(e2);
        return { $x: function() {
          return t3.transpose(n3);
        } };
      });
    } });
    Rl = Cn({ localResponseNormalization_: function(t2, e2, n2, r2, o2) {
      void 0 === e2 && (e2 = 5), void 0 === n2 && (n2 = 1), void 0 === r2 && (r2 = 1), void 0 === o2 && (o2 = 0.5);
      var a2 = ln(t2, "x", "localResponseNormalization");
      g(4 === a2.rank || 3 === a2.rank, function() {
        return "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + a2.rank + ".";
      }), g(E(e2), function() {
        return "Error in localResponseNormalization: depthRadius must be an integer but got depthRadius " + e2 + ".";
      });
      var i2 = a2, u2 = false;
      3 === a2.rank && (u2 = true, i2 = a2.as4D(1, a2.shape[0], a2.shape[1], a2.shape[2]));
      var s2 = Nt.runKernelFunc(function(t3, a3) {
        var u3 = t3.localResponseNormalization4D(i2, e2, n2, r2, o2);
        return a3([i2, u3]), u3;
      }, { x4D: i2 }, function(t3, a3) {
        var i3 = a3[0], u3 = a3[1];
        return { x4D: function() {
          return Nt.runKernelFunc(function(a4) {
            return a4.LRNGrad(t3, i3, u3, e2, n2, r2, o2);
          }, {});
        } };
      });
      return u2 ? s2.as3D(s2.shape[1], s2.shape[2], s2.shape[3]) : s2;
    } });
    Il = Cn({ norm_: function(t2, e2, n2, r2) {
      void 0 === e2 && (e2 = "euclidean"), void 0 === n2 && (n2 = null), void 0 === r2 && (r2 = false);
      var o2 = function t3(e3, n3, r3) {
        if (void 0 === r3 && (r3 = null), 0 === e3.rank)
          return e3.abs();
        if (1 !== e3.rank && null === r3)
          return t3(e3.reshape([-1]), n3, r3);
        if (1 === e3.rank || "number" == typeof r3 || Array.isArray(r3) && 1 === r3.length) {
          if (1 === n3)
            return e3.abs().sum(r3);
          if (n3 === 1 / 0)
            return e3.abs().max(r3);
          if (n3 === -1 / 0)
            return e3.abs().min(r3);
          if ("euclidean" === n3 || 2 === n3)
            return e3.abs().pow(An(2, "int32")).sum(r3).sqrt();
          throw new Error("Error in norm: invalid ord value: " + n3);
        }
        if (Array.isArray(r3) && 2 === r3.length) {
          if (1 === n3)
            return e3.abs().sum(r3[0]).max(r3[1] - 1);
          if (n3 === 1 / 0)
            return e3.abs().sum(r3[1]).max(r3[0]);
          if (n3 === -1 / 0)
            return e3.abs().sum(r3[1]).min(r3[0]);
          if ("fro" === n3 || "euclidean" === n3)
            return e3.square().sum(r3).sqrt();
          throw new Error("Error in norm: invalid ord value: " + n3);
        }
        throw new Error("Error in norm: invalid axis: " + r3);
      }(t2 = ln(t2, "x", "norm"), e2, n2), a2 = o2.shape;
      if (r2) {
        var i2 = D(n2, t2.shape);
        a2 = vn(o2.shape, i2);
      }
      return o2.reshape(a2);
    } });
    kl = Cn({ basicLSTMCell_: function(t2, e2, n2, r2, o2, a2) {
      var i2 = ln(t2, "forgetBias", "basicLSTMCell"), u2 = ln(e2, "lstmKernel", "basicLSTMCell"), s2 = ln(n2, "lstmBias", "basicLSTMCell"), c2 = ln(r2, "data", "basicLSTMCell"), l3 = ln(o2, "c", "basicLSTMCell"), h2 = ln(a2, "h", "basicLSTMCell"), f2 = c2.concat(h2, 1).matMul(u2).add(s2), p2 = f2.shape[0], d2 = f2.shape[1] / 4, v2 = [p2, d2], m2 = f2.slice([0, 0], v2), g2 = f2.slice([0, d2], v2), y2 = f2.slice([0, 2 * d2], v2), x2 = f2.slice([0, 3 * d2], v2), b2 = m2.sigmoid().mulStrict(g2.tanh()).addStrict(l3.mulStrict(i2.add(y2).sigmoid())), w2 = b2.tanh().mulStrict(x2.sigmoid());
      return [b2, w2];
    } });
    Sl = Cn({ multiRNNCell_: function(t2, e2, n2, r2) {
      for (var o2 = ln(e2, "data", "multiRNNCell"), a2 = hn(n2, "c", "multiRNNCell"), i2 = hn(r2, "h", "multiRNNCell"), u2 = o2, s2 = [], c2 = 0; c2 < t2.length; c2++) {
        var l3 = t2[c2](u2, a2[c2], i2[c2]);
        s2.push(l3[0]), s2.push(l3[1]), u2 = l3[1];
      }
      var h2 = [], f2 = [];
      for (c2 = 0; c2 < s2.length; c2 += 2)
        h2.push(s2[c2]), f2.push(s2[c2 + 1]);
      return [h2, f2];
    } });
    Al = Cn({ movingAverage_: function(t2, e2, n2, r2, o2) {
      void 0 === o2 && (o2 = true);
      var a2 = ln(t2, "v", "movingAverage"), i2 = ln(e2, "x", "movingAverage"), u2 = ln(n2, "decay", "movingAverage");
      It(a2, i2), g(C(a2.shape, i2.shape), function() {
        return "Shape mismatch in v and x";
      });
      var s2 = An(1), c2 = s2.sub(u2), l3 = i2.sub(a2).mul(c2);
      if (o2) {
        g(null != r2, function() {
          return "When using zeroDebias: true, step is required.";
        });
        var h2 = ln(r2, "step", "movingAverage");
        l3 = l3.div(s2.sub(nc(u2, h2)));
      }
      return a2.add(l3);
    } });
    Dl = Cn({ stridedSlice_: function(t2, e2, n2, r2, o2, a2, i2, u2, s2) {
      if (void 0 === o2 && (o2 = 0), void 0 === a2 && (a2 = 0), void 0 === i2 && (i2 = 0), void 0 === u2 && (u2 = 0), void 0 === s2 && (s2 = 0), null == r2 && (r2 = new Array(e2.length)), 0 !== i2)
        throw new Error("ellipsis mask is not yet supported");
      var c2 = ln(t2, "x", "stridedSlice"), l3 = Kr(u2), h2 = c2.shape.slice();
      l3.forEach(function(t3) {
        e2[t3] = 0, n2[t3] = 1, h2.splice(t3, 0, 1);
      }), c2 = c2.reshape(h2);
      for (var f2 = 0; f2 < c2.rank; f2++)
        e2[f2] = Xr(o2, e2, r2, c2.shape, f2), n2[f2] = $r(a2, n2, r2, c2.shape, f2), r2[f2] = r2[f2] || 1;
      var p2 = Kr(s2);
      p2.forEach(function(t3) {
        n2[t3] = e2[t3] + 1, r2[t3] = 1;
      });
      var d2 = jr(e2, n2, r2), v2 = d2.filter(function(t3, e3) {
        return -1 === p2.indexOf(e3);
      });
      return r2.every(function(t3) {
        return 1 === t3;
      }) ? tl(c2, e2, d2).reshape(v2) : Nt.runKernelFunc(function(t3) {
        return t3.stridedSlice(c2, e2, n2, r2);
      }, { $x: c2 }).reshape(v2);
    } });
    Tl = Cn({ topk_: function(t2, e2, n2) {
      void 0 === e2 && (e2 = 1), void 0 === n2 && (n2 = true);
      var r2 = ln(t2, "x", "topk");
      if (0 === r2.rank)
        throw new Error("topk() expects the input to be of rank 1 or higher");
      var o2 = r2.shape[r2.shape.length - 1];
      if (e2 > o2)
        throw new Error("'k' passed to topk() must be <= the last dimension (" + o2 + ") but got " + e2);
      var a2 = Nt.runKernelFunc(function(t3) {
        return t3.topk(r2, e2, n2);
      }, { $x: r2 });
      return { values: a2[0], indices: a2[1] };
    } });
    Nl = Cn({ scatterND_: function(t2, e2, n2) {
      var r2 = ln(t2, "indices", "scatterND", "int32"), o2 = ln(e2, "updates", "scatterND");
      return Gr(o2, r2, n2), Nt.runKernelFunc(function(t3) {
        return t3.scatterND(r2, o2, n2);
      }, { $indices: r2, $updates: o2 });
    } });
    Fl = Cn({ fft_: function(t2) {
      g("complex64" === t2.dtype, function() {
        return "The dtype for tf.spectral.fft() must be complex64 but got " + t2.dtype + ".";
      });
      var e2 = t2.shape[t2.shape.length - 1], n2 = t2.size / e2, r2 = t2.as2D(n2, e2);
      return Nt.runKernelFunc(function(t3) {
        return t3.fft(r2);
      }, { input: t2 }).reshape(t2.shape);
    } });
    Ol = Cn({ ifft_: function(t2) {
      g("complex64" === t2.dtype, function() {
        return "The dtype for tf.spectral.ifft() must be complex64 but got " + t2.dtype + ".";
      });
      var e2 = t2.shape[t2.shape.length - 1], n2 = t2.size / e2, r2 = t2.as2D(n2, e2);
      return Nt.runKernelFunc(function(t3) {
        return t3.ifft(r2);
      }, { input: t2 }).reshape(t2.shape);
    } });
    _l = Cn({ rfft_: function(t2, e2) {
      g("float32" === t2.dtype, function() {
        return "The dtype for rfft() must be real value but got " + t2.dtype;
      });
      var n2, r2 = t2.shape[t2.shape.length - 1], o2 = t2.size / r2;
      if (null != e2 && e2 < r2) {
        var a2 = t2.shape.map(function(t3) {
          return 0;
        }), i2 = t2.shape.map(function(t3) {
          return t3;
        });
        i2[t2.shape.length - 1] = e2, n2 = t2.slice(a2, i2), r2 = e2;
      } else if (null != e2 && e2 > r2) {
        var u2 = t2.shape.map(function(t3) {
          return t3;
        });
        u2[t2.shape.length - 1] = e2 - r2, n2 = t2.concat(Pn(u2), t2.shape.length - 1), r2 = e2;
      } else
        n2 = t2;
      var s2 = n2.zerosLike(), c2 = En(n2, s2).as2D(o2, r2), l3 = Fl(c2), h2 = Math.floor(r2 / 2) + 1, f2 = Rn(l3), p2 = In(l3), d2 = f2.split([h2, r2 - h2], f2.shape.length - 1), v2 = p2.split([h2, r2 - h2], p2.shape.length - 1), m2 = n2.shape.slice();
      return m2[n2.shape.length - 1] = h2, En(d2[0], v2[0]).reshape(m2);
    } });
    Ml = Cn({ irfft_: function(t2) {
      var e2 = t2.shape[t2.shape.length - 1], n2 = t2.size / e2;
      if (e2 <= 2) {
        var r2 = t2.as2D(n2, e2), o2 = Ol(r2);
        return Rn(o2);
      }
      var a2 = [n2, 2 * (e2 - 1)], i2 = Rn(t2).as2D(n2, e2), u2 = In(t2).as2D(n2, e2), s2 = i2.slice([0, 1], [n2, e2 - 2]).reverse(1), c2 = u2.slice([0, 1], [n2, e2 - 2]).reverse(1).mul(An(-1)), l3 = i2.concat(s2, 1), h2 = u2.concat(c2, 1);
      return r2 = En(l3, h2).as2D(a2[0], a2[1]), o2 = Ol(r2), Rn(o2);
    } });
    Bl = Object.freeze({ fft: Fl, ifft: Ol, rfft: _l, irfft: Ml });
    Pl = Cn({ sparseToDense_: function(t2, e2, n2, r2) {
      void 0 === r2 && (r2 = 0);
      var o2 = ln(t2, "sparseIndices", "sparseToDense", "int32"), a2 = ln(e2, "sparseValues", "sparseToDense"), i2 = ln(r2, "defaultValue", "sparseToDense", a2.dtype);
      return function(t3, e3, n3, r3) {
        if ("int32" !== t3.dtype)
          throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was " + t3.dtype + ".");
        if (t3.rank > 2)
          throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape " + t3.shape + ".");
        var o3 = t3.rank > 0 ? t3.shape[0] : 1, a3 = t3.rank > 1 ? t3.shape[1] : 1;
        if (n3.length !== a3)
          throw new Error("outputShape has incorrect number of elements:, " + n3.length + ", should be: " + a3 + ".");
        var i3 = e3.size;
        if (0 !== e3.rank && (1 !== e3.rank || i3 !== o3))
          throw new Error("sparseValues has incorrect shape " + e3.shape + ", should be [] or [" + o3 + "]");
        if (e3.dtype !== r3.dtype)
          throw new Error("sparseValues.dtype must match defaultValues.dtype");
      }(o2, a2, n2, i2), Nt.runKernelFunc(function(t3) {
        return t3.sparseToDense(o2, a2, n2, i2);
      }, { $sparseIndices: o2, $sparseValues: a2, $defaultValue: i2 });
    } });
    Ll = Cn({ gatherND_: function(t2, e2) {
      var n2 = ln(e2, "indices", "gatherND", "int32"), r2 = ln(t2, "x", "gatherND");
      return Nt.runKernelFunc(function(t3) {
        return t3.gatherND(r2, n2);
      }, { $x: r2, $indices: n2 });
    } });
    Wl = Cn({ diag_: function(t2) {
      var e2 = ln(t2, "x", "diag").flatten(), n2 = t2.shape.concat(t2.shape);
      return Nt.runKernelFunc(function(t3) {
        return t3.diag(e2);
      }, { $x: e2 }).reshape(n2);
    } });
    Ul = Cn({ dropout_: function(t2, e2, n2, r2) {
      var o2 = ln(t2, "x", "dropout");
      if (g("float32" === o2.dtype, function() {
        return "x has to be a floating point tensor since it's going to be scaled, but got a " + o2.dtype + " tensor instead.";
      }), g(e2 >= 0 && e2 < 1, function() {
        return "rate must be a float in the range [0, 1), but got " + e2 + ".";
      }), 0 === e2)
        return t2 instanceof dt ? o2.clone() : o2;
      var a2 = function(t3, e3) {
        if (null == e3)
          return t3.shape.slice();
        if (C(t3.shape, e3))
          return e3;
        if (t3.shape.length === e3.length) {
          for (var n3 = [], r3 = 0; r3 < t3.shape.length; r3++)
            null == e3[r3] && null != t3.shape[r3] ? n3.push(t3.shape[r3]) : n3.push(e3[r3]);
          return n3;
        }
        return e3;
      }(o2, n2), i2 = 1 - e2, u2 = kr(a2, 0, 1, "float32", r2).add(i2).floor().div(i2);
      return o2.mul(u2);
    } });
    zl = Cn({ hannWindow_: function(t2) {
      return Vl(t2, 0.5, 0.5);
    } });
    Gl = Cn({ hammingWindow_: function(t2) {
      return Vl(t2, 0.54, 0.46);
    } });
    Hl = Cn({ frame_: function(t2, e2, n2, r2, o2) {
      void 0 === r2 && (r2 = false), void 0 === o2 && (o2 = 0);
      for (var a2 = 0, i2 = []; a2 + e2 <= t2.size; )
        i2.push(tl(t2, a2, e2)), a2 += n2;
      if (r2)
        for (; a2 < t2.size; ) {
          var u2 = a2 + e2 - t2.size, s2 = Gn([tl(t2, a2, e2 - u2), Ln([u2], o2)]);
          i2.push(s2), a2 += n2;
        }
      return 0 === i2.length ? Tn([], [0, e2]) : Gn(i2).as2D(i2.length, e2);
    } });
    ql = Cn({ stft_: function(t2, e2, n2, r2, o2) {
      var a2;
      void 0 === o2 && (o2 = zl), null == r2 && (a2 = e2, r2 = Math.floor(Math.pow(2, Math.ceil(Math.log(a2) / Math.log(2)))));
      for (var i2 = Hl(t2, e2, n2), u2 = tc(i2, o2(e2)), s2 = [], c2 = 0; c2 < i2.shape[0]; c2++)
        s2.push(_l(u2.slice([c2, 0], [1, e2]), r2));
      return Gn(s2);
    } });
    Kl = Object.freeze({ hannWindow: zl, hammingWindow: Gl, frame: Hl, stft: ql });
    Xl = function(t2, e2, o2) {
      return void 0 === o2 && (o2 = 1), n(this, void 0, void 0, function() {
        var n2, a2, i2, u2, s2, c2, l3, h2, f2, p2, d2, v2, m2, x2;
        return r(this, function(r2) {
          switch (r2.label) {
            case 0:
              return n2 = ln(t2, "predictions", "inTopK"), a2 = ln(e2, "targets", "inTopK"), g(n2.rank > 1, function() {
                return "inTopK() expects the predictions to be of rank 2 or higher, but got " + n2.rank;
              }), g(n2.rank - 1 === a2.rank, function() {
                return "predictions rank should be 1 larger than targets rank, but got predictions rank " + n2.rank + " and targets rank " + a2.rank;
              }), y(n2.shape.slice(0, n2.shape.length - 1), a2.shape, "predictions's shape should be align with the targets' shape, except the last dimension."), i2 = n2.shape[n2.shape.length - 1], g(o2 > 0 && o2 <= i2, function() {
                return "'k' passed to inTopK() must be > 0 && <= the predictions last dimension (" + i2 + "), but got " + o2;
              }), [4, n2.data()];
            case 1:
              return u2 = r2.sent(), [4, a2.data()];
            case 2:
              for (s2 = r2.sent(), c2 = [u2.length / i2, i2], h2 = c2[1], f2 = N("bool", l3 = c2[0]), p2 = 0; p2 < l3; p2++) {
                for (d2 = p2 * h2, v2 = u2.subarray(d2, d2 + h2), m2 = [], x2 = 0; x2 < v2.length; x2++)
                  m2.push({ value: v2[x2], index: x2 });
                for (m2.sort(function(t3, e3) {
                  return e3.value - t3.value;
                }), f2[p2] = 0, x2 = 0; x2 < o2; x2++)
                  if (m2[x2].index === s2[p2]) {
                    f2[p2] = 1;
                    break;
                  }
              }
              return t2 !== n2 && n2.dispose(), e2 !== a2 && a2.dispose(), [2, kn(f2, a2.shape, "bool")];
          }
        });
      });
    };
    !function(t2) {
      t2[t2.NONE = 0] = "NONE", t2[t2.MEAN = 1] = "MEAN", t2[t2.SUM = 2] = "SUM", t2[t2.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
    }(jl || (jl = {}));
    $l = Cn({ absoluteDifference_: function(t2, e2, n2, r2) {
      void 0 === r2 && (r2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var o2 = ln(t2, "labels", "absoluteDifference"), a2 = ln(e2, "predictions", "absoluteDifference"), i2 = null;
      null != n2 && (i2 = ln(n2, "weights", "absoluteDifference")), y(o2.shape, a2.shape, "Error in absoluteDifference: ");
      var u2 = o2.sub(a2).abs();
      return Yl(u2, i2, r2);
    } });
    Yl = Cn({ computeWeightedLoss_: function(t2, e2, n2) {
      void 0 === n2 && (n2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var r2 = ln(t2, "losses", "computeWeightedLoss"), o2 = null;
      null != e2 && (o2 = ln(e2, "weights", "computeWeightedLoss"));
      var a2 = null == o2 ? r2 : r2.mul(o2);
      if (n2 === jl.NONE)
        return a2;
      if (n2 === jl.SUM)
        return a2.sum();
      if (n2 === jl.MEAN) {
        if (null == o2)
          return a2.mean();
        var i2 = r2.size / o2.size, u2 = a2.sum().div(o2.sum());
        return i2 > 1 ? u2.div(An(i2)) : u2;
      }
      if (n2 === jl.SUM_BY_NONZERO_WEIGHTS) {
        if (null == o2)
          return a2.sum().div(An(r2.size));
        var s2 = o2.mul(Bn(r2.shape)).notEqual(An(0)).sum().toFloat();
        return a2.sum().div(s2);
      }
      throw Error("Unknown reduction: " + n2);
    } });
    Ql = Cn({ cosineDistance_: function(t2, e2, n2, r2, o2) {
      void 0 === o2 && (o2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var a2 = ln(t2, "labels", "cosineDistance"), i2 = ln(e2, "predictions", "cosineDistance"), u2 = null;
      null != r2 && (u2 = ln(r2, "weights", "cosineDistance")), y(a2.shape, i2.shape, "Error in cosineDistance: ");
      var s2 = An(1).sub(a2.mul(i2).sum(n2, true));
      return Yl(s2, u2, o2);
    } });
    Jl = Cn({ hingeLoss_: function(t2, e2, n2, r2) {
      void 0 === r2 && (r2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var o2 = ln(t2, "labels", "hingeLoss"), a2 = ln(e2, "predictions", "hingeLoss"), i2 = null;
      null != n2 && (i2 = ln(n2, "weights", "hingeLoss")), y(o2.shape, a2.shape, "Error in hingeLoss: ");
      var u2 = An(1);
      o2 = An(2).mul(o2).sub(u2);
      var s2 = u2.sub(o2.mul(a2)).relu();
      return Yl(s2, i2, r2);
    } });
    Zl = Cn({ huberLoss_: function(t2, e2, n2, r2, o2) {
      void 0 === r2 && (r2 = 1), void 0 === o2 && (o2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var a2 = ln(t2, "labels", "huberLoss"), i2 = ln(e2, "predictions", "huberLoss"), u2 = null;
      null != n2 && (u2 = ln(n2, "weights", "huberLoss")), y(a2.shape, i2.shape, "Error in huberLoss: ");
      var s2 = An(r2), c2 = i2.sub(a2).abs(), l3 = Ys(c2, s2), h2 = c2.sub(l3), f2 = An(0.5).mul(l3.square()).add(s2.mul(h2));
      return Yl(f2, u2, o2);
    } });
    th = Cn({ logLoss_: function(t2, e2, n2, r2, o2) {
      void 0 === r2 && (r2 = 1e-7), void 0 === o2 && (o2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var a2 = ln(t2, "labels", "logLoss"), i2 = ln(e2, "predictions", "logLoss"), u2 = null;
      null != n2 && (u2 = ln(n2, "weights", "logLoss")), y(a2.shape, i2.shape, "Error in logLoss: ");
      var s2 = An(1), c2 = An(r2), l3 = a2.mul(i2.add(c2).log()).neg().sub(s2.sub(a2).mul(s2.sub(i2).add(c2).log()));
      return Yl(l3, u2, o2);
    } });
    eh = Cn({ meanSquaredError_: function(t2, e2, n2, r2) {
      void 0 === r2 && (r2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var o2 = ln(t2, "labels", "meanSquaredError"), a2 = ln(e2, "predictions", "meanSquaredError"), i2 = null;
      null != n2 && (i2 = ln(n2, "weights", "meanSquaredError")), y(o2.shape, a2.shape, "Error in meanSquaredError: ");
      var u2 = o2.squaredDifference(a2);
      return Yl(u2, i2, r2);
    } });
    nh = Cn({ sigmoidCrossEntropy_: function(t2, e2, n2, r2, o2) {
      void 0 === r2 && (r2 = 0), void 0 === o2 && (o2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var a2 = ln(t2, "multiClassLabels", "sigmoidCrossEntropy"), i2 = ln(e2, "logits", "sigmoidCrossEntropy"), u2 = null;
      if (null != n2 && (u2 = ln(n2, "weights", "sigmoidCrossEntropy")), y(a2.shape, i2.shape, "Error in sigmoidCrossEntropy: "), r2 > 0) {
        var s2 = An(r2), c2 = An(1), l3 = An(0.5);
        a2 = a2.mul(c2.sub(s2)).add(l3.mul(s2));
      }
      var h2 = function(t3, e3) {
        var n3 = ln(t3, "labels", "sigmoidCrossEntropyWithLogits"), r3 = ln(e3, "logits", "sigmoidCrossEntropyWithLogits");
        y(n3.shape, r3.shape, "Error in sigmoidCrossEntropyWithLogits: ");
        var o3 = r3.relu(), a3 = r3.mul(n3), i3 = r3.abs().neg().exp().log1p();
        return o3.sub(a3).add(i3);
      }(a2, i2);
      return Yl(h2, u2, o2);
    } });
    rh = Cn({ softmaxCrossEntropy_: function(t2, e2, n2, r2, o2) {
      void 0 === r2 && (r2 = 0), void 0 === o2 && (o2 = jl.SUM_BY_NONZERO_WEIGHTS);
      var a2 = ln(t2, "onehotLabels", "softmaxCrossEntropy"), i2 = ln(e2, "logits", "softmaxCrossEntropy"), u2 = null;
      if (null != n2 && (u2 = ln(n2, "weights", "softmaxCrossEntropy")), y(a2.shape, i2.shape, "Error in softmaxCrossEntropy: "), r2 > 0) {
        var s2 = An(r2), c2 = An(1), l3 = An(a2.shape[1]);
        a2 = a2.mul(c2.sub(s2)).add(s2.div(l3));
      }
      var h2 = function(t3, e3, n3) {
        if (void 0 === n3 && (n3 = -1), -1 === n3 && (n3 = e3.rank - 1), n3 !== e3.rank - 1)
          throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + e3.rank + " and dim was " + n3);
        return oo(function(t4, e4, r3) {
          var o3 = e4.logSumExp([n3], true), a3 = e4.toFloat().sub(o3);
          return r3([t4, a3]), { value: a3.mul(t4).neg().sum([n3]), gradFunc: function(t5, e5) {
            var r4 = e5[0], o4 = e5[1], a4 = vn(t5.shape, [n3]);
            return [t5.reshape(a4).mul(r4.toFloat().sub(o4.exp())), t5.reshape(a4).mul(o4.exp().sub(r4.toFloat()))];
          } };
        })(t3, e3);
      }(a2, i2);
      return Yl(h2, u2, o2);
    } });
    oh = Object.freeze({ get Reduction() {
      return jl;
    }, absoluteDifference: $l, computeWeightedLoss: Yl, cosineDistance: Ql, hingeLoss: Jl, huberLoss: Zl, logLoss: th, meanSquaredError: eh, sigmoidCrossEntropy: nh, softmaxCrossEntropy: rh });
    ih = Cn({ gramSchmidt_: function(t2) {
      var e2;
      if (Array.isArray(t2)) {
        e2 = false, g(null != t2 && t2.length > 0, function() {
          return "Gram-Schmidt process: input must not be null, undefined, or empty";
        });
        for (var n2 = t2[0].shape[0], r2 = function(e3) {
          g(t2[e3].shape[0] === n2, function() {
            return "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + t2[e3].shape[0] + " vs. " + n2 + ")";
          });
        }, o2 = 1; o2 < t2.length; ++o2)
          r2(o2);
      } else
        e2 = true, t2 = Xn(t2, t2.shape[0], 0).map(function(t3) {
          return Dr(t3, [0]);
        });
      g(t2.length <= t2[0].shape[0], function() {
        return "Gram-Schmidt: Number of vectors (" + t2.length + ") exceeds number of dimensions (" + t2[0].shape[0] + ").";
      });
      var a2 = [], i2 = t2, u2 = function(t3) {
        a2.push(Nt.tidy(function() {
          var e3 = i2[t3];
          if (t3 > 0)
            for (var n3 = 0; n3 < t3; ++n3) {
              var r3 = vl(a2[n3].mulStrict(e3)).mul(a2[n3]);
              e3 = e3.sub(r3);
            }
          return e3.div(Il(e3, "euclidean"));
        }));
      };
      for (o2 = 0; o2 < t2.length; ++o2)
        u2(o2);
      return e2 ? Tr(a2, 0) : a2;
    } });
    uh = Cn({ qr_: function(t2, e2) {
      if (void 0 === e2 && (e2 = false), t2.rank < 2)
        throw new Error("qr() requires input tensor to have a rank >= 2, but got rank " + t2.rank);
      if (2 === t2.rank)
        return ah(t2, e2);
      var n2 = t2.shape.slice(0, t2.shape.length - 2).reduce(function(t3, e3) {
        return t3 * e3;
      }), r2 = Or(t2.reshape([n2, t2.shape[t2.shape.length - 2], t2.shape[t2.shape.length - 1]]), 0), o2 = [], a2 = [];
      return r2.forEach(function(t3) {
        var n3 = ah(t3, e2), r3 = n3[0], i2 = n3[1];
        o2.push(r3), a2.push(i2);
      }), [Tr(o2, 0).reshape(t2.shape), Tr(a2, 0).reshape(t2.shape)];
    } });
    sh = Object.freeze({ gramSchmidt: ih, qr: uh });
    lh = Cn({ resizeBilinear_: function(t2, e2, n2) {
      void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "images", "resizeBilinear");
      g(3 === r2.rank || 4 === r2.rank, function() {
        return "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + r2.rank + ".";
      }), g(2 === e2.length, function() {
        return "Error in resizeBilinear: new shape must 2D, but got shape " + e2 + ".";
      });
      var o2 = r2, a2 = false;
      3 === r2.rank && (a2 = true, o2 = r2.as4D(1, r2.shape[0], r2.shape[1], r2.shape[2]));
      var i2 = e2[0], u2 = e2[1], s2 = Nt.runKernelFunc(function(t3, e3) {
        return e3([o2]), t3.resizeBilinear(o2, i2, u2, n2);
      }, { batchImages: o2 }, function(t3, e3) {
        return { batchImages: function() {
          return Nt.runKernelFunc(function(r3) {
            return r3.resizeBilinearBackprop(t3, e3[0], n2);
          }, {});
        } };
      });
      return a2 ? s2.as3D(s2.shape[1], s2.shape[2], s2.shape[3]) : s2;
    } });
    hh = Cn({ resizeNearestNeighbor_: function(t2, e2, n2) {
      void 0 === n2 && (n2 = false);
      var r2 = ln(t2, "images", "resizeNearestNeighbor");
      g(3 === r2.rank || 4 === r2.rank, function() {
        return "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + r2.rank + ".";
      }), g(2 === e2.length, function() {
        return "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + e2 + ".";
      }), g("float32" === r2.dtype || "int32" === r2.dtype, function() {
        return "`images` must have `int32` or `float32` as dtype";
      });
      var o2 = r2, a2 = false;
      3 === r2.rank && (a2 = true, o2 = r2.as4D(1, r2.shape[0], r2.shape[1], r2.shape[2]));
      var i2 = e2[0], u2 = e2[1], s2 = Nt.runKernelFunc(function(t3, e3) {
        return e3([o2]), t3.resizeNearestNeighbor(o2, i2, u2, n2);
      }, { batchImages: o2 }, function(t3, e3) {
        return { batchImages: function() {
          return Nt.runKernelFunc(function(r3) {
            return r3.resizeNearestNeighborBackprop(t3, e3[0], n2);
          }, {});
        } };
      });
      return a2 ? s2.as3D(s2.shape[1], s2.shape[2], s2.shape[3]) : s2;
    } });
    fh = Cn({ nonMaxSuppression_: function(t2, e2, n2, r2, o2) {
      void 0 === r2 && (r2 = 0.5), void 0 === o2 && (o2 = Number.NEGATIVE_INFINITY);
      var a2 = ln(t2, "boxes", "nonMaxSuppression"), i2 = ln(e2, "scores", "nonMaxSuppression"), u2 = ch(a2, i2, n2, r2, o2);
      return n2 = u2.maxOutputSize, r2 = u2.iouThreshold, o2 = u2.scoreThreshold, Nt.runKernelFunc(function(t3) {
        return t3.nonMaxSuppression(a2, i2, n2, r2, o2);
      }, { $boxes: a2 });
    } });
    ph = function(t2, e2, o2, a2, i2) {
      return void 0 === a2 && (a2 = 0.5), void 0 === i2 && (i2 = Number.NEGATIVE_INFINITY), n(this, void 0, void 0, function() {
        var n2, u2, s2, c2, l3, h2, f2;
        return r(this, function(r2) {
          switch (r2.label) {
            case 0:
              return n2 = ln(t2, "boxes", "nonMaxSuppressionAsync"), u2 = ln(e2, "scores", "nonMaxSuppressionAsync"), s2 = ch(n2, u2, o2, a2, i2), o2 = s2.maxOutputSize, a2 = s2.iouThreshold, i2 = s2.scoreThreshold, [4, Promise.all([n2.data(), u2.data()])];
            case 1:
              return c2 = r2.sent(), l3 = c2[0], h2 = c2[1], f2 = Mo(l3, h2, o2, a2, i2), n2 !== t2 && n2.dispose(), u2 !== e2 && u2.dispose(), [2, f2];
          }
        });
      });
    };
    dh = Cn({ cropAndResize_: function(t2, e2, n2, r2, o2, a2) {
      var i2 = ln(t2, "image", "cropAndResize", "float32"), u2 = ln(e2, "boxes", "cropAndResize", "float32"), s2 = ln(n2, "boxInd", "cropAndResize", "int32");
      o2 = o2 || "bilinear", a2 = a2 || 0;
      var c2 = u2.shape[0];
      return g(4 === i2.rank, function() {
        return "Error in cropAndResize: image must be rank 4,but got rank " + i2.rank + ".";
      }), g(2 === u2.rank && 4 === u2.shape[1], function() {
        return "Error in cropAndResize: boxes must be have size [" + c2 + ",4] but had shape " + u2.shape + ".";
      }), g(1 === s2.rank && s2.shape[0] === c2, function() {
        return "Error in cropAndResize: boxInd must be have size [" + c2 + "] but had shape " + u2.shape + ".";
      }), g(2 === r2.length, function() {
        return "Error in cropAndResize: cropSize must be of length 2, but got length " + r2.length + ".";
      }), g(r2[0] >= 1 && r2[1] >= 1, function() {
        return "cropSize must be atleast [1,1], but was " + r2;
      }), g("bilinear" === o2 || "nearest" === o2, function() {
        return "method must be bilinear or nearest, but was " + o2;
      }), Nt.runKernelFunc(function(t3, e3) {
        return t3.cropAndResize(i2, u2, s2, r2, o2, a2);
      }, { $image: i2, $boxes: u2 });
    } });
    vh = Object.freeze({ resizeBilinear: lh, resizeNearestNeighbor: hh, nonMaxSuppression: fh, nonMaxSuppressionAsync: ph, cropAndResize: dh });
    mh = function(t2, e2) {
      return !(t2 > 0) && ("linear" === e2 || "relu" === e2);
    };
    gh = function(t2, e2, n2) {
      if (null == n2 || "linear" === n2)
        return t2;
      if ("relu" === n2)
        return t2.mul(e2.step());
      throw new Error("Gradient for activation " + n2 + " has not been implemented yet.");
    };
    yh = function(t2, e2) {
      var n2 = e2, r2 = fo(t2.shape, e2.shape);
      return r2.length > 0 && (n2 = n2.sum(r2)), n2.reshape(t2.shape);
    };
    xh = function(t2, e2, n2) {
      if ("linear" === e2)
        return t2;
      if ("relu" === e2)
        return bl(t2);
      if ("elu" === e2)
        return gl(t2);
      if ("relu6" === e2)
        return wl(t2);
      if ("prelu" === e2)
        return xl(t2, n2);
      throw new Error("Unknown fused activation " + e2 + ".");
    };
    bh = Cn({ matMul_: function(t2) {
      var e2, n2 = t2.a, r2 = t2.b, o2 = t2.transposeA, a2 = void 0 !== o2 && o2, i2 = t2.transposeB, u2 = void 0 !== i2 && i2, s2 = t2.bias, c2 = t2.activation, l3 = void 0 === c2 ? "linear" : c2, h2 = t2.preluActivationWeights;
      if (false === mh(Nt.state.gradientDepth, l3)) {
        var f2 = Wc(n2, r2, a2, u2);
        return null != s2 && (f2 = Vs(f2, s2)), xh(f2, l3, h2);
      }
      var p2 = ln(n2, "a", "fused matMul"), d2 = ln(r2, "b", "fused matMul");
      e2 = Rt(p2, d2), p2 = e2[0], d2 = e2[1];
      var v2 = a2 ? p2.shape[p2.rank - 2] : p2.shape[p2.rank - 1], m2 = u2 ? d2.shape[d2.rank - 1] : d2.shape[d2.rank - 2], y2 = a2 ? p2.shape[p2.rank - 1] : p2.shape[p2.rank - 2], x2 = u2 ? d2.shape[d2.rank - 2] : d2.shape[d2.rank - 1], b2 = p2.shape.slice(0, -2), E2 = d2.shape.slice(0, -2), R2 = w(b2), I2 = w(E2);
      g(p2.rank >= 2 && d2.rank >= 2 && p2.rank === d2.rank, function() {
        return "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " + p2.rank + " and " + d2.rank + ".";
      }), g(C(b2, E2), function() {
        return "Error in fused matMul: outer dimensions (" + b2 + ") and (" + E2 + ") of Tensors with shapes " + p2.shape + " and " + d2.shape + " must match.";
      }), g(v2 === m2, function() {
        return "Error in fused matMul: inner shapes (" + v2 + ") and (" + m2 + ") of Tensors with shapes " + p2.shape + " and " + d2.shape + " and transposeA=" + a2 + " and transposeB=" + u2 + " must match.";
      });
      var k2, S2, A2 = p2.shape.slice(0, -2).concat([y2, x2]), D2 = a2 ? p2.as3D(R2, v2, y2) : p2.as3D(R2, y2, v2), T2 = u2 ? d2.as3D(I2, x2, m2) : d2.as3D(I2, m2, x2);
      null != s2 && po(A2, (k2 = Rt(k2 = ln(s2, "bias", "fused matMul"), p2)[0]).shape), null != h2 && (S2 = ln(h2, "prelu weights", "fused matMul"));
      var N2 = { $a: D2, $b: T2 };
      return null != s2 && (N2.$bias = k2), null != h2 && (N2.$preluActivationWeights = S2), Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.fusedBatchMatMul({ a: D2, b: T2, transposeA: a2, transposeB: u2, bias: k2, activation: l3, preluActivationWeights: S2 });
        return e3([D2, T2, n3]), n3;
      }, N2, function(t3, e3) {
        var n3 = e3[0], r3 = e3[1], o3 = e3[2], i3 = gh(t3, o3, l3), c3 = {};
        return null != s2 && (c3 = { $bias: function() {
          return yh(k2, i3);
        } }), a2 || u2 ? !a2 && u2 ? Object.assign({ $a: function() {
          return i3.matMul(r3, false, false);
        }, $b: function() {
          return i3.matMul(n3, true, false);
        } }, c3) : a2 && !u2 ? Object.assign({ $a: function() {
          return r3.matMul(i3, false, true);
        }, $b: function() {
          return n3.matMul(i3, false, false);
        } }, c3) : Object.assign({ $a: function() {
          return r3.matMul(i3, true, true);
        }, $b: function() {
          return i3.matMul(n3, true, true);
        } }, c3) : Object.assign({ $a: function() {
          return i3.matMul(r3, false, true);
        }, $b: function() {
          return n3.matMul(i3, true, false);
        } }, c3);
      }).reshape(A2);
    } });
    wh = Cn({ conv2d_: function(t2) {
      var e2 = t2.x, n2 = t2.filter, r2 = t2.strides, o2 = t2.pad, a2 = t2.dataFormat, i2 = void 0 === a2 ? "NHWC" : a2, u2 = t2.dilations, s2 = void 0 === u2 ? [1, 1] : u2, c2 = t2.dimRoundingMode, l3 = t2.bias, h2 = t2.activation, f2 = void 0 === h2 ? "linear" : h2, p2 = t2.preluActivationWeights;
      if (f2 = f2 || "linear", false === mh(Nt.state.gradientDepth, f2)) {
        var d2 = Dc(e2, n2, r2, o2, i2, s2, c2);
        return null != l3 && (d2 = Vs(d2, l3)), xh(d2, f2, p2);
      }
      var v2 = ln(e2, "x", "conv2d"), m2 = ln(n2, "filter", "conv2d"), y2 = v2, x2 = false;
      3 === v2.rank && (x2 = true, y2 = v2.as4D(1, v2.shape[0], v2.shape[1], v2.shape[2])), g(4 === y2.rank, function() {
        return "Error in fused conv2d: input must be rank 4, but got rank " + y2.rank + ".";
      }), g(4 === m2.rank, function() {
        return "Error in fused conv2d: filter must be rank 4, but got rank " + m2.rank + ".";
      }), null != c2 && g(E(o2), function() {
        return "Error in fused conv2d: pad must be an integer when using, dimRoundingMode " + c2 + " but got pad " + o2 + ".";
      }), g(y2.shape[3] === m2.shape[2], function() {
        return "Error in conv2d: depth of input (" + y2.shape[3] + ") must match input depth for filter " + m2.shape[2] + ".";
      }), g(Io(r2, s2), function() {
        return "Error in conv2D: Either strides or dilations must be 1. Got strides " + r2 + " and dilations '" + s2 + "'";
      }), g("NHWC" === i2, function() {
        return "Error in conv2d: got dataFormat of " + i2 + " but only NHWC is currently supported.";
      });
      var b2, w2, C2 = go(y2.shape, m2.shape, r2, s2, o2, c2);
      null != l3 && (b2 = Rt(b2 = ln(l3, "bias", "fused conv2d"), v2)[0], po(C2.outShape, b2.shape)), null != p2 && (w2 = ln(p2, "prelu weights", "fused conv2d"));
      var R2 = { x: y2, $filter: m2 };
      null != l3 && (R2.$bias = b2), null != p2 && (R2.$preluActivationWeights = w2);
      var I2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.fusedConv2d({ input: y2, filter: m2, convInfo: C2, bias: b2, activation: f2, preluActivationWeights: w2 });
        return e3([m2, y2, n3]), n3;
      }, R2, function(t3, e3) {
        var n3 = e3, a3 = n3[0], i3 = n3[1], u3 = n3[2], c3 = gh(t3, u3, f2);
        g(Ro(s2), function() {
          return "Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + s2 + "'";
        });
        var h3 = {};
        return null != l3 && (h3 = { $bias: function() {
          return yh(b2, c3);
        } }), Object.assign({ x: function() {
          return Fc(i3.shape, c3, a3, r2, o2);
        }, $filter: function() {
          return Nc(i3, c3, a3.shape, r2, o2);
        } }, h3);
      });
      return x2 ? I2.as3D(I2.shape[1], I2.shape[2], I2.shape[3]) : I2;
    } });
    Ch = Cn({ depthwiseConv2d_: function(t2) {
      var e2 = t2.x, n2 = t2.filter, r2 = t2.strides, o2 = t2.pad, a2 = t2.dataFormat, i2 = void 0 === a2 ? "NHWC" : a2, u2 = t2.dilations, s2 = void 0 === u2 ? [1, 1] : u2, c2 = t2.dimRoundingMode, l3 = t2.bias, h2 = t2.activation, f2 = void 0 === h2 ? "linear" : h2, p2 = t2.preluActivationWeights;
      if (false === mh(Nt.state.gradientDepth, f2)) {
        var d2 = Oc(e2, n2, r2, o2, i2, s2, c2);
        return null != l3 && (d2 = Vs(d2, l3)), xh(d2, f2, p2);
      }
      var v2 = ln(e2, "x", "depthwiseConv2d"), m2 = ln(n2, "filter", "depthwiseConv2d"), y2 = v2, x2 = false;
      3 === v2.rank && (x2 = true, y2 = v2.as4D(1, v2.shape[0], v2.shape[1], v2.shape[2])), g(4 === y2.rank, function() {
        return "Error in fused depthwiseConv2d: input must be rank 4, but got rank " + y2.rank + ".";
      }), g(4 === m2.rank, function() {
        return "Error in fused depthwiseConv2d: filter must be rank 4, but got rank " + m2.rank + ".";
      }), g(y2.shape[3] === m2.shape[2], function() {
        return "Error in fused depthwiseConv2d: number of input channels (" + y2.shape[3] + ") must match the inChannels dimension in filter " + m2.shape[2] + ".";
      }), null == s2 && (s2 = [1, 1]), g(Io(r2, s2), function() {
        return "Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides " + r2 + " and dilations '" + s2 + "'";
      }), null != c2 && g(E(o2), function() {
        return "Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode " + c2 + " but got pad " + o2 + ".";
      });
      var b2, w2, C2 = go(y2.shape, m2.shape, r2, s2, o2, c2, true);
      null != l3 && (b2 = Rt(b2 = ln(l3, "bias", "fused conv2d"), v2)[0], po(C2.outShape, b2.shape)), null != p2 && (w2 = ln(p2, "prelu weights", "fused depthwiseConv2d"));
      var R2 = { x: y2, $filter: m2 };
      null != l3 && (R2.$bias = b2), null != p2 && (R2.$preluActivationWeights = w2);
      var I2 = Nt.runKernelFunc(function(t3, e3) {
        var n3 = t3.fusedDepthwiseConv2D({ input: y2, filter: m2, convInfo: C2, bias: b2, activation: f2, preluActivationWeights: w2 });
        return e3([y2, m2, n3]), n3;
      }, R2, function(t3, e3) {
        g(Ro(s2), function() {
          return "Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + s2 + "'";
        });
        var n3 = e3[0], r3 = e3[1], o3 = e3[2], a3 = gh(t3, o3, f2), i3 = {};
        return null != l3 && (i3 = { $bias: function() {
          return yh(b2, a3);
        } }), Object.assign({ x: function() {
          return _c(n3.shape, a3, r3, C2);
        }, $filter: function() {
          return Mc(n3, a3, r3.shape, C2);
        } }, i3);
      });
      return x2 ? I2.as3D(I2.shape[1], I2.shape[2], I2.shape[3]) : I2;
    } });
    Eh = Object.freeze({ matMul: bh, conv2d: wh, depthwiseConv2d: Ch });
    Rh = Object.freeze({ image: vh, linalg: sh, losses: oh, spectral: Bl, fused: Eh, signal: Kl, square: Uu, conv1d: Ac, conv2d: Dc, conv3d: Tc, depthwiseConv2d: Oc, separableConv2d: Bc, conv2dTranspose: Pc, conv3dTranspose: Lc, op: Cn, batchNormalization2d: Ss, batchNormalization3d: As, batchNormalization4d: Ds, batchNormalization: Ts, batchNorm: Ns, batchNorm2d: Fs, batchNorm3d: Os, batchNorm4d: _s, booleanMaskAsync: Rc, complex: En, real: Rn, imag: In, concat: Gn, concat1d: Hn, concat2d: qn, concat3d: Kn, concat4d: jn, split: Xn, matMul: Wc, dot: Uc, outerProduct: Vc, reverse: zc, reverse1d: Gc, reverse2d: Hc, reverse3d: qc, reverse4d: Kc, maxPool: $c, avgPool: Yc, pool: Qc, maxPool3d: Jc, avgPool3d: Zc, slice: tl, slice1d: el, slice2d: nl, slice3d: rl, slice4d: ol, abs: Vu, acos: zu, acosh: Gu, asin: Hu, asinh: qu, atan: Ku, atanh: ju, ceil: Xu, clipByValue: $u, cos: Yu, cosh: Qu, erf: Ju, exp: Zu, expm1: ts, floor: es, log: ns, log1p: rs, logSigmoid: os, neg: as, reciprocal: is, round: us, rsqrt: ss, sigmoid: cs, sign: ls, isNaN: hs, isInf: fs, isFinite: ps, sin: ds, sinh: vs, softplus: ms, sqrt: gs, step: ys, tan: xs, tanh: bs, all: il, any: ul, argMax: sl, argMin: cl, logSumExp: ll, max: hl, mean: fl, min: pl, moments: dl, sum: vl, prod: ml, equal: sc, equalStrict: cc, greater: lc, greaterEqual: hc, greaterEqualStrict: fc, greaterStrict: pc, less: dc, lessEqual: vc, lessEqualStrict: mc, lessStrict: gc, notEqual: yc, notEqualStrict: xc, add: Vs, addN: zs, addStrict: Gs, atan2: Hs, div: qs, divStrict: Ks, floorDiv: js, maximum: Xs, maximumStrict: $s, minimum: Ys, minimumStrict: Qs, mod: Js, modStrict: Zs, mul: tc, mulStrict: ec, pow: nc, powStrict: rc, squaredDifference: oc, squaredDifferenceStrict: ac, sub: ic, subStrict: uc, elu: gl, leakyRelu: yl, prelu: xl, relu: bl, relu6: wl, selu: Cl, logicalAnd: Ms, logicalNot: Bs, logicalOr: Ps, logicalXor: Ls, where: Ws, whereAsync: Us, buffer: ur, print: sr, batchToSpaceND: cr, cast: lr, clone: hr, cumsum: fr, depthToSpace: pr, expandDims: dr, eye: vr, multinomial: mr, oneHot: gr, pad: yr, pad1d: xr, pad2d: br, pad3d: wr, pad4d: Cr, rand: Er, randomNormal: Rr, randomGamma: Ir, randomUniform: kr, reshape: Sr, spaceToBatchND: Ar, squeeze: Dr, stack: Tr, tile: Nr, truncatedNormal: Fr, unstack: Or, setdiff1dAsync: _r, fill: Ln, linspace: Wn, ones: Bn, range: Un, scalar: An, tensor: kn, tensor1d: Dn, tensor2d: Tn, tensor3d: Nn, tensor4d: Fn, tensor5d: On, tensor6d: _n, variable: Mn, zeros: Pn, onesLike: Vn, zerosLike: zn, transpose: El, softmax: io, logSoftmax: uo, localResponseNormalization: Rl, norm: Il, gather: Cc, unsortedSegmentSum: Ec, basicLSTMCell: kl, multiRNNCell: Sl, movingAverage: Al, stridedSlice: Dl, topk: Tl, scatterND: Nl, fft: Fl, ifft: Ol, rfft: _l, irfft: Ml, sparseToDense: Pl, gatherND: Ll, diag: Wl, dropout: Ul, hannWindow: zl, hammingWindow: Gl, frame: Hl, stft: ql, inTopKAsync: Xl });
    Sh = function(t2) {
      function o2() {
        var e2 = t2.call(this) || this;
        if (e2.blockSize = 48, e2.firstUse = true, a().get("IS_BROWSER")) {
          var n2 = "undefined" != typeof OffscreenCanvas ? new OffscreenCanvas(300, 150) : "undefined" != typeof document ? document.createElement("canvas") : null;
          null !== n2 && (e2.fromPixels2DContext = n2.getContext("2d"));
        }
        return e2.data = new so(e2, Nt), e2;
      }
      return e(o2, t2), o2.prototype.write = function(t3, e2, n2) {
        this.firstUse && (this.firstUse = false, a().get("IS_NODE") && un("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n"));
        var r2 = {};
        return this.data.set(r2, { values: t3, dtype: n2 }), r2;
      }, o2.prototype.move = function(t3, e2, n2, r2) {
        this.data.set(t3, { values: e2, dtype: r2 });
      }, o2.prototype.numDataIds = function() {
        return this.data.numDataIds();
      }, o2.prototype.fromPixels = function(t3, e2) {
        if (null == t3)
          throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
        var n2, r2, o3 = t3.data instanceof Uint8Array, i2 = "undefined" != typeof ImageData && t3 instanceof ImageData, u2 = "undefined" != typeof HTMLVideoElement && t3 instanceof HTMLVideoElement, s2 = "undefined" != typeof HTMLImageElement && t3 instanceof HTMLImageElement, c2 = u2 ? [t3.videoWidth, t3.videoHeight] : [t3.width, t3.height], l3 = c2[0], h2 = c2[1];
        if (a().get("IS_NODE") && null == t3.getContext)
          throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");
        if (null != t3.getContext)
          n2 = t3.getContext("2d").getImageData(0, 0, l3, h2).data;
        else if (i2 || o3)
          n2 = t3.data;
        else {
          if (!s2 && !u2)
            throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData or {data: Uint32Array, width: number, height: number}, but was " + t3.constructor.name);
          if (null == this.fromPixels2DContext)
            throw new Error("Can't read pixels from HTMLImageElement outside the browser.");
          this.fromPixels2DContext.canvas.width = l3, this.fromPixels2DContext.canvas.height = h2, this.fromPixels2DContext.drawImage(t3, 0, 0, l3, h2), n2 = this.fromPixels2DContext.getImageData(0, 0, l3, h2).data;
        }
        if (4 === e2)
          r2 = new Int32Array(n2);
        else {
          var f2 = l3 * h2;
          r2 = new Int32Array(f2 * e2);
          for (var p2 = 0; p2 < f2; p2++)
            for (var d2 = 0; d2 < e2; ++d2)
              r2[p2 * e2 + d2] = n2[4 * p2 + d2];
        }
        return Nn(r2, [h2, l3, e2], "int32");
      }, o2.prototype.read = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(e2) {
            return [2, this.readSync(t3)];
          });
        });
      }, o2.prototype.readSync = function(t3) {
        var e2 = this.data.get(t3), n2 = e2.dtype, r2 = e2.complexTensors;
        return "complex64" === n2 ? No(this.readSync(r2.real.dataId), this.readSync(r2.imag.dataId)) : this.data.get(t3).values;
      }, o2.prototype.bufferSync = function(t3) {
        var e2 = this.readSync(t3.dataId), n2 = e2;
        if ("string" === t3.dtype)
          try {
            n2 = e2.map(function(t4) {
              return Z(t4);
            });
          } catch (t4) {
            throw new Error("Failed to decode encoded string bytes into utf-8");
          }
        return ur(t3.shape, t3.dtype, n2);
      }, o2.prototype.makeOutput = function(t3, e2, n2) {
        var r2 = this.write(t3, e2, n2);
        return Nt.makeTensorFromDataId(r2, e2, n2, this);
      }, o2.prototype.disposeData = function(t3) {
        if (this.data.has(t3)) {
          var e2 = this.data.get(t3).complexTensors;
          null != e2 && (e2.real.dispose(), e2.imag.dispose()), this.data.delete(t3);
        }
      }, o2.prototype.time = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2;
          return r(this, function(n2) {
            return e2 = Y(), t3(), [2, { kernelMs: Y() - e2 }];
          });
        });
      }, o2.prototype.memory = function() {
        return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
      }, o2.prototype.complex = function(t3, e2) {
        var n2 = this.makeOutput(null, t3.shape, "complex64");
        return this.data.get(n2.dataId).complexTensors = { real: Nt.keep(t3.clone()), imag: Nt.keep(e2.clone()) }, n2;
      }, o2.prototype.real = function(t3) {
        return this.data.get(t3.dataId).complexTensors.real.clone();
      }, o2.prototype.imag = function(t3) {
        return this.data.get(t3.dataId).complexTensors.imag.clone();
      }, o2.prototype.slice = function(t3, e2, n2) {
        if (Ih(t3, "slice"), Yr(t3.shape, e2, n2)) {
          var r2 = Qr(e2, t3.strides), o3 = w(n2);
          return kn(this.readSync(t3.dataId).subarray(r2, r2 + o3), n2, t3.dtype);
        }
        for (var a2 = ur(n2, t3.dtype), i2 = this.bufferSync(t3), u2 = 0; u2 < a2.size; ++u2) {
          var s2 = a2.indexToLoc(u2).map(function(t4, n3) {
            return t4 + e2[n3];
          });
          a2.values[u2] = i2.get.apply(i2, s2);
        }
        return a2.toTensor();
      }, o2.prototype.stridedSlice = function(t3, e2, n2, r2) {
        Ih(t3, "stridedSlice");
        var o3 = jr(e2, n2, r2);
        if (o3.some(function(t4) {
          return 0 === t4;
        }))
          return kn([], o3);
        for (var a2 = ur(o3, t3.dtype), i2 = this.bufferSync(t3), u2 = 0; u2 < a2.size; u2++) {
          for (var s2 = a2.indexToLoc(u2), c2 = new Array(s2.length), l3 = 0; l3 < c2.length; l3++)
            c2[l3] = s2[l3] * r2[l3] + e2[l3];
          a2.set.apply(a2, [i2.get.apply(i2, c2)].concat(s2));
        }
        return a2.toTensor();
      }, o2.prototype.diag = function(t3) {
        for (var e2 = this.readSync(t3.dataId), n2 = ur([t3.size, t3.size], t3.dtype), r2 = n2.values, o3 = 0; o3 < e2.length; o3++)
          r2[o3 * t3.size + o3] = e2[o3];
        return n2.toTensor();
      }, o2.prototype.unstack = function(t3, e2) {
        for (var n2 = t3.shape[e2], r2 = new Array(t3.rank - 1), o3 = 0, a2 = 0; a2 < t3.rank; a2++)
          a2 !== e2 && (r2[o3++] = t3.shape[a2]);
        var i2 = new Array(t3.rank).fill(0), u2 = t3.shape.slice();
        u2[e2] = 1;
        var s2 = new Array(n2);
        for (a2 = 0; a2 < s2.length; a2++)
          i2[e2] = a2, s2[a2] = this.slice(t3, i2, u2).reshape(r2);
        return s2;
      }, o2.prototype.reverse = function(t3, e2) {
        Ih(t3, "reverse");
        for (var n2 = ur(t3.shape, t3.dtype), r2 = this.bufferSync(t3), o3 = function(o4) {
          var a3 = n2.indexToLoc(o4), i2 = a3.slice();
          e2.forEach(function(e3) {
            return i2[e3] = t3.shape[e3] - 1 - i2[e3];
          }), n2.set.apply(n2, [r2.get.apply(r2, i2)].concat(a3));
        }, a2 = 0; a2 < n2.size; a2++)
          o3(a2);
        return n2.toTensor();
      }, o2.prototype.concat = function(t3, e2) {
        var n2 = this;
        if ("complex64" === t3[0].dtype) {
          var r2 = t3.map(function(t4) {
            return Rn(t4);
          }), o3 = t3.map(function(t4) {
            return In(t4);
          });
          return En(this.concat(r2, e2), this.concat(o3, e2));
        }
        var a2 = t3.map(function(t4) {
          var n3 = w(t4.shape.slice(e2));
          return t4.as2D(-1, n3);
        }), i2 = wn(a2.map(function(t4) {
          return t4.shape;
        }), 1), u2 = ur(i2, t3[0].dtype).values;
        if (1 === a2[0].shape[0]) {
          var s2 = 0;
          a2.forEach(function(t4) {
            u2.set(n2.readSync(t4.dataId), s2), s2 += t4.size;
          });
        } else {
          var c2 = 0;
          a2.forEach(function(t4) {
            for (var e3 = n2.readSync(t4.dataId), r3 = 0, o4 = 0; o4 < t4.shape[0]; ++o4)
              for (var a3 = o4 * i2[1] + c2, s3 = 0; s3 < t4.shape[1]; ++s3)
                u2[a3 + s3] = e3[r3++];
            c2 += t4.shape[1];
          });
        }
        var l3 = wn(t3.map(function(t4) {
          return t4.shape;
        }), e2);
        return kn(u2, l3, t3[0].dtype);
      }, o2.prototype.neg = function(t3) {
        return Ih(t3, "neg"), this.multiply(An(-1), t3);
      }, o2.prototype.add = function(t3, e2) {
        return "complex64" === t3.dtype || "complex64" === e2.dtype ? this.broadcastedBinaryComplexOp(t3.cast("complex64"), e2.cast("complex64"), function(t4, e3, n2, r2) {
          return { real: t4 + n2, imag: e3 + r2 };
        }) : this.broadcastedBinaryOp(t3, e2, Ct(t3.dtype, e2.dtype), function(t4, e3) {
          return t4 + e3;
        });
      }, o2.prototype.addN = function(t3) {
        var e2 = this;
        Ih(t3, "addN");
        for (var n2 = t3.map(function(t4) {
          return e2.readSync(t4.dataId);
        }), r2 = ur(t3[0].shape, t3[0].dtype), o3 = r2.values, a2 = 0; a2 < t3.length; a2++)
          for (var i2 = n2[a2], u2 = 0; u2 < o3.length; u2++)
            o3[u2] += i2[u2];
        return r2.toTensor();
      }, o2.prototype.subtract = function(t3, e2) {
        return "complex64" === t3.dtype || "complex64" === e2.dtype ? this.broadcastedBinaryComplexOp(t3.cast("complex64"), e2.cast("complex64"), function(t4, e3, n2, r2) {
          return { real: t4 - n2, imag: e3 - r2 };
        }) : this.broadcastedBinaryOp(t3, e2, Ct(t3.dtype, e2.dtype), function(t4, e3) {
          return t4 - e3;
        });
      }, o2.prototype.pow = function(t3, e2) {
        return Ih([t3, e2], "pow"), this.broadcastedBinaryOp(t3, e2, t3.dtype, function(t4, e3) {
          return Math.pow(t4, e3);
        });
      }, o2.prototype.batchMatMul = function(t3, e2, n2, r2) {
        Ih([t3, e2], "matMul");
        for (var o3 = n2 ? t3.shape[1] : t3.shape[2], a2 = n2 ? t3.shape[2] : t3.shape[1], i2 = r2 ? e2.shape[1] : e2.shape[2], u2 = t3.shape[0], s2 = this.readSync(t3.dataId), c2 = this.readSync(e2.dataId), l3 = n2 ? [t3.strides[0], 1, t3.strides[1]] : [t3.strides[0], t3.strides[1], 1], h2 = l3[0], f2 = l3[1], p2 = l3[2], d2 = r2 ? [1, e2.strides[1], e2.strides[0]] : [e2.strides[1], 1, e2.strides[0]], v2 = d2[0], m2 = d2[1], g2 = d2[2], y2 = a2 * i2, x2 = ur([u2, a2, i2], t3.dtype), b2 = x2.values, w2 = this.blockSize, C2 = 0; C2 < u2; C2++)
          for (var E2 = 0; E2 < a2; E2 += w2)
            for (var R2 = 0; R2 < i2; R2 += w2)
              for (var I2 = 0; I2 < o3; I2 += w2)
                for (var k2 = Math.min(E2 + w2, a2), S2 = Math.min(R2 + w2, i2), A2 = Math.min(I2 + w2, o3), D2 = E2; D2 < k2; D2++)
                  for (var T2 = R2; T2 < S2; T2++) {
                    for (var N2 = 0, F2 = I2; F2 < A2; F2++)
                      N2 += s2[C2 * h2 + D2 * f2 + F2 * p2] * c2[F2 * v2 + T2 * m2 + C2 * g2];
                    b2[C2 * y2 + (D2 * i2 + T2)] += N2;
                  }
        return x2.toTensor();
      }, o2.prototype.fusedBatchMatMul = function(t3) {
        var e2 = t3.a, n2 = t3.b, r2 = t3.transposeA, o3 = t3.transposeB, a2 = t3.bias, i2 = t3.activation, u2 = t3.preluActivationWeights, s2 = this.batchMatMul(e2, n2, r2, o3);
        return a2 && (s2 = this.add(s2, a2)), i2 && (s2 = kh(this, s2, i2, u2)), s2;
      }, o2.prototype.multiply = function(t3, e2) {
        return "complex64" === t3.dtype || "complex64" === e2.dtype ? this.broadcastedBinaryComplexOp(t3.cast("complex64"), e2.cast("complex64"), function(t4, e3, n2, r2) {
          return { real: t4 * n2 - e3 * r2, imag: t4 * r2 + e3 * n2 };
        }) : this.broadcastedBinaryOp(t3, e2, Ct(t3.dtype, e2.dtype), function(t4, e3) {
          return t4 * e3;
        });
      }, o2.prototype.realDivide = function(t3, e2) {
        Ih([t3, e2], "realDivide");
        return this.broadcastedBinaryOp(t3, e2, "float32", function(t4, e3) {
          return t4 / e3;
        });
      }, o2.prototype.floorDiv = function(t3, e2) {
        Ih([t3, e2], "floorDiv");
        return this.broadcastedBinaryOp(t3, e2, "int32", function(t4, e3) {
          return Math.floor(t4 / e3);
        });
      }, o2.prototype.sum = function(t3, e2) {
        Ih(t3, "sum"), mn("sum", e2, t3.rank);
        for (var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = n2[1], a2 = Pn(r2, Ct(t3.dtype, "int32")), i2 = w(o3), u2 = this.readSync(a2.dataId), s2 = this.readSync(t3.dataId), c2 = 0; c2 < u2.length; ++c2) {
          for (var l3 = c2 * i2, h2 = 0, f2 = 0; f2 < i2; ++f2)
            h2 += s2[l3 + f2];
          u2[c2] = h2;
        }
        return a2;
      }, o2.prototype.prod = function(t3, e2) {
        Ih(t3, "sum");
        for (var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = n2[1], a2 = Pn(r2, Ct(t3.dtype, "int32")), i2 = w(o3), u2 = this.readSync(a2.dataId), s2 = this.readSync(t3.dataId), c2 = 0; c2 < u2.length; ++c2) {
          for (var l3 = c2 * i2, h2 = 1, f2 = 0; f2 < i2; ++f2)
            h2 *= s2[l3 + f2];
          u2[c2] = h2;
        }
        return a2;
      }, o2.prototype.unsortedSegmentSum = function(t3, e2, n2) {
        Ih(t3, "unsortedSegmentSum");
        for (var r2 = [], o3 = t3.rank - e2.rank, a2 = 0; a2 < o3; ++a2)
          e2 = e2.expandDims(a2 + 1);
        for (a2 = 0; a2 < n2; ++a2) {
          var i2 = An(a2, "int32"), u2 = sc(i2, e2).asType("float32").mul(t3).sum(0);
          r2.push(u2);
        }
        return Tr(r2);
      }, o2.prototype.argMin = function(t3, e2) {
        Ih(t3, "argMin");
        var n2 = [e2];
        mn("argMin", n2, t3.rank);
        for (var r2 = dn(t3.shape, n2), o3 = r2[0], a2 = r2[1], i2 = Pn(o3, "int32"), u2 = w(a2), s2 = this.readSync(i2.dataId), c2 = this.readSync(t3.dataId), l3 = 0; l3 < s2.length; ++l3) {
          for (var h2 = l3 * u2, f2 = c2[h2], p2 = 0, d2 = 0; d2 < u2; ++d2) {
            var v2 = c2[h2 + d2];
            v2 < f2 && (f2 = v2, p2 = d2);
          }
          s2[l3] = p2;
        }
        return i2;
      }, o2.prototype.argMax = function(t3, e2) {
        Ih(t3, "argMax");
        var n2 = [e2];
        mn("argMax", n2, t3.rank);
        for (var r2 = dn(t3.shape, n2), o3 = r2[0], a2 = r2[1], i2 = Pn(o3, "int32"), u2 = w(a2), s2 = this.readSync(i2.dataId), c2 = this.readSync(t3.dataId), l3 = 0; l3 < s2.length; ++l3) {
          for (var h2 = l3 * u2, f2 = c2[h2], p2 = 0, d2 = 0; d2 < u2; ++d2) {
            var v2 = c2[h2 + d2];
            v2 > f2 && (f2 = v2, p2 = d2);
          }
          s2[l3] = p2;
        }
        return i2;
      }, o2.prototype.cumsum = function(t3, e2, n2, r2) {
        if (Ih(t3, "cumsum"), e2 !== t3.rank - 1)
          throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (t3.rank - 1) + " but got axis=" + e2);
        for (var o3 = Ct(t3.dtype, "int32"), a2 = Pn(t3.shape, o3), i2 = this.readSync(a2.dataId), u2 = this.readSync(t3.dataId), s2 = t3.shape[t3.rank - 1], c2 = r2 ? function(t4, e3) {
          return t4 + s2 - e3 - 1;
        } : function(t4, e3) {
          return t4 + e3;
        }, l3 = 0; l3 < u2.length; l3 += s2)
          for (var h2 = 0; h2 < s2; h2++) {
            var f2 = c2(l3, h2);
            if (0 === h2)
              i2[f2] = n2 ? 0 : u2[f2];
            else {
              var p2 = c2(l3, h2 - 1);
              i2[f2] = n2 ? u2[p2] + i2[p2] : u2[f2] + i2[p2];
            }
          }
        return a2;
      }, o2.prototype.equal = function(t3, e2) {
        return Ih([t3, e2], "equal"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 === e3 ? 1 : 0;
        });
      }, o2.prototype.notEqual = function(t3, e2) {
        return Ih([t3, e2], "notEqual"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 !== e3 ? 1 : 0;
        });
      }, o2.prototype.less = function(t3, e2) {
        return Ih([t3, e2], "less"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 < e3 ? 1 : 0;
        });
      }, o2.prototype.lessEqual = function(t3, e2) {
        return Ih([t3, e2], "lessEqual"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 <= e3 ? 1 : 0;
        });
      }, o2.prototype.greater = function(t3, e2) {
        return Ih([t3, e2], "greater"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 > e3 ? 1 : 0;
        });
      }, o2.prototype.greaterEqual = function(t3, e2) {
        return Ih([t3, e2], "greaterEqual"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 >= e3 ? 1 : 0;
        });
      }, o2.prototype.logicalNot = function(t3) {
        Ih(t3, "logicalNot");
        for (var e2 = this.readSync(t3.dataId), n2 = new Uint8Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          n2[r2] = e2[r2] ? 0 : 1;
        return this.makeOutput(n2, t3.shape, "bool");
      }, o2.prototype.logicalAnd = function(t3, e2) {
        return Ih([t3, e2], "logicalAnd"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 && e3;
        });
      }, o2.prototype.logicalOr = function(t3, e2) {
        return Ih([t3, e2], "logicalOr"), this.broadcastedBinaryOp(t3, e2, "bool", function(t4, e3) {
          return t4 || e3;
        });
      }, o2.prototype.select = function(t3, e2, n2) {
        Ih([t3, e2, n2], "select");
        for (var r2 = this.readSync(t3.dataId), o3 = this.readSync(e2.dataId), a2 = this.readSync(n2.dataId), i2 = Pn(e2.shape, Ct(e2.dtype, n2.dtype)), u2 = this.readSync(i2.dataId), s2 = 0, c2 = 0 === t3.rank || t3.rank > 1 || 1 === e2.rank ? 1 : w(e2.shape.slice(1)), l3 = 0; l3 < r2.length; l3++)
          for (var h2 = 0; h2 < c2; h2++)
            1 === r2[l3] ? u2[s2++] = o3[l3] : u2[s2++] = a2[l3];
        return i2;
      }, o2.prototype.where = function(t3) {
        Ih([t3], "where");
        var e2 = this.readSync(t3.dataId);
        return Uo(t3.shape, e2);
      }, o2.prototype.topk = function(t3, e2, n2) {
        return Ih(t3, "topk"), Wo(this.readSync(t3.dataId), t3.shape, t3.dtype, e2);
      }, o2.prototype.min = function(t3, e2) {
        Ih(t3, "min"), mn("min", e2, t3.rank);
        for (var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = n2[1], a2 = Pn(r2, t3.dtype), i2 = w(o3), u2 = this.readSync(a2.dataId), s2 = this.readSync(t3.dataId), c2 = 0; c2 < u2.length; ++c2) {
          for (var l3 = c2 * i2, h2 = s2[l3], f2 = 0; f2 < i2; ++f2) {
            var p2 = s2[l3 + f2];
            p2 < h2 && (h2 = p2);
          }
          u2[c2] = h2;
        }
        return a2;
      }, o2.prototype.minimum = function(t3, e2) {
        return Ih([t3, e2], "minimum"), this.broadcastedBinaryOp(t3, e2, t3.dtype, function(t4, e3) {
          return Math.min(t4, e3);
        });
      }, o2.prototype.mod = function(t3, e2) {
        return Ih([t3, e2], "mod"), this.broadcastedBinaryOp(t3, e2, t3.dtype, function(t4, e3) {
          var n2 = t4 % e3;
          return t4 < 0 && e3 < 0 || t4 >= 0 && e3 >= 0 ? n2 : (n2 + e3) % e3;
        });
      }, o2.prototype.max = function(t3, e2) {
        Ih(t3, "max"), mn("max", e2, t3.rank);
        for (var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = n2[1], a2 = Pn(r2, t3.dtype), i2 = w(o3), u2 = this.readSync(a2.dataId), s2 = this.readSync(t3.dataId), c2 = 0; c2 < u2.length; ++c2) {
          for (var l3 = c2 * i2, h2 = s2[l3], f2 = 0; f2 < i2; ++f2) {
            var p2 = s2[l3 + f2];
            p2 > h2 && (h2 = p2);
          }
          u2[c2] = h2;
        }
        return a2;
      }, o2.prototype.maximum = function(t3, e2) {
        return Ih([t3, e2], "maximum"), this.broadcastedBinaryOp(t3, e2, t3.dtype, function(t4, e3) {
          return Math.max(t4, e3);
        });
      }, o2.prototype.all = function(t3, e2) {
        Ih(t3, "all"), mn("all", e2, t3.rank);
        for (var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = n2[1], a2 = Pn(r2, t3.dtype), i2 = w(o3), u2 = this.readSync(a2.dataId), s2 = this.readSync(t3.dataId), c2 = 0; c2 < u2.length; ++c2) {
          for (var l3 = c2 * i2, h2 = s2[l3], f2 = 0; f2 < i2; ++f2) {
            var p2 = s2[l3 + f2];
            h2 = h2 && p2;
          }
          u2[c2] = h2;
        }
        return a2;
      }, o2.prototype.any = function(t3, e2) {
        Ih(t3, "any"), mn("any", e2, t3.rank);
        for (var n2 = dn(t3.shape, e2), r2 = n2[0], o3 = n2[1], a2 = Pn(r2, t3.dtype), i2 = w(o3), u2 = this.readSync(a2.dataId), s2 = this.readSync(t3.dataId), c2 = 0; c2 < u2.length; ++c2) {
          for (var l3 = c2 * i2, h2 = s2[l3], f2 = 0; f2 < i2; ++f2) {
            var p2 = s2[l3 + f2];
            h2 = h2 || p2;
          }
          u2[c2] = h2;
        }
        return a2;
      }, o2.prototype.squaredDifference = function(t3, e2) {
        return Ih([t3, e2], "squaredDifference"), this.broadcastedBinaryOp(t3, e2, t3.dtype, function(t4, e3) {
          var n2 = t4 - e3;
          return n2 * n2;
        });
      }, o2.prototype.ceil = function(t3) {
        Ih(t3, "ceil");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          n2[r2] = Math.ceil(e2[r2]);
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.floor = function(t3) {
        Ih(t3, "floor");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          n2[r2] = Math.floor(e2[r2]);
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.sign = function(t3) {
        Ih(t3, "x");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          e2[r2] < 0 ? n2[r2] = -1 : e2[r2] > 0 ? n2[r2] = 1 : n2[r2] = 0;
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.isNaN = function(t3) {
        Ih(t3, "x");
        for (var e2 = this.readSync(t3.dataId), n2 = new Uint8Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          Number.isNaN(e2[r2]) && (n2[r2] = 1);
        return this.makeOutput(n2, t3.shape, "bool");
      }, o2.prototype.isInf = function(t3) {
        Ih(t3, "x");
        for (var e2 = this.readSync(t3.dataId), n2 = new Uint8Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          Math.abs(e2[r2]) === 1 / 0 && (n2[r2] = 1);
        return this.makeOutput(n2, t3.shape, "bool");
      }, o2.prototype.isFinite = function(t3) {
        Ih(t3, "x");
        for (var e2 = this.readSync(t3.dataId), n2 = new Uint8Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          Number.isFinite(e2[r2]) && (n2[r2] = 1);
        return this.makeOutput(n2, t3.shape, "bool");
      }, o2.prototype.round = function(t3) {
        Ih(t3, "round");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2) {
          var o3 = Math.floor(e2[r2]);
          e2[r2] - o3 < 0.5 ? n2[r2] = Math.floor(e2[r2]) : e2[r2] - o3 > 0.5 ? n2[r2] = Math.ceil(e2[r2]) : n2[r2] = o3 % 2 == 0 ? o3 : o3 + 1;
        }
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.exp = function(t3) {
        Ih(t3, "exp");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          n2[r2] = Math.exp(e2[r2]);
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.expm1 = function(t3) {
        Ih(t3, "expm1");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          n2[r2] = Math.expm1(e2[r2]);
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.log = function(t3) {
        Ih(t3, "log");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2) {
          var o3 = e2[r2];
          n2[r2] = Math.log(o3);
        }
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.log1p = function(t3) {
        Ih(t3, "log1p");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2) {
          var o3 = e2[r2];
          n2[r2] = Math.log1p(o3);
        }
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.sqrt = function(t3) {
        Ih(t3, "sqrt");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2) {
          var o3 = e2[r2];
          n2[r2] = Math.sqrt(o3);
        }
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.rsqrt = function(t3) {
        Ih(t3, "rsqrt");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2) {
          var o3 = e2[r2];
          n2[r2] = 1 / Math.sqrt(o3);
        }
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.reciprocal = function(t3) {
        Ih(t3, "reciprocal");
        for (var e2 = this.readSync(t3.dataId), n2 = new Float32Array(e2.length), r2 = 0; r2 < e2.length; ++r2)
          n2[r2] = 1 / e2[r2];
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.linear = function(t3) {
        return t3;
      }, o2.prototype.relu = function(t3) {
        Ih(t3, "relu");
        for (var e2 = Pn(t3.shape, t3.dtype), n2 = this.readSync(e2.dataId), r2 = this.readSync(t3.dataId), o3 = 0; o3 < r2.length; ++o3)
          n2[o3] = Math.max(0, r2[o3]);
        return e2;
      }, o2.prototype.relu6 = function(t3) {
        Ih(t3, "relu");
        for (var e2 = Pn(t3.shape, t3.dtype), n2 = this.readSync(e2.dataId), r2 = this.readSync(t3.dataId), o3 = 0; o3 < r2.length; ++o3)
          n2[o3] = Math.min(Math.max(0, r2[o3]), 6);
        return e2;
      }, o2.prototype.prelu = function(t3, e2) {
        return Ih([t3, e2], "prelu"), this.broadcastedBinaryOp(t3, e2, t3.dtype, function(t4, e3) {
          return t4 < 0 ? e3 * t4 : t4;
        });
      }, o2.prototype.elu = function(t3) {
        Ih(t3, "elu");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2) {
          var o3 = n2[r2];
          e2[r2] = o3 >= 0 ? o3 : Math.exp(o3) - 1;
        }
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.eluDer = function(t3, e2) {
        Ih([t3, e2], "eluDer");
        for (var n2 = new Float32Array(e2.size), r2 = this.readSync(e2.dataId), o3 = this.readSync(t3.dataId), a2 = 0; a2 < r2.length; ++a2) {
          var i2 = r2[a2];
          n2[a2] = i2 >= 1 ? o3[a2] : o3[a2] * (i2 + 1);
        }
        return this.makeOutput(n2, e2.shape, "float32");
      }, o2.prototype.selu = function(t3) {
        Ih(t3, "selu");
        for (var e2 = iu, n2 = uu, r2 = new Float32Array(t3.size), o3 = this.readSync(t3.dataId), a2 = 0; a2 < o3.length; ++a2) {
          var i2 = o3[a2];
          r2[a2] = i2 >= 0 ? n2 * i2 : e2 * (Math.exp(i2) - 1);
        }
        return this.makeOutput(r2, t3.shape, "float32");
      }, o2.prototype.clip = function(t3, e2, n2) {
        Ih(t3, "clip");
        for (var r2 = new Float32Array(t3.size), o3 = this.readSync(t3.dataId), a2 = 0; a2 < o3.length; ++a2) {
          var i2 = o3[a2];
          r2[a2] = i2 > n2 ? n2 : i2 < e2 ? e2 : i2;
        }
        return this.makeOutput(r2, t3.shape, "float32");
      }, o2.prototype.abs = function(t3) {
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.abs(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.complexAbs = function(t3) {
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < t3.size; ++r2) {
          var o3 = n2[2 * r2], a2 = n2[2 * r2 + 1];
          e2[r2] = Math.hypot(o3, a2);
        }
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.int = function(t3) {
        Ih(t3, "int");
        for (var e2 = new Int32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = n2[r2];
        return this.makeOutput(e2, t3.shape, "int32");
      }, o2.prototype.sigmoid = function(t3) {
        Ih(t3, "sigmoid");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = 1 / (1 + Math.exp(-n2[r2]));
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.softplus = function(t3) {
        Ih(t3, "softplus");
        for (var e2 = Math.log(11920928955078125e-23) + 2, n2 = new Float32Array(t3.size), r2 = this.readSync(t3.dataId), o3 = 0; o3 < r2.length; ++o3) {
          var a2 = r2[o3] > -e2, i2 = r2[o3] < e2, u2 = Math.exp(r2[o3]), s2 = void 0;
          s2 = i2 ? u2 : a2 ? r2[o3] : Math.log(1 + u2), n2[o3] = s2;
        }
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.sin = function(t3) {
        Ih(t3, "sin");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.sin(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.cos = function(t3) {
        Ih(t3, "cos");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.cos(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.tan = function(t3) {
        Ih(t3, "tan");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.tan(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.asin = function(t3) {
        Ih(t3, "asin");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.asin(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.acos = function(t3) {
        Ih(t3, "acos");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.acos(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.atan = function(t3) {
        Ih(t3, "atan");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.atan(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.atan2 = function(t3, e2) {
        return Ih([t3, e2], "atan2"), this.broadcastedBinaryOp(t3, e2, t3.dtype, function(t4, e3) {
          return Math.atan2(t4, e3);
        });
      }, o2.prototype.sinh = function(t3) {
        Ih(t3, "sinh");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.sinh(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.cosh = function(t3) {
        Ih(t3, "cosh");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.cosh(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.tanh = function(t3) {
        Ih(t3, "tanh");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = R(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.asinh = function(t3) {
        Ih(t3, "asinh");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.asinh(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.acosh = function(t3) {
        Ih(t3, "acosh");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.acosh(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.atanh = function(t3) {
        Ih(t3, "atanh");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2)
          e2[r2] = Math.atanh(n2[r2]);
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.erf = function(t3) {
        Ih(t3, "erf");
        for (var e2 = new Float32Array(t3.size), n2 = this.readSync(t3.dataId), r2 = 0; r2 < n2.length; ++r2) {
          var o3 = Math.sign(n2[r2]), a2 = Math.abs(n2[r2]), i2 = 1 / (1 + 0.3275911 * a2);
          e2[r2] = o3 * (1 - ((((1.061405429 * i2 - 1.453152027) * i2 + 1.421413741) * i2 - 0.284496736) * i2 + 0.254829592) * i2 * Math.exp(-a2 * a2));
        }
        return this.makeOutput(e2, t3.shape, "float32");
      }, o2.prototype.step = function(t3, e2) {
        void 0 === e2 && (e2 = 0), Ih(t3, "step");
        for (var n2 = new Float32Array(t3.size), r2 = this.readSync(t3.dataId), o3 = 0; o3 < r2.length; ++o3) {
          var a2 = r2[o3];
          isNaN(a2) ? n2[o3] = NaN : n2[o3] = a2 > 0 ? 1 : e2;
        }
        return this.makeOutput(n2, t3.shape, "float32");
      }, o2.prototype.fusedConv2d = function(t3) {
        var e2 = t3.input, n2 = t3.filter, r2 = t3.convInfo, o3 = t3.bias, a2 = t3.activation, i2 = t3.preluActivationWeights, u2 = this.conv2d(e2, n2, r2);
        return o3 && (u2 = this.add(u2, o3)), a2 && (u2 = kh(this, u2, a2, i2)), u2;
      }, o2.prototype.conv2d = function(t3, e2, n2) {
        Ih([t3, e2], "conv2d");
        for (var r2 = n2.filterHeight, o3 = n2.filterWidth, a2 = n2.dilationHeight, i2 = n2.dilationWidth, u2 = n2.padInfo.left, s2 = n2.padInfo.top, c2 = "channelsLast" === n2.dataFormat, l3 = ur(n2.outShape, t3.dtype), h2 = t3.strides[0], f2 = c2 ? t3.strides[1] : t3.strides[2], p2 = c2 ? t3.strides[2] : 1, d2 = c2 ? 1 : t3.strides[1], v2 = l3.strides[0], m2 = c2 ? l3.strides[1] : l3.strides[2], g2 = c2 ? l3.strides[2] : 1, y2 = c2 ? 1 : l3.strides[1], x2 = this.readSync(t3.dataId), b2 = this.readSync(e2.dataId), w2 = l3.values, C2 = 0; C2 < n2.batchSize; ++C2)
          for (var E2 = C2 * h2, R2 = C2 * v2, I2 = 0; I2 < n2.outHeight; ++I2)
            for (var k2 = R2 + I2 * m2, S2 = I2 * n2.strideHeight - s2, A2 = 0; A2 < r2; A2++) {
              var D2 = S2 + A2 * a2;
              if (!(D2 < 0 || D2 >= n2.inHeight))
                for (var T2 = A2 * e2.strides[0], N2 = E2 + D2 * f2, F2 = 0; F2 < n2.outWidth; ++F2)
                  for (var O2 = k2 + F2 * g2, _2 = F2 * n2.strideWidth - u2, M2 = 0; M2 < o3; M2++) {
                    var B2 = _2 + M2 * i2;
                    if (!(B2 < 0 || B2 >= n2.inWidth))
                      for (var P2 = N2 + B2 * p2, L2 = T2 + M2 * e2.strides[1], W2 = 0; W2 < n2.inChannels; ++W2) {
                        for (var U2 = x2[P2 + W2 * d2], V2 = 0; V2 < n2.outChannels; ++V2)
                          w2[O2 + V2 * y2] += U2 * b2[L2 + V2];
                        L2 += n2.outChannels;
                      }
                  }
            }
        return l3.toTensor();
      }, o2.prototype.conv3d = function(t3, e2, n2) {
        for (var r2 = n2.filterDepth, o3 = n2.filterHeight, a2 = n2.filterWidth, i2 = n2.dilationDepth, u2 = n2.dilationHeight, s2 = n2.dilationWidth, c2 = n2.padInfo.front, l3 = n2.padInfo.left, h2 = n2.padInfo.top, f2 = ur(n2.outShape, t3.dtype), p2 = this.readSync(t3.dataId), d2 = this.readSync(e2.dataId), v2 = f2.values, m2 = 0; m2 < n2.batchSize; ++m2)
          for (var g2 = m2 * t3.strides[0], y2 = m2 * f2.strides[0], x2 = 0; x2 < n2.outDepth; ++x2)
            for (var b2 = y2 + x2 * f2.strides[1], w2 = x2 * n2.strideDepth - c2, C2 = 0; C2 < r2; C2++) {
              var E2 = w2 + C2 * i2;
              if (!(E2 < 0 || E2 >= n2.inDepth))
                for (var R2 = C2 * e2.strides[0], I2 = g2 + E2 * t3.strides[1], k2 = 0; k2 < n2.outHeight; ++k2)
                  for (var S2 = b2 + k2 * f2.strides[2], A2 = k2 * n2.strideHeight - h2, D2 = 0; D2 < o3; D2++) {
                    var T2 = A2 + D2 * u2;
                    if (!(T2 < 0 || T2 >= n2.inHeight))
                      for (var N2 = R2 + D2 * e2.strides[1], F2 = I2 + T2 * t3.strides[2], O2 = 0; O2 < n2.outWidth; ++O2)
                        for (var _2 = S2 + O2 * n2.outChannels, M2 = O2 * n2.strideWidth - l3, B2 = 0; B2 < a2; B2++) {
                          var P2 = M2 + B2 * s2;
                          if (!(P2 < 0 || P2 >= n2.inWidth))
                            for (var L2 = N2 + B2 * e2.strides[2], W2 = F2 + P2 * n2.inChannels, U2 = L2, V2 = 0; V2 < n2.inChannels; ++V2) {
                              for (var z2 = p2[W2 + V2], G2 = 0; G2 < n2.outChannels; ++G2)
                                v2[_2 + G2] += z2 * d2[U2 + G2];
                              U2 += n2.outChannels;
                            }
                        }
                  }
            }
        return f2.toTensor();
      }, o2.prototype.conv2dDerInput = function(t3, e2, n2) {
        Ih([t3, e2], "conv2dDerInput");
        for (var r2 = ur(n2.inShape, "float32"), o3 = r2.values, a2 = this.readSync(t3.dataId), i2 = this.readSync(e2.dataId), u2 = e2.strides, s2 = u2[0], c2 = u2[1], l3 = u2[2], h2 = n2.batchSize, f2 = n2.filterHeight, p2 = n2.filterWidth, d2 = n2.inChannels, v2 = n2.inHeight, m2 = n2.inWidth, g2 = n2.outChannels, y2 = n2.outHeight, x2 = n2.outWidth, b2 = n2.strideHeight, w2 = n2.strideWidth, C2 = n2.dataFormat, E2 = f2 - 1 - n2.padInfo.top, R2 = p2 - 1 - n2.padInfo.left, I2 = "channelsLast" === C2, k2 = r2.strides[0], S2 = I2 ? r2.strides[1] : r2.strides[2], A2 = I2 ? r2.strides[2] : 1, D2 = I2 ? 1 : r2.strides[1], T2 = t3.strides[0], N2 = I2 ? t3.strides[1] : t3.strides[2], F2 = I2 ? t3.strides[2] : 1, O2 = I2 ? 1 : t3.strides[1], _2 = 0; _2 < h2; ++_2)
          for (var M2 = 0; M2 < d2; ++M2)
            for (var B2 = 0; B2 < v2; ++B2)
              for (var P2 = B2 - E2, L2 = Math.max(0, Math.ceil(P2 / b2)), W2 = Math.min(y2, (f2 + P2) / b2), U2 = 0; U2 < m2; ++U2) {
                for (var V2 = U2 - R2, z2 = Math.max(0, Math.ceil(V2 / w2)), G2 = Math.min(x2, (p2 + V2) / w2), H2 = 0, q2 = L2; q2 < W2; ++q2)
                  for (var K2 = q2 * b2 - P2, j2 = z2; j2 < G2; ++j2)
                    for (var X2 = T2 * _2 + N2 * q2 + F2 * j2, $2 = s2 * (f2 - 1 - K2) + c2 * (p2 - 1 - (j2 * w2 - V2)) + l3 * M2, Y2 = 0; Y2 < g2; ++Y2) {
                      H2 += a2[X2 + O2 * Y2] * i2[$2 + Y2];
                    }
                o3[k2 * _2 + S2 * B2 + A2 * U2 + D2 * M2] = H2;
              }
        return r2.toTensor();
      }, o2.prototype.conv3dDerInput = function(t3, e2, n2) {
        for (var r2 = ur(n2.inShape, "float32"), o3 = r2.values, a2 = r2.strides, i2 = a2[0], u2 = a2[1], s2 = a2[2], c2 = a2[3], l3 = this.readSync(t3.dataId), h2 = t3.strides, f2 = h2[0], p2 = h2[1], d2 = h2[2], v2 = h2[3], m2 = this.readSync(e2.dataId), g2 = e2.strides, y2 = g2[0], x2 = g2[1], b2 = g2[2], w2 = g2[3], C2 = n2.batchSize, E2 = n2.filterDepth, R2 = n2.filterHeight, I2 = n2.filterWidth, k2 = n2.inChannels, S2 = n2.inDepth, A2 = n2.inHeight, D2 = n2.inWidth, T2 = n2.outChannels, N2 = n2.outDepth, F2 = n2.outHeight, O2 = n2.outWidth, _2 = n2.strideDepth, M2 = n2.strideHeight, B2 = n2.strideWidth, P2 = E2 - 1 - n2.padInfo.front, L2 = R2 - 1 - n2.padInfo.top, W2 = I2 - 1 - n2.padInfo.left, U2 = 0; U2 < C2; ++U2)
          for (var V2 = 0; V2 < k2; ++V2)
            for (var z2 = 0; z2 < S2; ++z2)
              for (var G2 = z2 - P2, H2 = Math.max(0, Math.ceil(G2 / _2)), q2 = Math.min(N2, (E2 + G2) / _2), K2 = 0; K2 < A2; ++K2)
                for (var j2 = K2 - L2, X2 = Math.max(0, Math.ceil(j2 / M2)), $2 = Math.min(F2, (R2 + j2) / M2), Y2 = 0; Y2 < D2; ++Y2) {
                  for (var Q2 = Y2 - W2, J2 = Math.max(0, Math.ceil(Q2 / B2)), Z2 = Math.min(O2, (I2 + Q2) / B2), tt2 = 0, et2 = H2; et2 < q2; ++et2)
                    for (var nt2 = et2 * _2 - G2, rt2 = X2; rt2 < $2; ++rt2)
                      for (var ot2 = rt2 * M2 - j2, at2 = J2; at2 < Z2; ++at2)
                        for (var it2 = f2 * U2 + p2 * et2 + d2 * rt2 + v2 * at2, ut2 = y2 * (E2 - 1 - nt2) + x2 * (R2 - 1 - ot2) + b2 * (I2 - 1 - (at2 * B2 - Q2)) + w2 * V2, st2 = 0; st2 < T2; ++st2) {
                          tt2 += l3[it2 + st2] * m2[ut2 + st2];
                        }
                  o3[i2 * U2 + u2 * z2 + s2 * K2 + c2 * Y2 + V2] = tt2;
                }
        return r2.toTensor();
      }, o2.prototype.conv2dDerFilter = function(t3, e2, n2) {
        Ih([t3, e2], "conv2dDerFilter");
        for (var r2 = n2.strideHeight, o3 = n2.strideWidth, a2 = n2.filterHeight, i2 = n2.filterWidth, u2 = "channelsLast" === n2.dataFormat, s2 = ur(n2.filterShape, "float32"), c2 = n2.padInfo.left, l3 = n2.padInfo.top, h2 = this.bufferSync(t3), f2 = this.bufferSync(e2), p2 = 0; p2 < a2; ++p2)
          for (var d2 = Math.max(0, Math.ceil((l3 - p2) / r2)), v2 = Math.min(n2.outHeight, (n2.inHeight + l3 - p2) / r2), m2 = 0; m2 < i2; ++m2)
            for (var g2 = Math.max(0, Math.ceil((c2 - m2) / o3)), y2 = Math.min(n2.outWidth, (n2.inWidth + c2 - m2) / o3), x2 = 0; x2 < n2.inChannels; ++x2)
              for (var b2 = 0; b2 < n2.outChannels; ++b2) {
                for (var w2 = 0, C2 = 0; C2 < n2.batchSize; ++C2)
                  for (var E2 = d2; E2 < v2; ++E2)
                    for (var R2 = p2 + E2 * r2 - l3, I2 = g2; I2 < y2; ++I2) {
                      var k2 = m2 + I2 * o3 - c2;
                      w2 += u2 ? h2.get(C2, R2, k2, x2) * f2.get(C2, E2, I2, b2) : h2.get(C2, x2, R2, k2) * f2.get(C2, b2, E2, I2);
                    }
                s2.set(w2, p2, m2, x2, b2);
              }
        return s2.toTensor();
      }, o2.prototype.conv3dDerFilter = function(t3, e2, n2) {
        for (var r2 = n2.strideDepth, o3 = n2.strideHeight, a2 = n2.strideWidth, i2 = n2.filterDepth, u2 = n2.filterHeight, s2 = n2.filterWidth, c2 = ur(n2.filterShape, "float32"), l3 = c2.values, h2 = c2.strides, f2 = h2[0], p2 = h2[1], d2 = h2[2], v2 = h2[3], m2 = this.readSync(e2.dataId), g2 = e2.strides, y2 = g2[0], x2 = g2[1], b2 = g2[2], w2 = g2[3], C2 = this.readSync(t3.dataId), E2 = t3.strides, R2 = E2[0], I2 = E2[1], k2 = E2[2], S2 = E2[3], A2 = n2.padInfo.front, D2 = n2.padInfo.left, T2 = n2.padInfo.top, N2 = 0; N2 < i2; ++N2)
          for (var F2 = Math.max(0, Math.ceil((A2 - N2) / r2)), O2 = Math.min(n2.outDepth, (n2.inDepth + A2 - N2) / r2), _2 = N2 * f2, M2 = 0; M2 < u2; ++M2)
            for (var B2 = Math.max(0, Math.ceil((T2 - M2) / o3)), P2 = Math.min(n2.outHeight, (n2.inHeight + T2 - M2) / o3), L2 = M2 * p2 + _2, W2 = 0; W2 < s2; ++W2)
              for (var U2 = Math.max(0, Math.ceil((D2 - W2) / a2)), V2 = Math.min(n2.outWidth, (n2.inWidth + D2 - W2) / a2), z2 = W2 * d2 + L2, G2 = 0; G2 < n2.inChannels; ++G2)
                for (var H2 = G2 * v2 + z2, q2 = 0; q2 < n2.outChannels; ++q2) {
                  for (var K2 = 0, j2 = 0; j2 < n2.batchSize; ++j2)
                    for (var X2 = j2 * R2, $2 = j2 * y2, Y2 = F2; Y2 < O2; ++Y2)
                      for (var Q2 = (N2 + Y2 * r2 - A2) * I2 + X2, J2 = Y2 * x2 + $2, Z2 = B2; Z2 < P2; ++Z2)
                        for (var tt2 = (M2 + Z2 * o3 - T2) * k2 + Q2, et2 = Z2 * b2 + J2, nt2 = U2; nt2 < V2; ++nt2) {
                          var rt2 = nt2 * w2 + et2;
                          K2 += C2[(W2 + nt2 * a2 - D2) * S2 + tt2 + G2] * m2[rt2 + q2];
                        }
                  l3[H2 + q2] = K2;
                }
        return c2.toTensor();
      }, o2.prototype.fusedDepthwiseConv2D = function(t3) {
        var e2 = t3.input, n2 = t3.filter, r2 = t3.convInfo, o3 = t3.bias, a2 = t3.activation, i2 = t3.preluActivationWeights, u2 = this.depthwiseConv2D(e2, n2, r2);
        return o3 && (u2 = this.add(u2, o3)), a2 && (u2 = kh(this, u2, a2, i2)), u2;
      }, o2.prototype.depthwiseConv2D = function(t3, e2, n2) {
        Ih([t3, e2], "depthwiseConv2D");
        for (var r2 = n2.filterHeight, o3 = n2.filterWidth, a2 = n2.dilationHeight, i2 = n2.dilationWidth, u2 = n2.padInfo.left, s2 = n2.padInfo.top, c2 = n2.outChannels / n2.inChannels, l3 = ur(n2.outShape, t3.dtype), h2 = this.readSync(t3.dataId), f2 = this.readSync(e2.dataId), p2 = l3.values, d2 = 0; d2 < n2.batchSize; ++d2)
          for (var v2 = d2 * t3.strides[0], m2 = d2 * l3.strides[0], g2 = 0; g2 < n2.outHeight; ++g2)
            for (var y2 = m2 + g2 * l3.strides[1], x2 = g2 * n2.strideHeight - u2, b2 = 0; b2 < r2; ++b2) {
              var w2 = x2 + b2 * a2;
              if (!(w2 < 0 || w2 >= n2.inHeight))
                for (var C2 = b2 * e2.strides[0], E2 = v2 + w2 * t3.strides[1], R2 = 0; R2 < n2.outWidth; ++R2)
                  for (var I2 = y2 + R2 * l3.strides[2], k2 = R2 * n2.strideWidth - s2, S2 = 0; S2 < o3; ++S2) {
                    var A2 = k2 + S2 * i2;
                    if (!(A2 < 0 || A2 >= n2.inWidth))
                      for (var D2 = C2 + S2 * e2.strides[1], T2 = E2 + A2 * n2.inChannels, N2 = I2, F2 = D2, O2 = 0; O2 < n2.inChannels; ++O2) {
                        for (var _2 = h2[T2 + O2], M2 = 0; M2 < c2; ++M2)
                          p2[N2 + M2] += _2 * f2[F2 + M2];
                        N2 += c2, F2 += c2;
                      }
                  }
            }
        return l3.toTensor();
      }, o2.prototype.depthwiseConv2DDerInput = function(t3, e2, n2) {
        Ih([t3, e2], "depthwiseConv2DDerInput");
        for (var r2 = ur(n2.inShape, "float32"), o3 = r2.values, a2 = r2.strides, i2 = a2[0], u2 = a2[1], s2 = a2[2], c2 = this.readSync(t3.dataId), l3 = t3.strides, h2 = l3[0], f2 = l3[1], p2 = l3[2], d2 = this.readSync(e2.dataId), v2 = e2.strides, m2 = v2[0], g2 = v2[1], y2 = v2[2], x2 = n2.batchSize, b2 = n2.filterHeight, w2 = n2.filterWidth, C2 = n2.inChannels, E2 = n2.inHeight, R2 = n2.inWidth, I2 = n2.outChannels, k2 = n2.outHeight, S2 = n2.outWidth, A2 = n2.strideHeight, D2 = n2.strideWidth, T2 = b2 - 1 - n2.padInfo.top, N2 = w2 - 1 - n2.padInfo.left, F2 = I2 / C2, O2 = 0; O2 < x2; ++O2)
          for (var _2 = 0; _2 < C2; ++_2)
            for (var M2 = 0; M2 < E2; ++M2)
              for (var B2 = M2 - T2, P2 = Math.max(0, Math.ceil(B2 / A2)), L2 = Math.min(k2, (b2 + B2) / A2), W2 = 0; W2 < R2; ++W2) {
                for (var U2 = W2 - N2, V2 = Math.max(0, Math.ceil(U2 / D2)), z2 = Math.min(S2, (w2 + U2) / D2), G2 = 0, H2 = P2; H2 < L2; ++H2)
                  for (var q2 = H2 * A2 - B2, K2 = V2; K2 < z2; ++K2)
                    for (var j2 = h2 * O2 + f2 * H2 + p2 * K2, X2 = m2 * (b2 - 1 - q2) + g2 * (w2 - 1 - (K2 * D2 - U2)) + y2 * _2, $2 = 0; $2 < F2; ++$2) {
                      G2 += c2[j2 + (_2 * F2 + $2)] * d2[X2 + $2];
                    }
                o3[i2 * O2 + u2 * M2 + s2 * W2 + _2] = G2;
              }
        return r2.toTensor();
      }, o2.prototype.depthwiseConv2DDerFilter = function(t3, e2, n2) {
        Ih([t3, e2], "depthwiseConv2DDerFilter");
        for (var r2 = n2.strideHeight, o3 = n2.strideWidth, a2 = n2.filterHeight, i2 = n2.filterWidth, u2 = ur(n2.filterShape, "float32"), s2 = n2.padInfo.left, c2 = n2.padInfo.top, l3 = n2.outChannels / n2.inChannels, h2 = this.bufferSync(t3), f2 = this.bufferSync(e2), p2 = 0; p2 < a2; ++p2)
          for (var d2 = Math.max(0, Math.ceil((c2 - p2) / r2)), v2 = Math.min(n2.outHeight, (n2.inHeight + c2 - p2) / r2), m2 = 0; m2 < i2; ++m2)
            for (var g2 = Math.max(0, Math.ceil((s2 - m2) / o3)), y2 = Math.min(n2.outWidth, (n2.inWidth + s2 - m2) / o3), x2 = 0; x2 < n2.outChannels; ++x2) {
              for (var b2 = Math.trunc(x2 / l3), w2 = x2 % l3, C2 = 0, E2 = 0; E2 < n2.batchSize; ++E2)
                for (var R2 = d2; R2 < v2; ++R2)
                  for (var I2 = p2 + R2 * r2 - c2, k2 = g2; k2 < y2; ++k2) {
                    var S2 = m2 + k2 * o3 - s2;
                    C2 += h2.get(E2, I2, S2, b2) * f2.get(E2, R2, k2, x2);
                  }
              u2.set(C2, p2, m2, b2, w2);
            }
        return u2.toTensor();
      }, o2.prototype.tile = function(t3, e2) {
        return Ih(t3, "tile"), Lo(this.bufferSync(t3), e2);
      }, o2.prototype.pad = function(t3, e2, n2) {
        Ih(t3, "pad");
        var r2 = e2.map(function(e3, n3) {
          return e3[0] + t3.shape[n3] + e3[1];
        }), o3 = e2.map(function(t4) {
          return t4[0];
        }), a2 = this.bufferSync(t3), i2 = ur(r2, t3.dtype);
        0 !== n2 && i2.values.fill(n2);
        for (var u2 = 0; u2 < t3.size; u2++) {
          var s2 = a2.indexToLoc(u2), c2 = s2.map(function(t4, e3) {
            return t4 + o3[e3];
          });
          i2.set.apply(i2, [a2.get.apply(a2, s2)].concat(c2));
        }
        return i2.toTensor();
      }, o2.prototype.transpose = function(t3, e2) {
        Ih(t3, "transpose");
        for (var n2 = new Array(t3.rank), r2 = 0; r2 < n2.length; r2++)
          n2[r2] = t3.shape[e2[r2]];
        var o3 = this.readSync(t3.dataId), a2 = ur(n2, t3.dtype), i2 = this.bufferSync(t3);
        for (r2 = 0; r2 < t3.size; ++r2) {
          for (var u2 = i2.indexToLoc(r2), s2 = new Array(u2.length), c2 = 0; c2 < s2.length; c2++)
            s2[c2] = u2[e2[c2]];
          var l3 = a2.locToIndex(s2);
          a2.values[l3] = o3[r2];
        }
        return a2.toTensor();
      }, o2.prototype.gather = function(t3, e2, n2) {
        Ih([t3, e2], "gather");
        var r2 = t3.shape.slice(), o3 = this.readSync(e2.dataId);
        r2[n2] = o3.length;
        for (var a2 = ur(r2, t3.dtype), i2 = this.bufferSync(t3), u2 = 0; u2 < a2.size; ++u2) {
          var s2 = a2.indexToLoc(u2), c2 = s2.slice();
          c2[n2] = o3[s2[n2]];
          var l3 = i2.locToIndex(c2);
          a2.values[u2] = i2.values[l3];
        }
        return a2.toTensor();
      }, o2.prototype.batchToSpaceND = function(t3, e2, n2) {
        Ih([t3], "batchToSpaceND");
        var r2 = e2.reduce(function(t4, e3) {
          return t4 * e3;
        }), o3 = Mr(t3.shape, e2, r2), a2 = Br(o3.length, e2.length), i2 = Pr(t3.shape, e2, r2), u2 = Lr(n2, e2.length), s2 = Wr(i2, n2, e2.length);
        return t3.reshape(o3).transpose(a2).reshape(i2).slice(u2, s2);
      }, o2.prototype.spaceToBatchND = function(t3, e2, n2) {
        Ih([t3], "spaceToBatchND");
        var r2 = e2.reduce(function(t4, e3) {
          return t4 * e3;
        }), o3 = [[0, 0]];
        o3.push.apply(o3, n2);
        for (var a2 = 1 + e2.length; a2 < t3.shape.length; ++a2)
          o3.push([0, 0]);
        var i2 = t3.pad(o3), u2 = Mr(i2.shape, e2, r2, false), s2 = Br(u2.length, e2.length, false), c2 = Pr(i2.shape, e2, r2, false);
        return i2.reshape(u2).transpose(s2).reshape(c2);
      }, o2.prototype.pool = function(t3, e2, n2) {
        Ih(t3, "pool");
        for (var r2 = e2.strideHeight, o3 = e2.strideWidth, a2 = e2.dilationHeight, i2 = e2.dilationWidth, u2 = e2.effectiveFilterHeight, s2 = e2.effectiveFilterWidth, c2 = e2.padInfo.top, l3 = e2.padInfo.left, h2 = "max" === n2 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, f2 = this.readSync(t3.dataId), p2 = ur(e2.outShape, t3.dtype), d2 = p2.values, v2 = e2.outShape[1] * e2.outShape[2] * e2.outShape[3], m2 = e2.outShape[2] * e2.outShape[3], g2 = e2.outShape[3], y2 = 0; y2 < e2.batchSize; ++y2)
          for (var x2 = y2 * v2, b2 = y2 * t3.strides[0], w2 = 0; w2 < e2.inChannels; ++w2)
            for (var C2 = 0; C2 < e2.outHeight; ++C2)
              for (var E2 = C2 * r2 - c2, R2 = Math.max(0, E2), I2 = Math.min(e2.inHeight, u2 + E2), k2 = x2 + C2 * m2, S2 = 0; S2 < e2.outWidth; ++S2) {
                for (var A2 = S2 * o3 - l3, D2 = Math.max(0, A2), T2 = Math.min(e2.inWidth, s2 + A2), N2 = h2, F2 = 0, O2 = 0, _2 = R2; _2 < I2; _2 += a2) {
                  for (var M2 = b2 + _2 * t3.strides[1], B2 = D2; B2 < T2; B2 += i2) {
                    var P2 = f2[M2 + B2 * t3.strides[2] + w2];
                    "max" === n2 && P2 > N2 ? N2 = P2 : "avg" === n2 && (F2 += P2, O2++);
                  }
                  if (isNaN(N2))
                    break;
                }
                d2[k2 + S2 * g2 + w2] = "avg" === n2 ? F2 / O2 : N2;
              }
        return p2.toTensor();
      }, o2.prototype.maxPool = function(t3, e2) {
        return this.pool(t3, e2, "max");
      }, o2.prototype.maxPoolPositions = function(t3, e2) {
        for (var n2 = ur(e2.outShape, "int32"), r2 = e2.strideHeight, o3 = e2.strideWidth, a2 = e2.dilationHeight, i2 = e2.dilationWidth, u2 = e2.effectiveFilterHeight, s2 = e2.effectiveFilterWidth, c2 = e2.padInfo.top, l3 = e2.padInfo.left, h2 = this.bufferSync(t3), f2 = 0; f2 < e2.batchSize; ++f2)
          for (var p2 = 0; p2 < e2.inChannels; ++p2)
            for (var d2 = 0; d2 < e2.outHeight; ++d2) {
              for (var v2 = d2 * r2 - c2, m2 = v2; m2 < 0; )
                m2 += a2;
              for (var g2 = Math.min(e2.inHeight, u2 + v2), y2 = 0; y2 < e2.outWidth; ++y2) {
                for (var x2 = y2 * o3 - l3, b2 = x2; b2 < 0; )
                  b2 += i2;
                for (var w2 = Math.min(e2.inWidth, s2 + x2), C2 = Number.NEGATIVE_INFINITY, E2 = -1, R2 = m2; R2 < g2; R2 += a2)
                  for (var I2 = R2 - v2, k2 = b2; k2 < w2; k2 += i2) {
                    var S2 = k2 - x2, A2 = h2.get(f2, R2, k2, p2);
                    A2 > C2 && (C2 = A2, E2 = I2 * s2 + S2);
                  }
                n2.set(E2, f2, d2, y2, p2);
              }
            }
        return n2.toTensor();
      }, o2.prototype.maxPoolBackprop = function(t3, e2, n2, r2) {
        Ih([e2, n2], "maxPoolBackprop");
        for (var o3 = this.maxPoolPositions(e2, r2), a2 = r2.strideHeight, i2 = r2.strideWidth, u2 = r2.dilationHeight, s2 = r2.dilationWidth, c2 = r2.effectiveFilterHeight, l3 = r2.effectiveFilterWidth, h2 = l3 - 1 - r2.padInfo.left, f2 = c2 - 1 - r2.padInfo.top, p2 = ur(e2.shape, "float32"), d2 = this.bufferSync(o3), v2 = this.bufferSync(t3), m2 = 0; m2 < r2.batchSize; ++m2)
          for (var g2 = 0; g2 < r2.inChannels; ++g2)
            for (var y2 = 0; y2 < r2.inHeight; ++y2)
              for (var x2 = 0; x2 < r2.inWidth; ++x2) {
                for (var b2 = y2 - f2, w2 = x2 - h2, C2 = 0, E2 = 0; E2 < c2; E2 += u2) {
                  var R2 = (b2 + E2) / a2;
                  if (!(R2 < 0 || R2 >= r2.outHeight || Math.floor(R2) !== R2))
                    for (var I2 = 0; I2 < l3; I2 += s2) {
                      var k2 = (w2 + I2) / i2;
                      if (!(k2 < 0 || k2 >= r2.outWidth || Math.floor(k2) !== k2)) {
                        var S2 = c2 * l3 - 1 - d2.get(m2, R2, k2, g2) === E2 * l3 + I2 ? 1 : 0;
                        if (0 !== S2)
                          C2 += v2.get(m2, R2, k2, g2) * S2;
                      }
                    }
                }
                p2.set(C2, m2, y2, x2, g2);
              }
        return p2.toTensor();
      }, o2.prototype.avgPoolBackprop = function(t3, e2, n2) {
        Ih([t3, e2], "avgPoolBackprop");
        for (var r2 = n2.strideHeight, o3 = n2.strideWidth, a2 = n2.filterHeight, i2 = n2.filterWidth, u2 = n2.dilationHeight, s2 = n2.dilationWidth, c2 = n2.effectiveFilterHeight, l3 = n2.effectiveFilterWidth, h2 = l3 - 1 - n2.padInfo.left, f2 = c2 - 1 - n2.padInfo.top, p2 = ur(e2.shape, "float32"), d2 = 1 / (a2 * i2), v2 = this.bufferSync(t3), m2 = 0; m2 < n2.batchSize; ++m2)
          for (var g2 = 0; g2 < n2.inChannels; ++g2)
            for (var y2 = 0; y2 < n2.inHeight; ++y2)
              for (var x2 = 0; x2 < n2.inWidth; ++x2) {
                for (var b2 = y2 - f2, w2 = x2 - h2, C2 = 0, E2 = 0; E2 < c2; E2 += u2) {
                  var R2 = (b2 + E2) / r2;
                  if (!(R2 < 0 || R2 >= n2.outHeight || Math.floor(R2) !== R2))
                    for (var I2 = 0; I2 < l3; I2 += s2) {
                      var k2 = (w2 + I2) / o3;
                      if (!(k2 < 0 || k2 >= n2.outWidth || Math.floor(k2) !== k2))
                        C2 += v2.get(m2, R2, k2, g2);
                    }
                }
                p2.set(C2 * d2, m2, y2, x2, g2);
              }
        return p2.toTensor();
      }, o2.prototype.pool3d = function(t3, e2, n2) {
        Ih(t3, "pool3d");
        for (var r2 = e2.strideDepth, o3 = e2.strideHeight, a2 = e2.strideWidth, i2 = e2.dilationDepth, u2 = e2.dilationHeight, s2 = e2.dilationWidth, c2 = e2.effectiveFilterDepth, l3 = e2.effectiveFilterHeight, h2 = e2.effectiveFilterWidth, f2 = e2.padInfo.front, p2 = e2.padInfo.top, d2 = e2.padInfo.left, v2 = "max" === n2 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m2 = this.readSync(t3.dataId), g2 = ur(e2.outShape, t3.dtype), y2 = g2.values, x2 = e2.outShape[1] * e2.outShape[2] * e2.outShape[3] * e2.outShape[4], b2 = e2.outShape[2] * e2.outShape[3] * e2.outShape[4], w2 = e2.outShape[3] * e2.outShape[4], C2 = e2.outShape[4], E2 = 0; E2 < e2.batchSize; ++E2)
          for (var R2 = E2 * x2, I2 = E2 * t3.strides[0], k2 = 0; k2 < e2.inChannels; ++k2)
            for (var S2 = 0; S2 < e2.outDepth; ++S2) {
              for (var A2 = S2 * r2 - f2, D2 = A2; D2 < 0; )
                D2 += i2;
              for (var T2 = Math.min(e2.inDepth, c2 + A2), N2 = R2 + S2 * b2, F2 = 0; F2 < e2.outHeight; ++F2) {
                for (var O2 = F2 * o3 - p2, _2 = O2; _2 < 0; )
                  _2 += u2;
                for (var M2 = Math.min(e2.inHeight, l3 + O2), B2 = N2 + F2 * w2, P2 = 0; P2 < e2.outWidth; ++P2) {
                  for (var L2 = P2 * a2 - d2, W2 = L2; W2 < 0; )
                    W2 += s2;
                  for (var U2 = Math.min(e2.inWidth, h2 + L2), V2 = B2 + P2 * C2, z2 = v2, G2 = 0, H2 = 0, q2 = D2; q2 < T2; q2 += i2) {
                    for (var K2 = I2 + q2 * t3.strides[1], j2 = _2; j2 < M2; j2 += u2) {
                      for (var X2 = K2 + j2 * t3.strides[2], $2 = W2; $2 < U2; $2 += s2) {
                        var Y2 = m2[X2 + $2 * t3.strides[3] + k2];
                        if ("max" === n2 && Y2 > z2 ? z2 = Y2 : "avg" === n2 && (G2 += Y2, H2++), isNaN(z2))
                          break;
                      }
                      if (isNaN(z2))
                        break;
                    }
                    if (isNaN(z2))
                      break;
                  }
                  y2[V2 + k2] = "avg" === n2 ? G2 / H2 : z2;
                }
              }
            }
        return g2.toTensor();
      }, o2.prototype.avgPool3d = function(t3, e2) {
        return Ih(t3, "avgPool3d"), this.pool3d(t3, e2, "avg").toFloat();
      }, o2.prototype.avgPool3dBackprop = function(t3, e2, n2) {
        Ih([t3, e2], "avgPool3dBackprop");
        for (var r2 = n2.strideDepth, o3 = n2.strideHeight, a2 = n2.strideWidth, i2 = n2.filterDepth, u2 = n2.filterHeight, s2 = n2.filterWidth, c2 = n2.dilationDepth, l3 = n2.dilationHeight, h2 = n2.dilationWidth, f2 = n2.effectiveFilterDepth, p2 = n2.effectiveFilterHeight, d2 = n2.effectiveFilterWidth, v2 = f2 - 1 - n2.padInfo.front, m2 = d2 - 1 - n2.padInfo.left, g2 = p2 - 1 - n2.padInfo.top, y2 = ur(e2.shape, "float32"), x2 = 1 / (i2 * u2 * s2), b2 = this.bufferSync(t3), w2 = 0; w2 < n2.batchSize; ++w2)
          for (var C2 = 0; C2 < n2.inChannels; ++C2)
            for (var E2 = 0; E2 < n2.inDepth; ++E2)
              for (var R2 = 0; R2 < n2.inHeight; ++R2)
                for (var I2 = 0; I2 < n2.inWidth; ++I2) {
                  for (var k2 = E2 - v2, S2 = R2 - g2, A2 = I2 - m2, D2 = 0, T2 = 0; T2 < f2; T2 += c2) {
                    var N2 = (k2 + T2) / r2;
                    if (!(N2 < 0 || N2 >= n2.outDepth || Math.floor(N2) !== N2))
                      for (var F2 = 0; F2 < p2; F2 += l3) {
                        var O2 = (S2 + F2) / o3;
                        if (!(O2 < 0 || O2 >= n2.outHeight || Math.floor(O2) !== O2))
                          for (var _2 = 0; _2 < d2; _2 += h2) {
                            var M2 = (A2 + _2) / a2;
                            if (!(M2 < 0 || M2 >= n2.outWidth || Math.floor(M2) !== M2))
                              D2 += b2.get(w2, N2, O2, M2, C2);
                          }
                      }
                  }
                  y2.set(D2 * x2, w2, E2, R2, I2, C2);
                }
        return y2.toTensor();
      }, o2.prototype.maxPool3d = function(t3, e2) {
        return Ih(t3, "maxPool3d"), this.pool3d(t3, e2, "max").toFloat();
      }, o2.prototype.maxPool3dPositions = function(t3, e2) {
        for (var n2 = ur(e2.outShape, "int32"), r2 = e2.strideDepth, o3 = e2.strideHeight, a2 = e2.strideWidth, i2 = e2.dilationDepth, u2 = e2.dilationHeight, s2 = e2.dilationWidth, c2 = e2.effectiveFilterDepth, l3 = e2.effectiveFilterHeight, h2 = e2.effectiveFilterWidth, f2 = e2.padInfo.front, p2 = e2.padInfo.top, d2 = e2.padInfo.left, v2 = this.bufferSync(t3), m2 = 0; m2 < e2.batchSize; ++m2)
          for (var g2 = 0; g2 < e2.inChannels; ++g2)
            for (var y2 = 0; y2 < e2.outDepth; ++y2) {
              for (var x2 = y2 * r2 - f2, b2 = x2; b2 < 0; )
                b2 += i2;
              for (var w2 = Math.min(e2.inDepth, c2 + x2), C2 = 0; C2 < e2.outHeight; ++C2) {
                for (var E2 = C2 * o3 - p2, R2 = E2; R2 < 0; )
                  R2 += u2;
                for (var I2 = Math.min(e2.inHeight, l3 + E2), k2 = 0; k2 < e2.outWidth; ++k2) {
                  for (var S2 = k2 * a2 - d2, A2 = S2; A2 < 0; )
                    A2 += s2;
                  for (var D2 = Math.min(e2.inWidth, h2 + S2), T2 = Number.NEGATIVE_INFINITY, N2 = -1, F2 = b2; F2 < w2; F2 += i2)
                    for (var O2 = F2 - x2, _2 = R2; _2 < I2; _2 += u2)
                      for (var M2 = _2 - E2, B2 = A2; B2 < D2; B2 += s2) {
                        var P2 = B2 - S2, L2 = v2.get(m2, F2, _2, B2, g2);
                        L2 >= T2 && (T2 = L2, N2 = O2 * l3 * h2 + M2 * l3 + P2);
                      }
                  n2.set(N2, m2, y2, C2, k2, g2);
                }
              }
            }
        return n2.toTensor();
      }, o2.prototype.maxPool3dBackprop = function(t3, e2, n2, r2) {
        Ih([e2, n2], "maxPool3dBackprop");
        for (var o3 = this.maxPool3dPositions(e2, r2), a2 = r2.strideDepth, i2 = r2.strideHeight, u2 = r2.strideWidth, s2 = r2.dilationDepth, c2 = r2.dilationHeight, l3 = r2.dilationWidth, h2 = r2.effectiveFilterDepth, f2 = r2.effectiveFilterHeight, p2 = r2.effectiveFilterWidth, d2 = h2 - 1 - r2.padInfo.front, v2 = p2 - 1 - r2.padInfo.left, m2 = f2 - 1 - r2.padInfo.top, g2 = ur(e2.shape, "float32"), y2 = this.bufferSync(o3), x2 = this.bufferSync(t3), b2 = 0; b2 < r2.batchSize; ++b2)
          for (var w2 = 0; w2 < r2.inChannels; ++w2)
            for (var C2 = 0; C2 < r2.inDepth; ++C2)
              for (var E2 = 0; E2 < r2.inHeight; ++E2)
                for (var R2 = 0; R2 < r2.inWidth; ++R2) {
                  for (var I2 = C2 - d2, k2 = E2 - m2, S2 = R2 - v2, A2 = 0, D2 = 0; D2 < h2; D2 += s2) {
                    var T2 = (I2 + D2) / a2;
                    if (!(T2 < 0 || T2 >= r2.outDepth || Math.floor(T2) !== T2))
                      for (var N2 = 0; N2 < f2; N2 += c2) {
                        var F2 = (k2 + N2) / i2;
                        if (!(F2 < 0 || F2 >= r2.outHeight || Math.floor(F2) !== F2))
                          for (var O2 = 0; O2 < p2; O2 += l3) {
                            var _2 = (S2 + O2) / u2;
                            if (!(_2 < 0 || _2 >= r2.outWidth || Math.floor(_2) !== _2)) {
                              var M2 = h2 * f2 * p2 - 1 - y2.get(b2, T2, F2, _2, w2) === D2 * f2 * p2 + N2 * p2 + O2 ? 1 : 0;
                              if (0 !== M2)
                                A2 += x2.get(b2, T2, F2, _2, w2) * M2;
                            }
                          }
                      }
                  }
                  g2.set(A2, b2, C2, E2, R2, w2);
                }
        return g2.toTensor();
      }, o2.prototype.cast = function(t3, e2) {
        return So(t3, e2, this);
      }, o2.prototype.reshape = function(t3, e2) {
        return Ao(t3, e2);
      }, o2.prototype.avgPool = function(t3, e2) {
        return Ih(t3, "avgPool"), this.pool(t3, e2, "avg").toFloat();
      }, o2.prototype.resizeBilinear = function(t3, e2, n2, r2) {
        Ih(t3, "resizeBilinear");
        for (var o3 = t3.shape, a2 = o3[0], i2 = o3[1], u2 = o3[2], s2 = o3[3], c2 = this.readSync(t3.dataId), l3 = new Float32Array(w([a2, e2, n2, s2])), h2 = [r2 && e2 > 1 ? i2 - 1 : i2, r2 && n2 > 1 ? u2 - 1 : u2], f2 = [r2 && e2 > 1 ? e2 - 1 : e2, r2 && n2 > 1 ? n2 - 1 : n2], p2 = 0, d2 = h2[0] / f2[0], v2 = h2[1] / f2[1], m2 = 0; m2 < a2; m2++)
          for (var g2 = 0; g2 < e2; g2++)
            for (var y2 = d2 * g2, x2 = Math.floor(y2), b2 = y2 - x2, C2 = Math.min(i2 - 1, Math.ceil(y2)), E2 = m2 * t3.strides[0] + x2 * t3.strides[1], R2 = m2 * t3.strides[0] + C2 * t3.strides[1], I2 = 0; I2 < n2; I2++)
              for (var k2 = v2 * I2, S2 = Math.floor(k2), A2 = k2 - S2, D2 = Math.min(u2 - 1, Math.ceil(k2)), T2 = E2 + S2 * t3.strides[2], N2 = R2 + S2 * t3.strides[2], F2 = E2 + +D2 * t3.strides[2], O2 = R2 + D2 * t3.strides[2], _2 = 0; _2 < s2; _2++) {
                var M2 = c2[T2 + _2], B2 = c2[N2 + _2], P2 = M2 + (c2[F2 + _2] - M2) * A2, L2 = P2 + (B2 + (c2[O2 + _2] - B2) * A2 - P2) * b2;
                l3[p2++] = L2;
              }
        return kn(l3, [a2, e2, n2, s2]);
      }, o2.prototype.resizeBilinearBackprop = function(t3, e2, n2) {
        Ih([t3, e2], "resizeBilinearBackprop");
        for (var r2 = e2.shape, o3 = r2[0], a2 = r2[1], i2 = r2[2], u2 = r2[3], s2 = t3.shape, c2 = s2[1], l3 = s2[2], h2 = new Float32Array(o3 * a2 * i2 * u2), f2 = [n2 && c2 > 1 ? a2 - 1 : a2, n2 && l3 > 1 ? i2 - 1 : i2], p2 = [n2 && c2 > 1 ? c2 - 1 : c2, n2 && l3 > 1 ? l3 - 1 : l3], d2 = f2[0] / p2[0], v2 = f2[1] / p2[1], m2 = this.readSync(t3.dataId), g2 = 0, y2 = 0; y2 < o3; y2++)
          for (var x2 = y2 * e2.strides[0], b2 = 0; b2 < c2; b2++)
            for (var w2 = b2 * d2, C2 = Math.floor(w2), E2 = Math.min(Math.ceil(w2), a2 - 1), R2 = x2 + C2 * e2.strides[1], I2 = x2 + E2 * e2.strides[1], k2 = w2 - C2, S2 = 1 - k2, A2 = 0; A2 < l3; A2++)
              for (var D2 = A2 * v2, T2 = Math.floor(D2), N2 = Math.min(Math.ceil(D2), i2 - 1), F2 = D2 - T2, O2 = 1 - F2, _2 = R2 + T2 * e2.strides[2], M2 = R2 + N2 * e2.strides[2], B2 = I2 + T2 * e2.strides[2], P2 = I2 + N2 * e2.strides[2], L2 = S2 * O2, W2 = S2 * F2, U2 = k2 * O2, V2 = k2 * F2, z2 = 0; z2 < u2; z2++) {
                var G2 = m2[g2++];
                h2[_2 + z2] += G2 * L2, h2[M2 + z2] += G2 * W2, h2[B2 + z2] += G2 * U2, h2[P2 + z2] += G2 * V2;
              }
        return Fn(h2, [o3, i2, a2, u2], e2.dtype);
      }, o2.prototype.resizeNearestNeighbor = function(t3, e2, n2, r2) {
        Ih(t3, "resizeNearestNeighbor");
        for (var o3 = t3.shape, a2 = o3[0], i2 = o3[1], u2 = o3[2], s2 = o3[3], c2 = this.readSync(t3.dataId), l3 = new Float32Array(a2 * e2 * n2 * s2), h2 = [r2 && e2 > 1 ? i2 - 1 : i2, r2 && n2 > 1 ? u2 - 1 : u2], f2 = [r2 && e2 > 1 ? e2 - 1 : e2, r2 && n2 > 1 ? n2 - 1 : n2], p2 = h2[0] / f2[0], d2 = h2[1] / f2[1], v2 = 0, m2 = 0; m2 < a2; m2++)
          for (var g2 = m2 * t3.strides[0], y2 = 0; y2 < e2; y2++)
            for (var x2 = p2 * y2, b2 = g2 + Math.min(i2 - 1, r2 ? Math.round(x2) : Math.floor(x2)) * t3.strides[1], w2 = 0; w2 < n2; w2++)
              for (var C2 = d2 * w2, E2 = b2 + Math.min(u2 - 1, r2 ? Math.round(C2) : Math.floor(C2)) * t3.strides[2], R2 = 0; R2 < s2; R2++) {
                var I2 = c2[E2 + R2];
                l3[v2++] = I2;
              }
        return kn(l3, [a2, e2, n2, s2], t3.dtype);
      }, o2.prototype.resizeNearestNeighborBackprop = function(t3, e2, n2) {
        Ih([t3, e2], "resizeNearestNeighborBackprop");
        for (var r2 = e2.shape, o3 = r2[0], a2 = r2[1], i2 = r2[2], u2 = r2[3], s2 = t3.shape, c2 = s2[1], l3 = s2[2], h2 = new Float32Array(o3 * a2 * i2 * u2), f2 = this.readSync(t3.dataId), p2 = [n2 && c2 > 1 ? a2 - 1 : a2, n2 && l3 > 1 ? i2 - 1 : i2], d2 = [n2 && c2 > 1 ? c2 - 1 : c2, n2 && l3 > 1 ? l3 - 1 : l3], v2 = p2[0] / d2[0], m2 = p2[1] / d2[1], g2 = 1 / v2, y2 = 1 / m2, x2 = 2 * Math.ceil(g2) + 2, b2 = 2 * Math.ceil(y2) + 2, w2 = 0; w2 < o3; w2++)
          for (var C2 = w2 * e2.strides[0], E2 = 0; E2 < a2; E2++)
            for (var R2 = C2 + E2 * e2.strides[1], I2 = Math.floor(E2 * g2), k2 = Math.floor(I2 - x2 / 2), S2 = 0; S2 < i2; S2++)
              for (var A2 = R2 + S2 * e2.strides[2], D2 = Math.floor(S2 * y2), T2 = Math.floor(D2 - b2 / 2), N2 = 0; N2 < u2; N2++) {
                for (var F2 = 0, O2 = 0; O2 < x2; O2++) {
                  var _2 = O2 + k2;
                  if (!(_2 < 0 || _2 >= c2)) {
                    var M2 = C2 + _2 * t3.strides[1], B2 = _2 * v2;
                    if (E2 === Math.min(a2 - 1, n2 ? Math.round(B2) : Math.floor(B2)))
                      for (var P2 = 0; P2 < b2; P2++) {
                        var L2 = P2 + T2;
                        if (!(L2 < 0 || L2 >= l3)) {
                          var W2 = M2 + L2 * t3.strides[2], U2 = L2 * m2;
                          S2 === Math.min(i2 - 1, n2 ? Math.round(U2) : Math.floor(U2)) && (F2 += f2[W2 + N2]);
                        }
                      }
                  }
                }
                h2[A2 + N2] = F2;
              }
        return Fn(h2, e2.shape, e2.dtype);
      }, o2.prototype.batchNormalization = function(t3, e2, n2, r2, o3, a2) {
        Ih([t3, e2, n2, o3, a2], "batchNorm");
        for (var i2 = this.readSync(t3.dataId), u2 = this.readSync(e2.dataId), s2 = this.readSync(n2.dataId), c2 = o3 ? this.readSync(o3.dataId) : new Float32Array([1]), l3 = a2 ? this.readSync(a2.dataId) : new Float32Array([0]), h2 = new Float32Array(i2.length), f2 = l3.length, p2 = c2.length, d2 = s2.length, v2 = u2.length, m2 = 0, g2 = 0, y2 = 0, x2 = 0, b2 = 0; b2 < i2.length; ++b2)
          h2[b2] = l3[m2++] + (i2[b2] - u2[g2++]) * c2[y2++] / Math.sqrt(s2[x2++] + r2), m2 >= f2 && (m2 = 0), g2 >= v2 && (g2 = 0), y2 >= p2 && (y2 = 0), x2 >= d2 && (x2 = 0);
        return Fn(h2, t3.shape);
      }, o2.prototype.localResponseNormalization4D = function(t3, e2, n2, r2, o3) {
        Ih(t3, "localResponseNormalization4D");
        var a2 = t3.shape[3], i2 = a2 - 1, u2 = this.readSync(t3.dataId), s2 = t3.size, c2 = new Float32Array(s2);
        function l3(t4) {
          for (var n3 = t4 % a2, r3 = t4 - n3 + Math.max(0, n3 - e2), o4 = t4 - n3 + Math.min(n3 + e2, i2), s3 = 0; r3 <= o4; r3++) {
            var c3 = u2[r3];
            s3 += c3 * c3;
          }
          return s3;
        }
        for (var h2 = 0; h2 < s2; h2++) {
          var f2 = l3(h2), p2 = u2[h2] * Math.pow(n2 + r2 * f2, -o3);
          c2[h2] = p2;
        }
        return Fn(c2, t3.shape);
      }, o2.prototype.LRNGrad = function(t3, e2, n2, r2, o3, a2, i2) {
        Ih(t3, "LRNGrad");
        for (var u2 = t3.shape[3], s2 = this.readSync(t3.dataId), c2 = this.readSync(e2.dataId), l3 = this.readSync(n2.dataId), h2 = new Float32Array(t3.size), f2 = t3.size, p2 = 0; p2 < f2; p2++) {
          for (var d2 = p2 % u2, v2 = p2 - d2 + Math.max(0, d2 - r2), m2 = p2 - d2 + Math.min(u2, d2 + r2 + 1), g2 = 0, y2 = v2; y2 < m2; y2++)
            g2 += Math.pow(c2[y2], 2);
          g2 = a2 * g2 + o3;
          for (y2 = v2; y2 < m2; y2++) {
            var x2 = -2 * a2 * i2 * c2[y2] * l3[p2] / g2;
            p2 === y2 && (x2 += Math.pow(g2, -i2)), x2 *= s2[p2], h2[y2] += x2;
          }
        }
        return Fn(h2, t3.shape);
      }, o2.prototype.multinomial = function(t3, e2, n2, r2) {
        Ih(t3, "multinomial");
        for (var o3 = e2 ? t3 : io(t3), a2 = o3.shape[0], i2 = o3.shape[1], u2 = Pn([a2, n2], "int32"), s2 = this.readSync(u2.dataId), c2 = this.readSync(o3.dataId), l3 = 0; l3 < a2; ++l3) {
          var h2 = l3 * i2, f2 = new Float32Array(i2 - 1);
          f2[0] = c2[h2];
          for (var p2 = 1; p2 < f2.length; ++p2)
            f2[p2] = f2[p2 - 1] + c2[h2 + p2];
          for (var d2 = rr(r2.toString()), v2 = l3 * n2, m2 = 0; m2 < n2; ++m2) {
            var g2 = d2();
            s2[v2 + m2] = f2.length;
            for (var y2 = 0; y2 < f2.length; y2++)
              if (g2 < f2[y2]) {
                s2[v2 + m2] = y2;
                break;
              }
          }
        }
        return u2;
      }, o2.prototype.oneHot = function(t3, e2, n2, r2) {
        Ih(t3, "oneHot");
        var o3 = new Float32Array(t3.size * e2);
        o3.fill(r2);
        for (var a2 = this.readSync(t3.dataId), i2 = 0; i2 < t3.size; ++i2)
          a2[i2] >= 0 && a2[i2] < e2 && (o3[i2 * e2 + a2[i2]] = n2);
        return Tn(o3, [t3.size, e2], "int32");
      }, o2.prototype.nonMaxSuppression = function(t3, e2, n2, r2, o3) {
        return Ih(t3, "nonMaxSuppression"), Mo(this.readSync(t3.dataId), this.readSync(e2.dataId), n2, r2, o3);
      }, o2.prototype.fft = function(t3) {
        return this.fftBatch(t3, false);
      }, o2.prototype.ifft = function(t3) {
        return this.fftBatch(t3, true);
      }, o2.prototype.fftBatch = function(t3, e2) {
        for (var n2 = t3.shape[0], r2 = t3.shape[1], o3 = ur(t3.shape, "float32"), a2 = ur(t3.shape, "float32"), i2 = Rn(t3).as2D(n2, r2), u2 = In(t3).as2D(n2, r2), s2 = 0; s2 < n2; s2++)
          for (var c2 = i2.slice([s2, 0], [1, r2]), l3 = u2.slice([s2, 0], [1, r2]), h2 = En(c2, l3), f2 = this.readSync(this.fftImpl(h2, e2).dataId), p2 = 0; p2 < r2; p2++) {
            var d2 = Fo(f2, p2);
            o3.values[s2 * r2 + p2] = d2.real, a2.values[s2 * r2 + p2] = d2.imag;
          }
        return En(o3.toTensor(), a2.toTensor()).as2D(n2, r2);
      }, o2.prototype.fftImpl = function(t3, e2) {
        var n2 = t3.as1D(), r2 = n2.size;
        if (this.isExponentOf2(r2)) {
          var o3 = this.fftRadix2(n2, r2, e2).as2D(t3.shape[0], t3.shape[1]);
          return e2 && (o3 = En(Rn(o3).div(An(r2)), In(o3).div(An(r2)))), o3;
        }
        var a2 = this.readSync(t3.dataId), i2 = function(t4) {
          for (var e3 = new Float32Array(t4.length / 2), n3 = new Float32Array(t4.length / 2), r3 = 0; r3 < t4.length; r3 += 2)
            e3[r3 / 2] = t4[r3], n3[r3 / 2] = t4[r3 + 1];
          return { real: e3, imag: n3 };
        }(this.fourierTransformByMatmul(a2, r2, e2));
        return En(i2.real, i2.imag).as2D(t3.shape[0], t3.shape[1]);
      }, o2.prototype.isExponentOf2 = function(t3) {
        return 0 == (t3 & t3 - 1);
      }, o2.prototype.fftRadix2 = function(t3, e2, n2) {
        if (1 === e2)
          return t3;
        var r2 = this.readSync(t3.dataId), o3 = e2 / 2, a2 = function(t4) {
          for (var e3 = Math.ceil(t4.length / 4), n3 = new Float32Array(e3), r3 = new Float32Array(e3), o4 = 0; o4 < t4.length; o4 += 4)
            n3[Math.floor(o4 / 4)] = t4[o4], r3[Math.floor(o4 / 4)] = t4[o4 + 1];
          return { real: n3, imag: r3 };
        }(r2), i2 = En(a2.real, a2.imag).as1D(), u2 = function(t4) {
          for (var e3 = Math.floor(t4.length / 4), n3 = new Float32Array(e3), r3 = new Float32Array(e3), o4 = 2; o4 < t4.length; o4 += 4)
            n3[Math.floor(o4 / 4)] = t4[o4], r3[Math.floor(o4 / 4)] = t4[o4 + 1];
          return { real: n3, imag: r3 };
        }(r2), s2 = En(u2.real, u2.imag).as1D();
        i2 = this.fftRadix2(i2, o3, n2), s2 = this.fftRadix2(s2, o3, n2);
        var c2 = function(t4, e3) {
          for (var n3 = new Float32Array(t4 / 2), r3 = new Float32Array(t4 / 2), o4 = 0; o4 < Math.ceil(t4 / 2); o4++) {
            var a3 = (e3 ? 2 : -2) * Math.PI * (o4 / t4);
            n3[o4] = Math.cos(a3), r3[o4] = Math.sin(a3);
          }
          return { real: n3, imag: r3 };
        }(e2, n2), l3 = En(c2.real, c2.imag).mul(s2), h2 = i2.add(l3), f2 = i2.sub(l3), p2 = Rn(h2).concat(Rn(f2)), d2 = In(h2).concat(In(f2));
        return En(p2, d2).as1D();
      }, o2.prototype.fourierTransformByMatmul = function(t3, e2, n2) {
        for (var r2 = new Float32Array(2 * e2), o3 = 0; o3 < e2; o3++) {
          for (var a2 = 0, i2 = 0, u2 = 0; u2 < e2; u2++) {
            var s2 = _o(o3 * u2, e2, n2), c2 = Fo(t3, u2);
            a2 += c2.real * s2.real - c2.imag * s2.imag, i2 += c2.real * s2.imag + c2.imag * s2.real;
          }
          n2 && (a2 /= e2, i2 /= e2), Oo(r2, a2, i2, o3);
        }
        return r2;
      }, o2.prototype.depthToSpace = function(t3, e2, n2) {
        g("NHWC" === n2, function() {
          return "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + n2;
        }), g(e2 > 1, function() {
          return "blockSize should be > 1 for depthToSpace, but was: " + e2;
        });
        for (var r2 = t3.shape[0], o3 = t3.shape[1], a2 = t3.shape[2], i2 = t3.shape[3], u2 = o3 * e2, s2 = a2 * e2, c2 = i2 / (e2 * e2), l3 = this.readSync(t3.dataId), h2 = new Float32Array(r2 * u2 * s2 * c2), f2 = 0, p2 = 0; p2 < r2; ++p2)
          for (var d2 = 0; d2 < u2; ++d2)
            for (var v2 = Math.floor(d2 / e2), m2 = d2 % e2, y2 = 0; y2 < s2; ++y2)
              for (var x2 = Math.floor(y2 / e2), b2 = (m2 * e2 + y2 % e2) * c2, w2 = 0; w2 < c2; ++w2) {
                var C2 = w2 + b2 + i2 * (x2 + a2 * (v2 + o3 * p2));
                h2[f2++] = l3[C2];
              }
        return Fn(h2, [r2, u2, s2, c2]);
      }, o2.prototype.broadcastedBinaryOp = function(t3, e2, n2, r2) {
        var o3 = po(t3.shape, e2.shape), a2 = ur(o3, n2), i2 = this.readSync(t3.dataId), u2 = this.readSync(e2.dataId), s2 = ho(t3.shape, o3), c2 = ho(e2.shape, o3), l3 = a2.values;
        if (s2.length + c2.length === 0)
          for (var h2 = 0; h2 < l3.length; ++h2)
            l3[h2] = r2(i2[h2 % i2.length], u2[h2 % u2.length]);
        else {
          var f2 = this.bufferSync(t3), p2 = this.bufferSync(e2), d2 = function(n3) {
            var o4 = a2.indexToLoc(n3), h3 = o4.slice(-t3.rank);
            s2.forEach(function(t4) {
              return h3[t4] = 0;
            });
            var d3 = f2.locToIndex(h3), v2 = o4.slice(-e2.rank);
            c2.forEach(function(t4) {
              return v2[t4] = 0;
            });
            var m2 = p2.locToIndex(v2);
            l3[n3] = r2(i2[d3], u2[m2]);
          };
          for (h2 = 0; h2 < l3.length; ++h2)
            d2(h2);
        }
        return a2.toTensor();
      }, o2.prototype.broadcastedBinaryComplexOp = function(t3, e2, n2) {
        var r2 = po(t3.shape, e2.shape), o3 = ur(r2, "float32"), a2 = ur(r2, "float32"), i2 = this.readSync(t3.dataId), u2 = this.readSync(e2.dataId), s2 = ho(t3.shape, r2), c2 = ho(e2.shape, r2), l3 = o3.values, h2 = a2.values;
        if (s2.length + c2.length === 0)
          for (var f2 = 0; f2 < l3.length; f2++) {
            var p2 = f2 % i2.length, d2 = f2 % u2.length, v2 = n2(i2[2 * p2], i2[2 * p2 + 1], u2[2 * d2], u2[2 * d2 + 1]);
            l3[f2] = v2.real, h2[f2] = v2.imag;
          }
        else {
          var m2 = this.bufferSync(this.data.get(t3.dataId).complexTensors.real), g2 = this.bufferSync(this.data.get(e2.dataId).complexTensors.real), y2 = function(r3) {
            var a3 = o3.indexToLoc(r3), f3 = a3.slice(-t3.rank);
            s2.forEach(function(t4) {
              return f3[t4] = 0;
            });
            var p3 = m2.locToIndex(f3), d3 = a3.slice(-e2.rank);
            c2.forEach(function(t4) {
              return d3[t4] = 0;
            });
            var v3 = g2.locToIndex(d3), y3 = n2(i2[2 * p3], i2[2 * p3 + 1], u2[2 * v3], u2[2 * v3 + 1]);
            l3[r3] = y3.real, h2[r3] = y3.imag;
          };
          for (f2 = 0; f2 < l3.length; f2++)
            y2(f2);
        }
        return this.complex(o3.toTensor(), a2.toTensor());
      }, o2.prototype.split = function(t3, e2, n2) {
        return Po(t3, e2, n2);
      }, o2.prototype.dispose = function() {
      }, o2.prototype.floatPrecision = function() {
        return 32;
      }, o2.prototype.epsilon = function() {
        return 1e-7;
      }, o2.prototype.cropAndResize = function(t3, e2, n2, r2, o3, a2) {
        for (var i2 = t3.shape, u2 = i2[0], s2 = i2[1], c2 = i2[2], l3 = i2[3], h2 = e2.shape[0], f2 = r2[0], p2 = r2[1], d2 = ur([h2, f2, p2, l3], t3.dtype), v2 = this.readSync(e2.dataId), m2 = this.readSync(n2.dataId), g2 = this.readSync(t3.dataId), y2 = t3.strides, x2 = d2.strides, b2 = 0; b2 < h2; b2++) {
          var w2 = 4 * b2, C2 = v2[w2], E2 = v2[w2 + 1], R2 = v2[w2 + 2], I2 = v2[w2 + 3], k2 = m2[b2];
          if (!(k2 >= u2))
            for (var S2 = f2 > 1 ? (R2 - C2) * (s2 - 1) / (f2 - 1) : 0, A2 = p2 > 1 ? (I2 - E2) * (c2 - 1) / (p2 - 1) : 0, D2 = 0; D2 < f2; D2++) {
              var T2 = f2 > 1 ? C2 * (s2 - 1) + D2 * S2 : 0.5 * (C2 + R2) * (s2 - 1);
              if (T2 < 0 || T2 > s2 - 1)
                for (var N2 = 0; N2 < p2; N2++)
                  for (var F2 = 0; F2 < l3; F2++) {
                    var O2 = F2 + N2 * x2[2] + D2 * x2[1] + b2 * x2[0];
                    d2.values[O2] = a2;
                  }
              else if ("bilinear" === o3) {
                var _2 = Math.floor(T2), M2 = Math.ceil(T2), B2 = T2 - _2;
                for (N2 = 0; N2 < p2; N2++) {
                  if ((q2 = p2 > 1 ? E2 * (c2 - 1) + N2 * A2 : 0.5 * (E2 + I2) * (c2 - 1)) < 0 || q2 > c2 - 1)
                    for (F2 = 0; F2 < l3; F2++) {
                      O2 = F2 + N2 * x2[2] + D2 * x2[1] + b2 * x2[0];
                      d2.values[O2] = a2;
                    }
                  else {
                    var P2 = Math.floor(q2), L2 = Math.ceil(q2), W2 = q2 - P2;
                    for (F2 = 0; F2 < l3; F2++) {
                      var U2 = g2[O2 = F2 + P2 * y2[2] + _2 * y2[1] + k2 * y2[0]], V2 = g2[O2 = F2 + L2 * y2[2] + _2 * y2[1] + k2 * y2[0]], z2 = g2[O2 = F2 + P2 * y2[2] + M2 * y2[1] + k2 * y2[0]], G2 = U2 + (V2 - U2) * W2, H2 = z2 + (g2[O2 = F2 + L2 * y2[2] + M2 * y2[1] + k2 * y2[0]] - z2) * W2;
                      O2 = F2 + N2 * x2[2] + D2 * x2[1] + b2 * x2[0], d2.values[O2] = G2 + (H2 - G2) * B2;
                    }
                  }
                }
              } else
                for (N2 = 0; N2 < p2; ++N2) {
                  var q2;
                  if ((q2 = p2 > 1 ? E2 * (c2 - 1) + N2 * A2 : 0.5 * (E2 + I2) * (c2 - 1)) < 0 || q2 > c2 - 1)
                    for (F2 = 0; F2 < l3; F2++) {
                      O2 = F2 + N2 * x2[2] + D2 * x2[1] + b2 * x2[0];
                      d2.values[O2] = a2;
                    }
                  else {
                    var K2 = Math.round(q2), j2 = Math.round(T2);
                    for (F2 = 0; F2 < l3; F2++) {
                      var X2 = F2 + K2 * y2[2] + j2 * y2[1] + k2 * y2[0], $2 = F2 + N2 * x2[2] + D2 * x2[1] + b2 * x2[0];
                      d2.values[$2] = g2[X2];
                    }
                  }
                }
            }
        }
        return d2.toTensor();
      }, o2.prototype.sparseToDense = function(t3, e2, n2, r2) {
        var o3 = Hr(0, t3, n2), a2 = o3.sliceRank, i2 = o3.numUpdates, u2 = o3.sliceSize, s2 = o3.strides, c2 = o3.outputSize;
        return this.scatter(t3, e2, n2, c2, u2, i2, a2, s2, r2, false);
      }, o2.prototype.gatherND = function(t3, e2) {
        var n2 = e2.shape, r2 = n2[n2.length - 1], o3 = Ur(t3, e2), a2 = o3[0], i2 = o3[1], u2 = o3[2], s2 = o3[3];
        if (0 === i2)
          return kn([], a2, t3.dtype);
        for (var c2 = new lt([i2, u2], t3.dtype), l3 = this.readSync(e2.dataId), h2 = this.readSync(t3.dataId), f2 = 0; f2 < i2; f2++) {
          for (var p2 = [], d2 = 0, v2 = 0; v2 < r2; v2++) {
            var m2 = l3[f2 * r2 + v2];
            d2 += m2 * s2[v2], p2.push(m2);
          }
          if (d2 < 0 || d2 >= t3.size / u2)
            throw new Error("Invalid indices: " + p2 + " does not index into " + t3.shape);
          for (var g2 = 0; g2 < u2; g2++)
            c2.values[f2 * u2 + g2] = h2[d2 * u2 + g2];
        }
        return c2.toTensor().reshape(a2);
      }, o2.prototype.scatterND = function(t3, e2, n2) {
        var r2 = Hr(0, t3, n2), o3 = r2.sliceRank, a2 = r2.numUpdates, i2 = r2.sliceSize, u2 = r2.strides, s2 = r2.outputSize, c2 = An(0);
        return this.scatter(t3, e2, n2, s2, i2, a2, o3, u2, c2, true);
      }, o2.prototype.fill = function(t3, e2, n2) {
        var r2 = F(n2 = n2 || z(e2), w(t3));
        return r2.fill(e2), Nt.makeTensor(r2, t3, n2, this);
      }, o2.prototype.onesLike = function(t3) {
        if ("string" === t3.dtype)
          throw new Error("onesLike is not supported for string tensors");
        return this.fill(t3.shape, 1, t3.dtype);
      }, o2.prototype.zerosLike = function(t3) {
        var e2 = F(t3.dtype, w(t3.shape));
        return this.makeOutput(e2, t3.shape, t3.dtype);
      }, o2.prototype.linspace = function(t3, e2, n2) {
        return Do(t3, e2, n2);
      }, o2.prototype.scatter = function(t3, e2, n2, r2, o3, a2, i2, u2, s2, c2) {
        var l3 = [r2 / o3, o3], h2 = this.readSync(t3.dataId), f2 = this.readSync(e2.dataId);
        if (0 === r2)
          return kn([], n2, e2.dtype);
        var p2 = new lt(l3, e2.dtype);
        p2.values.fill(this.readSync(s2.dataId)[0]);
        for (var d2 = 0; d2 < a2; d2++) {
          for (var v2 = [], m2 = 0, g2 = 0; g2 < i2; g2++) {
            var y2 = h2[d2 * i2 + g2];
            v2.push(y2), m2 += y2 * u2[g2];
          }
          if (m2 < 0 || m2 >= r2 / o3)
            throw new Error("Invalid indices: " + v2 + " does not index into " + n2);
          for (var x2 = 0; x2 < o3; x2++)
            c2 ? p2.values[m2 * o3 + x2] += f2[d2 * o3 + x2] : p2.values[m2 * o3 + x2] = 0 === e2.rank ? f2[0] : f2[d2 * o3 + x2];
        }
        return p2.toTensor().reshape(n2);
      }, o2;
    }(co);
    Nt.registerBackend("cpu", function() {
      return new Sh();
    }, 1), l({ kernelName: "Square", backendName: "cpu", kernelFunc: function(t2) {
      var e2 = t2.inputs, n2 = t2.backend, r2 = e2.x, o2 = n2;
      Ih(r2, "square");
      for (var a2 = o2.data.get(r2.dataId).values, i2 = new Float32Array(a2.length), u2 = 0; u2 < a2.length; ++u2) {
        var s2 = a2[u2];
        i2[u2] = s2 * s2;
      }
      return { dataId: o2.write(i2, r2.shape, r2.dtype), shape: r2.shape, dtype: r2.dtype };
    } }), l({ kernelName: "Square", backendName: "webgl", kernelFunc: function(t2) {
      var e2 = t2.inputs, n2 = t2.backend, r2 = e2.x, o2 = n2, a2 = new su(r2.shape, "return x * x;");
      return o2.runWebGLProgram(a2, [r2], r2.dtype);
    } });
    Ah = function() {
      function t2() {
      }
      return t2.prototype.fetch = function(t3, e2) {
        return fetch(t3, e2);
      }, t2.prototype.now = function() {
        return performance.now();
      }, t2.prototype.encode = function(t3, e2) {
        if ("utf-8" !== e2 && "utf8" !== e2)
          throw new Error("Browser's encoder only supports utf-8, but got " + e2);
        return null == this.textEncoder && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t3);
      }, t2.prototype.decode = function(t3, e2) {
        return new TextDecoder(e2).decode(t3);
      }, t2;
    }();
    a().get("IS_BROWSER") && a().setPlatform("browser", new Ah());
    Th = function() {
      return require_node_fetch();
    };
    Nh = function() {
      function t2() {
        this.util = require_util(), this.textEncoder = new this.util.TextEncoder();
      }
      return t2.prototype.fetch = function(t3, e2) {
        return null != a().global.fetch ? a().global.fetch(t3, e2) : (null == Dh && (Dh = Th()), Dh(t3, e2));
      }, t2.prototype.now = function() {
        var t3 = process.hrtime();
        return 1e3 * t3[0] + t3[1] / 1e6;
      }, t2.prototype.encode = function(t3, e2) {
        if ("utf-8" !== e2 && "utf8" !== e2)
          throw new Error("Node built-in encoder only supports utf-8, but got " + e2);
        return this.textEncoder.encode(t3);
      }, t2.prototype.decode = function(t3, e2) {
        return 0 === t3.length ? "" : new this.util.TextDecoder(e2).decode(t3);
      }, t2;
    }();
    a().get("IS_NODE") && a().setPlatform("node", new Nh());
    Fh = { float32: 4, int32: 4, uint16: 2, uint8: 1, bool: 1 };
    Oh = 4;
    Bh = "undefined" != typeof Buffer && ("undefined" == typeof Blob || "undefined" == typeof atob || "undefined" == typeof btoa);
    Vh = function() {
      function t2() {
        this.saveRouters = [], this.loadRouters = [];
      }
      return t2.getInstance = function() {
        return null == t2.instance && (t2.instance = new t2()), t2.instance;
      }, t2.registerSaveRouter = function(e2) {
        t2.getInstance().saveRouters.push(e2);
      }, t2.registerLoadRouter = function(e2) {
        t2.getInstance().loadRouters.push(e2);
      }, t2.getSaveHandlers = function(e2) {
        return t2.getHandlers(e2, "save");
      }, t2.getLoadHandlers = function(e2, n2) {
        return t2.getHandlers(e2, "load", n2);
      }, t2.getHandlers = function(e2, n2, r2) {
        var o2 = [];
        return ("load" === n2 ? t2.getInstance().loadRouters : t2.getInstance().saveRouters).forEach(function(t3) {
          var n3 = t3(e2, r2);
          null !== n3 && o2.push(n3);
        }), o2;
      }, t2;
    }();
    zh = "://";
    Gh = function() {
      function t2() {
        this.managers = {};
      }
      return t2.getInstance = function() {
        return null == t2.instance && (t2.instance = new t2()), t2.instance;
      }, t2.registerManager = function(e2, n2) {
        g(null != e2, function() {
          return "scheme must not be undefined or null.";
        }), e2.endsWith(zh) && (e2 = e2.slice(0, e2.indexOf(zh))), g(e2.length > 0, function() {
          return "scheme must not be an empty string.";
        });
        var r2 = t2.getInstance();
        g(null == r2.managers[e2], function() {
          return "A model store manager is already registered for scheme '" + e2 + "'.";
        }), r2.managers[e2] = n2;
      }, t2.getManager = function(t3) {
        var e2 = this.getInstance().managers[t3];
        if (null == e2)
          throw new Error("Cannot find model manager for scheme '" + t3 + "'");
        return e2;
      }, t2.getSchemes = function() {
        return Object.keys(this.getInstance().managers);
      }, t2;
    }();
    Kh = "models_store";
    jh = "model_info_store";
    Yh = function() {
      function t2(t3) {
        if (this.indexedDB = Xh(), null == t3 || !t3)
          throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
        this.modelPath = t3;
      }
      return t2.prototype.save = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(e2) {
            if (t3.modelTopology instanceof ArrayBuffer)
              throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
            return [2, this.databaseAction(this.modelPath, t3)];
          });
        });
      }, t2.prototype.load = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            return [2, this.databaseAction(this.modelPath)];
          });
        });
      }, t2.prototype.databaseAction = function(t3, e2) {
        var n2 = this;
        return new Promise(function(t4, r2) {
          var o2 = n2.indexedDB.open("tensorflowjs", 1);
          o2.onupgradeneeded = function() {
            return $h(o2);
          }, o2.onsuccess = function() {
            var a2 = o2.result;
            if (null == e2) {
              var i2 = a2.transaction(Kh, "readonly"), u2 = i2.objectStore(Kh).get(n2.modelPath);
              u2.onsuccess = function() {
                if (null == u2.result)
                  return a2.close(), r2(new Error("Cannot find model with path '" + n2.modelPath + "' in IndexedDB."));
                t4(u2.result.modelArtifacts);
              }, u2.onerror = function(t5) {
                return a2.close(), r2(u2.error);
              }, i2.oncomplete = function() {
                return a2.close();
              };
            } else {
              var s2, c2 = Uh(e2), l3 = a2.transaction(jh, "readwrite"), h2 = l3.objectStore(jh), f2 = h2.put({ modelPath: n2.modelPath, modelArtifactsInfo: c2 });
              f2.onsuccess = function() {
                var o3 = (s2 = a2.transaction(Kh, "readwrite")).objectStore(Kh).put({ modelPath: n2.modelPath, modelArtifacts: e2, modelArtifactsInfo: c2 });
                o3.onsuccess = function() {
                  return t4({ modelArtifactsInfo: c2 });
                }, o3.onerror = function(t5) {
                  var e3 = (h2 = l3.objectStore(jh)).delete(n2.modelPath);
                  e3.onsuccess = function() {
                    return a2.close(), r2(o3.error);
                  }, e3.onerror = function(t6) {
                    return a2.close(), r2(o3.error);
                  };
                };
              }, f2.onerror = function(t5) {
                return a2.close(), r2(f2.error);
              }, l3.oncomplete = function() {
                null == s2 ? a2.close() : s2.oncomplete = function() {
                  return a2.close();
                };
              };
            }
          }, o2.onerror = function(t5) {
            return r2(o2.error);
          };
        });
      }, t2.URL_SCHEME = "indexeddb://", t2;
    }();
    Qh = function(t2) {
      return a().getBool("IS_BROWSER") && !Array.isArray(t2) && t2.startsWith(Yh.URL_SCHEME) ? (e2 = t2.slice(Yh.URL_SCHEME.length), new Yh(e2)) : null;
      var e2;
    };
    Vh.registerSaveRouter(Qh), Vh.registerLoadRouter(Qh);
    Jh = function() {
      function t2() {
        this.indexedDB = Xh();
      }
      return t2.prototype.listModels = function() {
        return n(this, void 0, void 0, function() {
          var t3 = this;
          return r(this, function(e2) {
            return [2, new Promise(function(e3, n2) {
              var r2 = t3.indexedDB.open("tensorflowjs", 1);
              r2.onupgradeneeded = function() {
                return $h(r2);
              }, r2.onsuccess = function() {
                var t4 = r2.result, o2 = t4.transaction(jh, "readonly"), a2 = o2.objectStore(jh).getAll();
                a2.onsuccess = function() {
                  for (var t5 = {}, n3 = 0, r3 = a2.result; n3 < r3.length; n3++) {
                    var o3 = r3[n3];
                    t5[o3.modelPath] = o3.modelArtifactsInfo;
                  }
                  e3(t5);
                }, a2.onerror = function(e4) {
                  return t4.close(), n2(a2.error);
                }, o2.oncomplete = function() {
                  return t4.close();
                };
              }, r2.onerror = function(t4) {
                return n2(r2.error);
              };
            })];
          });
        });
      }, t2.prototype.removeModel = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2 = this;
          return r(this, function(n2) {
            var r2;
            return t3 = (r2 = t3).startsWith(Yh.URL_SCHEME) ? r2.slice(Yh.URL_SCHEME.length) : r2, [2, new Promise(function(n3, r3) {
              var o2 = e2.indexedDB.open("tensorflowjs", 1);
              o2.onupgradeneeded = function() {
                return $h(o2);
              }, o2.onsuccess = function() {
                var e3, a2 = o2.result, i2 = a2.transaction(jh, "readwrite"), u2 = i2.objectStore(jh), s2 = u2.get(t3);
                s2.onsuccess = function() {
                  if (null == s2.result)
                    return a2.close(), r3(new Error("Cannot find model with path '" + t3 + "' in IndexedDB."));
                  var o3 = u2.delete(t3), i3 = function() {
                    var o4 = (e3 = a2.transaction(Kh, "readwrite")).objectStore(Kh).delete(t3);
                    o4.onsuccess = function() {
                      return n3(s2.result.modelArtifactsInfo);
                    }, o4.onerror = function(t4) {
                      return r3(s2.error);
                    };
                  };
                  o3.onsuccess = i3, o3.onerror = function(t4) {
                    return i3(), a2.close(), r3(s2.error);
                  };
                }, s2.onerror = function(t4) {
                  return a2.close(), r3(s2.error);
                }, i2.oncomplete = function() {
                  null == e3 ? a2.close() : e3.oncomplete = function() {
                    return a2.close();
                  };
                };
              }, o2.onerror = function(t4) {
                return r3(o2.error);
              };
            })];
          });
        });
      }, t2;
    }();
    if (a().getBool("IS_BROWSER"))
      try {
        Gh.registerManager(Yh.URL_SCHEME, new Jh());
      } catch (t2) {
      }
    Zh = "/";
    tf = "tensorflowjs_models";
    ef = "info";
    nf = "model_topology";
    rf = "weight_specs";
    of = "weight_data";
    af = "model_metadata";
    cf = function() {
      function t2(t3) {
        if (!a().getBool("IS_BROWSER") || void 0 === window.localStorage)
          throw new Error("The current environment does not support local storage.");
        if (this.LS = window.localStorage, null == t3 || !t3)
          throw new Error("For local storage, modelPath must not be null, undefined or empty.");
        this.modelPath = t3, this.keys = uf(this.modelPath);
      }
      return t2.prototype.save = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2, o2;
          return r(this, function(r2) {
            if (t3.modelTopology instanceof ArrayBuffer)
              throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
            e2 = JSON.stringify(t3.modelTopology), n2 = JSON.stringify(t3.weightSpecs), o2 = Uh(t3);
            try {
              return this.LS.setItem(this.keys.info, JSON.stringify(o2)), this.LS.setItem(this.keys.topology, e2), this.LS.setItem(this.keys.weightSpecs, n2), this.LS.setItem(this.keys.weightData, (a2 = t3.weightData, Bh ? Buffer.from(a2).toString("base64") : btoa(String.fromCharCode.apply(null, new Uint8Array(a2))))), this.LS.setItem(this.keys.modelMetadata, JSON.stringify({ format: t3.format, generatedBy: t3.generatedBy, convertedBy: t3.convertedBy })), [2, { modelArtifactsInfo: o2 }];
            } catch (t4) {
              throw this.LS.removeItem(this.keys.info), this.LS.removeItem(this.keys.topology), this.LS.removeItem(this.keys.weightSpecs), this.LS.removeItem(this.keys.weightData), this.LS.removeItem(this.keys.modelMetadata), new Error("Failed to save model '" + this.modelPath + "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" + o2.modelTopologyBytes + ", weightSpecsBytes=" + o2.weightSpecsBytes + ", weightDataBytes=" + o2.weightDataBytes + ".");
            }
            var a2;
            return [2];
          });
        });
      }, t2.prototype.load = function() {
        return n(this, void 0, void 0, function() {
          var t3, e2, n2, o2, a2, i2, u2;
          return r(this, function(r2) {
            if (null == (t3 = JSON.parse(this.LS.getItem(this.keys.info))))
              throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
            if ("JSON" !== t3.modelTopologyType)
              throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
            if (e2 = {}, null == (n2 = JSON.parse(this.LS.getItem(this.keys.topology))))
              throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");
            if (e2.modelTopology = n2, null == (o2 = JSON.parse(this.LS.getItem(this.keys.weightSpecs))))
              throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");
            if (e2.weightSpecs = o2, null != (a2 = this.LS.getItem(this.keys.modelMetadata)) && (i2 = JSON.parse(a2), e2.format = i2.format, e2.generatedBy = i2.generatedBy, e2.convertedBy = i2.convertedBy), null == (u2 = this.LS.getItem(this.keys.weightData)))
              throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");
            return e2.weightData = function(t4) {
              if (Bh) {
                var e3 = Buffer.from(t4, "base64");
                return e3.buffer.slice(e3.byteOffset, e3.byteOffset + e3.byteLength);
              }
              for (var n3 = atob(t4), r3 = new Uint8Array(n3.length), o3 = 0; o3 < n3.length; ++o3)
                r3.set([n3.charCodeAt(o3)], o3);
              return r3.buffer;
            }(u2), [2, e2];
          });
        });
      }, t2.URL_SCHEME = "localstorage://", t2;
    }();
    lf = function(t2) {
      return a().getBool("IS_BROWSER") && !Array.isArray(t2) && t2.startsWith(cf.URL_SCHEME) ? (e2 = t2.slice(cf.URL_SCHEME.length), new cf(e2)) : null;
      var e2;
    };
    Vh.registerSaveRouter(lf), Vh.registerLoadRouter(lf);
    hf = function() {
      function t2() {
        g(a().getBool("IS_BROWSER"), function() {
          return "Current environment is not a web browser";
        }), g(void 0 !== window.localStorage, function() {
          return "Current browser does not appear to support localStorage";
        }), this.LS = window.localStorage;
      }
      return t2.prototype.listModels = function() {
        return n(this, void 0, void 0, function() {
          var t3, e2, n2, o2, a2, i2;
          return r(this, function(r2) {
            for (t3 = {}, e2 = tf + Zh, n2 = Zh + ef, o2 = 0; o2 < this.LS.length; ++o2)
              (a2 = this.LS.key(o2)).startsWith(e2) && a2.endsWith(n2) && (i2 = sf(a2), t3[i2] = JSON.parse(this.LS.getItem(a2)));
            return [2, t3];
          });
        });
      }, t2.prototype.removeModel = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2;
          return r(this, function(r2) {
            var o2;
            if (t3 = (o2 = t3).startsWith(cf.URL_SCHEME) ? o2.slice(cf.URL_SCHEME.length) : o2, e2 = uf(t3), null == this.LS.getItem(e2.info))
              throw new Error("Cannot find model at path '" + t3 + "'");
            return n2 = JSON.parse(this.LS.getItem(e2.info)), this.LS.removeItem(e2.info), this.LS.removeItem(e2.topology), this.LS.removeItem(e2.weightSpecs), this.LS.removeItem(e2.weightData), [2, n2];
          });
        });
      }, t2;
    }();
    if (a().getBool("IS_BROWSER"))
      try {
        Gh.registerManager(cf.URL_SCHEME, new hf());
      } catch (t2) {
      }
    ff = "model";
    pf = ".json";
    df = ".weights.bin";
    mf = function() {
      function t2(e2) {
        if (!a().getBool("IS_BROWSER"))
          throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
        e2.startsWith(t2.URL_SCHEME) && (e2 = e2.slice(t2.URL_SCHEME.length)), null != e2 && 0 !== e2.length || (e2 = ff), this.modelTopologyFileName = e2 + pf, this.weightDataFileName = e2 + df;
      }
      return t2.prototype.save = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2, o2, a2, i2, u2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                if ("undefined" == typeof document)
                  throw new Error("Browser downloads are not supported in this environment since `document` is not present");
                if (e2 = window.URL.createObjectURL(new Blob([t3.weightData], { type: "application/octet-stream" })), !(t3.modelTopology instanceof ArrayBuffer))
                  return [3, 1];
                throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
              case 1:
                return n2 = [{ paths: ["./" + this.weightDataFileName], weights: t3.weightSpecs }], o2 = { modelTopology: t3.modelTopology, format: t3.format, generatedBy: t3.generatedBy, convertedBy: t3.convertedBy, weightsManifest: n2 }, a2 = window.URL.createObjectURL(new Blob([JSON.stringify(o2)], { type: "application/json" })), (i2 = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName, i2.href = a2, [4, vf(function() {
                  return i2.dispatchEvent(new MouseEvent("click"));
                })];
              case 2:
                return r2.sent(), null == t3.weightData ? [3, 4] : ((u2 = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName, u2.href = e2, [4, vf(function() {
                  return u2.dispatchEvent(new MouseEvent("click"));
                })]);
              case 3:
                r2.sent(), r2.label = 4;
              case 4:
                return [2, { modelArtifactsInfo: Uh(t3) }];
            }
          });
        });
      }, t2.URL_SCHEME = "downloads://", t2;
    }();
    gf = function() {
      function t2(t3) {
        if (null == t3 || t3.length < 1)
          throw new Error("When calling browserFiles, at least 1 file is required, but received " + t3);
        this.files = t3;
      }
      return t2.prototype.load = function() {
        return n(this, void 0, void 0, function() {
          var t3, e2, n2 = this;
          return r(this, function(r2) {
            return t3 = this.files[0], e2 = this.files.slice(1), [2, new Promise(function(r3, o2) {
              var a2 = new FileReader();
              a2.onload = function(a3) {
                var i2 = JSON.parse(a3.target.result), u2 = i2.modelTopology;
                if (null != u2) {
                  0 === e2.length && r3({ modelTopology: u2 });
                  var s2 = i2.weightsManifest;
                  if (null != s2) {
                    var c2;
                    try {
                      c2 = n2.checkManifestAndWeightFiles(s2, e2);
                    } catch (t4) {
                      return void o2(t4);
                    }
                    var l3 = [], h2 = [], f2 = [];
                    s2.forEach(function(t4) {
                      t4.paths.forEach(function(t5) {
                        h2.push(t5), f2.push(null);
                      }), l3.push.apply(l3, t4.weights);
                    }), s2.forEach(function(t4) {
                      t4.paths.forEach(function(t5) {
                        var e3 = new FileReader();
                        e3.onload = function(e4) {
                          var n3 = e4.target.result, o3 = h2.indexOf(t5);
                          f2[o3] = n3, -1 === f2.indexOf(null) && r3({ modelTopology: u2, weightSpecs: l3, weightData: Lh(f2) });
                        }, e3.onerror = function(e4) {
                          return o2("Failed to weights data from file of path '" + t5 + "'.");
                        }, e3.readAsArrayBuffer(c2[t5]);
                      });
                    });
                  } else
                    o2(new Error("weightManifest field is missing from file " + t3.name));
                } else
                  o2(new Error("modelTopology field is missing from file " + t3.name));
              }, a2.onerror = function(e3) {
                return o2("Failed to read model topology and weights manifest JSON from file '" + t3.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
              }, a2.readAsText(t3);
            })];
          });
        });
      }, t2.prototype.checkManifestAndWeightFiles = function(t3, e2) {
        for (var n2 = [], r2 = e2.map(function(t4) {
          return Wh(t4.name);
        }), o2 = {}, a2 = 0, i2 = t3; a2 < i2.length; a2++) {
          i2[a2].paths.forEach(function(t4) {
            var a3 = Wh(t4);
            if (-1 !== n2.indexOf(a3))
              throw new Error("Duplicate file basename found in weights manifest: '" + a3 + "'");
            if (n2.push(a3), -1 === r2.indexOf(a3))
              throw new Error("Weight file with basename '" + a3 + "' is not provided.");
            o2[t4] = e2[r2.indexOf(a3)];
          });
        }
        if (n2.length !== e2.length)
          throw new Error("Mismatch in the number of files in weights manifest (" + n2.length + ") and the number of weight files provided (" + e2.length + ").");
        return o2;
      }, t2;
    }();
    Vh.registerSaveRouter(function(t2) {
      return a().getBool("IS_BROWSER") && !Array.isArray(t2) && t2.startsWith(mf.URL_SCHEME) ? (e2 = t2.slice(mf.URL_SCHEME.length), void 0 === e2 && (e2 = "model"), new mf(e2)) : null;
      var e2;
    });
    wf = function() {
      function t2(t3, e2) {
        if (this.DEFAULT_METHOD = "POST", null == e2 && (e2 = {}), this.weightPathPrefix = e2.weightPathPrefix, this.onProgress = e2.onProgress, null != e2.fetchFunc ? (g("function" == typeof e2.fetchFunc, function() {
          return "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)";
        }), this.fetch = e2.fetchFunc) : this.fetch = a().platform.fetch, g(null != t3 && t3.length > 0, function() {
          return "URL path for http must not be null, undefined or empty.";
        }), Array.isArray(t3) && g(2 === t3.length, function() {
          return "URL paths for http must have a length of 2, (actual length is " + t3.length + ").";
        }), this.path = t3, null != e2.requestInit && null != e2.requestInit.body)
          throw new Error("requestInit is expected to have no pre-existing body, but has one.");
        this.requestInit = e2.requestInit || {};
      }
      return t2.prototype.save = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2, o2, a2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                if (t3.modelTopology instanceof ArrayBuffer)
                  throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
                return (e2 = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit)).body = new FormData(), n2 = [{ paths: ["./model.weights.bin"], weights: t3.weightSpecs }], o2 = { modelTopology: t3.modelTopology, format: t3.format, generatedBy: t3.generatedBy, convertedBy: t3.convertedBy, userDefinedMetadata: t3.userDefinedMetadata, weightsManifest: n2 }, e2.body.append("model.json", new Blob([JSON.stringify(o2)], { type: "application/json" }), "model.json"), null != t3.weightData && e2.body.append("model.weights.bin", new Blob([t3.weightData], { type: "application/octet-stream" }), "model.weights.bin"), [4, this.fetch(this.path, e2)];
              case 1:
                if ((a2 = r2.sent()).ok)
                  return [2, { modelArtifactsInfo: Uh(t3), responses: [a2] }];
                throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + a2.status + ".");
            }
          });
        });
      }, t2.prototype.load = function() {
        return n(this, void 0, void 0, function() {
          var t3, e2, n2, o2, a2, i2, u2, s2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                return [4, this.fetch(this.path, this.requestInit)];
              case 1:
                if (!(t3 = r2.sent()).ok)
                  throw new Error("Request to " + this.path + " failed with status code " + t3.status + ". Please verify this URL points to the model JSON of the model to load.");
                r2.label = 2;
              case 2:
                return r2.trys.push([2, 4, , 5]), [4, t3.json()];
              case 3:
                return e2 = r2.sent(), [3, 5];
              case 4:
                throw r2.sent(), n2 = "Failed to parse model JSON of response from " + this.path + ".", this.path.endsWith(".pb") ? n2 += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : n2 += " Please make sure the server is serving valid JSON for this request.", new Error(n2);
              case 5:
                if (o2 = e2.modelTopology, a2 = e2.weightsManifest, null == o2 && null == a2)
                  throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");
                return null == a2 ? [3, 7] : [4, this.loadWeights(a2)];
              case 6:
                s2 = r2.sent(), i2 = s2[0], u2 = s2[1], r2.label = 7;
              case 7:
                return [2, { modelTopology: o2, weightSpecs: i2, weightData: u2 }];
            }
          });
        });
      }, t2.prototype.loadWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2, o2, a2, i2, u2, s2, c2, l3, h2, f2;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                for (e2 = Array.isArray(this.path) ? this.path[1] : this.path, n2 = function(t4) {
                  var e3 = t4.lastIndexOf("/"), n3 = t4.lastIndexOf("?"), r3 = t4.substring(0, e3), o3 = n3 > e3 ? t4.substring(n3) : "";
                  return [r3 + "/", o3];
                }(e2), o2 = n2[0], a2 = n2[1], i2 = this.weightPathPrefix || o2, u2 = [], s2 = 0, c2 = t3; s2 < c2.length; s2++)
                  l3 = c2[s2], u2.push.apply(u2, l3.weights);
                return h2 = [], t3.forEach(function(t4) {
                  t4.paths.forEach(function(t5) {
                    h2.push(i2 + t5 + a2);
                  });
                }), [4, xf(h2, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress })];
              case 1:
                return f2 = r2.sent(), [2, [u2, Lh(f2)]];
            }
          });
        });
      }, t2.URL_SCHEME_REGEX = /^https?:\/\//, t2;
    }();
    Ef = function(t2, e2) {
      if ("undefined" == typeof fetch)
        return null;
      return (Array.isArray(t2) ? t2.every(function(t3) {
        return Cf(t3);
      }) : Cf(t2)) ? Rf(t2, { onProgress: e2 }) : null;
    };
    Vh.registerSaveRouter(Ef), Vh.registerLoadRouter(Ef);
    If = function() {
      function t2(t3) {
        this.modelArtifacts = t3;
      }
      return t2.prototype.load = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            return [2, this.modelArtifacts];
          });
        });
      }, t2;
    }();
    kf = function() {
      function t2(t3) {
        this.saveHandler = t3;
      }
      return t2.prototype.save = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(e2) {
            return [2, this.saveHandler(t3)];
          });
        });
      }, t2;
    }();
    Sf = Object.freeze({ browserFiles: function(t2) {
      return new gf(t2);
    }, browserHTTPRequest: function(t2, e2) {
      return Rf(t2, e2);
    }, concatenateArrayBuffers: Lh, decodeWeights: _h, encodeWeights: function(t2, e2) {
      return n(this, void 0, void 0, function() {
        var o2, a2, i2, u2, s2, c2 = this;
        return r(this, function(l3) {
          switch (l3.label) {
            case 0:
              for (o2 = [], a2 = [], i2 = Array.isArray(t2) ? t2.map(function(t3) {
                return t3.name;
              }) : Object.keys(t2), u2 = function(u3) {
                var s3 = i2[u3], l4 = Array.isArray(t2) ? t2[u3].tensor : t2[s3];
                if ("float32" !== l4.dtype && "int32" !== l4.dtype && "bool" !== l4.dtype && "string" !== l4.dtype)
                  throw new Error("Unsupported dtype in weight '" + s3 + "': " + l4.dtype);
                var h2 = { name: s3, shape: l4.shape, dtype: l4.dtype };
                if ("string" === l4.dtype) {
                  var f2 = new Promise(function(t3) {
                    return n(c2, void 0, void 0, function() {
                      var e3, n2, o3, a3, i3, u4, s4;
                      return r(this, function(r2) {
                        switch (r2.label) {
                          case 0:
                            return [4, l4.bytes()];
                          case 1:
                            for (e3 = r2.sent(), n2 = e3.reduce(function(t4, e4) {
                              return t4 + e4.length;
                            }, 0) + Oh * e3.length, o3 = new Uint8Array(n2), a3 = 0, i3 = 0; i3 < e3.length; i3++)
                              u4 = e3[i3], s4 = new Uint8Array(new Uint32Array([u4.length]).buffer), o3.set(s4, a3), a3 += Oh, o3.set(u4, a3), a3 += u4.length;
                            return t3(o3), [2];
                        }
                      });
                    });
                  });
                  a2.push(f2);
                } else
                  a2.push(l4.data());
                null != e2 && (h2.group = e2), o2.push(h2);
              }, s2 = 0; s2 < i2.length; ++s2)
                u2(s2);
              return [4, Promise.all(a2)];
            case 1:
              return [2, { data: Mh(l3.sent()), specs: o2 }];
          }
        });
      });
    }, fromMemory: function(t2, e2, n2, r2) {
      return 1 === arguments.length ? null != t2.modelTopology || null != t2.weightSpecs ? new If(t2) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new If({ modelTopology: t2 })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new If({ modelTopology: t2, weightSpecs: e2, weightData: n2, trainingConfig: r2 }));
    }, getLoadHandlers: function(t2, e2) {
      return Vh.getLoadHandlers(t2, e2);
    }, getModelArtifactsInfoForJSON: Uh, getSaveHandlers: function(t2) {
      return Vh.getSaveHandlers(t2);
    }, http: Rf, isHTTPScheme: Cf, loadWeights: function(t2, e2, o2, a2) {
      return void 0 === e2 && (e2 = ""), n(this, void 0, void 0, function() {
        return r(this, function(n2) {
          return [2, bf(function(t3) {
            return xf(t3, { requestInit: a2 });
          })(t2, e2, o2)];
        });
      });
    }, registerLoadRouter: function(t2) {
      return Vh.registerLoadRouter(t2);
    }, registerSaveRouter: function(t2) {
      return Vh.registerSaveRouter(t2);
    }, weightsLoaderFactory: bf, withSaveHandler: function(t2) {
      return new kf(t2);
    }, copyModel: function(t2, e2) {
      return n(this, void 0, void 0, function() {
        return r(this, function(n2) {
          return [2, qh(t2, e2, false)];
        });
      });
    }, listModels: function() {
      return n(this, void 0, void 0, function() {
        var t2, e2, n2, o2, a2, i2, u2;
        return r(this, function(r2) {
          switch (r2.label) {
            case 0:
              t2 = Gh.getSchemes(), e2 = {}, n2 = 0, o2 = t2, r2.label = 1;
            case 1:
              return n2 < o2.length ? (a2 = o2[n2], [4, Gh.getManager(a2).listModels()]) : [3, 4];
            case 2:
              for (u2 in i2 = r2.sent())
                e2[a2 + zh + u2] = i2[u2];
              r2.label = 3;
            case 3:
              return n2++, [3, 1];
            case 4:
              return [2, e2];
          }
        });
      });
    }, moveModel: function(t2, e2) {
      return n(this, void 0, void 0, function() {
        return r(this, function(n2) {
          return [2, qh(t2, e2, true)];
        });
      });
    }, removeModel: function(t2) {
      return n(this, void 0, void 0, function() {
        var e2;
        return r(this, function(n2) {
          return e2 = Hh(t2), [2, Gh.getManager(e2.scheme).removeModel(e2.path)];
        });
      });
    } });
    Af = Cn({ confusionMatrix_: function(t2, e2, n2) {
      var r2 = ln(t2, "labels", "confusionMatrix"), o2 = ln(e2, "predictions", "confusionMatrix");
      g(null == n2 || n2 > 0 && Number.isInteger(n2), function() {
        return "If provided, numClasses must be a positive integer, but got " + n2;
      }), g(1 === r2.rank, function() {
        return "Expected the rank of labels to be 1, but got " + r2.rank;
      }), g(1 === o2.rank, function() {
        return "Expected the rank of predictions to be 1, but got " + o2.rank;
      }), g(r2.shape[0] === o2.shape[0], function() {
        return "Mismatch in the number of examples: " + r2.shape[0] + " vs. " + o2.shape[0] + ". Labels and predictions should have the same number of elements.";
      }), g(n2 > 0 && Number.isInteger(n2), function() {
        return "numClasses is required to be a positive integer, but got " + n2;
      });
      var a2 = gr(r2.asType("int32"), n2), i2 = gr(o2.asType("int32"), n2);
      return a2.transpose().matMul(i2).asType("int32");
    } });
    Df = Object.freeze({ confusionMatrix: Af });
    Tf = Cn({ fromPixels_: function(t2, e2) {
      if (void 0 === e2 && (e2 = 3), e2 > 4)
        throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
      var n2 = "undefined" != typeof HTMLVideoElement && t2 instanceof HTMLVideoElement;
      if (n2 && n2 && t2.readyState < 2)
        throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");
      return Nt.fromPixels(t2, e2);
    } });
    Nf = Object.freeze({ toPixels: function(t2, e2) {
      return n(this, void 0, void 0, function() {
        var n2, o2, a2, i2, u2, s2, c2, l3, h2, f2, p2, d2, v2, m2, g2, y2, x2, b2, w2, C2, E2, R2, I2;
        return r(this, function(r2) {
          switch (r2.label) {
            case 0:
              if (n2 = ln(t2, "img", "toPixels"), t2 instanceof dt || (n2 = n2.toInt()), 2 !== n2.rank && 3 !== n2.rank)
                throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + n2.rank + ".");
              if (o2 = n2.shape.slice(0, 2), a2 = o2[0], i2 = o2[1], (u2 = 2 === n2.rank ? 1 : n2.shape[2]) > 4 || 2 === u2)
                throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + u2);
              return [4, n2.data()];
            case 1:
              return s2 = r2.sent(), c2 = n2.min(), l3 = n2.max(), [4, Promise.all([c2.data(), l3.data()])];
            case 2:
              if (h2 = r2.sent(), f2 = h2[0], p2 = h2[1], d2 = f2[0], v2 = p2[0], c2.dispose(), l3.dispose(), "float32" === n2.dtype) {
                if (d2 < 0 || v2 > 1)
                  throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + d2 + " - " + v2 + "].");
              } else {
                if ("int32" !== n2.dtype)
                  throw new Error("Unsupported type for toPixels: " + n2.dtype + ". Please use float32 or int32 tensors.");
                if (d2 < 0 || v2 > 255)
                  throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + d2 + " - " + v2 + "].");
              }
              for (m2 = "float32" === n2.dtype ? 255 : 1, g2 = new Uint8ClampedArray(i2 * a2 * 4), y2 = 0; y2 < a2 * i2; ++y2)
                x2 = void 0, b2 = void 0, w2 = void 0, C2 = void 0, 1 === u2 ? (x2 = s2[y2] * m2, b2 = s2[y2] * m2, w2 = s2[y2] * m2, C2 = 255) : 3 === u2 ? (x2 = s2[3 * y2] * m2, b2 = s2[3 * y2 + 1] * m2, w2 = s2[3 * y2 + 2] * m2, C2 = 255) : 4 === u2 && (x2 = s2[4 * y2] * m2, b2 = s2[4 * y2 + 1] * m2, w2 = s2[4 * y2 + 2] * m2, C2 = s2[4 * y2 + 3] * m2), g2[0 + (E2 = 4 * y2)] = Math.round(x2), g2[E2 + 1] = Math.round(b2), g2[E2 + 2] = Math.round(w2), g2[E2 + 3] = Math.round(C2);
              return null != e2 && (e2.width = i2, e2.height = a2, R2 = e2.getContext("2d"), I2 = new ImageData(g2, i2, a2), R2.putImageData(I2, 0, 0)), n2 !== t2 && n2.dispose(), [2, g2];
          }
        });
      });
    }, fromPixels: Tf });
    Ff = function() {
      function t2() {
      }
      return t2.prototype.getClassName = function() {
        return this.constructor.className;
      }, t2.fromConfig = function(t3, e2) {
        return new t3(e2);
      }, t2;
    }();
    Of = function() {
      function t2() {
        this.classNameMap = {};
      }
      return t2.getMap = function() {
        return null == t2.instance && (t2.instance = new t2()), t2.instance;
      }, t2.register = function(e2) {
        t2.getMap().classNameMap[e2.className] = [e2, e2.fromConfig];
      }, t2;
    }();
    Mf = Object.freeze({ Serializable: Ff, SerializationMap: Of, registerClass: _f });
    Bf = 1e-3;
    Pf = 0.1;
    Vf = Object.freeze({ TEST_EPSILON_FLOAT16: Pf, expectArraysClose: function(t2, e2, n2) {
      return null == n2 && (n2 = Lf()), Wf(t2, e2, function(t3, e3) {
        return Uf(t3, e3, n2);
      });
    }, testEpsilon: Lf, expectPromiseToFail: function(t2, e2) {
      t2().then(function() {
        return e2.fail();
      }, function() {
        return e2();
      });
    }, expectArraysEqual: function(t2, e2) {
      var n2 = "string" == typeof e2 || "number" == typeof e2 || "boolean" == typeof e2 ? [e2] : e2;
      return W(t2) || W(t2[0]) || W(e2) || W(e2[0]) ? Wf(t2, n2, function(t3, e3) {
        return t3 == e3;
      }) : Wf(t2, e2, function(t3, e3) {
        return Uf(t3, e3, 0);
      });
    }, expectNumbersClose: function(t2, e2, n2) {
      if (null == n2 && (n2 = Lf()), !Uf(t2, e2, n2))
        throw new Error("Numbers differ: actual === " + t2 + ", expected === " + e2);
    }, expectValuesInRange: function(t2, e2, n2) {
      for (var r2 = 0; r2 < t2.length; r2++)
        if (t2[r2] < e2 || t2[r2] > n2)
          throw new Error("Value out of range:" + t2[r2] + " low: " + e2 + ", high: " + n2);
    }, expectArrayBuffersEqual: function(t2, e2) {
      expect(new Float32Array(t2)).toEqual(new Float32Array(e2));
    } });
    zf = "1.3.1";
    Gf = Object.freeze({ gpgpu_util: wi, webgl_util: Pe, forceHalfFloat: function() {
      a().set("WEBGL_FORCE_F16_TEXTURES", true);
    }, MathBackendWebGL: Wu, setWebGLContext: Wt, GPGPUContext: Ci });
    Hf = function(t2) {
      function o2() {
        return null !== t2 && t2.apply(this, arguments) || this;
      }
      return e(o2, t2), o2.prototype.minimize = function(t3, e2, n2) {
        void 0 === e2 && (e2 = false);
        var r2 = this.computeGradients(t3, n2), o3 = r2.value, a2 = r2.grads;
        if (null != n2) {
          var i2 = n2.map(function(t4) {
            return { name: t4.name, tensor: a2[t4.name] };
          });
          this.applyGradients(i2);
        } else
          this.applyGradients(a2);
        return Xe(a2), e2 ? o3 : (o3.dispose(), null);
      }, Object.defineProperty(o2.prototype, "iterations", { get: function() {
        return null == this.iterations_ && (this.iterations_ = 0), this.iterations_;
      }, enumerable: true, configurable: true }), o2.prototype.incrementIterations = function() {
        this.iterations_ = this.iterations + 1;
      }, o2.prototype.computeGradients = function(t3, e2) {
        return ro(t3, e2);
      }, o2.prototype.dispose = function() {
        null != this.iterations_ && Xe(this.iterations_);
      }, o2.prototype.saveIterations = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            return null == this.iterations_ && (this.iterations_ = 0), [2, { name: "iter", tensor: An(this.iterations_, "int32") }];
          });
        });
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            throw new Error("getWeights() is not implemented for this optimizer yet.");
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(t4) {
            throw new Error("setWeights() is not implemented for this optimizer class " + this.getClassName());
          });
        });
      }, o2.prototype.extractIterations = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2;
          return r(this, function(n2) {
            switch (n2.label) {
              case 0:
                return e2 = this, [4, t3[0].tensor.data()];
              case 1:
                return e2.iterations_ = n2.sent()[0], [2, t3.slice(1)];
            }
          });
        });
      }, o2;
    }(Ff);
    Object.defineProperty(Hf, Symbol.hasInstance, { value: function(t2) {
      return null != t2.minimize && null != t2.computeGradients && null != t2.applyGradients;
    } });
    qf = function(t2) {
      function o2(e2, n2, r2) {
        void 0 === r2 && (r2 = null);
        var o3 = t2.call(this) || this;
        return o3.learningRate = e2, o3.rho = n2, o3.epsilon = r2, o3.accumulatedGrads = [], o3.accumulatedUpdates = [], null == r2 && (o3.epsilon = Nt.backend.epsilon()), o3;
      }
      return e(o2, t2), o2.prototype.applyGradients = function(t3) {
        var e2 = this;
        (Array.isArray(t3) ? t3.map(function(t4) {
          return t4.name;
        }) : Object.keys(t3)).forEach(function(n2, r2) {
          var o3 = Nt.registeredVariables[n2];
          null == e2.accumulatedGrads[r2] && (e2.accumulatedGrads[r2] = { originalName: n2 + "/accum_grad", variable: je(function() {
            return zn(o3).variable(false);
          }) }), null == e2.accumulatedUpdates[r2] && (e2.accumulatedUpdates[r2] = { originalName: n2 + "/accum_var", variable: je(function() {
            return zn(o3).variable(false);
          }) });
          var a2 = Array.isArray(t3) ? t3[r2].tensor : t3[n2];
          if (null != a2) {
            var i2 = e2.accumulatedGrads[r2].variable, u2 = e2.accumulatedUpdates[r2].variable;
            je(function() {
              var t4 = i2.mul(e2.rho).add(a2.square().mul(1 - e2.rho)), n3 = u2.add(e2.epsilon).sqrt().div(i2.add(e2.epsilon).sqrt()).mul(a2), r3 = u2.mul(e2.rho).add(n3.square().mul(1 - e2.rho));
              i2.assign(t4), u2.assign(r3);
              var s2 = n3.mul(-e2.learningRate).add(o3);
              o3.assign(s2);
            });
          }
        }), this.incrementIterations();
      }, o2.prototype.dispose = function() {
        null != this.accumulatedUpdates && (Xe(this.accumulatedGrads.map(function(t3) {
          return t3.variable;
        })), Xe(this.accumulatedUpdates.map(function(t3) {
          return t3.variable;
        })));
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          var t3;
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return t3 = this.accumulatedGrads.concat(this.accumulatedUpdates), [4, this.saveIterations()];
              case 1:
                return [2, [e2.sent()].concat(t3.map(function(t4) {
                  return { name: t4.originalName, tensor: t4.variable };
                }))];
            }
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2;
          return r(this, function(n2) {
            switch (n2.label) {
              case 0:
                return [4, this.extractIterations(t3)];
              case 1:
                return t3 = n2.sent(), e2 = t3.length / 2, false, this.accumulatedGrads = t3.slice(0, e2).map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), this.accumulatedUpdates = t3.slice(e2, 2 * e2).map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), [2];
            }
          });
        });
      }, o2.prototype.getConfig = function() {
        return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
      }, o2.fromConfig = function(t3, e2) {
        return new t3(e2.learningRate, e2.rho, e2.epsilon);
      }, o2.className = "Adadelta", o2;
    }(Hf);
    _f(qf);
    Kf = function(t2) {
      function o2(e2, n2) {
        void 0 === n2 && (n2 = 0.1);
        var r2 = t2.call(this) || this;
        return r2.learningRate = e2, r2.initialAccumulatorValue = n2, r2.accumulatedGrads = [], r2;
      }
      return e(o2, t2), o2.prototype.applyGradients = function(t3) {
        var e2 = this;
        (Array.isArray(t3) ? t3.map(function(t4) {
          return t4.name;
        }) : Object.keys(t3)).forEach(function(n2, r2) {
          var o3 = Nt.registeredVariables[n2];
          if (null == e2.accumulatedGrads[r2]) {
            e2.accumulatedGrads[r2] = { originalName: n2 + "/accumulator", variable: je(function() {
              return Ln(o3.shape, e2.initialAccumulatorValue).variable(false);
            }) };
          }
          var a2 = Array.isArray(t3) ? t3[r2].tensor : t3[n2];
          if (null != a2) {
            var i2 = e2.accumulatedGrads[r2].variable;
            je(function() {
              var t4 = i2.add(a2.square());
              i2.assign(t4);
              var n3 = a2.div(t4.add(Nt.backend.epsilon()).sqrt()).mul(-e2.learningRate).add(o3);
              o3.assign(n3);
            });
          }
        }), this.incrementIterations();
      }, o2.prototype.dispose = function() {
        null != this.accumulatedGrads && Xe(this.accumulatedGrads.map(function(t3) {
          return t3.variable;
        }));
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            switch (t3.label) {
              case 0:
                return [4, this.saveIterations()];
              case 1:
                return [2, [t3.sent()].concat(this.accumulatedGrads.map(function(t4) {
                  return { name: t4.originalName, tensor: t4.variable };
                }))];
            }
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return [4, this.extractIterations(t3)];
              case 1:
                return t3 = e2.sent(), false, this.accumulatedGrads = t3.map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), [2];
            }
          });
        });
      }, o2.prototype.getConfig = function() {
        return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
      }, o2.fromConfig = function(t3, e2) {
        return new t3(e2.learningRate, e2.initialAccumulatorValue);
      }, o2.className = "Adagrad", o2;
    }(Hf);
    _f(Kf);
    jf = function(t2) {
      function o2(e2, n2, r2, o3) {
        void 0 === o3 && (o3 = null);
        var a2 = t2.call(this) || this;
        return a2.learningRate = e2, a2.beta1 = n2, a2.beta2 = r2, a2.epsilon = o3, a2.accumulatedFirstMoment = [], a2.accumulatedSecondMoment = [], je(function() {
          a2.accBeta1 = An(n2).variable(), a2.accBeta2 = An(r2).variable();
        }), null == o3 && (a2.epsilon = Nt.backend.epsilon()), a2;
      }
      return e(o2, t2), o2.prototype.applyGradients = function(t3) {
        var e2 = this, n2 = Array.isArray(t3) ? t3.map(function(t4) {
          return t4.name;
        }) : Object.keys(t3);
        je(function() {
          var r2 = ic(1, e2.accBeta1), o3 = ic(1, e2.accBeta2);
          n2.forEach(function(n3, a2) {
            var i2 = Nt.registeredVariables[n3];
            null == e2.accumulatedFirstMoment[a2] && (e2.accumulatedFirstMoment[a2] = { originalName: n3 + "/m", variable: je(function() {
              return zn(i2).variable(false);
            }) }), null == e2.accumulatedSecondMoment[a2] && (e2.accumulatedSecondMoment[a2] = { originalName: n3 + "/v", variable: je(function() {
              return zn(i2).variable(false);
            }) });
            var u2 = Array.isArray(t3) ? t3[a2].tensor : t3[n3];
            if (null != u2) {
              var s2 = e2.accumulatedFirstMoment[a2].variable, c2 = e2.accumulatedSecondMoment[a2].variable, l3 = s2.mul(e2.beta1).add(u2.mul(1 - e2.beta1)), h2 = c2.mul(e2.beta2).add(u2.square().mul(1 - e2.beta2)), f2 = l3.div(r2), p2 = h2.div(o3);
              s2.assign(l3), c2.assign(h2);
              var d2 = f2.div(p2.sqrt().add(e2.epsilon)).mul(-e2.learningRate).add(i2);
              i2.assign(d2);
            }
          }), e2.accBeta1.assign(e2.accBeta1.mul(e2.beta1)), e2.accBeta2.assign(e2.accBeta2.mul(e2.beta2));
        }), this.incrementIterations();
      }, o2.prototype.dispose = function() {
        this.accBeta1.dispose(), this.accBeta2.dispose(), null != this.accumulatedFirstMoment && Xe(this.accumulatedFirstMoment.map(function(t3) {
          return t3.variable;
        })), null != this.accumulatedSecondMoment && Xe(this.accumulatedSecondMoment.map(function(t3) {
          return t3.variable;
        }));
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          var t3;
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return t3 = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment), [4, this.saveIterations()];
              case 1:
                return [2, [e2.sent()].concat(t3.map(function(t4) {
                  return { name: t4.originalName, tensor: t4.variable };
                }))];
            }
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2, n2 = this;
          return r(this, function(r2) {
            switch (r2.label) {
              case 0:
                return [4, this.extractIterations(t3)];
              case 1:
                return t3 = r2.sent(), je(function() {
                  n2.accBeta1.assign(nc(n2.beta1, n2.iterations_ + 1)), n2.accBeta2.assign(nc(n2.beta2, n2.iterations_ + 1));
                }), e2 = t3.length / 2, false, this.accumulatedFirstMoment = t3.slice(0, e2).map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), this.accumulatedSecondMoment = t3.slice(e2, 2 * e2).map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), [2];
            }
          });
        });
      }, o2.prototype.getConfig = function() {
        return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
      }, o2.fromConfig = function(t3, e2) {
        return new t3(e2.learningRate, e2.beta1, e2.beta2, e2.epsilon);
      }, o2.className = "Adam", o2;
    }(Hf);
    _f(jf);
    Xf = function(t2) {
      function o2(e2, n2, r2, o3, a2) {
        void 0 === o3 && (o3 = null), void 0 === a2 && (a2 = 0);
        var i2 = t2.call(this) || this;
        return i2.learningRate = e2, i2.beta1 = n2, i2.beta2 = r2, i2.epsilon = o3, i2.decay = a2, i2.accumulatedFirstMoment = [], i2.accumulatedWeightedInfNorm = [], je(function() {
          i2.iteration = An(0).variable(), i2.accBeta1 = An(n2).variable();
        }), null == o3 && (i2.epsilon = Nt.backend.epsilon()), i2;
      }
      return e(o2, t2), o2.prototype.applyGradients = function(t3) {
        var e2 = this, n2 = Array.isArray(t3) ? t3.map(function(t4) {
          return t4.name;
        }) : Object.keys(t3);
        je(function() {
          var r2 = ic(1, e2.accBeta1), o3 = qs(-e2.learningRate, e2.iteration.mul(e2.decay).add(1));
          n2.forEach(function(n3, a2) {
            var i2 = Nt.registeredVariables[n3];
            null == e2.accumulatedFirstMoment[a2] && (e2.accumulatedFirstMoment[a2] = { originalName: n3 + "/m", variable: zn(i2).variable(false) }), null == e2.accumulatedWeightedInfNorm[a2] && (e2.accumulatedWeightedInfNorm[a2] = { originalName: n3 + "/v", variable: zn(i2).variable(false) });
            var u2 = Array.isArray(t3) ? t3[a2].tensor : t3[n3];
            if (null != u2) {
              var s2 = e2.accumulatedFirstMoment[a2].variable, c2 = e2.accumulatedWeightedInfNorm[a2].variable, l3 = s2.mul(e2.beta1).add(u2.mul(1 - e2.beta1)), h2 = c2.mul(e2.beta2), f2 = u2.abs(), p2 = h2.maximum(f2);
              s2.assign(l3), c2.assign(p2);
              var d2 = o3.div(r2).mul(l3.div(p2.add(e2.epsilon))).add(i2);
              i2.assign(d2);
            }
          }), e2.iteration.assign(e2.iteration.add(1)), e2.accBeta1.assign(e2.accBeta1.mul(e2.beta1));
        }), this.incrementIterations();
      }, o2.prototype.dispose = function() {
        this.accBeta1.dispose(), this.iteration.dispose(), null != this.accumulatedFirstMoment && Xe(this.accumulatedFirstMoment.map(function(t3) {
          return t3.variable;
        })), null != this.accumulatedWeightedInfNorm && Xe(this.accumulatedWeightedInfNorm.map(function(t3) {
          return t3.variable;
        }));
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            throw new Error("getWeights() is not implemented for Adamax yet.");
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(t4) {
            throw new Error("setWeights() is not implemented for Adamax yet.");
          });
        });
      }, o2.prototype.getConfig = function() {
        return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
      }, o2.fromConfig = function(t3, e2) {
        return new t3(e2.learningRate, e2.beta1, e2.beta2, e2.epsilon, e2.decay);
      }, o2.className = "Adamax", o2;
    }(Hf);
    _f(Xf);
    $f = function(t2) {
      function o2(e2) {
        var n2 = t2.call(this) || this;
        return n2.learningRate = e2, n2.setLearningRate(e2), n2;
      }
      return e(o2, t2), o2.prototype.applyGradients = function(t3) {
        var e2 = this;
        (Array.isArray(t3) ? t3.map(function(t4) {
          return t4.name;
        }) : Object.keys(t3)).forEach(function(n2, r2) {
          var o3 = Array.isArray(t3) ? t3[r2].tensor : t3[n2];
          if (null != o3) {
            var a2 = Nt.registeredVariables[n2];
            je(function() {
              var t4 = e2.c.mul(o3).add(a2);
              a2.assign(t4);
            });
          }
        }), this.incrementIterations();
      }, o2.prototype.setLearningRate = function(t3) {
        this.learningRate = t3, null != this.c && this.c.dispose(), this.c = $e(An(-t3));
      }, o2.prototype.dispose = function() {
        this.c.dispose();
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            switch (t3.label) {
              case 0:
                return [4, this.saveIterations()];
              case 1:
                return [2, [t3.sent()]];
            }
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return [4, this.extractIterations(t3)];
              case 1:
                if (0 !== (t3 = e2.sent()).length)
                  throw new Error("SGD optimizer does not have settable weights.");
                return [2];
            }
          });
        });
      }, o2.prototype.getConfig = function() {
        return { learningRate: this.learningRate };
      }, o2.fromConfig = function(t3, e2) {
        return new t3(e2.learningRate);
      }, o2.className = "SGD", o2;
    }(Hf);
    _f($f);
    Yf = function(t2) {
      function o2(e2, n2, r2) {
        void 0 === r2 && (r2 = false);
        var o3 = t2.call(this, e2) || this;
        return o3.learningRate = e2, o3.momentum = n2, o3.useNesterov = r2, o3.accumulations = [], o3.m = An(o3.momentum), o3;
      }
      return e(o2, t2), o2.prototype.applyGradients = function(t3) {
        var e2 = this;
        (Array.isArray(t3) ? t3.map(function(t4) {
          return t4.name;
        }) : Object.keys(t3)).forEach(function(n2, r2) {
          var o3 = Nt.registeredVariables[n2];
          if (null == e2.accumulations[r2]) {
            e2.accumulations[r2] = { originalName: n2 + "/momentum", variable: je(function() {
              return zn(o3).variable(false);
            }) };
          }
          var a2 = e2.accumulations[r2].variable, i2 = Array.isArray(t3) ? t3[r2].tensor : t3[n2];
          null != i2 && je(function() {
            var t4, n3 = e2.m.mul(a2).add(i2);
            t4 = e2.useNesterov ? e2.c.mul(i2.add(n3.mul(e2.m))).add(o3) : e2.c.mul(n3).add(o3), a2.assign(n3), o3.assign(t4);
          });
        }), this.incrementIterations();
      }, o2.prototype.dispose = function() {
        this.m.dispose(), null != this.accumulations && Xe(this.accumulations.map(function(t3) {
          return t3.variable;
        }));
      }, o2.prototype.setMomentum = function(t3) {
        this.momentum = t3;
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          return r(this, function(t3) {
            switch (t3.label) {
              case 0:
                return [4, this.saveIterations()];
              case 1:
                return [2, [t3.sent()].concat(this.accumulations.map(function(t4) {
                  return { name: t4.originalName, tensor: t4.variable };
                }))];
            }
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return [4, this.extractIterations(t3)];
              case 1:
                return t3 = e2.sent(), false, this.accumulations = t3.map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), [2];
            }
          });
        });
      }, o2.prototype.getConfig = function() {
        return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
      }, o2.fromConfig = function(t3, e2) {
        return new t3(e2.learningRate, e2.momentum, e2.useNesterov);
      }, o2.className = "Momentum", o2;
    }($f);
    _f(Yf);
    Qf = function(t2) {
      function o2(e2, n2, r2, o3, a2) {
        void 0 === n2 && (n2 = 0.9), void 0 === r2 && (r2 = 0), void 0 === o3 && (o3 = null), void 0 === a2 && (a2 = false);
        var i2 = t2.call(this) || this;
        return i2.learningRate = e2, i2.decay = n2, i2.momentum = r2, i2.epsilon = o3, i2.accumulatedMeanSquares = [], i2.accumulatedMoments = [], i2.accumulatedMeanGrads = [], i2.centered = a2, null == o3 && (i2.epsilon = Nt.backend.epsilon()), i2;
      }
      return e(o2, t2), o2.prototype.applyGradients = function(t3) {
        var e2 = this;
        (Array.isArray(t3) ? t3.map(function(t4) {
          return t4.name;
        }) : Object.keys(t3)).forEach(function(n2, r2) {
          var o3 = Nt.registeredVariables[n2];
          null == e2.accumulatedMeanSquares[r2] && (e2.accumulatedMeanSquares[r2] = { originalName: n2 + "/rms", variable: je(function() {
            return zn(o3).variable(false);
          }) }), null == e2.accumulatedMoments[r2] && (e2.accumulatedMoments[r2] = { originalName: n2 + "/momentum", variable: je(function() {
            return zn(o3).variable(false);
          }) }), null == e2.accumulatedMeanGrads[r2] && e2.centered && (e2.accumulatedMeanGrads[r2] = { originalName: n2 + "/mg", variable: je(function() {
            return zn(o3).variable(false);
          }) });
          var a2 = Array.isArray(t3) ? t3[r2].tensor : t3[n2];
          if (null != a2) {
            var i2 = e2.accumulatedMeanSquares[r2].variable, u2 = e2.accumulatedMoments[r2].variable;
            je(function() {
              var t4 = i2.mul(e2.decay).add(a2.square().mul(1 - e2.decay));
              if (e2.centered) {
                var n3 = e2.accumulatedMeanGrads[r2].variable, s2 = n3.mul(e2.decay).add(a2.mul(1 - e2.decay)), c2 = u2.mul(e2.momentum).add(a2.mul(e2.learningRate).div(t4.sub(s2.square().add(e2.epsilon)).sqrt()));
                i2.assign(t4), n3.assign(s2), u2.assign(c2);
                var l3 = o3.sub(c2);
                o3.assign(l3);
              } else {
                var h2 = i2.mul(e2.decay).add(a2.square().mul(1 - e2.decay));
                c2 = u2.mul(e2.momentum).add(a2.mul(e2.learningRate).div(h2.add(e2.epsilon).sqrt()));
                i2.assign(h2), u2.assign(c2);
                l3 = o3.sub(c2);
                o3.assign(l3);
              }
            });
          }
        }), this.incrementIterations();
      }, o2.prototype.dispose = function() {
        null != this.accumulatedMeanSquares && Xe(this.accumulatedMeanSquares.map(function(t3) {
          return t3.variable;
        })), null != this.accumulatedMeanGrads && this.centered && Xe(this.accumulatedMeanGrads.map(function(t3) {
          return t3.variable;
        })), null != this.accumulatedMoments && Xe(this.accumulatedMoments.map(function(t3) {
          return t3.variable;
        }));
      }, o2.prototype.getWeights = function() {
        return n(this, void 0, void 0, function() {
          var t3;
          return r(this, function(e2) {
            switch (e2.label) {
              case 0:
                return t3 = this.accumulatedMeanSquares.concat(this.accumulatedMoments), this.centered && t3.push.apply(t3, this.accumulatedMeanGrads), [4, this.saveIterations()];
              case 1:
                return [2, [e2.sent()].concat(t3.map(function(t4) {
                  return { name: t4.originalName, tensor: t4.variable };
                }))];
            }
          });
        });
      }, o2.prototype.setWeights = function(t3) {
        return n(this, void 0, void 0, function() {
          var e2;
          return r(this, function(n2) {
            switch (n2.label) {
              case 0:
                return [4, this.extractIterations(t3)];
              case 1:
                return t3 = n2.sent(), e2 = this.centered ? t3.length / 3 : t3.length / 2, false, this.accumulatedMeanSquares = t3.slice(0, e2).map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), this.accumulatedMoments = t3.slice(e2, 2 * e2).map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                }), this.centered && (this.accumulatedMeanGrads = t3.slice(2 * e2, 3 * e2).map(function(t4) {
                  return { originalName: t4.name, variable: t4.tensor.variable(false) };
                })), [2];
            }
          });
        });
      }, o2.prototype.getConfig = function() {
        return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
      }, o2.fromConfig = function(t3, e2) {
        return new t3(e2.learningRate, e2.decay, e2.momentum, e2.epsilon, e2.centered);
      }, o2.className = "RMSProp", o2;
    }(Hf);
    _f(Qf);
    Jf = function() {
      function t2() {
      }
      return t2.sgd = function(t3) {
        return new $f(t3);
      }, t2.momentum = function(t3, e2, n2) {
        return void 0 === n2 && (n2 = false), new Yf(t3, e2, n2);
      }, t2.rmsprop = function(t3, e2, n2, r2, o2) {
        return void 0 === e2 && (e2 = 0.9), void 0 === n2 && (n2 = 0), void 0 === r2 && (r2 = null), void 0 === o2 && (o2 = false), new Qf(t3, e2, n2, r2, o2);
      }, t2.adam = function(t3, e2, n2, r2) {
        return void 0 === t3 && (t3 = 1e-3), void 0 === e2 && (e2 = 0.9), void 0 === n2 && (n2 = 0.999), void 0 === r2 && (r2 = null), new jf(t3, e2, n2, r2);
      }, t2.adadelta = function(t3, e2, n2) {
        return void 0 === t3 && (t3 = 1e-3), void 0 === e2 && (e2 = 0.95), void 0 === n2 && (n2 = null), new qf(t3, e2, n2);
      }, t2.adamax = function(t3, e2, n2, r2, o2) {
        return void 0 === t3 && (t3 = 2e-3), void 0 === e2 && (e2 = 0.9), void 0 === n2 && (n2 = 0.999), void 0 === r2 && (r2 = null), void 0 === o2 && (o2 = 0), new Xf(t3, e2, n2, r2, o2);
      }, t2.adagrad = function(t3, e2) {
        return void 0 === e2 && (e2 = 0.1), new Kf(t3, e2);
      }, t2;
    }();
    Zf = { sgd: Jf.sgd, momentum: Jf.momentum, adadelta: Jf.adadelta, adagrad: Jf.adagrad, rmsprop: Jf.rmsprop, adamax: Jf.adamax, adam: Jf.adam };
    tp = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : "undefined" != typeof setImmediate ? setImmediate : function(t2) {
      return t2();
    };
    ft = Rh;
  }
});

// node_modules/@tensorflow/tfjs-layers/dist/tf-layers.esm.js
function __extends(e2, t2) {
  function n2() {
    this.constructor = e2;
  }
  extendStatics(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (n2.prototype = t2.prototype, new n2());
}
function __awaiter(e2, t2, n2, r2) {
  return new (n2 || (n2 = Promise))(function(i2, a2) {
    function o2(e3) {
      try {
        l3(r2.next(e3));
      } catch (e4) {
        a2(e4);
      }
    }
    function s2(e3) {
      try {
        l3(r2.throw(e3));
      } catch (e4) {
        a2(e4);
      }
    }
    function l3(e3) {
      e3.done ? i2(e3.value) : new n2(function(t3) {
        t3(e3.value);
      }).then(o2, s2);
    }
    l3((r2 = r2.apply(e2, t2 || [])).next());
  });
}
function __generator(e2, t2) {
  var n2, r2, i2, a2, o2 = { label: 0, sent: function() {
    if (1 & i2[0])
      throw i2[1];
    return i2[1];
  }, trys: [], ops: [] };
  return a2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (a2[Symbol.iterator] = function() {
    return this;
  }), a2;
  function s2(a3) {
    return function(s3) {
      return function(a4) {
        if (n2)
          throw new TypeError("Generator is already executing.");
        for (; o2; )
          try {
            if (n2 = 1, r2 && (i2 = 2 & a4[0] ? r2.return : a4[0] ? r2.throw || ((i2 = r2.return) && i2.call(r2), 0) : r2.next) && !(i2 = i2.call(r2, a4[1])).done)
              return i2;
            switch (r2 = 0, i2 && (a4 = [2 & a4[0], i2.value]), a4[0]) {
              case 0:
              case 1:
                i2 = a4;
                break;
              case 4:
                return o2.label++, { value: a4[1], done: false };
              case 5:
                o2.label++, r2 = a4[1], a4 = [0];
                continue;
              case 7:
                a4 = o2.ops.pop(), o2.trys.pop();
                continue;
              default:
                if (!(i2 = (i2 = o2.trys).length > 0 && i2[i2.length - 1]) && (6 === a4[0] || 2 === a4[0])) {
                  o2 = 0;
                  continue;
                }
                if (3 === a4[0] && (!i2 || a4[1] > i2[0] && a4[1] < i2[3])) {
                  o2.label = a4[1];
                  break;
                }
                if (6 === a4[0] && o2.label < i2[1]) {
                  o2.label = i2[1], i2 = a4;
                  break;
                }
                if (i2 && o2.label < i2[2]) {
                  o2.label = i2[2], o2.ops.push(a4);
                  break;
                }
                i2[2] && o2.ops.pop(), o2.trys.pop();
                continue;
            }
            a4 = t2.call(e2, o2);
          } catch (e3) {
            a4 = [6, e3], r2 = 0;
          } finally {
            n2 = i2 = 0;
          }
        if (5 & a4[0])
          throw a4[1];
        return { value: a4[0] ? a4[1] : void 0, done: true };
      }([a3, s3]);
    };
  }
}
function epsilon() {
  return null == _epsilon && (_epsilon = on().epsilon()), _epsilon;
}
function imageDataFormat() {
  return "channelsLast";
}
function pyListRepeat(e2, t2) {
  if (Array.isArray(e2)) {
    for (var n2 = [], r2 = 0; r2 < t2; r2++)
      n2 = n2.concat(e2);
    return n2;
  }
  return (n2 = new Array(t2)).fill(e2), n2;
}
function assert(e2, t2) {
  if (!e2)
    throw new AssertionError(t2);
}
function count(e2, t2) {
  for (var n2 = 0, r2 = 0, i2 = e2; r2 < i2.length; r2++) {
    i2[r2] === t2 && n2++;
  }
  return n2;
}
function singletonOrArray(e2) {
  return 1 === e2.length ? e2[0] : e2;
}
function toList(e2) {
  return Array.isArray(e2) ? e2 : [e2];
}
function toSnakeCase(e2) {
  var t2 = e2.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return "_" !== t2[0] ? t2 : "private" + t2;
}
function toCamelCase(e2) {
  return e2.length <= 1 ? e2 : -1 === e2.indexOf("_") ? e2 : e2.replace(/[_]+(\w|$)/g, function(e3, t2) {
    return t2.toUpperCase();
  });
}
function serializeKerasObject(e2) {
  if (null === e2 || void 0 === e2)
    return null;
  var t2 = {};
  return t2.className = e2.getClassName(), t2.config = e2.getConfig(), t2;
}
function convertNDArrayScalarsInConfig(e2) {
  if (null != e2 && "object" == typeof e2)
    if (Array.isArray(e2))
      e2.forEach(function(e3) {
        return convertNDArrayScalarsInConfig(e3);
      });
    else
      for (var t2 = 0, n2 = Object.keys(e2); t2 < n2.length; t2++) {
        var r2 = n2[t2], i2 = e2[r2];
        null != i2 && "object" == typeof i2 && (Array.isArray(i2) || "ndarray" !== i2.type || "number" != typeof i2.value ? convertNDArrayScalarsInConfig(i2) : e2[r2] = i2.value);
      }
}
function deserializeKerasObject(e2, t2, n2, r2, i2) {
  var a2, o2, s2;
  if (void 0 === t2 && (t2 = {}), void 0 === n2 && (n2 = {}), void 0 === r2 && (r2 = "object"), void 0 === i2 && (i2 = false), "string" == typeof e2) {
    var l3 = e2, u2 = void 0;
    if (l3 in n2)
      u2 = n2[l3];
    else if (l3 in _GLOBAL_CUSTOM_OBJECTS)
      u2 = _GLOBAL_CUSTOM_OBJECTS[l3];
    else if (null == (u2 = t2[l3]))
      throw new ValueError("Unknown " + r2 + ": " + e2 + ". This may be due to one of the following reasons:\n1. The " + r2 + " is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom " + r2 + " is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");
    return u2;
  }
  var c2 = e2;
  if (null == c2.className || null == c2.config)
    throw new ValueError(r2 + ": Improper config format: " + JSON.stringify(c2) + ".\n'className' and 'config' must set.");
  var p2 = c2.className, h2 = void 0, d2 = void 0;
  if (p2 in n2 ? (h2 = (a2 = n2[p2])[0], d2 = a2[1]) : p2 in _GLOBAL_CUSTOM_OBJECTS ? (h2 = (o2 = _GLOBAL_CUSTOM_OBJECTS.className)[0], d2 = o2[1]) : p2 in t2 && (h2 = (s2 = t2[p2])[0], d2 = s2[1]), null == h2)
    throw new ValueError("Unknown " + r2 + ": " + p2 + ". This may be due to one of the following reasons:\n1. The " + r2 + " is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom " + r2 + " is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");
  if (null != d2) {
    for (var f2 = {}, g2 = 0, m2 = Object.keys(_GLOBAL_CUSTOM_OBJECTS); g2 < m2.length; g2++) {
      f2[S2 = m2[g2]] = _GLOBAL_CUSTOM_OBJECTS[S2];
    }
    for (var y2 = 0, v2 = Object.keys(n2); y2 < v2.length; y2++) {
      f2[S2 = v2[y2]] = n2[S2];
    }
    c2.config.customObjects = f2;
    for (var b2 = __assign({}, _GLOBAL_CUSTOM_OBJECTS), w2 = 0, z2 = Object.keys(n2); w2 < z2.length; w2++) {
      var S2 = z2[w2];
      _GLOBAL_CUSTOM_OBJECTS[S2] = n2[S2];
    }
    convertNDArrayScalarsInConfig(c2.config);
    var A2 = d2(h2, c2.config, n2, i2);
    return _GLOBAL_CUSTOM_OBJECTS = __assign({}, b2), A2;
  }
  b2 = __assign({}, _GLOBAL_CUSTOM_OBJECTS);
  for (var _2 = 0, I2 = Object.keys(n2); _2 < I2.length; _2++) {
    S2 = I2[_2];
    _GLOBAL_CUSTOM_OBJECTS[S2] = n2[S2];
  }
  A2 = new h2(c2.config);
  return _GLOBAL_CUSTOM_OBJECTS = __assign({}, b2), A2;
}
function numberCompare(e2, t2) {
  return e2 < t2 ? -1 : e2 > t2 ? 1 : 0;
}
function reverseNumberCompare(e2, t2) {
  return -1 * numberCompare(e2, t2);
}
function unique(e2) {
  if (null == e2)
    return e2;
  for (var t2 = [], n2 = 0, r2 = e2; n2 < r2.length; n2++) {
    var i2 = r2[n2];
    -1 === t2.indexOf(i2) && t2.push(i2);
  }
  return t2;
}
function isObjectEmpty(e2) {
  if (null == e2)
    throw new ValueError("Invalid value in obj: " + JSON.stringify(e2));
  for (var t2 in e2)
    if (e2.hasOwnProperty(t2))
      return false;
  return true;
}
function checkStringTypeUnionValue(e2, t2, n2) {
  if (null != n2 && e2.indexOf(n2) < 0)
    throw new ValueError(n2 + " is not a valid " + t2 + ".  Valid values are " + e2 + " or null/undefined.");
}
function checkArrayTypeAndLength(e2, t2, n2, r2) {
  return void 0 === n2 && (n2 = 0), void 0 === r2 && (r2 = 1 / 0), assert(n2 >= 0), assert(r2 >= n2), Array.isArray(e2) && e2.length >= n2 && e2.length <= r2 && e2.every(function(e3) {
    return typeof e3 === t2;
  });
}
function assertPositiveInteger(e2, t2) {
  Array.isArray(e2) ? (tt.assert(e2.length > 0, function() {
    return t2 + " is unexpectedly an empty array.";
  }), e2.forEach(function(e3, n2) {
    return assertPositiveInteger(e3, "element " + (n2 + 1) + " of " + t2);
  })) : tt.assert(Number.isInteger(e2) && e2 > 0, function() {
    return "Expected " + t2 + " to be a positive integer, but got " + formatAsFriendlyString(e2) + ".";
  });
}
function formatAsFriendlyString(e2) {
  return null === e2 ? "null" : Array.isArray(e2) ? "[" + e2.map(function(e3) {
    return formatAsFriendlyString(e3);
  }).join(",") + "]" : "string" == typeof e2 ? '"' + e2 + '"' : "" + e2;
}
function debounce(e2, t2) {
  var n2, r2 = tt.now();
  return function() {
    for (var i2 = [], a2 = 0; a2 < arguments.length; a2++)
      i2[a2] = arguments[a2];
    var o2 = tt.now();
    return o2 - r2 < t2 ? n2 : (r2 = o2, n2 = e2.apply(void 0, i2));
  };
}
function mapActivationToFusedKernel(e2) {
  return "relu" === e2 ? "relu" : "linear" === e2 ? "linear" : "elu" === e2 ? "elu" : null;
}
function calcL2Norms(e2, t2) {
  return je(function() {
    return gs(vl(ec(e2, e2), t2, true));
  });
}
function serializeConstraint(e2) {
  return serializeKerasObject(e2);
}
function deserializeConstraint(e2, t2) {
  return void 0 === t2 && (t2 = {}), deserializeKerasObject(e2, Mf.SerializationMap.getMap().classNameMap, t2, "constraint");
}
function getConstraint(e2) {
  return null == e2 ? null : "string" == typeof e2 ? deserializeConstraint({ className: e2 in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[e2] : e2, config: {} }) : e2 instanceof Constraint ? e2 : deserializeConstraint(e2);
}
function maxNorm(e2) {
  return new MaxNorm(e2);
}
function unitNorm(e2) {
  return new UnitNorm(e2);
}
function nonNeg() {
  return new NonNeg();
}
function minMaxNorm(e2) {
  return new MinMaxNorm(e2);
}
function checkDataFormat(e2) {
  checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, "DataFormat", e2);
}
function checkPaddingMode(e2) {
  checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, "PaddingMode", e2);
}
function checkPoolMode(e2) {
  checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, "PoolMode", e2);
}
function nameScope(e2, t2) {
  _nameScopeStack.push(e2);
  try {
    var n2 = t2();
    return _nameScopeStack.pop(), n2;
  } catch (e3) {
    throw _nameScopeStack.pop(), e3;
  }
}
function currentNameScopePrefix() {
  return 0 === _nameScopeStack.length ? "" : _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
}
function getScopedTensorName(e2) {
  if (!isValidTensorName(e2))
    throw new Error("Not a valid tensor name: '" + e2 + "'");
  return currentNameScopePrefix() + e2;
}
function getUniqueTensorName(e2) {
  if (!isValidTensorName(e2))
    throw new Error("Not a valid tensor name: '" + e2 + "'");
  nameMap.has(e2) || nameMap.set(e2, 0);
  var t2 = nameMap.get(e2);
  if (nameMap.set(e2, nameMap.get(e2) + 1), t2 > 0) {
    var n2 = e2 + "_" + t2;
    return nameMap.set(n2, 1), n2;
  }
  return e2;
}
function isValidTensorName(e2) {
  return !!e2.match(tensorNameRegex);
}
function isInteger(e2) {
  return e2 === parseInt(e2.toString(), 10);
}
function arrayProd(e2, t2, n2) {
  null == t2 && (t2 = 0), null == n2 && (n2 = e2.length);
  for (var r2 = 1, i2 = t2; i2 < n2; ++i2)
    r2 *= e2[i2];
  return r2;
}
function toArray1D(e2) {
  return e2 = Array.isArray(e2) ? new Float32Array(e2) : e2, Dn(e2);
}
function min$1(e2) {
  return pl(toArray1D(e2)).dataSync()[0];
}
function max$1(e2) {
  return hl(toArray1D(e2)).dataSync()[0];
}
function range(e2, t2) {
  if (t2 < e2)
    throw new ValueError("end (" + t2 + ") < begin (" + e2 + ") is forbidden.");
  for (var n2 = [], r2 = e2; r2 < t2; ++r2)
    n2.push(r2);
  return n2;
}
function cast$1(e2, t2) {
  return e2.asType(t2);
}
function expandDims$1(e2, t2) {
  void 0 === t2 && (t2 = -1);
  var n2 = e2.shape.slice();
  return t2 < 0 && (t2 = n2.length + t2 + 1), n2.splice(t2, 0, 1), e2.reshape(n2);
}
function repeat(e2, t2) {
  return je(function() {
    if (2 !== e2.shape.length)
      throw new ValueError("repeat() expects a rank-2 tensor, but received a rank-" + e2.shape.length + " tensor.");
    return tile$1(expandDims$1(e2, 1), [1, t2, 1]);
  });
}
function flatten(e2) {
  var t2 = [arrayProd(e2.shape)];
  return e2.reshape(t2);
}
function batchFlatten(e2) {
  if (e2.rank <= 1)
    throw new ValueError("batchFlatten requires a minimum rank of 2. Got rank: " + e2.rank + ".");
  var t2 = [e2.shape[0], arrayProd(e2.shape, 1)];
  return e2.reshape(t2);
}
function sliceAlongFirstAxis(e2, t2, n2) {
  return je(function() {
    switch (e2.rank) {
      case 1:
        return el(e2, t2, n2);
      case 2:
        return nl(e2, [t2, 0], [n2, e2.shape[1]]);
      case 3:
        return rl(e2, [t2, 0, 0], [n2, e2.shape[1], e2.shape[2]]);
      case 4:
        return ol(e2, [t2, 0, 0, 0], [n2, e2.shape[1], e2.shape[2], e2.shape[3]]);
      case 5:
        return tl(e2, [t2, 0, 0, 0, 0], [n2, e2.shape[1], e2.shape[2], e2.shape[3], e2.shape[4]]);
      case 6:
        return tl(e2, [t2, 0, 0, 0, 0, 0], [n2, e2.shape[1], e2.shape[2], e2.shape[3], e2.shape[4], e2.shape[5]]);
      default:
        throw new ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: " + e2.rank);
    }
  });
}
function sliceAlongLastAxis(e2, t2, n2) {
  return je(function() {
    switch (e2.rank) {
      case 1:
        return el(e2, t2, n2);
      case 2:
        return nl(e2, [0, t2], [e2.shape[0], n2]);
      case 3:
        return rl(e2, [0, 0, t2], [e2.shape[0], e2.shape[1], n2]);
      case 4:
        return ol(e2, [0, 0, 0, t2], [e2.shape[0], e2.shape[1], e2.shape[2], n2]);
      default:
        throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e2.rank);
    }
  });
}
function sliceAlongAxis(e2, t2, n2, r2) {
  return je(function() {
    switch (e2.rank) {
      case 1:
        return el(e2, t2, n2);
      case 2:
        switch (r2) {
          case 1:
            return sliceAlongFirstAxis(e2, t2, n2);
          case 2:
            return sliceAlongLastAxis(e2, t2, n2);
          default:
            throw new ValueError("The axis is not within the rank of the tensor " + r2);
        }
      case 3:
        switch (r2) {
          case 1:
            return sliceAlongFirstAxis(e2, t2, n2);
          case 2:
            return rl(e2, [0, t2, 0], [e2.shape[0], n2, e2.shape[2]]);
          case 3:
            return sliceAlongLastAxis(e2, t2, n2);
          default:
            throw new ValueError("The axis is not within the rank of the tensor " + r2);
        }
      case 4:
        switch (r2) {
          case 1:
            return sliceAlongFirstAxis(e2, t2, n2);
          case 2:
            return ol(e2, [0, t2, 0, 0], [e2.shape[0], n2, e2.shape[2], e2.shape[3]]);
          case 3:
            return ol(e2, [0, 0, t2, 0], [e2.shape[0], e2.shape[1], n2, e2.shape[3]]);
          case 4:
            return sliceAlongLastAxis(e2, t2, n2);
          default:
            throw new ValueError("The axis is not within the rank of the tensor " + r2);
        }
      default:
        throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e2.rank);
    }
  });
}
function concatenate(e2, t2) {
  var n2;
  return void 0 === t2 && (t2 = -1), t2 < 0 && (t2 = 0 !== (n2 = e2[0].rank) ? n2 : 0), t2 === e2[0].rank && (t2 = -1), Gn(e2, t2);
}
function concatAlongFirstAxis(e2, t2) {
  switch (e2.rank) {
    case 1:
      return Hn([e2, t2]);
    case 2:
      return qn([e2, t2], 0);
    case 3:
      return Kn([e2, t2], 0);
    case 4:
      return jn([e2, t2], 0);
    default:
      throw new ValueError("concatAlongFirstAxis() received an unsupported tensor rank: " + e2.rank);
  }
}
function tile$1(e2, t2) {
  if (Array.isArray(t2) || (t2 = [t2]), e2.rank !== t2.length)
    throw new ValueError("The length of input n (" + t2.length + ") does not match the number of dimensions in input x (" + e2.rank + ")");
  return Nr(e2, t2);
}
function randomNormal$1(e2, t2, n2, r2, i2) {
  return void 0 === t2 && (t2 = 0), void 0 === n2 && (n2 = 1), Rr(e2, t2, n2, r2, i2);
}
function dot(e2, t2, n2, r2) {
  if (e2.rank < 2 || t2.rank < 2)
    throw new NotImplementedError("dot requires both inputs to be rank >= 2 but got x shape = " + e2.shape + " and y shape = " + t2.shape);
  if (t2.rank >= 3 && e2.shape.slice(-1)[0] !== (c2 = t2.shape.slice(-2)[0]))
    throw new NotImplementedError("If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = " + e2.shape + " and  y shape = " + t2.shape);
  if (2 === e2.rank && 2 === t2.rank) {
    var i2 = false, a2 = false;
    return Eh.matMul({ a: e2, b: t2, transposeA: i2, transposeB: a2, bias: r2 ? reshapeBias(e2.rank, r2, imageDataFormat()) : null, activation: n2 });
  }
  var o2 = e2.shape.slice(), s2 = o2.pop();
  e2 = e2.reshape([-1, s2]);
  var l3 = t2.shape.slice(), u2 = l3.pop(), c2 = l3.pop(), p2 = l3.concat([u2]), h2 = Array.from({ length: t2.rank }, function(e3, n3) {
    return 0 === n3 ? t2.rank - 2 : n3 <= t2.rank - 2 ? n3 - 1 : n3;
  });
  t2 = t2.transpose(h2).reshape([c2, -1]);
  var d2 = o2.concat(p2);
  i2 = false, a2 = false;
  return Eh.matMul({ a: e2, b: t2, transposeA: i2, transposeB: a2, bias: r2 ? reshapeBias(e2.rank, r2, imageDataFormat()) : null, activation: n2 }).reshape(d2);
}
function gather$1(e2, t2, n2) {
  return je(function() {
    return t2 = Array.isArray(t2) ? Dn(t2, "int32") : t2.toInt(), Cc(e2, t2, n2);
  });
}
function square(e2) {
  return ec(e2, e2);
}
function reshapeBias(e2, t2, n2) {
  var r2 = t2.shape;
  if (1 !== t2.rank && t2.rank !== e2)
    throw new ValueError("Unexpected bias dimensions: " + t2.rank + "; expected it to be 1 or " + e2);
  if (5 === e2) {
    if ("channelsFirst" === n2)
      return 1 === r2.length ? t2.reshape([1, r2[0], 1, 1, 1]) : t2.reshape([1, r2[3], r2[0], r2[1], r2[2]]);
    if ("channelsLast" === n2)
      return 1 === r2.length ? t2.reshape([1, 1, 1, 1, r2[0]]) : t2.reshape([1].concat(r2));
  } else if (4 === e2) {
    if ("channelsFirst" === n2)
      return 1 === r2.length ? t2.reshape([1, r2[0], 1, 1]) : t2.reshape([1, r2[2], r2[0], r2[1]]);
    if ("channelsLast" === n2)
      return 1 === r2.length ? t2.reshape([1, 1, 1, r2[0]]) : t2.reshape([1].concat(r2));
  } else if (3 === e2) {
    if ("channelsFirst" === n2)
      return 1 === r2.length ? t2.reshape([1, r2[0], 1]) : t2.reshape([1, r2[1], r2[0]]);
    if ("channelsLast" === n2)
      return 1 === r2.length ? t2.reshape([1, 1, r2[0]]) : t2.reshape([1].concat(r2));
  } else if (e2 < 3)
    return t2;
  throw new ValueError("Unsupported input rank by biasAdd: " + t2.rank);
}
function biasAdd(e2, t2, n2) {
  return je(function() {
    return null == n2 && (n2 = imageDataFormat()), checkDataFormat(n2), e2.add(reshapeBias(e2.rank, t2, n2));
  });
}
function elu$1(e2, t2) {
  if (void 0 === t2 && (t2 = 1), 1 !== t2)
    throw new NotImplementedError("Support for alpha values other than 1 (" + t2 + ") is not implemented yet.");
  return gl(e2);
}
function softsign(e2) {
  return je(function() {
    return qs(e2, Vu(e2).add(1));
  });
}
function dropout$1(e2, t2, n2, r2) {
  return je(function() {
    return Ul(e2, t2, n2, r2);
  });
}
function hardSigmoid(e2) {
  return je(function() {
    var t2 = Vs(0.5, tc(0.2, e2));
    return $u(t2, 0, 1);
  });
}
function inTrainPhase(e2, t2, n2) {
  return void 0 === n2 && (n2 = false), n2 ? e2() : t2();
}
function checkFanMode(e2) {
  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, "FanMode", e2);
}
function checkDistribution(e2) {
  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, "Distribution", e2);
}
function computeFans(e2, t2) {
  var n2, r2;
  if (void 0 === t2 && (t2 = "channelsLast"), checkDataFormat(t2), 2 === e2.length)
    n2 = e2[0], r2 = e2[1];
  else if (-1 !== [3, 4, 5].indexOf(e2.length)) {
    if ("channelsFirst" === t2) {
      var i2 = arrayProd(e2, 2);
      n2 = e2[1] * i2, r2 = e2[0] * i2;
    } else if ("channelsLast" === t2) {
      i2 = arrayProd(e2, 0, e2.length - 2);
      n2 = e2[e2.length - 2] * i2, r2 = e2[e2.length - 1] * i2;
    }
  } else {
    var a2 = arrayProd(e2);
    n2 = Math.sqrt(a2), r2 = Math.sqrt(a2);
  }
  return [n2, r2];
}
function deserializeInitializer(e2, t2) {
  return void 0 === t2 && (t2 = {}), deserializeKerasObject(e2, Mf.SerializationMap.getMap().classNameMap, t2, "initializer");
}
function serializeInitializer(e2) {
  return serializeKerasObject(e2);
}
function getInitializer(e2) {
  if ("string" == typeof e2) {
    var t2 = e2 in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e2] : e2;
    if ("GlorotNormal" === t2)
      return new GlorotNormal();
    if ("GlorotUniform" === t2)
      return new GlorotUniform();
    if ("HeNormal" === t2)
      return new HeNormal();
    if ("HeUniform" === t2)
      return new HeUniform();
    if ("LeCunNormal" === t2)
      return new LeCunNormal();
    if ("LeCunUniform" === t2)
      return new LeCunUniform();
    var n2 = {};
    return n2.className = t2, n2.config = {}, deserializeInitializer(n2);
  }
  return e2 instanceof Initializer ? e2 : deserializeInitializer(e2);
}
function zeros$1() {
  return new Zeros();
}
function ones$1() {
  return new Ones();
}
function constant(e2) {
  return new Constant(e2);
}
function randomUniform$1(e2) {
  return new RandomUniform(e2);
}
function randomNormal$2(e2) {
  return new RandomNormal(e2);
}
function truncatedNormal$1(e2) {
  return new TruncatedNormal(e2);
}
function identity(e2) {
  return new Identity(e2);
}
function varianceScaling(e2) {
  return new VarianceScaling(e2);
}
function glorotUniform(e2) {
  return new GlorotUniform(e2);
}
function glorotNormal(e2) {
  return new GlorotNormal(e2);
}
function heNormal(e2) {
  return new HeNormal(e2);
}
function heUniform(e2) {
  return new HeUniform(e2);
}
function leCunNormal(e2) {
  return new LeCunNormal(e2);
}
function leCunUniform(e2) {
  return new LeCunUniform(e2);
}
function orthogonal(e2) {
  return new Orthogonal(e2);
}
function getNextUniqueTensorId() {
  return _nextUniqueTensorId++;
}
function getUid(e2) {
  return void 0 === e2 && (e2 = ""), e2 in _uidPrefixes || (_uidPrefixes[e2] = 0), _uidPrefixes[e2] += 1, e2 + _uidPrefixes[e2].toString();
}
function isArrayOfShapes(e2) {
  return Array.isArray(e2) && Array.isArray(e2[0]);
}
function normalizeShapeList(e2) {
  return 0 === e2.length ? [] : Array.isArray(e2[0]) ? e2 : [e2];
}
function getExactlyOneTensor(e2) {
  var t2;
  if (Array.isArray(e2)) {
    if (1 !== e2.length)
      throw new ValueError("Expected Tensor length to be 1; got " + e2.length);
    t2 = e2[0];
  } else
    t2 = e2;
  return t2;
}
function getExactlyOneShape(e2) {
  if (Array.isArray(e2) && Array.isArray(e2[0])) {
    if (1 === e2.length)
      return (e2 = e2)[0];
    throw new ValueError("Expected exactly 1 Shape; got " + e2.length);
  }
  return e2;
}
function countParamsInWeights(e2) {
  for (var t2 = 0, n2 = 0, r2 = e2; n2 < r2.length; n2++) {
    var i2 = r2[n2];
    0 === i2.shape.length ? t2 += 1 : t2 += i2.shape.reduce(function(e3, t3) {
      return e3 * t3;
    });
  }
  return t2;
}
function checkShapesMatch(e2, t2) {
  if (e2.shape.toString() !== t2.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(e2.shape) + " vs. " + JSON.stringify(t2.shape));
}
function batchGetValue(e2) {
  return e2.map(function(e3) {
    return e3.read();
  });
}
function batchSetValue(e2) {
  e2.forEach(function(e3) {
    e3[0].write(e3[1]);
  });
}
function collectInputShape(e2) {
  for (var t2 = [], n2 = 0, r2 = e2 = toList(e2); n2 < r2.length; n2++) {
    var i2 = r2[n2];
    t2.push(i2.shape);
  }
  return singletonOrArray(t2);
}
function guessOutputDType(e2) {
  return "float32";
}
function getSourceInputs(e2, t2, n2) {
  if ((null == t2 || null != n2 && n2 > 0) && (t2 = e2.sourceLayer, n2 = e2.nodeIndex), 0 === t2.inboundNodes.length)
    return [e2];
  var r2 = t2.inboundNodes[n2];
  if (0 === r2.inboundLayers.length)
    return r2.inputTensors;
  for (var i2 = [], a2 = 0; a2 < r2.inboundLayers.length; a2++)
    for (var o2 = 0, s2 = getSourceInputs(r2.inputTensors[a2], r2.inboundLayers[a2], r2.nodeIndices[a2]); o2 < s2.length; o2++) {
      var l3 = s2[o2];
      -1 === i2.indexOf(l3) && i2.push(l3);
    }
  return i2;
}
function Input(e2) {
  if (null == e2.batchShape && null == e2.shape)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (null != e2.batchShape && null != e2.shape)
    throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  var t2 = e2.batchShape;
  null != e2.shape && null == t2 && (t2 = [null].concat(e2.shape));
  var n2 = e2.dtype;
  return null == n2 && (n2 = "float32"), new InputLayer({ batchInputShape: t2, name: e2.name, dtype: n2, sparse: e2.sparse }).inboundNodes[0].outputTensors[0];
}
function resolveScalarsInLogs(e2) {
  return __awaiter(this, void 0, void 0, function() {
    var t2, n2, r2, i2, a2, o2, s2, l3;
    return __generator(this, function(u2) {
      switch (u2.label) {
        case 0:
          if (null == e2)
            return [2];
          for (i2 in t2 = [], n2 = [], r2 = [], e2)
            "number" != typeof (a2 = e2[i2]) && (o2 = a2, t2.push(o2.data()), n2.push(i2), r2.push(o2));
          return t2.length > 0 ? [4, Promise.all(t2)] : [3, 2];
        case 1:
          for (s2 = u2.sent(), l3 = 0; l3 < s2.length; ++l3)
            e2[n2[l3]] = s2[l3][0];
          Xe(r2), u2.label = 2;
        case 2:
          return [2];
      }
    });
  });
}
function disposeTensorsInLogs(e2) {
  if (null != e2)
    for (var t2 in e2) {
      var n2 = e2[t2];
      "number" != typeof n2 && n2.dispose();
    }
}
function standardizeCallbacks(e2, t2) {
  return null == e2 && (e2 = {}), e2 instanceof BaseCallback ? [e2] : Array.isArray(e2) && e2[0] instanceof BaseCallback ? e2 : toList(e2).map(function(e3) {
    return new CustomCallback(e3, t2);
  });
}
function configureCallbacks(e2, t2, n2, r2, i2, a2, o2, s2, l3) {
  var u2 = new History(), c2 = [new BaseLogger()].concat(CallbackConstructorRegistry.createCallbacks(t2));
  null != e2 && c2.push.apply(c2, e2), c2.push(u2);
  var p2 = new CallbackList(c2);
  return p2.setParams({ epochs: n2, initialEpoch: r2, samples: i2, steps: a2, batchSize: o2, verbose: t2, doValidation: s2, metrics: l3 }), { callbackList: p2, history: u2 };
}
function deserialize(e2, t2, n2) {
  return void 0 === t2 && (t2 = {}), void 0 === n2 && (n2 = false), deserializeKerasObject(e2, Mf.SerializationMap.getMap().classNameMap, t2, "layer", n2);
}
function l2Normalize(e2, t2) {
  return je(function() {
    "float32" !== e2.dtype && (e2 = e2.asType("float32"));
    var n2 = vl(square(e2), t2, true), r2 = Ln(n2.shape, epsilon()), i2 = gs(Xs(n2, r2));
    return qs(e2, i2);
  });
}
function meanSquaredError(e2, t2) {
  return je(function() {
    return fl(square(ic(t2, e2)), -1);
  });
}
function meanAbsoluteError(e2, t2) {
  return je(function() {
    return fl(Vu(ic(t2, e2)), -1);
  });
}
function meanAbsolutePercentageError(e2, t2) {
  return je(function() {
    var n2 = ic(e2, t2), r2 = $u(Vu(e2), epsilon(), Number.MAX_VALUE), i2 = Vu(qs(n2, r2));
    return tc(100, fl(i2, -1));
  });
}
function meanSquaredLogarithmicError(e2, t2) {
  return je(function() {
    var n2 = $u(t2, epsilon(), Number.MAX_VALUE), r2 = ns(Vs(1, n2)), i2 = $u(e2, epsilon(), Number.MAX_VALUE), a2 = ns(Vs(1, i2));
    return fl(square(ic(r2, a2)), -1);
  });
}
function squaredHinge(e2, t2) {
  return je(function() {
    var n2 = Xs(0, ic(1, tc(e2, t2)));
    return fl(square(n2), -1);
  });
}
function hinge(e2, t2) {
  return je(function() {
    var n2 = Xs(0, ic(1, tc(e2, t2)));
    return fl(n2, -1);
  });
}
function categoricalHinge(e2, t2) {
  return je(function() {
    var n2 = vl(tc(e2, t2), -1), r2 = hl(tc(ic(1, e2), t2), -1);
    return Xs(0, Vs(1, ic(r2, n2)));
  });
}
function logcosh(e2, t2) {
  return je(function() {
    var n2 = Math.log(2), r2 = ic(t2, e2), i2 = ic(Vs(r2, ms(tc(-2, r2))), n2);
    return fl(i2, -1);
  });
}
function categoricalCrossentropy(e2, t2, n2) {
  return void 0 === n2 && (n2 = false), je(function() {
    if (n2)
      t2 = io(t2);
    else {
      var r2 = vl(t2, t2.shape.length - 1, true);
      t2 = qs(t2, r2);
    }
    return t2 = $u(t2, epsilon(), 1 - epsilon()), as(vl(tc(e2.toFloat(), ns(t2)), t2.shape.length - 1));
  });
}
function sparseCategoricalCrossentropy(e2, t2) {
  return je(function() {
    var n2 = es(flatten(e2)).toInt(), r2 = (t2 = $u(t2, epsilon(), 1 - epsilon())).shape;
    return categoricalCrossentropy(gr(n2, r2[r2.length - 1]).reshape(r2), t2, false);
  });
}
function sigmoidCrossEntropyWithLogits(e2, t2) {
  if (!tt.arraysEqual(e2.shape, t2.shape))
    throw new ValueError("logits and labels must have the same shape, but got shapes " + JSON.stringify(e2.shape) + " and " + JSON.stringify(t2.shape));
  return je(function() {
    var n2 = t2.relu(), r2 = t2.abs().neg();
    return n2.sub(t2.mul(e2)).add(r2.exp().log1p());
  });
}
function binaryCrossentropy(e2, t2) {
  return je(function() {
    var n2;
    return n2 = $u(t2, epsilon(), 1 - epsilon()), n2 = ns(qs(n2, ic(1, n2))), fl(sigmoidCrossEntropyWithLogits(e2, n2), -1);
  });
}
function kullbackLeiblerDivergence(e2, t2) {
  return je(function() {
    var n2 = $u(e2, epsilon(), 1), r2 = $u(t2, epsilon(), 1);
    return vl(tc(e2, ns(qs(n2, r2))), -1);
  });
}
function poisson(e2, t2) {
  return je(function() {
    var n2 = ns(Vs(epsilon(), t2));
    return fl(ic(t2, tc(e2, n2)), -1);
  });
}
function cosineProximity(e2, t2) {
  return je(function() {
    var n2 = l2Normalize(e2, -1), r2 = l2Normalize(t2, -1), i2 = tc(n2, r2);
    return as(vl(i2, -1));
  });
}
function get(e2) {
  if ("string" == typeof e2) {
    if (e2 in lossesMap)
      return lossesMap[e2];
    var t2 = "Unknown loss " + e2;
    throw e2.toLowerCase().includes("softmaxcrossentropy") && (t2 = "Unknown loss " + e2 + '. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'), new ValueError(t2);
  }
  return e2;
}
function binaryAccuracy(e2, t2) {
  return je(function() {
    var n2 = tc(0.5, Vn(t2)), r2 = cast$1(lc(t2, n2), e2.dtype);
    return fl(sc(e2, r2), -1);
  });
}
function categoricalAccuracy(e2, t2) {
  return je(function() {
    return cast$1(sc(sl(e2, -1), sl(t2, -1)), "float32");
  });
}
function truePositives(e2, t2) {
  return je(function() {
    return Ms(e2.equal(1), t2.equal(1)).sum().cast("float32");
  });
}
function falseNegatives(e2, t2) {
  return je(function() {
    return Ms(e2.equal(1), t2.equal(0)).sum().cast("float32");
  });
}
function falsePositives(e2, t2) {
  return je(function() {
    return Ms(e2.equal(0), t2.equal(1)).sum().cast("float32");
  });
}
function precision(e2, t2) {
  return je(function() {
    var n2 = truePositives(e2, t2), r2 = falsePositives(e2, t2), i2 = n2.add(r2);
    return Ws(lc(i2, 0), n2.div(i2), 0).cast("float32");
  });
}
function recall(e2, t2) {
  return je(function() {
    var n2 = truePositives(e2, t2), r2 = falseNegatives(e2, t2), i2 = n2.add(r2);
    return Ws(lc(i2, 0), n2.div(i2), 0).cast("float32");
  });
}
function binaryCrossentropy$1(e2, t2) {
  return binaryCrossentropy(e2, t2);
}
function sparseCategoricalAccuracy(e2, t2) {
  return e2.rank === t2.rank && (e2 = e2.squeeze([e2.rank - 1])), (t2 = t2.argMax(-1)).dtype !== e2.dtype && (t2 = t2.asType(e2.dtype)), sc(e2, t2).asType("float32");
}
function get$1(e2) {
  if ("string" == typeof e2 && e2 in metricsMap)
    return metricsMap[e2];
  if ("string" != typeof e2 && null != e2)
    return e2;
  throw new ValueError("Unknown metric " + e2);
}
function getLossOrMetricName(e2) {
  if (assert(null !== e2, "Unknown LossOrMetricFn " + e2), "string" == typeof e2)
    return e2;
  for (var t2 = void 0, n2 = 0, r2 = Object.keys(lossesMap); n2 < r2.length; n2++) {
    var i2 = r2[n2];
    if (lossesMap[i2] === e2) {
      t2 = i2;
      break;
    }
  }
  if (void 0 !== t2)
    return t2;
  for (var a2 = 0, o2 = Object.keys(metricsMap); a2 < o2.length; a2++) {
    i2 = o2[a2];
    if (metricsMap[i2] === e2) {
      t2 = i2;
      break;
    }
  }
  return void 0 !== t2 ? t2 : e2.name;
}
function getOptimizer(e2) {
  var t2 = { Adagrad: function() {
    return Zf.adagrad(0.01);
  }, Adadelta: function() {
    return Zf.adadelta(1, 0.95, epsilon());
  }, Adam: function() {
    return Zf.adam(1e-3, 0.9, 0.999, epsilon());
  }, Adamax: function() {
    return Zf.adamax(2e-3, 0.9, 0.999, epsilon(), 0);
  }, RMSProp: function() {
    return Zf.rmsprop(1e-3, 0.9, 0, epsilon());
  }, SGD: function() {
    return Zf.sgd(0.01);
  } };
  if (t2.adagrad = t2.Adagrad, t2.adadelta = t2.Adadelta, t2.adam = t2.Adam, t2.adamax = t2.Adamax, t2.rmsprop = t2.RMSProp, t2.sgd = t2.SGD, e2 in t2)
    return t2[e2]();
  throw new ValueError("Unknown Optimizer " + e2);
}
function checkUserDefinedMetadata(e2, t2, n2) {
  if (void 0 === n2 && (n2 = false), null == e2 || "object" != typeof e2 || Object.getPrototypeOf(e2) !== Object.prototype || !plainObjectCheck(e2))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (n2) {
    var r2 = JSON.stringify(e2);
    r2.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH && console.warn('User-defined metadata of model "' + t2 + '" is too large in size (length=' + r2.length + " when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= " + MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH + ".");
  }
}
function plainObjectCheck(e2) {
  if (null === e2)
    return true;
  if ("object" == typeof e2) {
    if (Object.getPrototypeOf(e2) === Object.prototype) {
      for (var t2 = 0, n2 = Object.keys(e2); t2 < n2.length; t2++) {
        var r2 = n2[t2];
        if ("string" != typeof r2)
          return false;
        if (!plainObjectCheck(e2[r2]))
          return false;
      }
      return true;
    }
    if (Array.isArray(e2)) {
      for (var i2 = 0, a2 = e2; i2 < a2.length; i2++) {
        if (!plainObjectCheck(a2[i2]))
          return false;
      }
      return true;
    }
    return false;
  }
  var o2 = typeof e2;
  return "string" === o2 || "number" === o2 || "boolean" === o2;
}
function printSummary(e2, t2, n2, r2) {
  void 0 === r2 && (r2 = console.log);
  var i2, a2 = isModelSequentialLike(e2), o2 = ["Layer (type)", "Output shape", "Param #"];
  if (a2 ? (t2 = t2 || 65, n2 = n2 || [0.45, 0.85, 1]) : (t2 = t2 || 98, n2 = n2 || [0.33, 0.55, 0.67, 1]), n2[n2.length - 1] <= 1 && (n2 = n2.map(function(e3) {
    return Math.floor(t2 * e3);
  })), !a2)
    for (var s2 in o2.push("Receives inputs"), i2 = [], e2.nodesByDepth)
      i2.push.apply(i2, e2.nodesByDepth[s2]);
  r2("_".repeat(t2)), printRow(o2, n2, r2), r2("=".repeat(t2));
  for (var l3 = e2.layers, u2 = 0; u2 < l3.length; ++u2)
    a2 ? printLayerSummary(l3[u2], n2, r2) : printLayerSummaryWithConnections(l3[u2], n2, i2, r2), r2((u2 === l3.length - 1 ? "=" : "_").repeat(t2));
  e2.checkTrainableWeightsConsistency();
  var c2 = countTrainableParams(e2), p2 = countParamsInWeights(e2.nonTrainableWeights);
  r2("Total params: " + (c2 + p2)), r2("Trainable params: " + c2), r2("Non-trainable params: " + p2), r2("_".repeat(t2));
}
function countTrainableParams(e2) {
  return null != e2.collectedTrainableWeights ? countParamsInWeights(e2.collectedTrainableWeights) : countParamsInWeights(e2.trainableWeights);
}
function isModelSequentialLike(e2) {
  var t2 = true, n2 = [], r2 = [];
  for (var i2 in e2.nodesByDepth)
    n2.push(e2.nodesByDepth[i2]);
  for (var a2 = 0, o2 = n2; a2 < o2.length; a2++) {
    var s2 = o2[a2];
    if (s2.length > 1 || 1 === s2.length && s2[0].inboundLayers.length > 1) {
      t2 = false;
      break;
    }
    r2.push.apply(r2, s2);
  }
  if (t2)
    for (var l3 = 0, u2 = e2.layers; l3 < u2.length; l3++) {
      for (var c2 = false, p2 = 0, h2 = u2[l3].inboundNodes; p2 < h2.length; p2++) {
        var d2 = h2[p2];
        if (-1 !== r2.indexOf(d2)) {
          if (c2) {
            t2 = false;
            break;
          }
          c2 = true;
        }
      }
      if (!t2)
        break;
    }
  return t2;
}
function printRow(e2, t2, n2) {
  void 0 === n2 && (n2 = console.log);
  for (var r2 = "", i2 = 0; i2 < e2.length; ++i2)
    i2 > 0 && (r2 = r2.slice(0, r2.length - 1) + " "), r2 = (r2 += e2[i2]).slice(0, t2[i2]), r2 += " ".repeat(t2[i2] - r2.length);
  n2(r2);
}
function printLayerSummary(e2, t2, n2) {
  var r2;
  try {
    r2 = JSON.stringify(e2.outputShape);
  } catch (e3) {
    r2 = "multiple";
  }
  printRow([e2.name + " (" + e2.getClassName() + ")", r2, e2.countParams().toString()], t2, n2);
}
function printLayerSummaryWithConnections(e2, t2, n2, r2) {
  var i2;
  try {
    i2 = JSON.stringify(e2.outputShape);
  } catch (e3) {
    i2 = "multiple";
  }
  for (var a2 = [], o2 = 0, s2 = e2.inboundNodes; o2 < s2.length; o2++) {
    var l3 = s2[o2];
    if (!(null != n2 && n2.length > 0 && -1 === n2.indexOf(l3)))
      for (var u2 = 0; u2 < l3.inboundLayers.length; ++u2) {
        var c2 = l3.inboundLayers[u2].name, p2 = l3.nodeIndices[u2], h2 = l3.tensorIndices[u2];
        a2.push(c2 + "[" + p2 + "][" + h2 + "]");
      }
  }
  var d2 = e2.name, f2 = e2.getClassName(), g2 = 0 === a2.length ? "" : a2[0];
  printRow([d2 + " (" + f2 + ")", i2, e2.countParams().toString(), g2], t2, r2);
  for (u2 = 1; u2 < a2.length; ++u2)
    printRow(["", "", "", a2[u2]], t2, r2);
}
function isArrayItemInputOrOutputName(e2, t2, n2) {
  return ("inboundNodes" === e2 || "outputLayers" === e2 || "inputLayers" === e2) && 0 === t2 && "string" == typeof n2;
}
function convertPythonicToTs(e2, t2) {
  if (null === e2)
    return null;
  if ("string" == typeof e2)
    return toCamelCase(e2);
  if ("number" == typeof e2 || "boolean" == typeof e2)
    return e2;
  if (e2 instanceof Array) {
    for (var n2 = [], r2 = e2.length, i2 = 0; i2 < r2; ++i2) {
      var a2 = e2[i2];
      isArrayItemInputOrOutputName(t2, i2, a2) ? n2.push(a2) : n2.push(convertPythonicToTs(a2, t2));
    }
    return n2;
  }
  for (var o2 = {}, s2 = 0, l3 = Object.keys(e2); s2 < l3.length; s2++) {
    var u2 = l3[s2], c2 = e2[u2];
    if ("name" === u2 && "string" == typeof c2)
      o2[u2] = c2;
    else {
      var p2 = toCamelCase(u2);
      o2[p2] = convertPythonicToTs(c2, p2);
    }
  }
  return o2;
}
function convertTsToPythonic(e2, t2) {
  if (null === e2 || void 0 === e2)
    return null;
  if ("string" == typeof e2)
    return toSnakeCase(e2);
  if ("number" == typeof e2 || "boolean" == typeof e2)
    return e2;
  if (e2 instanceof Array) {
    for (var n2 = [], r2 = e2.length, i2 = 0; i2 < r2; ++i2) {
      var a2 = e2[i2];
      isArrayItemInputOrOutputName(t2, i2, a2) ? n2.push(a2) : n2.push(convertTsToPythonic(a2, t2));
    }
    return n2;
  }
  for (var o2 = {}, s2 = 0, l3 = Object.keys(e2); s2 < l3.length; s2++) {
    var u2 = l3[s2], c2 = e2[u2], p2 = toSnakeCase(u2);
    o2[p2] = "name" !== u2 && "className" !== u2 || "string" != typeof c2 ? convertTsToPythonic(c2, u2) : c2;
  }
  return o2;
}
function assertFeedCompatibility(e2, t2) {
  if (null == e2.dtype || e2.dtype === t2.dtype)
    return t2;
  try {
    return lr(t2, e2.dtype);
  } catch (n2) {
    throw new ValueError("The dtype of the feed (" + t2.dtype + ") can not be cast to the dtype of the key '" + e2.name + "' (" + e2.dtype + ").");
  }
}
function execute(e2, t2, n2, r2) {
  for (var i2 = null != n2 && n2.training, a2 = Array.isArray(e2), o2 = a2 ? e2 : [e2], s2 = o2.map(function(e3) {
    return e3.name;
  }), l3 = [], u2 = t2.names(), c2 = 0, p2 = s2; c2 < p2.length; c2++) {
    var h2 = p2[c2];
    -1 !== u2.indexOf(h2) ? l3.push(t2.getValue(h2)) : l3.push(null);
  }
  null != r2 && (r2.maxNumTensors = -1 / 0, r2.minNumTensors = 1 / 0);
  var d2, f2, g2 = s2.join(",") + "|" + t2.names().join(",");
  if (null == cachedSorted[g2]) {
    var m2 = getTopologicalSortAndRecipientCounts(o2, t2);
    d2 = m2.sorted, f2 = m2.recipientCounts, cachedSorted[g2] = d2, cachedRecipientCounts[g2] = f2;
  }
  d2 = cachedSorted[g2], f2 = {}, i2 || Object.assign(f2, cachedRecipientCounts[g2]);
  for (var y2 = new FeedDict(t2), v2 = 0; v2 < d2.length; ++v2) {
    if (null != r2) {
      var b2 = qe().numTensors;
      b2 > r2.maxNumTensors && (r2.maxNumTensors = b2), b2 < r2.minNumTensors && (r2.minNumTensors = b2);
    }
    var w2 = d2[v2], z2 = w2.sourceLayer;
    if (!(z2 instanceof InputLayer)) {
      for (var S2 = [], A2 = [], _2 = [], I2 = false, C2 = 0, E2 = w2.inputs; C2 < E2.length; C2++) {
        var N2 = E2[C2], k2 = y2.getValue(N2), x2 = y2.getMask(N2);
        S2.push(k2), A2.push(x2), null != x2 && (I2 = true), i2 || (f2[N2.name]--, 0 !== f2[N2.name] || t2.hasKey(N2) || -1 !== s2.indexOf(N2.name) || k2.isDisposed || true === N2.sourceLayer.stateful || _2.push(k2));
      }
      I2 && ((n2 = n2 || {}).mask = A2[0]);
      var L2 = toList(z2.apply(S2, n2)), T2 = null;
      z2.supportsMasking && (T2 = z2.computeMask(S2, A2));
      for (var D2 = getNodeOutputs(w2), O2 = Array.isArray(D2) ? D2 : [D2], R2 = 0; R2 < O2.length; ++R2) {
        y2.hasKey(O2[R2]) || y2.add(O2[R2], L2[R2], Array.isArray(T2) ? T2[0] : T2);
        var M2 = s2.indexOf(O2[R2].name);
        -1 !== M2 && (l3[M2] = L2[R2]);
      }
      i2 || Xe(_2);
    }
  }
  return y2.disposeMasks(), a2 ? l3 : l3[0];
}
function getTopologicalSortAndRecipientCounts(e2, t2) {
  tt.assert(null != e2 && e2.length > 0, function() {
    return "Expected at least one fetch, got none";
  });
  var n2 = [], r2 = {};
  if (1 === e2.length) {
    var i2 = getTopologicalSortAndRecipientCountsForOneFetch(e2[0], t2);
    n2 = i2.sorted, r2 = i2.recipientMap;
  } else
    for (var a2 = /* @__PURE__ */ new Set(), o2 = 0, s2 = e2; o2 < s2.length; o2++) {
      for (var l3 = getTopologicalSortAndRecipientCountsForOneFetch(s2[o2], t2), u2 = l3.sorted, c2 = l3.recipientMap, p2 = 0, h2 = u2; p2 < h2.length; p2++) {
        var d2 = h2[p2];
        a2.has(d2.name) || (n2.push(d2), a2.add(d2.name));
      }
      var f2 = function(e3) {
        null == r2[e3] && (r2[e3] = /* @__PURE__ */ new Set()), c2[e3].forEach(function(t3) {
          return r2[e3].add(t3);
        });
      };
      for (var g2 in c2)
        f2(g2);
    }
  return { sorted: n2, recipientCounts: recipientMap2Counts(r2) };
}
function recipientMap2Counts(e2) {
  var t2 = {};
  for (var n2 in e2)
    t2[n2] = e2[n2].size;
  return t2;
}
function getTopologicalSortAndRecipientCountsForOneFetch(e2, t2) {
  for (var n2 = /* @__PURE__ */ new Set(), r2 = [], i2 = {}, a2 = 0, o2 = t2.names(); a2 < o2.length; a2++) {
    var s2 = o2[a2];
    n2.add(s2);
  }
  var l3 = [], u2 = [];
  for (l3.push(e2); l3.length > 0; ) {
    var c2 = l3[l3.length - 1];
    if (n2.has(c2.name))
      l3.pop();
    else {
      var p2 = u2[u2.length - 1] === l3.length - 1;
      if (0 === c2.inputs.length || p2)
        l3.pop(), r2.push(c2), n2.add(c2.name), p2 && u2.pop();
      else {
        u2.push(l3.length - 1);
        for (var h2 = 0, d2 = c2.inputs; h2 < d2.length; h2++) {
          var f2 = d2[h2];
          null == i2[f2.name] && (i2[f2.name] = /* @__PURE__ */ new Set()), i2[f2.name].add(c2.name), n2.has(f2.name) || l3.push(f2);
        }
      }
    }
  }
  return { sorted: r2, recipientMap: i2 };
}
function getNodeOutputs(e2) {
  var t2;
  if (1 === e2.sourceLayer.inboundNodes.length)
    t2 = e2.sourceLayer.output;
  else {
    for (var n2 = null, r2 = 0; r2 < e2.sourceLayer.inboundNodes.length; ++r2)
      for (var i2 = 0, a2 = e2.sourceLayer.inboundNodes[r2].outputTensors; i2 < a2.length; i2++) {
        if (a2[i2].id === e2.id) {
          n2 = r2;
          break;
        }
      }
    t2 = e2.sourceLayer.getOutputAt(n2);
  }
  return t2;
}
function standardizeSampleOrClassWeights(e2, t2, n2) {
  var r2 = t2.length;
  if (null == e2 || Array.isArray(e2) && 0 === e2.length)
    return t2.map(function(e3) {
      return null;
    });
  if (1 === r2)
    return Array.isArray(e2) && 1 === e2.length ? e2 : "object" == typeof e2 && t2[0] in e2 ? [e2[t2[0]]] : [e2];
  if (Array.isArray(e2)) {
    if (e2.length !== r2)
      throw new Error("Provided " + n2 + " is an array of " + e2.length + " element(s), but the model has " + r2 + " outputs. Make sure a set of weights is provided for each model output.");
    return e2;
  }
  if ("object" == typeof e2 && Object.keys(e2).length > 0 && "object" == typeof e2[Object.keys(e2)[0]]) {
    var i2 = [];
    return t2.forEach(function(t3) {
      t3 in e2 ? i2.push(e2[t3]) : i2.push(null);
    }), i2;
  }
  throw new Error("The model has multiple (" + r2 + ") outputs, so " + n2 + " must be either an array with " + r2 + " elements or an object with " + t2 + " keys. Provided " + n2 + " not understood: " + JSON.stringify(e2));
}
function standardizeClassWeights(e2, t2) {
  return standardizeSampleOrClassWeights(e2, t2, "classWeight");
}
function standardizeWeights(e2, t2, n2, r2) {
  return __awaiter(this, void 0, void 0, function() {
    var i2, a2, o2, s2, l3;
    return __generator(this, function(u2) {
      switch (u2.label) {
        case 0:
          if (null != t2 || null != r2)
            throw new Error("Support sampleWeight is not implemented yet");
          return null == n2 ? [3, 2] : (i2 = je(function() {
            if (1 === e2.shape.length)
              return e2.clone();
            if (2 === e2.shape.length) {
              if (e2.shape[1] > 1) {
                return e2.argMax(1);
              }
              if (1 === e2.shape[1])
                return e2.reshape([e2.shape[0]]);
              throw new Error("Encountered unexpected last-dimension size (" + e2.shape[1] + ") during handling of class weights. The size is expected to be >= 1.");
            }
            throw new Error("Unexpected rank of target (y) tensor (" + e2.rank + ") during handling of class weights. The rank is expected to be 1 or 2.");
          }), s2 = (o2 = Array).from, [4, i2.data()]);
        case 1:
          return a2 = s2.apply(o2, [u2.sent()]), Xe(i2), l3 = [], a2.forEach(function(e3) {
            if (null == n2[e3])
              throw new Error("classWeight must contain all classes in the training data. The class " + e3 + " exists in the data but not in classWeight");
            l3.push(n2[e3]);
          }), [2, Dn(l3, "float32")];
        case 2:
          return [2, null];
      }
    });
  });
}
function computeWeightedLoss(e2, t2) {
  return tc(e2, t2);
}
function standardizeDataIteratorOutput(e2, t2) {
  var n2, r2, i2 = t2;
  n2 = i2.xs, r2 = i2.ys, tt.assert(null != n2 && null != r2, function() {
    return "A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates " + t2;
  });
  var a2 = flattenTensorOrArrayOrMap("input", e2.inputNames, n2), o2 = flattenTensorOrArrayOrMap("output", e2.outputNames, r2), s2 = a2[0].shape[0];
  tt.assert(a2.length === e2.inputs.length, function() {
    return "LayersModel has " + e2.inputs.length + " inputs, but the dataset provides " + a2.length + " inputs.  (Expected input keys: " + JSON.stringify(e2.inputNames) + ")";
  }), tt.assert(o2.length === e2.outputs.length, function() {
    return "LayersModel has " + e2.outputs.length + " outputs, but the dataset provides " + o2.length + " outputs.  (Expected output keys: " + JSON.stringify(e2.outputNames) + ")";
  });
  var l3 = function(t3) {
    tt.assert(a2[t3].shape[0] === s2, function() {
      return "Batch size mismatch: input " + e2.inputNames[t3] + " has " + a2[t3].shape[0] + "; expected  " + s2 + " based on input " + e2.inputNames[0] + ".";
    });
  };
  for (var u2 in a2)
    l3(u2);
  var c2 = function(t3) {
    tt.assert(o2[t3].shape[0] === s2, function() {
      return "Batch size mismatch: output " + e2.outputNames[t3] + " has " + o2[t3].shape[0] + "; expected  " + s2 + " based on input " + e2.inputNames[0] + ".";
    });
  };
  for (var p2 in o2)
    c2(p2);
  return { xs: a2, ys: o2 };
}
function flattenTensorOrArrayOrMap(e2, t2, n2) {
  if (n2 instanceof dt)
    return [n2];
  if (Array.isArray(n2))
    return tt.assert(n2.length === t2.length, function() {
      return "Received an array of " + n2.length + " Tensors, but expected " + t2.length + " to match the " + e2 + " keys " + t2 + ".";
    }), n2;
  for (var r2 = [], i2 = 0, a2 = t2; i2 < a2.length; i2++) {
    var o2 = a2[i2];
    if (null == n2[o2])
      throw new ValueError("The feature data generated by the dataset lacks the required " + e2 + " key '" + o2 + "'.");
    r2.push(n2[o2]);
  }
  return r2;
}
function standardizeTensorValidationData(e2) {
  if (3 === e2.length)
    throw new NotImplementedError("Validation with sample weights is not implemented yet.");
  return { xs: e2[0], ys: e2[1] };
}
function fitDataset(e2, t2, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i2, a2, o2, s2, l3, u2, c2, p2, h2, d2, f2, g2, m2, y2, v2, b2, w2, z2, S2, A2, _2, I2, C2, E2, N2, k2, x2, L2, T2, D2, O2, R2, M2;
    return __generator(this, function(P2) {
      switch (P2.label) {
        case 0:
          if (r2 = null != n2.batchesPerEpoch, tt.assert(null != e2.optimizer, function() {
            return "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).";
          }), tt.assert(null != n2, function() {
            return "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.";
          }), tt.assert(null != n2.epochs && n2.epochs > 0 && Number.isInteger(n2.epochs), function() {
            return "For fitDataset(), config.epochs is expected to be a positive integer, but got " + n2.epochs;
          }), tt.assert(!r2 || n2.batchesPerEpoch > 0 && Number.isInteger(n2.batchesPerEpoch), function() {
            return "For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got " + n2.batchesPerEpoch;
          }), tt.assert(null == n2.validationSplit, function() {
            return "`validationSplit` is not supported by `fitDataset()`. Use validationData instead.";
          }), e2.isTraining)
            throw new Error("Cannot start training because another fit() call is ongoing.");
          e2.isTraining = true, P2.label = 1;
        case 1:
          return P2.trys.push([1, , 26, 27]), i2 = null != n2.validationData, a2 = void 0, o2 = void 0, i2 && (isDatasetObject(n2.validationData) ? tt.assert(null == n2.validationBatches || n2.validationBatches > 0 && Number.isInteger(n2.validationBatches), function() {
            return "For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got " + n2.validationBatches;
          }) : (s2 = standardizeTensorValidationData(n2.validationData), a2 = s2.xs, o2 = s2.ys)), l3 = e2.makeTrainFunction(), u2 = e2.getDedupedMetricsNames(), c2 = void 0, c2 = i2 ? u2.slice().concat(u2.map(function(e3) {
            return "val_" + e3;
          })) : u2.slice(), p2 = standardizeCallbacks(n2.callbacks, n2.yieldEvery), h2 = null == n2.verbose ? 1 : n2.verbose, d2 = configureCallbacks(p2, h2, n2.epochs, null, null, getStepsPerEpoch(t2, n2), null, i2, c2), f2 = d2.callbackList, g2 = d2.history, f2.setModel(e2), e2.history = g2, [4, f2.onTrainBegin()];
        case 2:
          return P2.sent(), e2.stopTraining_ = false, m2 = null == n2.initialEpoch ? 0 : n2.initialEpoch, [4, t2.iterator()];
        case 3:
          y2 = P2.sent(), P2.label = 4;
        case 4:
          return m2 < n2.epochs ? (v2 = {}, [4, f2.onEpochBegin(m2)]) : [3, 23];
        case 5:
          return P2.sent(), b2 = 0, w2 = 0, r2 ? [3, 7] : [4, t2.iterator()];
        case 6:
          y2 = P2.sent(), P2.label = 7;
        case 7:
          return !r2 || b2 < n2.batchesPerEpoch ? [4, y2.next()] : [3, 21];
        case 8:
          return z2 = P2.sent(), r2 && z2.done ? (console.warn("You provided `batchesPerEpoch` as " + n2.batchesPerEpoch + ", but your dataset iterator ran out of data after " + b2 + " batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, " + n2.batchesPerEpoch * n2.epochs + " batches). You may need to use the repeat() function when building your dataset."), [3, 21]) : null == z2.value ? [3, 15] : (S2 = standardizeDataIteratorOutput(e2, z2.value), A2 = S2.xs, _2 = S2.ys, (I2 = {}).batch = w2, I2.size = A2[0].shape[0], [4, f2.onBatchBegin(w2, I2)]);
        case 9:
          if (P2.sent(), C2 = [], null == n2.classWeight)
            return [3, 13];
          E2 = standardizeClassWeights(n2.classWeight, e2.outputNames), M2 = 0, P2.label = 10;
        case 10:
          return M2 < E2.length ? (k2 = (N2 = C2).push, [4, standardizeWeights(_2[M2], null, E2[M2])]) : [3, 13];
        case 11:
          k2.apply(N2, [P2.sent()]), P2.label = 12;
        case 12:
          return ++M2, [3, 10];
        case 13:
          for (x2 = A2.concat(_2).concat(C2), L2 = l3(x2), Xe(x2), M2 = 0; M2 < u2.length; ++M2)
            T2 = u2[M2], D2 = L2[M2], I2[T2] = D2, $e(D2);
          return [4, f2.onBatchEnd(w2, I2)];
        case 14:
          P2.sent(), disposeTensorsInLogs(I2), w2++, b2++, P2.label = 15;
        case 15:
          return (r2 ? b2 >= n2.batchesPerEpoch : z2.done) ? i2 ? (O2 = void 0, isDatasetObject(n2.validationData) ? (R2 = toList, [4, e2.evaluateDataset(n2.validationData, { batches: n2.validationBatches })]) : [3, 17]) : [3, 19] : [3, 20];
        case 16:
          return O2 = R2.apply(void 0, [P2.sent()]), [3, 18];
        case 17:
          O2 = toList(e2.evaluate(a2, o2, { batchSize: null == n2.validationBatchSize ? DEFAULT_VALIDATION_BATCH_SIZE : n2.validationBatchSize, verbose: 0 })), P2.label = 18;
        case 18:
          for (M2 = 0; M2 < e2.metricsNames.length; ++M2)
            v2["val_" + e2.metricsNames[M2]] = O2[M2];
          P2.label = 19;
        case 19:
          return [3, 21];
        case 20:
          return e2.stopTraining_ ? [3, 21] : [3, 7];
        case 21:
          return [4, f2.onEpochEnd(m2, v2)];
        case 22:
          return P2.sent(), m2++, e2.stopTraining_ ? [3, 23] : [3, 4];
        case 23:
          return [4, f2.onTrainEnd()];
        case 24:
          return P2.sent(), [4, e2.history.syncData()];
        case 25:
          return P2.sent(), [2, e2.history];
        case 26:
          return e2.isTraining = false, [7];
        case 27:
          return [2];
      }
    });
  });
}
function getStepsPerEpoch(e2, t2) {
  var n2 = null;
  return null != t2.batchesPerEpoch ? n2 = t2.batchesPerEpoch : Number.isFinite(e2.size) && (n2 = e2.size), n2;
}
function isDatasetObject(e2) {
  return "function" == typeof e2.iterator;
}
function isLazyIteratorObject(e2) {
  return "function" == typeof e2.next;
}
function evaluateDataset(e2, t2, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i2, a2, o2, s2, l3, u2, c2, p2, h2;
    return __generator(this, function(d2) {
      switch (d2.label) {
        case 0:
          if (r2 = null != (n2 = n2 || {}).batches, i2 = e2.testFunction, a2 = [], n2.verbose > 0)
            throw new NotImplementedError("Verbose mode is not implemented yet.");
          return tt.assert(!r2 || n2.batches > 0 && Number.isInteger(n2.batches), function() {
            return "Test loop expects `batches` to be a positive integer, but received " + JSON.stringify(n2.batches);
          }), isLazyIteratorObject(t2) ? (s2 = t2, [3, 3]) : [3, 1];
        case 1:
          return [4, t2.iterator()];
        case 2:
          s2 = d2.sent(), d2.label = 3;
        case 3:
          o2 = s2, l3 = 0, u2 = 0, c2 = function() {
            var t3;
            return __generator(this, function(s3) {
              switch (s3.label) {
                case 0:
                  return [4, o2.next()];
                case 1:
                  return t3 = s3.sent(), a2 = je(function() {
                    if (t3.value) {
                      var n3 = standardizeDataIteratorOutput(e2, t3.value), r3 = n3.xs, o3 = n3.ys, s4 = r3.concat(o3), c3 = je(function() {
                        return i2(s4);
                      });
                      if (Xe(s4), 0 === u2)
                        for (var p3 = 0; p3 < c3.length; ++p3)
                          a2.push(An(0));
                      var h3 = s4[0].shape[0], d3 = function(e3) {
                        var t4 = c3[e3], n4 = a2[e3];
                        a2[e3] = je(function() {
                          return Vs(a2[e3], tc(h3, t4));
                        }), u2 > 0 && Xe(n4);
                      };
                      for (p3 = 0; p3 < c3.length; ++p3)
                        d3(p3);
                      Xe(c3), l3 += h3, ++u2;
                    }
                    return a2;
                  }), t3.done ? (r2 && console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` batches (in this case, " + n2.batches + " batches). You may need to use the repeat() function when building your dataset."), [2, "break"]) : [2];
              }
            });
          }, d2.label = 4;
        case 4:
          return !r2 || u2 < n2.batches ? [5, c2()] : [3, 6];
        case 5:
          return "break" === d2.sent() ? [3, 6] : [3, 4];
        case 6:
          for (p2 = 0; p2 < a2.length; ++p2)
            h2 = a2[p2], a2[p2] = qs(a2[p2], l3), Xe(h2);
          return [2, singletonOrArray(a2)];
      }
    });
  });
}
function checkBatchSize(e2) {
  tt.assert(e2 > 0 && Number.isInteger(e2), function() {
    return "batchSize is required to be a positive integer, but got " + e2;
  });
}
function sliceArrays(e2, t2, n2) {
  return null == e2 ? [null] : Array.isArray(e2) ? e2.map(function(e3) {
    return sliceAlongFirstAxis(e3, t2, n2 - t2);
  }) : sliceAlongFirstAxis(e2, t2, n2 - t2);
}
function sliceArraysByIndices(e2, t2) {
  return je(function() {
    return null == e2 ? null : Array.isArray(e2) ? e2.map(function(e3) {
      return sliceArraysByIndices(e3, t2);
    }) : gather$1(e2, "int32" === t2.dtype ? t2 : t2.toInt());
  });
}
function makeBatches(e2, t2) {
  for (var n2 = [], r2 = 0, i2 = null; r2 < e2; )
    (i2 = r2 + t2) >= e2 && (i2 = e2), n2.push([r2, i2]), r2 = i2;
  return n2;
}
function fitLoop(e2, t2, n2, r2, i2, a2, o2, s2, l3, u2, c2, p2, h2, d2, f2) {
  return __awaiter(this, void 0, void 0, function() {
    var g2, m2, y2, v2, b2, w2, z2, S2;
    return __generator(this, function(A2) {
      switch (A2.label) {
        case 0:
          if (null == i2 && (i2 = 32), null == a2 && (a2 = 1), null == c2 && (c2 = true), null == h2 && (h2 = 0), g2 = false, null != l3 && null != u2 && (g2 = true), null != f2 && (g2 = true, null == d2))
            throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
          return null != (m2 = e2.checkNumSamples(n2, i2, d2, "steps_per_epoch")) && (y2 = range(0, m2)), null == o2 && (o2 = 1), v2 = configureCallbacks(s2, o2, a2, h2, m2, d2, i2, g2, p2), b2 = v2.callbackList, w2 = v2.history, b2.setModel(e2), e2.history = w2, [4, b2.onTrainBegin()];
        case 1:
          A2.sent(), e2.stopTraining_ = false, z2 = function(a3) {
            var o3, s3, p3, h3, f3;
            return __generator(this, function(v3) {
              switch (v3.label) {
                case 0:
                  return [4, b2.onEpochBegin(a3)];
                case 1:
                  if (v3.sent(), o3 = {}, null == d2)
                    return [3, 2];
                  throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");
                case 2:
                  if ("batch" === c2)
                    throw new NotImplementedError("batch shuffling is not implemneted yet");
                  c2 && tt.shuffle(y2), s3 = Dn(y2), p3 = makeBatches(m2, i2), h3 = function(a4) {
                    var c3;
                    return __generator(this, function(h4) {
                      switch (h4.label) {
                        case 0:
                          return c3 = {}, [4, b2.onBatchBegin(a4, c3)];
                        case 1:
                          return h4.sent(), je(function() {
                            var h5 = p3[a4][0], d3 = p3[a4][1], f4 = sliceAlongFirstAxis(s3, h5, d3 - h5);
                            c3.batch = a4, c3.size = d3 - h5;
                            for (var m3 = sliceArraysByIndices(n2, f4), y3 = t2(m3), v4 = 0; v4 < r2.length; ++v4) {
                              var b3 = r2[v4], w3 = y3[v4];
                              c3[b3] = w3, $e(w3);
                            }
                            if (a4 === p3.length - 1 && g2) {
                              var z3 = e2.testLoop(l3, u2, i2);
                              for (v4 = 0; v4 < r2.length; ++v4) {
                                b3 = r2[v4], w3 = z3[v4];
                                $e(w3), o3["val_" + b3] = w3;
                              }
                            }
                          }), [4, b2.onBatchEnd(a4, c3)];
                        case 2:
                          return h4.sent(), disposeTensorsInLogs(c3), e2.stopTraining_ ? [2, "break"] : [2];
                      }
                    });
                  }, f3 = 0, v3.label = 3;
                case 3:
                  return f3 < p3.length ? [5, h3(f3)] : [3, 6];
                case 4:
                  if ("break" === v3.sent())
                    return [3, 6];
                  v3.label = 5;
                case 5:
                  return ++f3, [3, 3];
                case 6:
                  s3.dispose(), v3.label = 7;
                case 7:
                  return [4, b2.onEpochEnd(a3, o3)];
                case 8:
                  return v3.sent(), e2.stopTraining_ ? [2, "break"] : [2];
              }
            });
          }, S2 = h2, A2.label = 2;
        case 2:
          return S2 < a2 ? [5, z2(S2)] : [3, 5];
        case 3:
          if ("break" === A2.sent())
            return [3, 5];
          A2.label = 4;
        case 4:
          return ++S2, [3, 2];
        case 5:
          return [4, b2.onTrainEnd()];
        case 6:
          return A2.sent(), [4, e2.history.syncData()];
        case 7:
          return A2.sent(), [2, e2.history];
      }
    });
  });
}
function fitTensors(e2, t2, n2, r2) {
  return void 0 === r2 && (r2 = {}), __awaiter(this, void 0, void 0, function() {
    var i2, a2, o2, s2, l3, u2, c2, p2, h2, d2, f2, g2, m2, y2, v2, b2, w2, z2, S2, A2, _2, I2;
    return __generator(this, function(C2) {
      switch (C2.label) {
        case 0:
          if (e2.isTraining)
            throw new Error("Cannot start training because another fit() call is ongoing.");
          e2.isTraining = true, C2.label = 1;
        case 1:
          return C2.trys.push([1, , 7, 8]), checkBatchSize(p2 = null == r2.batchSize ? 32 : r2.batchSize), h2 = false, [4, e2.standardizeUserData(t2, n2, r2.sampleWeight, r2.classWeight, h2, p2)];
        case 2:
          if (d2 = C2.sent(), i2 = d2[0], a2 = d2[1], c2 = d2[2], f2 = false, g2 = void 0, !(null != r2.validationData && r2.validationData.length > 0))
            return [3, 4];
          if (f2 = true, 2 !== r2.validationData.length)
            throw 3 === r2.validationData.length ? new NotImplementedError("validationData including sample weights is not supported yet.") : new ValueError("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; " + r2.validationData + " is invalid.");
          return o2 = r2.validationData[0], s2 = r2.validationData[1], m2 = true, [4, e2.standardizeUserData(o2, s2, null, null, m2, p2)];
        case 3:
          return y2 = C2.sent(), l3 = y2[0], u2 = y2[1], g2 = l3.concat(u2), [3, 5];
        case 4:
          null != r2.validationSplit && r2.validationSplit > 0 && r2.validationSplit < 1 ? (f2 = true, v2 = Math.floor(i2[0].shape[0] * (1 - r2.validationSplit)), b2 = i2[0].shape[0], l3 = sliceArrays(i2, v2, b2), i2 = sliceArrays(i2, 0, v2), u2 = sliceArrays(a2, v2, b2), a2 = sliceArrays(a2, 0, v2), g2 = l3.concat(u2)) : null != r2.validationSteps && (f2 = true), C2.label = 5;
        case 5:
          return w2 = i2.concat(a2).concat(c2), e2.checkTrainableWeightsConsistency(), z2 = e2.makeTrainFunction(), S2 = e2.getDedupedMetricsNames(), A2 = void 0, _2 = void 0, f2 ? (e2.makeTestFunction(), A2 = e2.testFunction, _2 = S2.slice().concat(S2.map(function(e3) {
            return "val_" + e3;
          }))) : (A2 = null, g2 = [], _2 = S2.slice()), I2 = standardizeCallbacks(r2.callbacks, r2.yieldEvery), [4, fitLoop(e2, z2, w2, S2, p2, r2.epochs, r2.verbose, I2, A2, g2, r2.shuffle, _2, r2.initialEpoch, null, null)];
        case 6:
          return [2, C2.sent()];
        case 7:
          return e2.isTraining = false, disposeNewTensors(i2, t2), disposeNewTensors(a2, n2), disposeNewTensors(l3, o2), disposeNewTensors(u2, s2), null != c2 && Xe(c2), [7];
        case 8:
          return [2];
      }
    });
  });
}
function ensureTensorsRank2OrHigher(e2) {
  var t2 = [];
  e2 instanceof dt && (e2 = [e2]);
  for (var n2 = 0; n2 < e2.length; ++n2) {
    var r2 = e2[n2];
    if (1 === r2.rank)
      t2.push(expandDims$1(r2, 1));
    else {
      if (0 === r2.rank)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      t2.push(r2);
    }
  }
  return t2;
}
function disposeNewTensors(e2, t2) {
  if (null != e2) {
    var n2 = [];
    if (t2 instanceof dt)
      n2.push(t2.id);
    else if (Array.isArray(t2))
      t2.forEach(function(e3) {
        return n2.push(e3.id);
      });
    else if (null != t2)
      for (var r2 in t2) {
        var i2 = t2[r2];
        n2.push(i2.id);
      }
    var a2 = [];
    if (e2 instanceof dt)
      -1 === n2.indexOf(e2.id) && a2.push(e2);
    else if (Array.isArray(e2))
      e2.forEach(function(e3) {
        -1 === n2.indexOf(e3.id) && a2.push(e3);
      });
    else if (null != e2)
      for (var o2 in e2) {
        var s2 = e2[o2];
        -1 === n2.indexOf(s2.id) && a2.push(s2);
      }
    a2.forEach(function(e3) {
      e3.isDisposed || e3.dispose();
    });
  }
}
function isDataTensor(e2) {
  return e2 instanceof dt;
}
function isDataArray(e2) {
  return Array.isArray(e2);
}
function isDataDict(e2) {
  return !isDataTensor(e2) && !isDataArray(e2);
}
function standardizeInputData(e2, t2, n2, r2, i2) {
  if (void 0 === r2 && (r2 = true), void 0 === i2 && (i2 = ""), null == t2 || 0 === t2.length) {
    if (null != e2) {
      var a2 = false;
      if (isDataArray(e2) && e2.length > 0)
        a2 = true;
      else if (isDataDict(e2)) {
        for (var o2 in e2)
          if (e2.hasOwnProperty(o2)) {
            a2 = true;
            break;
          }
      } else
        a2 = true;
      if (a2)
        throw new ValueError("Error when checking model " + i2 + " expected no data, but got " + e2);
    }
    return [];
  }
  if (null == e2)
    return t2.map(function(e3) {
      return null;
    });
  var s2;
  if (isDataDict(e2)) {
    e2 = e2, s2 = [];
    for (var l3 = 0, u2 = t2; l3 < u2.length; l3++) {
      var c2 = u2[l3];
      if (null == e2[c2])
        throw new ValueError('No data provided for "' + c2 + '". Need data for each key in: ' + t2);
      s2.push(e2[c2]);
    }
  } else if (isDataArray(e2)) {
    if ((e2 = e2).length !== t2.length)
      throw new ValueError("Error when checking model " + i2 + ": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see " + t2.length + " Tensor(s), but instead got the following list of Tensor(s): " + e2);
    s2 = e2;
  } else {
    if (e2 = e2, t2.length > 1)
      throw new ValueError("The model " + i2 + " expects " + t2.length + " Tensor(s), but only received one Tensor. Found: Tensor with shape " + e2.shape);
    s2 = [e2];
  }
  if (s2 = ensureTensorsRank2OrHigher(s2), null != n2) {
    for (var p2 = 0; p2 < t2.length; ++p2)
      if (null != n2[p2]) {
        var h2 = s2[p2];
        if (h2.shape.length !== n2[p2].length)
          throw new ValueError("Error when checking " + i2 + ": expected " + t2[p2] + " to have " + n2[p2].length + " dimension(s). but got array with shape " + h2.shape);
        for (var d2 = 0; d2 < n2[p2].length; ++d2)
          if (0 !== d2 || r2) {
            var f2 = h2.shape[d2], g2 = n2[p2][d2];
            if (null != g2 && g2 >= 0 && f2 !== g2)
              throw new ValueError("Error when checking " + i2 + ": expected " + t2[p2] + " to have shape [" + n2[p2] + "], but got array with shape [" + h2.shape + "].");
          }
      }
  }
  return s2;
}
function checkArrayLengths(e2, t2, n2) {
  var r2 = unique(e2.map(function(e3) {
    return e3.shape[0];
  }));
  r2.sort();
  var i2 = unique(t2.map(function(e3) {
    return e3.shape[0];
  }));
  if (i2.sort(), r2.length > 1)
    throw new ValueError("All input Tensors (x) should have the same number of samples. Got array shapes: " + JSON.stringify(e2.map(function(e3) {
      return e3.shape;
    })));
  if (i2.length > 1)
    throw new ValueError("All target Tensors (y) should have the same number of samples. Got array shapes: " + JSON.stringify(t2.map(function(e3) {
      return e3.shape;
    })));
  if (r2.length > 0 && i2.length > 0 && !tt.arraysEqual(r2, i2))
    throw new ValueError("Input Tensors should have the same number of samples as target Tensors. Found " + r2[0] + " input sample(s) and " + i2[0] + " target sample(s).");
}
function checkLossAndTargetCompatibility(e2, t2, n2) {
  for (var r2 = [meanSquaredError, binaryCrossentropy, categoricalCrossentropy], i2 = 0; i2 < e2.length; ++i2) {
    var a2 = e2[i2], o2 = t2[i2], s2 = n2[i2];
    if (null != o2) {
      if (o2 === categoricalCrossentropy && 1 === a2.shape[a2.shape.length - 1])
        throw new ValueError("You are passing a target array of shape " + a2.shape + " while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");
      if (-1 !== r2.indexOf(o2))
        for (var l3 = a2.shape.slice(1), u2 = s2.slice(1), c2 = 0; c2 < l3.length; ++c2) {
          var p2 = l3[c2], h2 = u2[c2];
          if (null != h2 && p2 !== h2)
            throw new ValueError("A target Tensor with shape " + a2.shape + " was passed for an output of shape " + s2 + ", while using a loss function that expects targets to have the same shape as the output.");
        }
    }
  }
}
function checkInputData(e2, t2, n2, r2, i2) {
  var a2;
  if (void 0 === r2 && (r2 = true), void 0 === i2 && (i2 = ""), Array.isArray(e2)) {
    if (e2.length !== t2.length)
      throw new ValueError("Error when checking model " + i2 + ": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see " + t2.length + " Tensor(s), but instead got " + e2.length + " Tensors(s).");
    a2 = e2;
  } else {
    if (t2.length > 1)
      throw new ValueError("The model expects " + t2.length + " " + i2 + " Tensors, but only received one Tensor. Found: array with shape " + JSON.stringify(e2.shape) + ".");
    a2 = [e2];
  }
  if (null != n2) {
    for (var o2 = 0; o2 < t2.length; ++o2)
      if (null != n2[o2]) {
        var s2 = a2[o2];
        if (s2.shape.length !== n2[o2].length)
          throw new ValueError("Error when checking " + i2 + ": expected " + t2[o2] + " to have " + n2[o2].length + " dimension(s), but got array with shape " + JSON.stringify(s2.shape));
        for (var l3 = 0; l3 < n2[o2].length; ++l3)
          if (0 !== l3 || r2) {
            var u2 = s2.shape[l3], c2 = n2[o2][l3];
            if (null != c2 && c2 !== u2)
              throw new ValueError("Error when checking " + i2 + ": expected " + t2[o2] + " to have shape " + JSON.stringify(n2[o2]) + " but got array with shape " + JSON.stringify(s2.shape) + ".");
          }
      }
  }
}
function collectMetrics(e2, t2) {
  if (null == e2 || Array.isArray(e2) && 0 === e2.length)
    return t2.map(function(e3) {
      return [];
    });
  var n2;
  if ("string" == typeof e2 || "function" == typeof e2)
    n2 = [e2];
  else {
    if (!Array.isArray(e2) && "object" != typeof e2)
      throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: " + e2);
    n2 = e2;
  }
  if (Array.isArray(n2))
    return t2.map(function(e3) {
      return n2;
    });
  for (var r2 = [], i2 = 0, a2 = t2; i2 < a2.length; i2++) {
    var o2 = a2[i2], s2 = n2.hasOwnProperty(o2) ? n2[o2] : [];
    Array.isArray(s2) || (s2 = [s2]), r2.push(s2);
  }
  return r2;
}
function modelFromJSON(e2, t2) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i2, a2, o2, s2, l3, u2;
    return __generator(this, function(c2) {
      switch (c2.label) {
        case 0:
          return "modelTopology" in e2 || (e2 = { modelTopology: e2 }), null != (n2 = (e2 = e2).modelTopology).model_config && (n2 = n2.model_config), r2 = convertPythonicToTs(n2), i2 = deserialize(r2, t2), null == e2.weightsManifest ? [3, 2] : [4, Sf.loadWeights(e2.weightsManifest, e2.pathPrefix, i2.weights.map(function(e3) {
            return e3.originalName;
          }))];
        case 1:
          for (a2 = c2.sent(), o2 = {}, s2 = 0, l3 = i2.weights; s2 < l3.length; s2++)
            u2 = l3[s2], o2[u2.originalName] = a2[u2.originalName];
          i2.loadWeights(o2), Xe(a2), c2.label = 2;
        case 2:
          return [2, i2];
      }
    });
  });
}
function loadLayersModelInternal(e2, t2) {
  return __awaiter(this, void 0, void 0, function() {
    var n2;
    return __generator(this, function(r2) {
      if (null == t2 && (t2 = {}), "string" == typeof e2) {
        if (0 === (n2 = Sf.getLoadHandlers(e2, t2.onProgress)).length)
          n2.push(Sf.browserHTTPRequest(e2, t2));
        else if (n2.length > 1)
          throw new ValueError("Found more than one (" + n2.length + ") load handlers for URL '" + e2 + "'");
        e2 = n2[0];
      }
      return [2, loadLayersModelFromIOHandler(e2, void 0, t2)];
    });
  });
}
function loadLayersModelFromIOHandler(e2, t2, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i2, a2, o2, s2, l3, u2, c2, p2;
    return __generator(this, function(h2) {
      switch (h2.label) {
        case 0:
          if (null == n2 && (n2 = {}), null == e2.load)
            throw new ValueError("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
          return [4, e2.load()];
        case 1:
          if (r2 = h2.sent(), null != (i2 = r2.modelTopology).model_config && (i2 = i2.model_config), a2 = null == n2.strict || n2.strict, o2 = null != r2.weightData && null != r2.weightSpecs && a2, s2 = deserialize(convertPythonicToTs(i2), t2, o2), null != (l3 = r2.trainingConfig) && s2.loadTrainingConfig(l3), null != r2.userDefinedMetadata && s2.setUserDefinedMetadata(r2.userDefinedMetadata), null == r2.weightData)
            return [3, 4];
          if (null == r2.weightSpecs)
            throw new ValueError("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
          return u2 = decodeModelAndOptimizerWeights(r2.weightData, r2.weightSpecs), c2 = u2.modelWeights, p2 = u2.optimizerWeights, s2.loadWeights(c2, a2), null != s2.optimizer && p2.length > 0 ? [4, s2.optimizer.setWeights(p2)] : [3, 3];
        case 2:
          h2.sent(), h2.label = 3;
        case 3:
          Xe(c2), Xe(p2.map(function(e3) {
            return e3.tensor;
          })), h2.label = 4;
        case 4:
          return [2, s2];
      }
    });
  });
}
function decodeModelAndOptimizerWeights(e2, t2) {
  var n2 = Sf.decodeWeights(e2, t2), r2 = {}, i2 = [];
  return t2.forEach(function(e3) {
    "optimizer" === e3.group ? i2.push({ name: e3.name, tensor: n2[e3.name] }) : r2[e3.name] = n2[e3.name];
  }), { modelWeights: r2, optimizerWeights: i2 };
}
function model(e2) {
  return new LayersModel(e2);
}
function sequential(e2) {
  return new Sequential(e2);
}
function loadLayersModel(e2, t2) {
  return null == t2 && (t2 = {}), loadLayersModelInternal(e2, t2);
}
function input(e2) {
  return Input(e2);
}
function registerCallbackConstructor(e2, t2) {
  CallbackConstructorRegistry.registerCallbackConstructor(e2, t2);
}
function serializeActivation(e2) {
  return e2.getClassName();
}
function deserializeActivation(e2, t2) {
  return void 0 === t2 && (t2 = {}), deserializeKerasObject(e2, Mf.SerializationMap.getMap().classNameMap, t2, "activation");
}
function getActivation(e2) {
  var t2;
  return null == e2 ? deserializeActivation(t2 = { className: "linear", config: {} }) : "string" == typeof e2 ? ((t2 = {}).className = e2, t2.config = {}, deserializeActivation(t2)) : e2 instanceof Activation ? e2 : deserializeActivation(e2);
}
function assertObjectArgs(e2) {
  if (null != e2 && "object" != typeof e2)
    throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: " + e2);
}
function l1(e2) {
  return assertObjectArgs(e2), new L1L2({ l1: null != e2 ? e2.l1 : null, l2: 0 });
}
function l2(e2) {
  return assertObjectArgs(e2), new L1L2({ l2: null != e2 ? e2.l2 : null, l1: 0 });
}
function serializeRegularizer(e2) {
  return serializeKerasObject(e2);
}
function deserializeRegularizer(e2, t2) {
  return void 0 === t2 && (t2 = {}), deserializeKerasObject(e2, Mf.SerializationMap.getMap().classNameMap, t2, "regularizer");
}
function getRegularizer(e2) {
  return null == e2 ? null : "string" == typeof e2 ? deserializeRegularizer({ className: e2 in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e2] : e2, config: {} }) : e2 instanceof Regularizer ? e2 : deserializeRegularizer(e2);
}
function normalizeArray(e2, t2, n2) {
  if ("number" == typeof e2)
    return pyListRepeat(e2, t2);
  if (e2.length !== t2)
    throw new ValueError("The " + n2 + " argument must be an integer or tuple of " + t2 + " integers. Received: " + e2.length + " elements.");
  for (var r2 = 0; r2 < t2; ++r2) {
    var i2 = e2[r2];
    if (!isInteger(i2))
      throw new ValueError("The " + n2 + " argument must be an integer or tuple of " + t2 + " integers. Received: " + JSON.stringify(e2) + " including a non-integer number " + i2);
  }
  return e2;
}
function convOutputLength(e2, t2, n2, r2, i2) {
  return void 0 === i2 && (i2 = 1), null == e2 ? e2 : (a2 = "same" === n2 ? e2 : e2 - (t2 + (t2 - 1) * (i2 - 1)) + 1, Math.floor((a2 + r2 - 1) / r2));
  var a2;
}
function deconvLength(e2, t2, n2, r2) {
  if (null == e2)
    return null;
  if ("valid" === r2)
    e2 = e2 * t2 + max$1([n2 - t2, 0]);
  else {
    if ("same" !== r2)
      throw new ValueError("Unsupport padding mode: " + r2 + ".");
    e2 *= t2;
  }
  return e2;
}
function preprocessConv2DInput(e2, t2) {
  return je(function() {
    return checkDataFormat(t2), "channelsFirst" === t2 ? El(e2, [0, 2, 3, 1]) : e2;
  });
}
function preprocessConv3DInput(e2, t2) {
  return je(function() {
    return checkDataFormat(t2), "channelsFirst" === t2 ? El(e2, [0, 2, 3, 4, 1]) : e2;
  });
}
function conv1dWithBias(e2, t2, n2, r2, i2, a2, o2) {
  return void 0 === r2 && (r2 = 1), void 0 === i2 && (i2 = "valid"), void 0 === o2 && (o2 = 1), je(function() {
    if (null == a2 && (a2 = imageDataFormat()), checkDataFormat(a2), 3 !== e2.shape.length)
      throw new ValueError("The input of a conv1dWithBias operation should be 3, but is " + e2.shape.length + " instead.");
    if (3 !== t2.shape.length)
      throw new ValueError("The kernel for a conv1dWithBias operation should be 3, but is " + t2.shape.length + " instead");
    if (null != n2 && 1 !== n2.shape.length)
      throw new ValueError("The bias for a conv1dWithBias operation should be 1, but is " + t2.shape.length + " instead");
    if ("channelsFirst" === a2 && (e2 = El(e2, [0, 2, 1])), "causal" === i2)
      throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    var s2 = Ac(e2, t2, r2, "same" === i2 ? "same" : "valid", "NWC", o2);
    return null != n2 && (s2 = biasAdd(s2, n2)), s2;
  });
}
function conv2dWithBiasActivation(e2, t2, n2, r2, i2, a2, o2, s2) {
  return void 0 === r2 && (r2 = [1, 1]), void 0 === i2 && (i2 = "valid"), void 0 === s2 && (s2 = null), je(function() {
    if (null == a2 && (a2 = imageDataFormat()), checkDataFormat(a2), 3 !== e2.rank && 4 !== e2.rank)
      throw new ValueError("conv2dWithBiasActivation expects input to be of rank 3 or 4, but received " + e2.rank + ".");
    if (3 !== t2.rank && 4 !== t2.rank)
      throw new ValueError("conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received " + e2.rank + ".");
    var l3 = preprocessConv2DInput(e2, a2);
    if ("causal" === i2)
      throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l3 = Eh.conv2d({ x: l3, filter: t2, strides: r2, pad: "same" === i2 ? "same" : "valid", dilations: o2, dataFormat: "NHWC", bias: n2, activation: s2 }), "channelsFirst" === a2 && (l3 = El(l3, [0, 3, 1, 2])), l3;
  });
}
function conv3dWithBias(e2, t2, n2, r2, i2, a2, o2) {
  return void 0 === r2 && (r2 = [1, 1, 1]), void 0 === i2 && (i2 = "valid"), je(function() {
    if (null == a2 && (a2 = imageDataFormat()), checkDataFormat(a2), 4 !== e2.rank && 5 !== e2.rank)
      throw new ValueError("conv3dWithBias expects input to be of rank 4 or 5, but received " + e2.rank + ".");
    if (4 !== t2.rank && 5 !== t2.rank)
      throw new ValueError("conv3dWithBias expects kernel to be of rank 4 or 5, but received " + e2.rank + ".");
    var s2 = preprocessConv3DInput(e2, a2);
    if ("causal" === i2)
      throw new NotImplementedError("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return s2 = Tc(s2, t2, r2, "same" === i2 ? "same" : "valid", "NDHWC", o2), null != n2 && (s2 = biasAdd(s2, n2)), "channelsFirst" === a2 && (s2 = El(s2, [0, 4, 1, 2, 3])), s2;
  });
}
function depthwiseConv2d$1(e2, t2, n2, r2, i2, a2) {
  return void 0 === n2 && (n2 = [1, 1]), void 0 === r2 && (r2 = "valid"), je(function() {
    null == i2 && (i2 = imageDataFormat()), checkDataFormat(i2);
    var o2 = preprocessConv2DInput(e2, i2);
    if (4 !== e2.rank)
      throw new ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead " + e2.rank + "-D");
    if (4 !== t2.rank)
      throw new ValueError("depthwiseKernel is required to be 4-D, but is instead " + t2.rank + "-D");
    return o2 = Oc(o2, t2, n2, "same" === r2 ? "same" : "valid", "NHWC", a2), "channelsFirst" === i2 && (o2 = El(o2, [0, 3, 1, 2])), o2;
  });
}
function interpretAxis(e2, t2) {
  for (; e2 < 0; )
    e2 += t2;
  return e2;
}
function batchDot(e2, t2, n2) {
  if (e2.shape.length > 3 || t2.shape.length > 3)
    throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (tt.assert(e2.shape.length >= 2, function() {
    return "batchDot requires the rank of x to be >= 2, but got " + e2.shape.length;
  }), tt.assert(e2.shape.length >= 2, function() {
    return "batchDot requires the rank of y to be >= 2, but got " + t2.shape.length;
  }), "number" == typeof n2 && (n2 = [n2, n2]), "complex64" === e2.dtype || "complex64" === t2.dtype)
    throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");
  var r2 = e2.shape.length, i2 = t2.shape.length;
  null == n2 && (n2 = [r2 - 1, i2 - 2]);
  var a2 = n2;
  return je(function() {
    var n3, o2;
    if (r2 > i2) {
      n3 = r2 - i2;
      for (var s2 = [], l3 = 0; l3 < n3; ++l3)
        s2.push(1);
      t2 = t2.reshape(t2.shape.concat(s2));
    } else if (i2 > r2) {
      n3 = i2 - r2;
      for (s2 = [], l3 = 0; l3 < n3; ++l3)
        s2.push(1);
      e2 = e2.reshape(e2.shape.concat(s2));
    } else
      n3 = 0;
    if (2 === e2.shape.length && 2 === t2.shape.length)
      o2 = a2[0] === a2[1] ? e2.mulStrict(t2).sum(a2[0]) : e2.transpose([1, 0]).mulStrict(t2).sum(a2[1]);
    else {
      var u2 = a2[0] !== e2.shape.length - 1, c2 = a2[1] === t2.shape.length - 1;
      o2 = e2.matMul(t2, u2, c2);
    }
    if (n3 > 0) {
      var p2 = void 0, h2 = [];
      for (l3 = p2 = r2 > i2 ? r2 + i2 - 3 : r2 - 1; l3 < p2 + n3; ++l3)
        h2.push(l3);
      o2 = o2.squeeze(h2);
    }
    return 1 === o2.shape.length && (o2 = o2.expandDims(1)), o2;
  });
}
function batchNormalization(e2, t2, n2, r2, i2, a2) {
  var o2;
  if (void 0 === a2 && (a2 = 1e-3), 2 === e2.rank)
    o2 = Fs(e2, t2, n2, r2, i2, a2);
  else if (3 === e2.rank)
    o2 = Os(e2, t2, n2, r2, i2, a2);
  else {
    if (4 !== e2.rank)
      throw new NotImplementedError("batchNormalization is not implemented for array of rank " + e2.rank + " yet");
    o2 = _s(e2, t2, n2, r2, i2, a2);
  }
  return o2;
}
function regularNormalizeBatchInTraining(e2, t2, n2, r2, i2) {
  return void 0 === i2 && (i2 = 1e-3), je(function() {
    var a2 = dl(e2, r2), o2 = a2.mean, s2 = a2.variance;
    return [batchNormalization(e2, o2, s2, n2, t2, i2), o2, s2];
  });
}
function broadcastNormalizeBatchInTraining(e2, t2, n2, r2, i2) {
  return void 0 === i2 && (i2 = 1e-3), je(function() {
    for (var a2 = dl(e2, r2), o2 = a2.mean, s2 = a2.variance, l3 = [], u2 = 0, c2 = range(0, e2.rank); u2 < c2.length; u2++) {
      var p2 = c2[u2];
      -1 !== r2.indexOf(p2) ? l3.push(1) : l3.push(e2.shape[p2]);
    }
    var h2 = o2.reshape(l3), d2 = s2.reshape(l3), f2 = null == t2 ? null : t2.reshape(l3), g2 = null == n2 ? null : n2.reshape(l3);
    return [batchNormalization(e2, h2, d2, g2, f2, i2), o2, s2];
  });
}
function normalizeBatchInTraining(e2, t2, n2, r2, i2) {
  return void 0 === i2 && (i2 = 1e-3), tt.arraysEqual(r2.slice().sort(), range(0, e2.rank - 1)) ? regularNormalizeBatchInTraining(e2, t2, n2, r2, i2) : broadcastNormalizeBatchInTraining(e2, t2, n2, r2, i2);
}
function spatial2dPadding(e2, t2, n2) {
  return je(function() {
    if (4 !== e2.rank)
      throw new ValueError("temporalPadding expects input tensor to be 4-D, but received a " + e2.rank + "-D tensor.");
    if (null == t2 && (t2 = [[1, 1], [1, 1]]), 2 !== t2.length || 2 !== t2[0].length || 2 !== t2[1].length)
      throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (null == n2 && (n2 = imageDataFormat()), "channelsLast" !== n2 && "channelsFirst" !== n2)
      throw new ValueError("Unknown data format: " + n2 + ". Supported data formats are 'channelsLast' and 'channelsFirst.");
    var r2;
    return r2 = "channelsFirst" === n2 ? [[0, 0], [0, 0], t2[0], t2[1]] : [[0, 0], t2[0], t2[1], [0, 0]], yr(e2, r2);
  });
}
function pool2d(e2, t2, n2, r2, i2, a2) {
  return je(function() {
    var o2;
    checkDataFormat(i2), checkPoolMode(a2), checkPaddingMode(r2), null == n2 && (n2 = [1, 1]), null == r2 && (r2 = "valid"), null == i2 && (i2 = imageDataFormat()), null == a2 && (a2 = "max"), e2 = preprocessConv2DInput(e2, i2);
    var s2 = "same" === r2 ? "same" : "valid";
    return o2 = "max" === a2 ? $c(e2, t2, n2, s2) : Yc(e2, t2, n2, s2), "channelsFirst" === i2 && (o2 = El(o2, [0, 3, 1, 2])), o2;
  });
}
function pool3d(e2, t2, n2, r2, i2, a2) {
  return je(function() {
    var o2;
    checkDataFormat(i2), checkPoolMode(a2), checkPaddingMode(r2), null == n2 && (n2 = [1, 1, 1]), null == r2 && (r2 = "valid"), null == i2 && (i2 = imageDataFormat()), null == a2 && (a2 = "max"), e2 = preprocessConv3DInput(e2, i2);
    var s2 = "same" === r2 ? "same" : "valid";
    return o2 = "max" === a2 ? Jc(e2, t2, n2, s2) : Zc(e2, t2, n2, s2), "channelsFirst" === i2 && (o2 = El(o2, [0, 4, 1, 2, 3])), o2;
  });
}
function standardizeArgs(e2, t2, n2, r2) {
  if (Array.isArray(e2)) {
    if (null != t2 || null != n2)
      throw new ValueError("When inputs is an array, neither initialState or constants should be provided");
    null != r2 && (n2 = e2.slice(e2.length - r2, e2.length), e2 = e2.slice(0, e2.length - r2)), e2.length > 1 && (t2 = e2.slice(1, e2.length)), e2 = e2[0];
  }
  function i2(e3) {
    return null == e3 || Array.isArray(e3) ? e3 : [e3];
  }
  return { inputs: e2, initialState: t2 = i2(t2), constants: n2 = i2(n2) };
}
function rnn(e2, t2, n2, r2, i2, a2, o2, s2) {
  return void 0 === r2 && (r2 = false), void 0 === o2 && (o2 = false), void 0 === s2 && (s2 = false), je(function() {
    var l3 = t2.shape.length;
    if (l3 < 3)
      throw new ValueError("Input should be at least 3D, but is " + l3 + "D.");
    var u2 = [1, 0].concat(range(2, l3));
    if (t2 = El(t2, u2), null != a2)
      throw new NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    o2 && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), null != i2 && ((i2 = i2.asType("bool").asType("float32")).rank === l3 - 1 && (i2 = dr(i2, -1)), i2 = El(i2, u2)), r2 && (t2 = zc(t2, 0), null != i2 && (i2 = zc(i2, 0)));
    var c2, p2, h2 = [], d2 = n2, f2 = t2.shape[0], g2 = Or(t2);
    null != i2 && (p2 = Or(i2));
    for (var m2, y2 = function(t3) {
      var n3 = g2[t3], r3 = je(function() {
        return e2(n3, d2);
      });
      if (null == i2)
        c2 = r3[0], d2 = r3[1];
      else {
        var a3 = je(function() {
          var e3 = p2[t3], n4 = Vn(e3).sub(e3);
          return { output: r3[0].mul(e3).addStrict(d2[0].mul(n4)), newStates: d2.map(function(t4, i3) {
            return r3[1][i3].mul(e3).addStrict(t4.mul(n4));
          }) };
        });
        c2 = a3.output, d2 = a3.newStates;
      }
      s2 && h2.push(c2);
    }, v2 = 0; v2 < f2; ++v2)
      y2(v2);
    if (s2) {
      m2 = Tr(h2, 1);
    }
    return [c2, m2, d2];
  });
}
function generateDropoutMask(e2, t2, n2, r2) {
  function i2() {
    return dropout$1(e2(), t2);
  }
  if (void 0 === n2 && (n2 = null), void 0 === r2 && (r2 = 1), r2 > 1) {
    for (var a2 = [], o2 = 0; o2 < r2; o2++)
      a2.push(inTrainPhase(i2, e2, n2));
    return a2.map(function(e3) {
      return $e(e3.clone());
    });
  }
  return $e(inTrainPhase(i2, e2, n2).clone());
}
function checkBidirectionalMergeMode(e2) {
  checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, "BidirectionalMergeMode", e2);
}
function inputLayer(e2) {
  return new InputLayer(e2);
}
function elu$2(e2) {
  return new ELU(e2);
}
function reLU(e2) {
  return new ReLU(e2);
}
function leakyReLU(e2) {
  return new LeakyReLU(e2);
}
function prelu$1(e2) {
  return new PReLU(e2);
}
function softmax$1(e2) {
  return new Softmax$1(e2);
}
function thresholdedReLU(e2) {
  return new ThresholdedReLU(e2);
}
function conv1d$2(e2) {
  return new Conv1D(e2);
}
function conv2d$1(e2) {
  return new Conv2D(e2);
}
function conv2dTranspose$1(e2) {
  return new Conv2DTranspose(e2);
}
function conv3d$2(e2) {
  return new Conv3D(e2);
}
function separableConv2d$1(e2) {
  return new SeparableConv2D(e2);
}
function cropping2D(e2) {
  return new Cropping2D(e2);
}
function upSampling2d(e2) {
  return new UpSampling2D(e2);
}
function depthwiseConv2d$2(e2) {
  return new DepthwiseConv2D(e2);
}
function activation(e2) {
  return new Activation$1(e2);
}
function dense(e2) {
  return new Dense(e2);
}
function dropout$2(e2) {
  return new Dropout(e2);
}
function flatten$1(e2) {
  return new Flatten(e2);
}
function repeatVector(e2) {
  return new RepeatVector(e2);
}
function reshape(e2) {
  return new Reshape(e2);
}
function permute(e2) {
  return new Permute(e2);
}
function embedding(e2) {
  return new Embedding(e2);
}
function add$2(e2) {
  return new Add(e2);
}
function average$1(e2) {
  return new Average(e2);
}
function concatenate$2(e2) {
  return new Concatenate(e2);
}
function maximum$2(e2) {
  return new Maximum(e2);
}
function minimum$2(e2) {
  return new Minimum(e2);
}
function multiply$1(e2) {
  return new Multiply(e2);
}
function dot$1(e2) {
  return new Dot(e2);
}
function batchNormalization$1(e2) {
  return new BatchNormalization(e2);
}
function layerNormalization(e2) {
  return new LayerNormalization(e2);
}
function zeroPadding2d(e2) {
  return new ZeroPadding2D(e2);
}
function averagePooling1d(e2) {
  return new AveragePooling1D(e2);
}
function avgPool1d(e2) {
  return averagePooling1d(e2);
}
function avgPooling1d(e2) {
  return averagePooling1d(e2);
}
function averagePooling2d(e2) {
  return new AveragePooling2D(e2);
}
function avgPool2d(e2) {
  return averagePooling2d(e2);
}
function avgPooling2d(e2) {
  return averagePooling2d(e2);
}
function averagePooling3d(e2) {
  return new AveragePooling3D(e2);
}
function avgPool3d$1(e2) {
  return averagePooling3d(e2);
}
function avgPooling3d(e2) {
  return averagePooling3d(e2);
}
function globalAveragePooling1d(e2) {
  return new GlobalAveragePooling1D(e2);
}
function globalAveragePooling2d(e2) {
  return new GlobalAveragePooling2D(e2);
}
function globalMaxPooling1d(e2) {
  return new GlobalMaxPooling1D(e2);
}
function globalMaxPooling2d(e2) {
  return new GlobalMaxPooling2D(e2);
}
function maxPooling1d(e2) {
  return new MaxPooling1D(e2);
}
function maxPooling2d(e2) {
  return new MaxPooling2D(e2);
}
function maxPooling3d(e2) {
  return new MaxPooling3D(e2);
}
function gru(e2) {
  return new GRU(e2);
}
function gruCell(e2) {
  return new GRUCell(e2);
}
function lstm(e2) {
  return new LSTM(e2);
}
function lstmCell(e2) {
  return new LSTMCell(e2);
}
function simpleRNN(e2) {
  return new SimpleRNN(e2);
}
function simpleRNNCell(e2) {
  return new SimpleRNNCell(e2);
}
function rnn$1(e2) {
  return new RNN(e2);
}
function stackedRNNCells(e2) {
  return new StackedRNNCells(e2);
}
function bidirectional(e2) {
  return new Bidirectional(e2);
}
function timeDistributed(e2) {
  return new TimeDistributed(e2);
}
function gaussianNoise(e2) {
  return new GaussianNoise(e2);
}
function gaussianDropout(e2) {
  return new GaussianDropout(e2);
}
function alphaDropout(e2) {
  return new AlphaDropout(e2);
}
function masking(e2) {
  return new Masking(e2);
}
function binaryAccuracy$1(e2, t2) {
  return binaryAccuracy(e2, t2);
}
function binaryCrossentropy$2(e2, t2) {
  return binaryCrossentropy$1(e2, t2);
}
function sparseCategoricalAccuracy$1(e2, t2) {
  return sparseCategoricalAccuracy(e2, t2);
}
function categoricalAccuracy$1(e2, t2) {
  return categoricalAccuracy(e2, t2);
}
function categoricalCrossentropy$2(e2, t2) {
  return categoricalCrossentropy$1(e2, t2);
}
function precision$1(e2, t2) {
  return precision(e2, t2);
}
function recall$1(e2, t2) {
  return recall(e2, t2);
}
function cosineProximity$1(e2, t2) {
  return cosineProximity(e2, t2);
}
function meanAbsoluteError$1(e2, t2) {
  return meanAbsoluteError(e2, t2);
}
function meanAbsolutePercentageError$1(e2, t2) {
  return meanAbsolutePercentageError(e2, t2);
}
function MAPE$2(e2, t2) {
  return meanAbsolutePercentageError(e2, t2);
}
function mape$2(e2, t2) {
  return meanAbsolutePercentageError(e2, t2);
}
function meanSquaredError$1(e2, t2) {
  return meanSquaredError(e2, t2);
}
function MSE$2(e2, t2) {
  return meanSquaredError(e2, t2);
}
function mse$2(e2, t2) {
  return meanSquaredError(e2, t2);
}
function l1l2(e2) {
  return new L1L2(e2);
}
function l1$1(e2) {
  return l1(e2);
}
function l2$1(e2) {
  return l2(e2);
}
function less(e2, t2) {
  return e2 < t2;
}
function greater$1(e2, t2) {
  return e2 > t2;
}
function earlyStopping(e2) {
  return new EarlyStopping(e2);
}
var extendStatics, _epsilon, __assign, AttributeError, RuntimeError, ValueError, NotImplementedError, AssertionError, IndexError, _GLOBAL_CUSTOM_OBJECTS, Constraint, MaxNorm, UnitNorm, NonNeg, MinMaxNorm, CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP, exports_constraints, VALID_DATA_FORMAT_VALUES, VALID_PADDING_MODE_VALUES, VALID_POOL_MODE_VALUES, VALID_BIDIRECTIONAL_MERGE_MODES, nameMap, _nameScopeStack, _nameScopeDivider, tensorNameRegex, VALID_FAN_MODE_VALUES, VALID_DISTRIBUTION_VALUES, Initializer, Zeros, Ones, Constant, RandomUniform, RandomNormal, TruncatedNormal, Identity, VarianceScaling, GlorotUniform, GlorotNormal, HeNormal, HeUniform, LeCunNormal, LeCunUniform, Orthogonal, INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP, exports_initializers, _nextUniqueTensorId, _uidPrefixes, DEFAULT_VARIABLE_NAME_PREFIX, LayerVariable, InputSpec, SymbolicTensor, _nextNodeID, Node, _nextLayerID, Layer, ModelLoggingVerbosity, InputLayer, DEFAULT_YIELD_EVERY_MS, BaseCallback, CallbackList, BaseLogger, History, CustomCallback, CallbackConstructorRegistry, lossesMap, mse$1, MSE$1, mae$1, MAE$1, mape$1, MAPE$1, categoricalCrossentropy$1, cosine$1, sparseCategoricalCrossentropy$1, metricsMap, MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH, version, FeedDict, cachedSorted, cachedRecipientCounts, Container, DEFAULT_VALIDATION_BATCH_SIZE, LAYERS_MODEL_FORMAT_NAME, LayersModel, Sequential, Activation, Elu, Selu, Relu, Relu6, Linear, Sigmoid, HardSigmoid, Softplus, Softsign, Tanh, Softmax, LogSoftmax, Regularizer, L1L2, REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP, ReLU, LeakyReLU, PReLU, ELU, ThresholdedReLU, Softmax$1, BaseConv, Conv, Conv2D, Conv3D, Conv2DTranspose, SeparableConv, SeparableConv2D, Conv1D, Cropping2D, UpSampling2D, DepthwiseConv2D, Dropout, Dense, Flatten, Activation$1, RepeatVector, Reshape, Permute, Masking, Embedding, Merge, Add, Multiply, Average, Maximum, Minimum, Concatenate, Dot, GaussianNoise, GaussianDropout, AlphaDropout, BatchNormalization, LayerNormalization, ZeroPadding2D, Pooling1D, MaxPooling1D, AveragePooling1D, Pooling2D, MaxPooling2D, AveragePooling2D, Pooling3D, MaxPooling3D, AveragePooling3D, GlobalPooling1D, GlobalAveragePooling1D, GlobalMaxPooling1D, GlobalPooling2D, GlobalAveragePooling2D, GlobalMaxPooling2D, RNN, RNNCell, SimpleRNNCell, SimpleRNN, GRUCell, GRU, LSTMCell, LSTM, StackedRNNCells, Wrapper, TimeDistributed, DEFAULT_BIDIRECTIONAL_MERGE_MODE, Bidirectional, globalMaxPool1d, globalMaxPool2d, maxPool1d, maxPool2d, exports_layers, exports_metrics, exports_models, exports_regularizers, Callback, EarlyStopping, callbacks;
var init_tf_layers_esm = __esm({
  "node_modules/@tensorflow/tfjs-layers/dist/tf-layers.esm.js"() {
    init_tf_core_esm();
    extendStatics = function(e2, t2) {
      return (extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var n2 in t3)
          t3.hasOwnProperty(n2) && (e3[n2] = t3[n2]);
      })(e2, t2);
    };
    __assign = function() {
      return (__assign = Object.assign || function(e2) {
        for (var t2, n2 = 1, r2 = arguments.length; n2 < r2; n2++)
          for (var i2 in t2 = arguments[n2])
            Object.prototype.hasOwnProperty.call(t2, i2) && (e2[i2] = t2[i2]);
        return e2;
      }).apply(this, arguments);
    };
    AttributeError = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, n2) || this;
        return Object.setPrototypeOf(r2, t2.prototype), r2;
      }
      return __extends(t2, e2), t2;
    }(Error);
    RuntimeError = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, n2) || this;
        return Object.setPrototypeOf(r2, t2.prototype), r2;
      }
      return __extends(t2, e2), t2;
    }(Error);
    ValueError = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, n2) || this;
        return Object.setPrototypeOf(r2, t2.prototype), r2;
      }
      return __extends(t2, e2), t2;
    }(Error);
    NotImplementedError = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, n2) || this;
        return Object.setPrototypeOf(r2, t2.prototype), r2;
      }
      return __extends(t2, e2), t2;
    }(Error);
    AssertionError = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, n2) || this;
        return Object.setPrototypeOf(r2, t2.prototype), r2;
      }
      return __extends(t2, e2), t2;
    }(Error);
    IndexError = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, n2) || this;
        return Object.setPrototypeOf(r2, t2.prototype), r2;
      }
      return __extends(t2, e2), t2;
    }(Error);
    _GLOBAL_CUSTOM_OBJECTS = {};
    Constraint = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.getConfig = function() {
        return {};
      }, t2;
    }(Mf.Serializable);
    MaxNorm = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return n2.defaultMaxValue = 2, n2.defaultAxis = 0, n2.maxValue = null != t3.maxValue ? t3.maxValue : n2.defaultMaxValue, n2.axis = null != t3.axis ? t3.axis : n2.defaultAxis, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        var t3 = this;
        return je(function() {
          var n2 = calcL2Norms(e3, t3.axis), r2 = $u(n2, 0, t3.maxValue);
          return tc(e3, qs(r2, Vs(epsilon(), n2)));
        });
      }, t2.prototype.getConfig = function() {
        return { maxValue: this.maxValue, axis: this.axis };
      }, t2.className = "MaxNorm", t2;
    }(Constraint);
    Mf.registerClass(MaxNorm);
    UnitNorm = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return n2.defaultAxis = 0, n2.axis = null != t3.axis ? t3.axis : n2.defaultAxis, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        var t3 = this;
        return je(function() {
          return qs(e3, Vs(epsilon(), calcL2Norms(e3, t3.axis)));
        });
      }, t2.prototype.getConfig = function() {
        return { axis: this.axis };
      }, t2.className = "UnitNorm", t2;
    }(Constraint);
    Mf.registerClass(UnitNorm);
    NonNeg = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return bl(e3);
      }, t2.className = "NonNeg", t2;
    }(Constraint);
    Mf.registerClass(NonNeg);
    MinMaxNorm = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return n2.defaultMinValue = 0, n2.defaultMaxValue = 1, n2.defaultRate = 1, n2.defaultAxis = 0, n2.minValue = null != t3.minValue ? t3.minValue : n2.defaultMinValue, n2.maxValue = null != t3.maxValue ? t3.maxValue : n2.defaultMaxValue, n2.rate = null != t3.rate ? t3.rate : n2.defaultRate, n2.axis = null != t3.axis ? t3.axis : n2.defaultAxis, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        var t3 = this;
        return je(function() {
          var n2 = calcL2Norms(e3, t3.axis), r2 = Vs(tc(t3.rate, $u(n2, t3.minValue, t3.maxValue)), tc(1 - t3.rate, n2));
          return tc(e3, qs(r2, Vs(epsilon(), n2)));
        });
      }, t2.prototype.getConfig = function() {
        return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
      }, t2.className = "MinMaxNorm", t2;
    }(Constraint);
    Mf.registerClass(MinMaxNorm);
    CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" };
    exports_constraints = Object.freeze({ maxNorm, unitNorm, nonNeg, minMaxNorm });
    VALID_DATA_FORMAT_VALUES = ["channelsFirst", "channelsLast"];
    VALID_PADDING_MODE_VALUES = ["valid", "same", "causal"];
    VALID_POOL_MODE_VALUES = ["max", "avg"];
    VALID_BIDIRECTIONAL_MERGE_MODES = ["sum", "mul", "concat", "ave"];
    nameMap = /* @__PURE__ */ new Map();
    _nameScopeStack = [];
    _nameScopeDivider = "/";
    tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
    VALID_FAN_MODE_VALUES = ["fanIn", "fanOut", "fanAvg"];
    VALID_DISTRIBUTION_VALUES = ["normal", "uniform", "truncatedNormal"];
    Initializer = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.fromConfigUsesCustomObjects = function() {
        return false;
      }, t2.prototype.getConfig = function() {
        return {};
      }, t2;
    }(Mf.Serializable);
    Zeros = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        return Pn(e3, t3);
      }, t2.className = "Zeros", t2;
    }(Initializer);
    Mf.registerClass(Zeros);
    Ones = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        return Bn(e3, t3);
      }, t2.className = "Ones", t2;
    }(Initializer);
    Mf.registerClass(Ones);
    Constant = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        if ("object" != typeof t3)
          throw new ValueError("Expected argument of type ConstantConfig but got " + t3);
        if (void 0 === t3.value)
          throw new ValueError("config must have value set but got " + t3);
        return n2.value = t3.value, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return tc(An(n2.value), Bn(e3, t3));
        });
      }, t2.prototype.getConfig = function() {
        return { value: this.value };
      }, t2.className = "Constant", t2;
    }(Initializer);
    Mf.registerClass(Constant);
    RandomUniform = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return n2.DEFAULT_MINVAL = -0.05, n2.DEFAULT_MAXVAL = 0.05, n2.minval = t3.minval || n2.DEFAULT_MINVAL, n2.maxval = t3.maxval || n2.DEFAULT_MAXVAL, n2.seed = t3.seed, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        return kr(e3, this.minval, this.maxval, t3);
      }, t2.prototype.getConfig = function() {
        return { minval: this.minval, maxval: this.maxval, seed: this.seed };
      }, t2.className = "RandomUniform", t2;
    }(Initializer);
    Mf.registerClass(RandomUniform);
    RandomNormal = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return n2.DEFAULT_MEAN = 0, n2.DEFAULT_STDDEV = 0.05, n2.mean = t3.mean || n2.DEFAULT_MEAN, n2.stddev = t3.stddev || n2.DEFAULT_STDDEV, n2.seed = t3.seed, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        if ("float32" !== (t3 = t3 || "float32") && "int32" !== t3)
          throw new NotImplementedError("randomNormal does not support dType " + t3 + ".");
        return randomNormal$1(e3, this.mean, this.stddev, t3, this.seed);
      }, t2.prototype.getConfig = function() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
      }, t2.className = "RandomNormal", t2;
    }(Initializer);
    Mf.registerClass(RandomNormal);
    TruncatedNormal = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return n2.DEFAULT_MEAN = 0, n2.DEFAULT_STDDEV = 0.05, n2.mean = t3.mean || n2.DEFAULT_MEAN, n2.stddev = t3.stddev || n2.DEFAULT_STDDEV, n2.seed = t3.seed, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        if ("float32" !== (t3 = t3 || "float32") && "int32" !== t3)
          throw new NotImplementedError("truncatedNormal does not support dType " + t3 + ".");
        return Fr(e3, this.mean, this.stddev, t3, this.seed);
      }, t2.prototype.getConfig = function() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
      }, t2.className = "TruncatedNormal", t2;
    }(Initializer);
    Mf.registerClass(TruncatedNormal);
    Identity = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return n2.gain = null != t3.gain ? t3.gain : 1, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        var n2 = this;
        return je(function() {
          if (2 !== e3.length || e3[0] !== e3[1])
            throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");
          return tc(n2.gain, vr(e3[0]));
        });
      }, t2.prototype.getConfig = function() {
        return { gain: this.gain };
      }, t2.className = "Identity", t2;
    }(Initializer);
    Mf.registerClass(Identity);
    VarianceScaling = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        if (t3.scale < 0)
          throw new ValueError("scale must be a positive float. Got: " + t3.scale);
        return n2.scale = null == t3.scale ? 1 : t3.scale, n2.mode = null == t3.mode ? "fanIn" : t3.mode, checkFanMode(n2.mode), n2.distribution = null == t3.distribution ? "normal" : t3.distribution, checkDistribution(n2.distribution), n2.seed = t3.seed, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        var n2 = computeFans(e3), r2 = n2[0], i2 = n2[1], a2 = this.scale;
        if ("fanIn" === this.mode ? a2 /= Math.max(1, r2) : "fanOut" === this.mode ? a2 /= Math.max(1, i2) : a2 /= Math.max(1, (r2 + i2) / 2), "normal" === this.distribution) {
          var o2 = Math.sqrt(a2);
          if ("float32" !== (t3 = t3 || "float32") && "int32" !== t3)
            throw new NotImplementedError(this.getClassName() + " does not support dType " + t3 + ".");
          return Fr(e3, 0, o2, t3, this.seed);
        }
        var s2 = Math.sqrt(3 * a2);
        return kr(e3, -s2, s2, t3);
      }, t2.prototype.getConfig = function() {
        return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
      }, t2.className = "VarianceScaling", t2;
    }(Initializer);
    Mf.registerClass(VarianceScaling);
    GlorotUniform = function(e2) {
      function t2(t3) {
        return e2.call(this, { scale: 1, mode: "fanAvg", distribution: "uniform", seed: null == t3 ? null : t3.seed }) || this;
      }
      return __extends(t2, e2), t2.prototype.getClassName = function() {
        return VarianceScaling.className;
      }, t2.className = "GlorotUniform", t2;
    }(VarianceScaling);
    Mf.registerClass(GlorotUniform);
    GlorotNormal = function(e2) {
      function t2(t3) {
        return e2.call(this, { scale: 1, mode: "fanAvg", distribution: "normal", seed: null == t3 ? null : t3.seed }) || this;
      }
      return __extends(t2, e2), t2.prototype.getClassName = function() {
        return VarianceScaling.className;
      }, t2.className = "GlorotNormal", t2;
    }(VarianceScaling);
    Mf.registerClass(GlorotNormal);
    HeNormal = function(e2) {
      function t2(t3) {
        return e2.call(this, { scale: 2, mode: "fanIn", distribution: "normal", seed: null == t3 ? null : t3.seed }) || this;
      }
      return __extends(t2, e2), t2.prototype.getClassName = function() {
        return VarianceScaling.className;
      }, t2.className = "HeNormal", t2;
    }(VarianceScaling);
    Mf.registerClass(HeNormal);
    HeUniform = function(e2) {
      function t2(t3) {
        return e2.call(this, { scale: 2, mode: "fanIn", distribution: "uniform", seed: null == t3 ? null : t3.seed }) || this;
      }
      return __extends(t2, e2), t2.prototype.getClassName = function() {
        return VarianceScaling.className;
      }, t2.className = "HeUniform", t2;
    }(VarianceScaling);
    Mf.registerClass(HeUniform);
    LeCunNormal = function(e2) {
      function t2(t3) {
        return e2.call(this, { scale: 1, mode: "fanIn", distribution: "normal", seed: null == t3 ? null : t3.seed }) || this;
      }
      return __extends(t2, e2), t2.prototype.getClassName = function() {
        return VarianceScaling.className;
      }, t2.className = "LeCunNormal", t2;
    }(VarianceScaling);
    Mf.registerClass(LeCunNormal);
    LeCunUniform = function(e2) {
      function t2(t3) {
        return e2.call(this, { scale: 1, mode: "fanIn", distribution: "uniform", seed: null == t3 ? null : t3.seed }) || this;
      }
      return __extends(t2, e2), t2.prototype.getClassName = function() {
        return VarianceScaling.className;
      }, t2.className = "LeCunNormal", t2;
    }(VarianceScaling);
    Mf.registerClass(LeCunUniform);
    Orthogonal = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        if (n2.DEFAULT_GAIN = 1, n2.gain = null == t3.gain ? n2.DEFAULT_GAIN : t3.gain, n2.seed = t3.seed, null != n2.seed)
          throw new NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.");
        return n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        var n2 = this;
        return je(function() {
          if (2 !== e3.length)
            throw new NotImplementedError("The Orthogonal Initializer does not support non-2D shapes yet.");
          e3[0] * e3[1] > 2e3 && console.warn("Orthogonal initializer is being called on a matrix with more than 2000 (" + e3[0] * e3[1] + ") elements: Slowness may result.");
          var t4 = randomNormal$1(e3[0] > e3[1] ? [e3[1], e3[0]] : e3, 0, 1, "float32"), r2 = sh.gramSchmidt(t4);
          return e3[0] > e3[1] && (r2 = r2.transpose()), tc(n2.gain, r2);
        });
      }, t2.prototype.getConfig = function() {
        return { gain: this.gain, seed: this.seed };
      }, t2.className = "Orthogonal", t2;
    }(Initializer);
    Mf.registerClass(Orthogonal);
    INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", heUniform: "HeUniform", identity: "Identity", leCunNormal: "LeCunNormal", leCunUniform: "LeCunUniform", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" };
    exports_initializers = Object.freeze({ zeros: zeros$1, ones: ones$1, constant, randomUniform: randomUniform$1, randomNormal: randomNormal$2, truncatedNormal: truncatedNormal$1, identity, varianceScaling, glorotUniform, glorotNormal, heNormal, heUniform, leCunNormal, leCunUniform, orthogonal });
    _nextUniqueTensorId = 0;
    _uidPrefixes = {};
    DEFAULT_VARIABLE_NAME_PREFIX = "Variable";
    LayerVariable = function() {
      function e2(e3, t2, n2, r2, i2) {
        void 0 === t2 && (t2 = "float32"), void 0 === n2 && (n2 = DEFAULT_VARIABLE_NAME_PREFIX), void 0 === r2 && (r2 = true), void 0 === i2 && (i2 = null), this.dtype = null == t2 ? "float32" : t2, this.shape = e3.shape, this.id = getNextUniqueTensorId(), n2 = null == n2 ? DEFAULT_VARIABLE_NAME_PREFIX : n2, this.originalName = getScopedTensorName(n2), this.name = getUniqueTensorName(this.originalName), this.trainable_ = r2, this.constraint = i2, this.val = Mn(e3, this.trainable_, this.name, this.dtype);
      }
      return e2.prototype.read = function() {
        return this.assertNotDisposed(), this.val;
      }, e2.prototype.write = function(e3) {
        return this.assertNotDisposed(), checkShapesMatch(this.val, e3), this.val.id !== e3.id && (this.val.assign(e3), null != this.constraint && this.val.assign(this.constraint.apply(this.val))), this;
      }, e2.prototype.dispose = function() {
        this.assertNotDisposed(), this.val.dispose();
      }, e2.prototype.assertNotDisposed = function() {
        if (this.val.isDisposed)
          throw new Error("LayersVariable " + this.name + " is already disposed.");
      }, Object.defineProperty(e2.prototype, "trainable", { get: function() {
        return this.trainable_;
      }, set: function(e3) {
        this.trainable_ = e3, this.val.trainable = e3;
      }, enumerable: true, configurable: true }), e2;
    }();
    InputSpec = /* @__PURE__ */ function() {
      return function(e2) {
        this.dtype = e2.dtype, this.shape = e2.shape, null != e2.shape ? this.ndim = e2.shape.length : this.ndim = e2.ndim, this.maxNDim = e2.maxNDim, this.minNDim = e2.minNDim, this.axes = e2.axes || {};
      };
    }();
    SymbolicTensor = /* @__PURE__ */ function() {
      return function(e2, t2, n2, r2, i2, a2, o2) {
        this.dtype = e2, this.shape = t2, this.sourceLayer = n2, this.inputs = r2, this.callArgs = i2, this.outputTensorIndex = o2, this.id = getNextUniqueTensorId(), null != a2 && (this.originalName = getScopedTensorName(a2), this.name = getUniqueTensorName(this.originalName)), this.rank = t2.length;
      };
    }();
    _nextNodeID = 0;
    Node = function() {
      function e2(e3, t2) {
        this.callArgs = t2, this.id = _nextNodeID++, this.outboundLayer = e3.outboundLayer, this.inboundLayers = e3.inboundLayers, this.nodeIndices = e3.nodeIndices, this.tensorIndices = e3.tensorIndices, this.inputTensors = e3.inputTensors, this.outputTensors = e3.outputTensors, this.inputMasks = e3.inputMasks, this.outputMasks = e3.outputMasks, this.inputShapes = e3.inputShapes, this.outputShapes = e3.outputShapes;
        for (var n2 = 0, r2 = e3.inboundLayers; n2 < r2.length; n2++) {
          var i2 = r2[n2];
          null != i2 && i2.outboundNodes.push(this);
        }
        e3.outboundLayer.inboundNodes.push(this);
      }
      return e2.prototype.getConfig = function() {
        for (var e3 = [], t2 = 0, n2 = this.inboundLayers; t2 < n2.length; t2++) {
          var r2 = n2[t2];
          null != r2 ? e3.push(r2.name) : e3.push(null);
        }
        return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e3, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
      }, e2;
    }();
    _nextLayerID = 0;
    Layer = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        n2._callHook = null, n2._addedWeightNames = [], n2._stateful = false, n2.id = _nextLayerID++, n2.activityRegularizer = null, n2.inputSpec = null, n2.supportsMasking = false, n2._trainableWeights = [], n2._nonTrainableWeights = [], n2._losses = [], n2._updates = [], n2._built = false, n2.inboundNodes = [], n2.outboundNodes = [];
        var r2 = t3.name;
        if (!r2) {
          var i2 = n2.getClassName();
          r2 = toSnakeCase(i2) + "_" + getUid(i2);
        }
        if (n2.name = r2, n2.trainable_ = null == t3.trainable || t3.trainable, null != t3.inputShape || null != t3.batchInputShape) {
          var a2 = void 0;
          if (null != t3.batchInputShape)
            a2 = t3.batchInputShape;
          else if (null != t3.inputShape) {
            var o2 = null;
            null != t3.batchSize && (o2 = t3.batchSize), a2 = [o2].concat(t3.inputShape);
          }
          n2.batchInputShape = a2;
          var s2 = t3.dtype;
          null == s2 && (s2 = t3.inputDType), null == s2 && (s2 = "float32"), n2.dtype = s2;
        }
        return null != t3.weights ? n2.initialWeights = t3.weights : n2.initialWeights = null, n2._refCount = null, n2.fastWeightInitDuringBuild = false, n2;
      }
      return __extends(t2, e2), t2.nodeKey = function(e3, t3) {
        return e3.name + "_ib-" + t3.toString();
      }, t2.prototype.getNodeAtIndex = function(e3, t3) {
        if (0 === this.inboundNodes.length)
          throw new RuntimeError("The layer has never been called and thus has no defined " + t3 + ".");
        if (this.inboundNodes.length <= e3)
          throw new ValueError("Asked to get " + t3 + " at node " + e3 + ", but the layer has only " + this.inboundNodes.length + " inbound nodes.");
        return this.inboundNodes[e3];
      }, t2.prototype.getInputAt = function(e3) {
        return singletonOrArray(this.getNodeAtIndex(e3, "input").inputTensors);
      }, t2.prototype.getOutputAt = function(e3) {
        return singletonOrArray(this.getNodeAtIndex(e3, "output").outputTensors);
      }, Object.defineProperty(t2.prototype, "input", { get: function() {
        if (this.inboundNodes.length > 1)
          throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');
        if (0 === this.inboundNodes.length)
          throw new AttributeError("Layer " + this.name + " is not connected, no input to return.");
        return singletonOrArray(this.getNodeAtIndex(0, "input").inputTensors);
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "output", { get: function() {
        if (0 === this.inboundNodes.length)
          throw new AttributeError("Layer " + this.name + " has no inbound nodes.");
        if (this.inboundNodes.length > 1)
          throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');
        return singletonOrArray(this.getNodeAtIndex(0, "output").outputTensors);
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "losses", { get: function() {
        return this._losses;
      }, enumerable: true, configurable: true }), t2.prototype.calculateLosses = function() {
        return this.losses.map(function(e3) {
          return e3();
        });
      }, Object.defineProperty(t2.prototype, "updates", { get: function() {
        return this._updates;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "built", { get: function() {
        return this._built;
      }, set: function(e3) {
        this._built = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "trainable", { get: function() {
        return this.trainable_;
      }, set: function(e3) {
        this._trainableWeights.forEach(function(t3) {
          return t3.trainable = e3;
        }), this.trainable_ = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "trainableWeights", { get: function() {
        return this.trainable_ ? this._trainableWeights.filter(function(e3) {
          return e3.trainable;
        }) : [];
      }, set: function(e3) {
        this._trainableWeights = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nonTrainableWeights", { get: function() {
        return this.trainable ? this._trainableWeights.filter(function(e3) {
          return !e3.trainable;
        }).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
      }, set: function(e3) {
        this._nonTrainableWeights = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "weights", { get: function() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "stateful", { get: function() {
        return this._stateful;
      }, enumerable: true, configurable: true }), t2.prototype.resetStates = function() {
        if (!this.stateful)
          throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
      }, t2.prototype.assertInputCompatibility = function(e3) {
        if (e3 = toList(e3), null != this.inputSpec && 0 !== this.inputSpec.length) {
          var t3 = toList(this.inputSpec);
          if (e3.length !== t3.length)
            throw new ValueError("Layer " + this.name + " expects " + t3.length + " inputs, but it received " + e3.length + " input tensors. Input received: " + e3);
          for (var n2 = 0; n2 < e3.length; n2++) {
            var r2 = e3[n2], i2 = t3[n2];
            if (null != i2) {
              var a2 = r2.rank;
              if (null != i2.ndim && a2 !== i2.ndim)
                throw new ValueError("Input " + n2 + " is incompatible with layer " + this.name + ": expected ndim=" + i2.ndim + ", found ndim=" + a2);
              if (null != i2.maxNDim && a2 > i2.maxNDim)
                throw new ValueError("Input " + n2 + " is incompatible with layer " + this.name + ": expected max_ndim=" + i2.maxNDim + ", found ndim=" + a2);
              if (null != i2.minNDim && a2 < i2.minNDim)
                throw new ValueError("Input " + n2 + " is incompatible with layer " + this.name + ": expected min_ndim=" + i2.minNDim + ", found ndim=" + a2 + ".");
              if (null != i2.dtype && r2.dtype !== i2.dtype)
                throw new ValueError("Input " + n2 + " is incompatible with layer " + this.name + " : expected dtype=" + i2.dtype + ", found dtype=" + r2.dtype + ".");
              if (i2.axes) {
                var o2 = r2.shape;
                for (var s2 in i2.axes) {
                  var l3 = Number(s2), u2 = i2.axes[s2], c2 = l3 >= 0 ? o2[l3] : o2[o2.length + l3];
                  if (null != u2 && -1 === [u2, null].indexOf(c2))
                    throw new ValueError("Input " + n2 + " is incompatible with layer " + this.name + ": expected axis " + l3 + " of input shape to have value " + u2 + " but got shape " + o2 + ".");
                }
              }
              if (null != i2.shape)
                for (var p2 = 0; p2 < i2.shape.length; ++p2) {
                  var h2 = i2.shape[p2], d2 = r2.shape[p2];
                  if (null != h2 && null != d2 && h2 !== d2)
                    throw new ValueError("Input " + n2 + " is incompatible with layer " + this.name + ": expected shape=" + i2.shape + ", found shape=" + r2.shape + ".");
                }
            }
          }
        }
      }, t2.prototype.call = function(e3, t3) {
        return e3;
      }, t2.prototype.invokeCallHook = function(e3, t3) {
        null != this._callHook && this._callHook(e3, t3);
      }, t2.prototype.setCallHook = function(e3) {
        this._callHook = e3;
      }, t2.prototype.clearCallHook = function() {
        this._callHook = null;
      }, t2.prototype.apply = function(e3, t3) {
        var n2 = this;
        t3 = t3 || {}, this.assertNotDisposed();
        for (var r2 = toList(e3), i2 = true, a2 = 0, o2 = r2; a2 < o2.length; a2++) {
          if (!(o2[a2] instanceof SymbolicTensor)) {
            i2 = false;
            break;
          }
        }
        for (var s2 = true, l3 = 0, u2 = r2; l3 < u2.length; l3++) {
          if (u2[l3] instanceof SymbolicTensor) {
            s2 = false;
            break;
          }
        }
        if (i2 === s2)
          throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");
        return nameScope(this.name, function() {
          if (!n2.built) {
            n2.assertInputCompatibility(e3);
            for (var i3 = [], a3 = 0, o3 = toList(e3); a3 < o3.length; a3++) {
              var l4 = o3[a3];
              i3.push(l4.shape);
            }
            n2.build(singletonOrArray(i3)), n2.built = true, n2.initialWeights && n2.setWeights(n2.initialWeights), null === n2._refCount && s2 && (n2._refCount = 1);
          }
          if (n2.assertInputCompatibility(e3), s2) {
            for (var u3 = [], c2 = 0, p2 = toList(g2 = n2.call(e3, t3)); c2 < p2.length; c2++) {
              var h2 = p2[c2];
              -1 !== r2.indexOf(h2) && (h2 = h2.clone()), u3.push(h2);
            }
            if (g2 = singletonOrArray(u3), null != n2.activityRegularizer)
              throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
            return g2;
          }
          var d2 = collectInputShape(e3), f2 = n2.computeOutputShape(d2), g2 = void 0, m2 = guessOutputDType(e3);
          if (n2.warnOnIncompatibleInputShape(Array.isArray(e3) ? d2[0] : d2), g2 = null != f2 && f2.length > 0 && Array.isArray(f2[0]) ? f2.map(function(r3, i4) {
            return new SymbolicTensor(m2, r3, n2, toList(e3), t3, n2.name, i4);
          }) : new SymbolicTensor(m2, f2, n2, toList(e3), t3, n2.name), n2.addInboundNode(e3, g2, null, null, d2, f2, t3), n2._refCount++, null != n2.activityRegularizer)
            throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
          return g2;
        });
      }, t2.prototype.warnOnIncompatibleInputShape = function(e3) {
        if (null != this.batchInputShape)
          if (e3.length !== this.batchInputShape.length)
            console.warn("The rank of the input tensor provided (shape: " + JSON.stringify(e3) + ") does not match that of the batchInputShape (" + JSON.stringify(this.batchInputShape) + ") of the layer " + this.name);
          else {
            var t3 = false;
            this.batchInputShape.forEach(function(n2, r2) {
              null != n2 && null != e3[r2] && e3[r2] !== n2 && (t3 = true);
            }), t3 && console.warn("The shape of the input tensor (" + JSON.stringify(e3) + ") does not match the expectation of layer " + this.name + ": " + JSON.stringify(this.batchInputShape));
          }
      }, Object.defineProperty(t2.prototype, "outputShape", { get: function() {
        if (null == this.inboundNodes || 0 === this.inboundNodes.length)
          throw new AttributeError("The layer " + this.name + " has never been called and thus has no defined output shape.");
        for (var e3 = [], t3 = 0, n2 = this.inboundNodes; t3 < n2.length; t3++) {
          var r2 = n2[t3], i2 = JSON.stringify(r2.outputShapes);
          -1 === e3.indexOf(i2) && e3.push(i2);
        }
        if (1 === e3.length) {
          var a2 = this.inboundNodes[0].outputShapes;
          return Array.isArray(a2) && Array.isArray(a2[0]) && 1 === a2.length ? a2[0] : a2;
        }
        throw new AttributeError("The layer " + this.name + ' has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.');
      }, enumerable: true, configurable: true }), t2.prototype.countParams = function() {
        if (!this.built)
          throw new RuntimeError("You tried to call countParams() on " + this.name + ", but the layer is not built yet. Build it first by calling build(batchInputShape).");
        return countParamsInWeights(this.weights);
      }, t2.prototype.build = function(e3) {
        this.built = true;
      }, t2.prototype.getWeights = function(e3) {
        return void 0 === e3 && (e3 = false), batchGetValue(e3 ? this.trainableWeights : this.weights);
      }, t2.prototype.setWeights = function(e3) {
        var t3 = this;
        je(function() {
          var n2 = t3.weights;
          if (n2.length !== e3.length)
            throw new ValueError('You called setWeights(weights) on layer "' + t3.name + '" with a weight list of length ' + e3.length + ", but the layer was expecting " + n2.length + " weights. Provided weights: " + e3 + "...");
          if (0 !== n2.length) {
            for (var r2 = [], i2 = batchGetValue(n2), a2 = 0; a2 < i2.length; ++a2) {
              var o2 = i2[a2], s2 = n2[a2], l3 = e3[a2];
              if (!tt.arraysEqual(o2.shape, l3.shape))
                throw new ValueError("Layer weight shape " + o2.shape + " not compatible with provided weight shape " + l3.shape);
              r2.push([s2, l3]);
            }
            batchSetValue(r2);
          }
        });
      }, t2.prototype.addWeight = function(e3, t3, n2, r2, i2, a2, o2) {
        if (-1 !== this._addedWeightNames.indexOf(e3))
          throw new ValueError("Duplicate weight name " + e3 + " for layer " + this.name);
        this._addedWeightNames.push(e3), null == n2 && (n2 = "float32"), this.fastWeightInitDuringBuild && (r2 = getInitializer("zeros"));
        var s2 = r2.apply(t3, n2), l3 = new LayerVariable(s2, n2, e3, a2, o2);
        return s2.dispose(), null != i2 && this.addLoss(function() {
          return i2.apply(l3.read());
        }), null == a2 && (a2 = true), a2 ? this._trainableWeights.push(l3) : this._nonTrainableWeights.push(l3), l3;
      }, t2.prototype.setFastWeightInitDuringBuild = function(e3) {
        this.fastWeightInitDuringBuild = e3;
      }, t2.prototype.addLoss = function(e3) {
        var t3;
        null == e3 || Array.isArray(e3) && 0 === e3.length || (e3 = toList(e3), void 0 !== this._losses && null !== this._losses && (t3 = this.losses).push.apply(t3, e3));
      }, t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.computeMask = function(e3, t3) {
        var n2 = this;
        if (!this.supportsMasking) {
          if (null != t3) {
            if (!Array.isArray(t3))
              throw new TypeError("Layer " + this.name + " does not support masking, but was passed an inputMask.");
            t3.forEach(function(e4) {
              if (null != e4)
                throw new TypeError("Layer " + n2.name + " does not support masking, but was passed an inputMask.");
            });
          }
          return null;
        }
        return t3;
      }, t2.prototype.addInboundNode = function(e3, t3, n2, r2, i2, a2, o2) {
        void 0 === o2 && (o2 = null);
        var s2 = toList(e3);
        t3 = toList(t3), n2 = toList(n2), r2 = toList(r2), i2 = normalizeShapeList(i2), a2 = normalizeShapeList(a2);
        for (var l3 = [], u2 = [], c2 = [], p2 = 0, h2 = s2; p2 < h2.length; p2++) {
          var d2 = h2[p2];
          l3.push(d2.sourceLayer), u2.push(d2.nodeIndex), c2.push(d2.tensorIndex);
        }
        new Node({ outboundLayer: this, inboundLayers: l3, nodeIndices: u2, tensorIndices: c2, inputTensors: s2, outputTensors: t3, inputMasks: n2, outputMasks: r2, inputShapes: i2, outputShapes: a2 }, o2);
        for (var f2 = 0; f2 < t3.length; f2++)
          t3[f2].sourceLayer = this, t3[f2].nodeIndex = this.inboundNodes.length - 1, t3[f2].tensorIndex = f2;
      }, t2.prototype.getConfig = function() {
        var e3 = { name: this.name, trainable: this.trainable };
        return null != this.batchInputShape && (e3.batchInputShape = this.batchInputShape), null != this.dtype && (e3.dtype = this.dtype), e3;
      }, t2.prototype.disposeWeights = function() {
        return this.weights.forEach(function(e3) {
          return e3.dispose();
        }), this.weights.length;
      }, t2.prototype.assertNotDisposed = function() {
        if (0 === this._refCount)
          throw new Error("Layer '" + this.name + "' is already disposed.");
      }, t2.prototype.dispose = function() {
        if (!this.built)
          throw new Error("Cannot dispose Layer " + this.name + " because it has not been built yet.");
        if (null === this._refCount)
          throw new Error("Cannot dispose Layer " + this.name + " because it has not been used yet.");
        this.assertNotDisposed();
        var e3 = 0;
        return 0 == --this._refCount && (e3 = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e3 };
      }, t2;
    }(Mf.Serializable);
    InputLayer = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, { dtype: t3.dtype, name: null != t3.name ? t3.name : getUid("input").toString() }) || this;
        if (null == t3.batchSize && (t3.batchSize = null), null == t3.sparse && (t3.sparse = false), n2.trainable = false, n2.built = true, n2.sparse = t3.sparse, null != t3.inputShape && null != t3.batchInputShape)
          throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
        var r2 = t3.batchInputShape;
        if (null == r2) {
          if (null == t3.inputShape)
            throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
          r2 = [t3.batchSize].concat(t3.inputShape);
        } else if (null != t3.batchSize)
          throw new ValueError("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
        var i2 = t3.dtype || "float32";
        n2.batchInputShape = r2, n2.dtype = i2, n2.inputSpec = [{ shape: r2 }];
        var a2 = new SymbolicTensor(n2.dtype, n2.batchInputShape, n2, [], {}, n2.name);
        return a2.nodeIndex = 0, a2.tensorIndex = 0, new Node({ outboundLayer: n2, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [a2], outputTensors: [a2], inputMasks: [null], outputMasks: [null], inputShapes: [r2], outputShapes: [r2] }), n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        throw new ValueError("Cannot pass any input to an InputLayer's apply() method. InputLayer name: " + this.name);
      }, t2.prototype.dispose = function() {
        return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
      }, t2.prototype.getConfig = function() {
        return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
      }, t2.className = "InputLayer", t2;
    }(Layer);
    Mf.registerClass(InputLayer), function(e2) {
      e2[e2.SILENT = 0] = "SILENT", e2[e2.VERBOSE = 1] = "VERBOSE";
    }(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));
    DEFAULT_YIELD_EVERY_MS = 125;
    BaseCallback = function() {
      function e2() {
        this.validationData = null;
      }
      return e2.prototype.setParams = function(e3) {
        this.params = e3;
      }, e2.prototype.onEpochBegin = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return [2];
          });
        });
      }, e2.prototype.onEpochEnd = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return [2];
          });
        });
      }, e2.prototype.onBatchBegin = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return [2];
          });
        });
      }, e2.prototype.onBatchEnd = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return [2];
          });
        });
      }, e2.prototype.onTrainBegin = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return [2];
          });
        });
      }, e2.prototype.onTrainEnd = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return [2];
          });
        });
      }, e2.prototype.setModel = function(e3) {
      }, e2;
    }();
    CallbackList = function() {
      function e2(e3, t2) {
        void 0 === t2 && (t2 = 10), null == e3 && (e3 = []), this.callbacks = e3, this.queueLength = t2;
      }
      return e2.prototype.append = function(e3) {
        this.callbacks.push(e3);
      }, e2.prototype.setParams = function(e3) {
        for (var t2 = 0, n2 = this.callbacks; t2 < n2.length; t2++) {
          n2[t2].setParams(e3);
        }
      }, e2.prototype.setModel = function(e3) {
        for (var t2 = 0, n2 = this.callbacks; t2 < n2.length; t2++) {
          n2[t2].setModel(e3);
        }
      }, e2.prototype.onEpochBegin = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          var n2, r2;
          return __generator(this, function(i2) {
            switch (i2.label) {
              case 0:
                null == t2 && (t2 = {}), n2 = 0, r2 = this.callbacks, i2.label = 1;
              case 1:
                return n2 < r2.length ? [4, r2[n2].onEpochBegin(e3, t2)] : [3, 4];
              case 2:
                i2.sent(), i2.label = 3;
              case 3:
                return n2++, [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }, e2.prototype.onEpochEnd = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          var n2, r2;
          return __generator(this, function(i2) {
            switch (i2.label) {
              case 0:
                null == t2 && (t2 = {}), n2 = 0, r2 = this.callbacks, i2.label = 1;
              case 1:
                return n2 < r2.length ? [4, r2[n2].onEpochEnd(e3, t2)] : [3, 4];
              case 2:
                i2.sent(), i2.label = 3;
              case 3:
                return n2++, [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }, e2.prototype.onBatchBegin = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          var n2, r2;
          return __generator(this, function(i2) {
            switch (i2.label) {
              case 0:
                null == t2 && (t2 = {}), n2 = 0, r2 = this.callbacks, i2.label = 1;
              case 1:
                return n2 < r2.length ? [4, r2[n2].onBatchBegin(e3, t2)] : [3, 4];
              case 2:
                i2.sent(), i2.label = 3;
              case 3:
                return n2++, [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }, e2.prototype.onBatchEnd = function(e3, t2) {
        return __awaiter(this, void 0, void 0, function() {
          var n2, r2;
          return __generator(this, function(i2) {
            switch (i2.label) {
              case 0:
                null == t2 && (t2 = {}), n2 = 0, r2 = this.callbacks, i2.label = 1;
              case 1:
                return n2 < r2.length ? [4, r2[n2].onBatchEnd(e3, t2)] : [3, 4];
              case 2:
                i2.sent(), i2.label = 3;
              case 3:
                return n2++, [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }, e2.prototype.onTrainBegin = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          var t2, n2;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                null == e3 && (e3 = {}), t2 = 0, n2 = this.callbacks, r2.label = 1;
              case 1:
                return t2 < n2.length ? [4, n2[t2].onTrainBegin(e3)] : [3, 4];
              case 2:
                r2.sent(), r2.label = 3;
              case 3:
                return t2++, [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }, e2.prototype.onTrainEnd = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          var t2, n2;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                null == e3 && (e3 = {}), t2 = 0, n2 = this.callbacks, r2.label = 1;
              case 1:
                return t2 < n2.length ? [4, n2[t2].onTrainEnd(e3)] : [3, 4];
              case 2:
                r2.sent(), r2.label = 3;
              case 3:
                return t2++, [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }, e2;
    }();
    BaseLogger = function(e2) {
      function t2() {
        return e2.call(this) || this;
      }
      return __extends(t2, e2), t2.prototype.onEpochBegin = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return this.seen = 0, this.totals = {}, [2];
          });
        });
      }, t2.prototype.onBatchEnd = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var e4, n2, r2, i2, a2 = this;
          return __generator(this, function(o2) {
            for (i2 in null == t3 && (t3 = {}), e4 = null == t3.size ? 0 : t3.size, this.seen += e4, n2 = function(n3) {
              var i3 = t3[n3];
              if ("number" == typeof i3)
                r2.totals.hasOwnProperty(n3) || (r2.totals[n3] = 0), r2.totals[n3] = r2.totals[n3] + i3 * e4;
              else {
                var o3 = void 0;
                n3 in r2.totals ? o3 = r2.totals[n3] : r2.totals[n3] = 0;
                var s2 = je(function() {
                  return Vs(a2.totals[n3], tc(i3, e4));
                });
                r2.totals[n3] = s2, null != o3 && o3.dispose();
              }
            }, r2 = this, t3)
              n2(i2);
            return [2];
          });
        });
      }, t2.prototype.onEpochEnd = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var e4, n2, r2, i2, a2, o2 = this;
          return __generator(this, function(s2) {
            if (null != t3)
              for (e4 = function(e5) {
                if (null == n2.totals[e5])
                  return "continue";
                "number" == typeof n2.totals[e5] ? t3[e5] = n2.totals[e5] / n2.seen : je(function() {
                  var n3 = tc(qs(1, o2.seen), o2.totals[e5]);
                  t3[e5] = n3, o2.totals[e5].dispose(), $e(t3[e5]);
                });
              }, n2 = this, r2 = 0, i2 = this.params.metrics; r2 < i2.length; r2++)
                a2 = i2[r2], e4(a2);
            return [2];
          });
        });
      }, t2;
    }(BaseCallback);
    History = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.onTrainBegin = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return this.epoch = [], this.history = {}, [2];
          });
        });
      }, t2.prototype.onEpochEnd = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var n2;
          return __generator(this, function(r2) {
            for (n2 in null == t3 && (t3 = {}), this.epoch.push(e3), t3)
              null == this.history[n2] && (this.history[n2] = []), this.history[n2].push(t3[n2]);
            return [2];
          });
        });
      }, t2.prototype.syncData = function() {
        return __awaiter(this, void 0, void 0, function() {
          var e3, t3, n2, r2, i2, a2, o2, s2, l3;
          return __generator(this, function(u2) {
            switch (u2.label) {
              case 0:
                for (r2 in e3 = [], t3 = [], n2 = [], this.history)
                  for (i2 = this.history[r2], a2 = 0; a2 < i2.length; ++a2)
                    "number" != typeof i2[a2] && (o2 = i2[a2], e3.push(o2.data()), t3.push(r2), n2.push(a2));
                return [4, Promise.all(e3)];
              case 1:
                for (s2 = u2.sent(), l3 = 0; l3 < s2.length; ++l3)
                  this.history[t3[l3]][n2[l3]].dispose(), this.history[t3[l3]][n2[l3]] = s2[l3][0];
                return [2];
            }
          });
        });
      }, t2;
    }(BaseCallback);
    CustomCallback = function(e2) {
      function t2(t3, n2) {
        var r2 = e2.call(this) || this;
        if (r2.currentEpoch = 0, r2.yieldEvery = n2 || "auto", "auto" === r2.yieldEvery && (r2.yieldEvery = DEFAULT_YIELD_EVERY_MS), "never" === r2.yieldEvery && null != t3.onYield)
          throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
        return tt.isNumber(r2.yieldEvery) && (r2.maybeWait = debounce(r2.maybeWait.bind(r2), r2.yieldEvery)), r2.trainBegin = t3.onTrainBegin, r2.trainEnd = t3.onTrainEnd, r2.epochBegin = t3.onEpochBegin, r2.epochEnd = t3.onEpochEnd, r2.batchBegin = t3.onBatchBegin, r2.batchEnd = t3.onBatchEnd, r2.yield = t3.onYield, r2;
      }
      return __extends(t2, e2), t2.prototype.maybeWait = function(e3, t3, n2) {
        return __awaiter(this, void 0, void 0, function() {
          var r2;
          return __generator(this, function(i2) {
            switch (i2.label) {
              case 0:
                return r2 = [], null == this.yield ? [3, 2] : [4, resolveScalarsInLogs(n2)];
              case 1:
                i2.sent(), r2.push(this.yield(e3, t3, n2)), i2.label = 2;
              case 2:
                return r2.push(ep()), [4, Promise.all(r2)];
              case 3:
                return i2.sent(), [2];
            }
          });
        });
      }, t2.prototype.onEpochBegin = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(n2) {
            switch (n2.label) {
              case 0:
                return this.currentEpoch = e3, null == this.epochBegin ? [3, 3] : [4, resolveScalarsInLogs(t3)];
              case 1:
                return n2.sent(), [4, this.epochBegin(e3, t3)];
              case 2:
                n2.sent(), n2.label = 3;
              case 3:
                return [2];
            }
          });
        });
      }, t2.prototype.onEpochEnd = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var n2;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                return n2 = [], null == this.epochEnd ? [3, 2] : [4, resolveScalarsInLogs(t3)];
              case 1:
                r2.sent(), n2.push(this.epochEnd(e3, t3)), r2.label = 2;
              case 2:
                return "epoch" === this.yieldEvery && n2.push(ep()), [4, Promise.all(n2)];
              case 3:
                return r2.sent(), [2];
            }
          });
        });
      }, t2.prototype.onBatchBegin = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(n2) {
            switch (n2.label) {
              case 0:
                return null == this.batchBegin ? [3, 3] : [4, resolveScalarsInLogs(t3)];
              case 1:
                return n2.sent(), [4, this.batchBegin(e3, t3)];
              case 2:
                n2.sent(), n2.label = 3;
              case 3:
                return [2];
            }
          });
        });
      }, t2.prototype.onBatchEnd = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var n2;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                return n2 = [], null == this.batchEnd ? [3, 2] : [4, resolveScalarsInLogs(t3)];
              case 1:
                r2.sent(), n2.push(this.batchEnd(e3, t3)), r2.label = 2;
              case 2:
                return "batch" === this.yieldEvery ? n2.push(ep()) : tt.isNumber(this.yieldEvery) && n2.push(this.maybeWait(this.currentEpoch, e3, t3)), [4, Promise.all(n2)];
              case 3:
                return r2.sent(), [2];
            }
          });
        });
      }, t2.prototype.onTrainBegin = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(t3) {
            switch (t3.label) {
              case 0:
                return null == this.trainBegin ? [3, 3] : [4, resolveScalarsInLogs(e3)];
              case 1:
                return t3.sent(), [4, this.trainBegin(e3)];
              case 2:
                t3.sent(), t3.label = 3;
              case 3:
                return [2];
            }
          });
        });
      }, t2.prototype.onTrainEnd = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(t3) {
            switch (t3.label) {
              case 0:
                return null == this.trainEnd ? [3, 3] : [4, resolveScalarsInLogs(e3)];
              case 1:
                return t3.sent(), [4, this.trainEnd(e3)];
              case 2:
                t3.sent(), t3.label = 3;
              case 3:
                return [2];
            }
          });
        });
      }, t2;
    }(BaseCallback);
    CallbackConstructorRegistry = function() {
      function e2() {
      }
      return e2.registerCallbackConstructor = function(t2, n2) {
        tt.assert(t2 >= 0 && Number.isInteger(t2), function() {
          return "Verbosity level is expected to be an integer >= 0, but got " + t2;
        }), e2.checkForDuplicate(n2), null == e2.constructors[t2] && (e2.constructors[t2] = []), e2.constructors[t2].push(n2);
      }, e2.checkForDuplicate = function(t2) {
        for (var n2 in e2.constructors) {
          e2.constructors[+n2].forEach(function(e3) {
            if (e3 === t2)
              throw new ValueError("Duplicate callback constructor.");
          });
        }
      }, e2.clear = function() {
        e2.constructors = {};
      }, e2.createCallbacks = function(t2) {
        var n2 = [];
        for (var r2 in e2.constructors) {
          var i2 = +r2;
          t2 >= i2 && n2.push.apply(n2, e2.constructors[i2]);
        }
        return n2.map(function(e3) {
          return new e3();
        });
      }, e2.constructors = {}, e2;
    }();
    lossesMap = { meanSquaredError, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredLogarithmicError, squaredHinge, hinge, categoricalHinge, logcosh, categoricalCrossentropy, sparseCategoricalCrossentropy, binaryCrossentropy, kullbackLeiblerDivergence, poisson, cosineProximity };
    mse$1 = meanSquaredError;
    MSE$1 = meanSquaredError;
    mae$1 = meanAbsoluteError;
    MAE$1 = meanAbsoluteError;
    mape$1 = meanAbsolutePercentageError;
    MAPE$1 = meanAbsolutePercentageError;
    categoricalCrossentropy$1 = categoricalCrossentropy;
    cosine$1 = cosineProximity;
    sparseCategoricalCrossentropy$1 = sparseCategoricalCrossentropy;
    metricsMap = { binaryAccuracy, categoricalAccuracy, precision, categoricalCrossentropy: categoricalCrossentropy$1, sparseCategoricalCrossentropy: sparseCategoricalCrossentropy$1, mse: mse$1, MSE: MSE$1, mae: mae$1, MAE: MAE$1, mape: mape$1, MAPE: MAPE$1, cosine: cosine$1 };
    MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1048576;
    version = "1.3.1";
    FeedDict = function() {
      function e2(t2) {
        if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t2 instanceof e2)
          for (var n2 in t2.id2Value)
            this.id2Value[n2] = t2.id2Value[n2], n2 in t2.id2Mask && (this.id2Mask[n2] = t2.id2Mask[n2]);
        else {
          if (null == t2)
            return;
          for (var r2 = 0, i2 = t2; r2 < i2.length; r2++) {
            var a2 = i2[r2];
            this.add(a2.key, a2.value);
          }
        }
      }
      return e2.prototype.add = function(e3, t2, n2) {
        if (null != this.id2Value[e3.id])
          throw new ValueError("Duplicate key: name=" + e3.name + ", id=" + e3.id);
        return this.id2Value[e3.id] = assertFeedCompatibility(e3, t2), this.name2Id[e3.name] = e3.id, null != n2 && (this.id2Mask[e3.id] = n2), this;
      }, e2.prototype.addFeed = function(e3) {
        this.add(e3.key, e3.value);
      }, e2.prototype.hasKey = function(e3) {
        return null != this.id2Value[e3.id];
      }, e2.prototype.names = function() {
        return Object.keys(this.name2Id);
      }, e2.prototype.getValue = function(e3) {
        if (e3 instanceof SymbolicTensor) {
          if (null == this.id2Value[e3.id])
            throw new ValueError("Nonexistent key: " + e3.name);
          return this.id2Value[e3.id];
        }
        var t2 = this.name2Id[e3];
        if (null == t2)
          throw new ValueError("Feed dict has no SymbolicTensor name: " + e3);
        return this.id2Value[t2];
      }, e2.prototype.getMask = function(e3) {
        if (e3 instanceof SymbolicTensor) {
          if (null == this.id2Value[e3.id])
            throw new ValueError("Nonexistent key: " + e3.name);
          return this.id2Mask[e3.id];
        }
        var t2 = this.name2Id[e3];
        if (null == t2)
          throw new ValueError("Feed dict has no SymbolicTensor name: " + e3);
        return this.id2Mask[t2];
      }, e2.prototype.disposeMasks = function() {
        null != this.id2Mask && Xe(this.id2Mask);
      }, e2;
    }();
    cachedSorted = {};
    cachedRecipientCounts = {};
    Container = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, {}) || this;
        if (r2.containerNodes = /* @__PURE__ */ new Set(), r2.name = n2.name, null == r2.name) {
          var i2 = r2.getClassName().toLowerCase();
          r2.name = getUid(i2);
        }
        if (r2.supportsMasking = false, r2.trainable_ = true, Array.isArray(n2.inputs) ? r2.inputs = n2.inputs.slice() : r2.inputs = [n2.inputs], Array.isArray(n2.outputs) ? r2.outputs = n2.outputs.slice() : r2.outputs = [n2.outputs], unique(r2.inputs).length !== r2.inputs.length)
          throw new ValueError("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: " + r2.inputs.map(function(e3) {
            return e3.name;
          }));
        unique(r2.outputs).length !== r2.outputs.length && console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: " + r2.outputs.map(function(e3) {
          return e3.name;
        })), r2.inputLayers = [], r2.inputLayersNodeIndices = [], r2.inputLayersTensorIndices = [], r2.outputLayers = [], r2.outputLayersNodeIndices = [], r2.outputLayersTensorIndices = [], r2.layers = [], r2.internalContainerRefs = [];
        for (var a2 = 0, o2 = r2.outputs; a2 < o2.length; a2++) {
          var s2 = (C2 = o2[a2]).sourceLayer, l3 = C2.nodeIndex, u2 = C2.tensorIndex;
          r2.outputLayers.push(s2), r2.outputLayersNodeIndices.push(l3), r2.outputLayersTensorIndices.push(u2);
        }
        for (var c2 = 0, p2 = r2.inputs; c2 < p2.length; c2++) {
          s2 = (C2 = p2[c2]).sourceLayer, l3 = C2.nodeIndex, u2 = C2.tensorIndex;
          assert(0 === l3, "input layer has >1 nodes"), assert(0 === u2, "input layer has >1 tensors"), r2.inputLayers.push(s2), r2.inputLayersNodeIndices.push(l3), r2.inputLayersTensorIndices.push(u2);
        }
        r2.inputNames = [], r2.outputNames = [], r2.feedInputShapes = [], r2.feedInputNames = [], r2.feedOutputNames = [];
        for (var h2 = 0; h2 < r2.inputLayers.length; h2++) {
          if (!((s2 = r2.inputLayers[h2]) instanceof InputLayer))
            throw new TypeError("Input layers to a LayersModel must be InputLayer objects. Received inputs: " + n2.inputs + ". Input " + h2 + " (0-based) originates from layer type " + s2.getClassName() + ".");
          r2.inputNames.push(s2.name), r2.feedInputShapes.push(s2.batchInputShape), r2.feedInputNames.push(s2.name);
        }
        for (var d2 = 0, f2 = r2.outputLayers; d2 < f2.length; d2++) {
          s2 = f2[d2];
          r2.outputNames.push(s2.name);
        }
        r2.internalInputShapes = r2.inputs.map(function(e3) {
          return e3.shape;
        }), r2.internalOutputShapes = r2.outputs.map(function(e3) {
          return e3.shape;
        });
        for (var g2 = {}, m2 = {}, y2 = {}, v2 = {}, b2 = {}, w2 = [], z2 = function(e3, n3, i3, a3, o3, s3) {
          null != a3 && null != o3 && null != s3 || (a3 = e3.sourceLayer, o3 = e3.nodeIndex, s3 = e3.tensorIndex);
          var l4 = a3.inboundNodes[o3];
          if (-1 !== i3.indexOf(l4))
            throw new RuntimeError("The tensor " + e3.name + ' at layer "' + a3.name + '" is part of a cycle.');
          if (-1 === n3.indexOf(l4)) {
            r2.containerNodes.add(t2.nodeKey(a3, o3)), a3.id in b2 || (b2[a3.id] = Object.keys(b2).length), -1 === i3.indexOf(l4) && i3.push(l4);
            for (var u3 = l4.inboundLayers.length, c3 = 0; c3 < u3; c3++) {
              var p3 = l4.inputTensors[c3], h3 = l4.inboundLayers[c3], d3 = l4.nodeIndices[c3], f3 = l4.tensorIndices[c3];
              z2(p3, n3, i3, h3, d3, f3);
            }
            for (n3.push(l4); i3.indexOf(l4) >= 0; )
              i3.splice(i3.indexOf(l4), 1);
            w2.push(l4);
          }
        }, S2 = [], A2 = [], _2 = 0, I2 = r2.outputs; _2 < I2.length; _2++) {
          var C2 = I2[_2];
          z2(C2, S2, A2);
        }
        for (var E2 = 0, N2 = w2.slice().reverse(); E2 < N2.length; E2++) {
          m2[(K2 = N2[E2]).id] = K2, K2.id in g2 || (g2[K2.id] = 0);
          var k2 = g2[K2.id], x2 = null == y2[K2.outboundLayer.id] ? 0 : y2[K2.outboundLayer.id];
          k2 = Math.max(k2, x2), y2[K2.outboundLayer.id] = k2, v2[K2.outboundLayer.id] = K2.outboundLayer, g2[K2.id] = k2;
          for (h2 = 0; h2 < K2.inboundLayers.length; h2++) {
            var L2 = K2.inboundLayers[h2], T2 = (l3 = K2.nodeIndices[h2], L2.inboundNodes[l3]), D2 = null == g2[T2.id] ? 0 : g2[T2.id];
            g2[T2.id] = Math.max(k2 + 1, D2), m2[T2.id] = T2;
          }
        }
        var O2 = {};
        for (var R2 in g2) {
          (k2 = g2[R2]) in O2 || (O2[k2] = []), O2[k2].push(m2[R2]);
        }
        var M2 = {};
        for (var P2 in y2) {
          (k2 = y2[P2]) in M2 || (M2[k2] = []), M2[k2].push(v2[P2]);
        }
        var F2 = Object.keys(M2).map(function(e3) {
          return parseInt(e3, 10);
        }).sort(reverseNumberCompare);
        r2.layers = [];
        for (var V2 = 0, B2 = F2; V2 < B2.length; V2++) {
          var U2 = M2[k2 = B2[V2]];
          U2.sort(function(e3, t3) {
            var n3 = b2[e3.id], r3 = b2[t3.id];
            return n3 < r3 ? -1 : n3 > r3 ? 1 : 0;
          });
          for (var j2 = 0, W2 = U2; j2 < W2.length; j2++) {
            (s2 = W2[j2]) instanceof t2 && r2.internalContainerRefs.push(s2), r2.layers.push(s2);
          }
        }
        r2.layersByDepth = M2, F2 = Object.keys(O2).map(function(e3) {
          return parseInt(e3, 10);
        }).sort(reverseNumberCompare);
        for (var $2 = r2.inputs.slice(), q2 = [], G2 = 0, H2 = F2; G2 < H2.length; G2++)
          for (var J2 = 0, Z2 = O2[k2 = H2[G2]]; J2 < Z2.length; J2++) {
            var K2;
            if (null != (s2 = (K2 = Z2[J2]).outboundLayer)) {
              for (var Y2 = 0, X2 = K2.inputTensors; Y2 < X2.length; Y2++) {
                C2 = X2[Y2];
                if (-1 === $2.indexOf(C2))
                  throw new RuntimeError("Graph disconnected: cannot obtain value for tensor " + C2 + ' at layer "' + s2.name + '". The following previous layers were accessed without issue: ' + q2);
              }
              for (var Q2 = 0, ee2 = K2.outputTensors; Q2 < ee2.length; Q2++) {
                C2 = ee2[Q2];
                $2.push(C2);
              }
              q2.push(s2.name);
            }
          }
        r2.nodesByDepth = O2;
        for (var te2 = r2.layers.map(function(e3) {
          return e3.name;
        }), ne2 = function(e3) {
          var t3 = te2.filter(function(t4) {
            return t4 === e3;
          }).length;
          if (1 !== t3)
            throw new RuntimeError('The name "' + e3 + '" is used ' + t3 + " times in the model. All layer names should be unique. Layer names: " + JSON.stringify(te2));
        }, re2 = 0, ie2 = te2; re2 < ie2.length; re2++) {
          ne2(ie2[re2]);
        }
        return r2.outboundNodes = [], r2.inboundNodes = [], new Node({ outboundLayer: r2, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: r2.inputs, outputTensors: r2.outputs, inputMasks: r2.inputs.map(function(e3) {
          return null;
        }), outputMasks: r2.outputs.map(function(e3) {
          return null;
        }), inputShapes: r2.inputs.map(function(e3) {
          return e3.shape;
        }), outputShapes: r2.outputs.map(function(e3) {
          return e3.shape;
        }) }), r2.built = true, r2._refCount = 1, r2;
      }
      return __extends(t2, e2), t2.prototype.assertNotDisposed = function() {
        if (0 === this._refCount)
          throw new Error("Container '" + this.name + "' is already disposed.");
      }, t2.prototype.dispose = function() {
        this.assertNotDisposed();
        var e3 = { refCountAfterDispose: null, numDisposedVariables: 0 };
        if (0 == --this._refCount) {
          for (var t3 = 0, n2 = this.layers; t3 < n2.length; t3++) {
            var r2 = n2[t3];
            e3.numDisposedVariables += r2.dispose().numDisposedVariables;
          }
          for (var i2 = 0, a2 = this.internalContainerRefs; i2 < a2.length; i2++) {
            var o2 = a2[i2];
            e3.numDisposedVariables += o2.dispose().numDisposedVariables;
          }
        }
        return e3.refCountAfterDispose = this._refCount, e3;
      }, Object.defineProperty(t2.prototype, "trainable", { get: function() {
        return this.trainable_;
      }, set: function(e3) {
        this.layers.forEach(function(t3) {
          t3._trainableWeights.forEach(function(t4) {
            return t4.trainable = e3;
          });
        }), this.trainable_ = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "trainableWeights", { get: function() {
        if (this._trainableWeights.length > 0)
          throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
        if (!this.trainable)
          return [];
        for (var e3 = [], t3 = 0, n2 = this.layers; t3 < n2.length; t3++) {
          var r2 = n2[t3];
          e3 = e3.concat(r2.trainableWeights);
        }
        return e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nonTrainableWeights", { get: function() {
        for (var e3 = [], t3 = 0, n2 = this.layers; t3 < n2.length; t3++) {
          var r2 = n2[t3];
          e3.push.apply(e3, r2.nonTrainableWeights);
        }
        if (!this.trainable) {
          for (var i2 = [], a2 = 0, o2 = this.layers; a2 < o2.length; a2++) {
            r2 = o2[a2];
            i2.push.apply(i2, r2.trainableWeights);
          }
          return i2.concat(e3);
        }
        return e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "weights", { get: function() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
      }, enumerable: true, configurable: true }), t2.prototype.loadWeights = function(e3, t3) {
        void 0 === t3 && (t3 = true);
        for (var n2 = {}, r2 = 0, i2 = 0, a2 = this.layers; i2 < a2.length; i2++)
          for (var o2 = 0, s2 = a2[i2].weights; o2 < s2.length; o2++) {
            var l3 = s2[o2];
            if (null != n2[l3.originalName])
              throw new ValueError("Duplicate weight name: " + l3.originalName);
            n2[l3.originalName] = l3, r2++;
          }
        var u2 = [];
        for (var c2 in e3) {
          if (null != n2[c2])
            u2.push([n2[c2], e3[c2]]);
          else if (t3)
            throw new ValueError("Provided weight data has no target variable: " + c2);
          delete n2[c2];
        }
        if (t3) {
          var p2 = [];
          for (var h2 in n2)
            p2.push(h2);
          if (p2.length > 0)
            throw new ValueError(p2.length + " of " + r2 + " weights are not set: " + p2);
        }
        batchSetValue(u2);
      }, t2.prototype.updatedConfig = function() {
        var e3 = this.getConfig(), t3 = {};
        return t3.className = this.getClassName(), t3.config = e3, t3.kerasVersion = "tfjs-layers " + version, t3.backend = "TensorFlow.js", t3;
      }, t2.prototype.toJSON = function(e3, t3) {
        void 0 === t3 && (t3 = true);
        var n2 = convertTsToPythonic(this.updatedConfig());
        return t3 ? JSON.stringify(n2) : n2;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          e3 = toList(e3);
          for (var r2 = new FeedDict(), i2 = 0; i2 < n2.inputs.length; ++i2)
            r2.add(n2.inputs[i2], e3[i2]);
          return execute(n2.outputs, r2, t3);
        });
      }, t2.prototype.computeMask = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var r2;
          return e3 = toList(e3), r2 = null == t3 ? pyListRepeat(null, e3.length) : toList(t3), n2.runInternalGraph(e3, r2)[1];
        });
      }, t2.prototype.computeOutputShape = function(e3) {
        var t3 = normalizeShapeList(e3);
        if (t3.length !== this.inputLayers.length)
          throw new ValueError("Invalid inputShape argument " + e3 + ": model has " + this.inputLayers.length + " tensor inputs.");
        for (var n2 = {}, r2 = 0; r2 < t3.length; r2++) {
          var i2 = this.inputLayers[r2], a2 = t3[r2];
          n2[A2 = i2.name + "_0_0"] = a2;
        }
        var o2 = Object.keys(this.nodesByDepth).map(function(e4) {
          return parseInt(e4, 10);
        }).sort(reverseNumberCompare);
        if (o2.length > 1)
          for (var s2 = 0, l3 = o2; s2 < l3.length; s2++)
            for (var u2 = l3[s2], c2 = 0, p2 = this.nodesByDepth[u2]; c2 < p2.length; c2++) {
              var h2 = p2[c2];
              i2 = h2.outboundLayer;
              if (-1 === this.inputLayers.map(function(e4) {
                return e4.id;
              }).indexOf(i2.id)) {
                for (var d2 = [], f2 = 0; f2 < h2.inboundLayers.length; f2++) {
                  var g2 = h2.inboundLayers[f2], m2 = h2.nodeIndices[f2], y2 = h2.tensorIndices[f2], v2 = n2[A2 = g2.name + "_" + m2 + "_" + y2];
                  d2.push(v2);
                }
                var b2 = normalizeShapeList(i2.computeOutputShape(singletonOrArray(d2))), w2 = i2.inboundNodes.indexOf(h2);
                for (f2 = 0; f2 < b2.length; f2++) {
                  n2[A2 = i2.name + "_" + w2 + "_" + f2] = b2[f2];
                }
              }
            }
        var z2 = [], S2 = [];
        for (r2 = 0; r2 < this.outputLayers.length; r2++) {
          i2 = this.outputLayers[r2], w2 = this.outputLayersNodeIndices[r2], y2 = this.outputLayersTensorIndices[r2];
          var A2 = i2.name + "_" + w2 + "_" + y2;
          S2.push(A2);
        }
        for (r2 = 0; r2 < S2.length; r2++) {
          var _2 = S2[r2];
          assert(_2 in n2), z2.push(n2[_2]);
        }
        return singletonOrArray(z2);
      }, t2.prototype.runInternalGraph = function(e3, t3) {
        null == t3 && (t3 = pyListRepeat(null, e3.length));
        for (var n2 = {}, r2 = 0; r2 < this.inputs.length; ++r2) {
          var i2 = this.inputs[r2], a2 = e3[r2], o2 = t3[r2];
          n2[i2.id] = [a2, o2];
        }
        for (var s2 = 0, l3 = Object.keys(this.nodesByDepth).map(function(e4) {
          return parseInt(e4, 10);
        }).sort(reverseNumberCompare); s2 < l3.length; s2++)
          for (var u2 = l3[s2], c2 = 0, p2 = this.nodesByDepth[u2]; c2 < p2.length; c2++) {
            for (var h2 = p2[c2], d2 = h2.outboundLayer, f2 = h2.inputTensors, g2 = h2.outputTensors, m2 = new Array(), y2 = 0, v2 = f2; y2 < v2.length; y2++) {
              (i2 = v2[y2]).id in n2 && m2.push(n2[i2.id]);
            }
            if (m2.length === f2.length) {
              var b2 = {}, w2 = void 0, z2 = void 0, S2 = void 0, A2 = void 0;
              if (null != h2.callArgs && (b2 = h2.callArgs), 1 === m2.length) {
                var _2 = m2[0], I2 = _2[0], C2 = _2[1];
                null == b2.mask && (b2.mask = C2), S2 = toList(d2.call(I2, b2)), A2 = toList(d2.computeMask(I2, C2)), w2 = [I2], z2 = [C2];
              } else
                w2 = m2.map(function(e4) {
                  return e4[0];
                }), z2 = m2.map(function(e4) {
                  return e4[1];
                }), null == b2.mask && (b2.mask = z2), S2 = toList(d2.call(w2, b2)), A2 = toList(d2.computeMask(w2, z2));
              if (d2.activityRegularizer)
                throw new NotImplementedError("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
              for (r2 = 0; r2 < g2.length; ++r2) {
                i2 = g2[r2], a2 = S2[r2], o2 = A2[r2];
                n2[i2.id] = [a2, o2];
              }
            }
          }
        for (var E2 = [], N2 = [], k2 = [], x2 = 0, L2 = this.outputs; x2 < L2.length; x2++) {
          assert((i2 = L2[x2]).id in n2, "Could not compute output " + i2.name + " : " + i2.id);
          var T2 = n2[i2.id], D2 = T2[0];
          o2 = T2[1];
          k2.push(D2.shape), E2.push(D2), N2.push(o2);
        }
        return [E2, N2, k2];
      }, t2.prototype.buildNodeConversionMap = function(e3) {
        for (var n2, r2 = {}, i2 = 0, a2 = this.layers; i2 < a2.length; i2++) {
          var o2 = a2[i2];
          n2 = o2 instanceof t2 ? 1 : 0;
          for (var s2 = 0; s2 < o2.inboundNodes.length; s2++) {
            var l3 = t2.nodeKey(o2, s2);
            this.containerNodes.has(l3) && (r2[l3] = n2, n2 += 1);
          }
        }
        return r2;
      }, t2.prototype.getLayer = function(e3, t3) {
        if (null != t3) {
          if (this.layers.length <= t3)
            throw new ValueError("Was asked to retrieve layer at index " + t3 + ", but model only has " + this.layers.length + " layer(s).");
          return this.layers[t3];
        }
        if (null == e3)
          throw new ValueError("Provide either a layer name or layer index");
        for (var n2 = 0, r2 = this.layers; n2 < r2.length; n2++) {
          var i2 = r2[n2];
          if (i2.name === e3)
            return i2;
        }
        throw new ValueError("No such layer: " + e3);
      }, t2.prototype.calculateLosses = function() {
        var e3 = this;
        return je(function() {
          for (var n2 = [], r2 = 0, i2 = e3.layers; r2 < i2.length; r2++)
            for (var a2 = i2[r2], o2 = 0; o2 < a2.inboundNodes.length; ++o2) {
              var s2 = t2.nodeKey(a2, o2);
              e3.containerNodes.has(s2) && n2.push.apply(n2, a2.calculateLosses());
            }
          return n2;
        });
      }, t2.prototype.getConfig = function() {
        for (var e3 = { name: this.name }, n2 = this.buildNodeConversionMap(this.layers), r2 = [], i2 = 0, a2 = this.layers; i2 < a2.length; i2++) {
          for (var o2 = (w2 = a2[i2]).getClassName(), s2 = w2.getConfig(), l3 = [], u2 = 0; u2 < w2.inboundNodes.length; u2++) {
            var c2 = w2.inboundNodes[u2], p2 = t2.nodeKey(w2, u2), h2 = {};
            if (this.containerNodes.has(p2)) {
              if (c2.callArgs)
                try {
                  JSON.stringify(c2.callArgs), h2 = c2.callArgs;
                } catch (e4) {
                  console.warn("Layer " + w2.name + " was passed non-serializable keyword arguments: " + c2.callArgs + ". They will not be included in the serialized model (and thus will be missing at deserialization time)."), h2 = {};
                }
              if (c2.inboundLayers.length > 0) {
                for (var d2 = [], f2 = 0; f2 < c2.inboundLayers.length; f2++) {
                  var g2 = c2.inboundLayers[f2], m2 = c2.nodeIndices[f2], y2 = c2.tensorIndices[f2];
                  null == (S2 = n2[t2.nodeKey(g2, m2)]) && (S2 = 0), d2.push([g2.name, S2, y2, h2]);
                }
                l3.push(d2);
              }
            }
          }
          var v2 = {};
          v2.name = w2.name, v2.className = o2, v2.config = s2, v2.inboundNodes = l3, r2.push(v2);
        }
        e3.layers = r2;
        var b2 = [];
        for (f2 = 0; f2 < this.inputLayers.length; f2++) {
          var w2 = this.inputLayers[f2];
          m2 = this.inputLayersNodeIndices[f2], p2 = t2.nodeKey(w2, m2);
          if (this.containerNodes.has(p2)) {
            null !== (S2 = n2[p2]) && void 0 !== S2 || (S2 = 0);
            y2 = this.inputLayersTensorIndices[f2];
            b2.push([w2.name, S2, y2]);
          }
        }
        e3.inputLayers = b2;
        var z2 = [];
        for (f2 = 0; f2 < this.outputLayers.length; f2++) {
          w2 = this.outputLayers[f2], m2 = this.outputLayersNodeIndices[f2], p2 = t2.nodeKey(w2, m2);
          if (this.containerNodes.has(p2)) {
            var S2;
            null !== (S2 = n2[p2]) && void 0 !== S2 || (S2 = 0);
            y2 = this.outputLayersTensorIndices[f2];
            z2.push([w2.name, S2, y2]);
          }
        }
        return e3.outputLayers = z2, e3;
      }, t2.fromConfig = function(e3, t3, n2, r2) {
        void 0 === n2 && (n2 = {}), void 0 === r2 && (r2 = false);
        var i2 = {}, a2 = {};
        function o2(e4, t4) {
          e4.name in a2 ? a2[e4.name].push(t4) : a2[e4.name] = [t4];
        }
        function s2(e4, t4) {
          for (var n3, r3 = [], a3 = 0, s3 = t4; a3 < s3.length; a3++) {
            var l4 = s3[a3], u3 = l4[0], c3 = l4[1], p3 = l4[2];
            if (n3 = null == l4[3] ? {} : l4[3], !(u3 in i2))
              return void o2(e4, t4);
            var h3 = i2[u3];
            if (h3.inboundNodes.length <= c3)
              return void o2(e4, t4);
            var d3 = h3.inboundNodes[c3];
            r3.push(d3.outputTensors[p3]);
          }
          r3.length > 0 && e4.apply(singletonOrArray(r3), n3);
        }
        function l3(e4) {
          var n3 = e4.name, a3 = deserialize(e4, null != t3.customObjects ? t3.customObjects : {});
          a3.setFastWeightInitDuringBuild(r2), i2[n3] = a3, e4.inboundNodes.forEach(function(e5) {
            if (!(e5 instanceof Array))
              throw new ValueError("Corrupted configuration, expected array for nodeData: " + e5);
            o2(a3, e5);
          });
        }
        for (var u2 = t3.name, c2 = t3.layers, p2 = 0, h2 = c2; p2 < h2.length; p2++) {
          l3(g2 = h2[p2]);
        }
        for (; !isObjectEmpty(a2); )
          for (var d2 = 0, f2 = c2; d2 < f2.length; d2++) {
            var g2 = f2[d2];
            if ((k2 = i2[g2.name]).name in a2) {
              var m2 = a2[k2.name];
              delete a2[k2.name];
              for (var y2 = 0, v2 = m2; y2 < v2.length; y2++) {
                s2(k2, v2[y2]);
              }
            }
          }
        for (var b2 = [], w2 = [], z2 = 0, S2 = t3.inputLayers; z2 < S2.length; z2++) {
          var A2 = (g2 = S2[z2])[0], _2 = g2[1], I2 = g2[2];
          assert(A2 in i2);
          var C2 = (k2 = i2[A2]).inboundNodes[_2].outputTensors;
          b2.push(C2[I2]);
        }
        for (var E2 = 0, N2 = t3.outputLayers; E2 < N2.length; E2++) {
          A2 = (g2 = N2[E2])[0], _2 = g2[1], I2 = g2[2];
          assert(A2 in i2);
          var k2;
          C2 = (k2 = i2[A2]).inboundNodes[_2].outputTensors;
          w2.push(C2[I2]);
        }
        return new e3({ inputs: b2, outputs: w2, name: u2 });
      }, Object.defineProperty(t2.prototype, "stateful", { get: function() {
        if (this._stateful)
          throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
        for (var e3 = 0, t3 = this.layers; e3 < t3.length; e3++) {
          if (t3[e3].stateful)
            return true;
        }
        return false;
      }, enumerable: true, configurable: true }), t2.prototype.resetStates = function() {
        var e3 = this;
        je(function() {
          e3.layers.forEach(function(e4) {
            e4.stateful && e4.resetStates();
          });
        });
      }, t2;
    }(Layer);
    DEFAULT_VALIDATION_BATCH_SIZE = 32;
    LAYERS_MODEL_FORMAT_NAME = "layers-model";
    LayersModel = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.isTraining = false, n2;
      }
      return __extends(t2, e2), t2.prototype.summary = function(e3, t3, n2) {
        if (void 0 === n2 && (n2 = console.log), !this.built)
          throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
        printSummary(this, e3, t3, n2);
      }, t2.prototype.compile = function(e3) {
        var t3 = this;
        if (null == e3.loss && (e3.loss = []), this.loss = e3.loss, "string" == typeof e3.optimizer)
          this.optimizer_ = getOptimizer(e3.optimizer), this.isOptimizerOwned = true;
        else {
          if (!(e3.optimizer instanceof Hf))
            throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");
          this.optimizer_ = e3.optimizer, this.isOptimizerOwned = false;
        }
        var n2 = [];
        if (Array.isArray(e3.loss) || "string" == typeof e3.loss || "function" == typeof e3.loss)
          if (Array.isArray(e3.loss)) {
            if (e3.loss.length !== this.outputs.length)
              throw new ValueError("When passing an Array as loss, it should have one entry per model output. The model has " + this.outputs.length + " output(s), but you passed loss=" + e3.loss + ".");
            var r2 = e3.loss;
            n2 = r2.map(function(e4) {
              return get(e4);
            });
          } else {
            var i2 = get(e3.loss);
            this.outputs.forEach(function(e4) {
              n2.push(i2);
            });
          }
        else {
          for (var a2 in e3.loss = e3.loss, e3.loss)
            if (-1 === this.outputNames.indexOf(a2))
              throw new ValueError('Unknown entry in loss dictionary: "' + a2 + '". Only expected the following keys: ' + this.outputNames);
          for (var o2 = 0, s2 = this.outputNames; o2 < s2.length; o2++) {
            var l3 = s2[o2];
            null == e3.loss[l3] && console.warn('Output "' + l3 + '" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ' + l3 + " during training"), n2.push(get(e3.loss[l3]));
          }
        }
        this.lossFunctions = n2, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
        for (var u2 = 0; u2 < this.outputs.length; ++u2) {
          var c2 = this.internalOutputShapes[u2], p2 = this.outputNames[u2];
          this.feedOutputNames.push(p2), this.feedOutputShapes.push(c2), this.feedLossFns.push(this.lossFunctions[u2]);
        }
        var h2 = [];
        this.metrics = e3.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], nameScope("loss", function() {
          for (var e4 = 0; e4 < t3.outputs.length; ++e4)
            if (-1 === h2.indexOf(e4)) {
              var n3 = t3.lossFunctions[e4];
              t3.outputs.length > 1 && (t3.metricsTensors.push([n3, e4]), t3.metricsNames.push(t3.outputNames[e4] + "_loss"));
            }
        });
        var d2 = collectMetrics(e3.metrics, this.outputNames);
        nameScope("metric", function() {
          for (var e4 = function(e5) {
            if (-1 !== h2.indexOf(e5))
              return "continue";
            !function(n4) {
              for (var r3, i3, a3, o3 = function(n5) {
                if ("string" == typeof n5 && -1 !== ["accuracy", "acc", "crossentropy", "ce"].indexOf(n5)) {
                  var o4 = t3.internalOutputShapes[e5];
                  1 === o4[o4.length - 1] || t3.lossFunctions[e5] === binaryCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(n5) ? i3 = binaryAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n5) && (i3 = binaryCrossentropy$1) : t3.lossFunctions[e5] === sparseCategoricalCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(n5) ? i3 = sparseCategoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n5) && (i3 = sparseCategoricalCrossentropy$1) : -1 !== ["accuracy", "acc"].indexOf(n5) ? i3 = categoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n5) && (i3 = categoricalCrossentropy$1);
                  var s4 = void 0;
                  -1 !== ["accuracy", "acc"].indexOf(n5) ? s4 = "acc" : -1 !== ["crossentropy", "ce"].indexOf(n5) && (s4 = "ce"), a3 = i3, r3 = "" + s4;
                } else {
                  var l5 = get$1(n5);
                  a3 = l5, r3 = "" + getLossOrMetricName(n5);
                }
                var u3;
                nameScope(r3, function() {
                  u3 = a3;
                }), function(e6, n6, r4) {
                  t3.outputNames.length > 1 && (n6 = t3.outputNames[e6] + "_" + n6), t3.metricsNames.push(n6), t3.metricsTensors.push([r4, e6]);
                }(e5, r3, u3);
              }, s3 = 0, l4 = n4; s3 < l4.length; s3++)
                o3(l4[s3]);
            }(d2[e5]);
          }, n3 = 0; n3 < t3.outputs.length; ++n3)
            e4(n3);
        }), this.collectedTrainableWeights = this.trainableWeights;
      }, t2.prototype.checkTrainableWeightsConsistency = function() {
        null != this.collectedTrainableWeights && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
      }, t2.prototype.evaluate = function(e3, t3, n2) {
        void 0 === n2 && (n2 = {});
        var r2 = null == n2.batchSize ? 32 : n2.batchSize;
        checkBatchSize(r2);
        var i2 = this.standardizeUserDataXY(e3, t3, true, r2);
        try {
          var a2 = i2[0].concat(i2[1]);
          this.makeTestFunction();
          var o2 = this.testFunction;
          return singletonOrArray(this.testLoop(o2, a2, r2, n2.verbose, n2.steps));
        } finally {
          disposeNewTensors(i2[0], e3), disposeNewTensors(i2[1], t3);
        }
      }, t2.prototype.evaluateDataset = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(n2) {
            return this.makeTestFunction(), [2, evaluateDataset(this, e3, t3)];
          });
        });
      }, t2.prototype.checkNumSamples = function(e3, t3, n2, r2) {
        var i2;
        if (void 0 === r2 && (r2 = "steps"), null != n2) {
          if (i2 = null, null != t3)
            throw new ValueError("If " + r2 + " is set, batchSize must be null or undefined.Got batchSize = " + t3);
        } else {
          if (null == e3)
            throw new ValueError("Either the input data should have a defined shape, or " + r2 + " shoud be specified.");
          i2 = Array.isArray(e3) ? e3[0].shape[0] : e3.shape[0];
        }
        return i2;
      }, t2.prototype.execute = function(e3, t3) {
        if (Array.isArray(t3) && 0 === t3.length)
          throw new ValueError("`outputs` is an empty Array, which is not allowed.");
        var n2 = Array.isArray(t3), r2 = n2 ? t3 : [t3], i2 = this.retrieveSymbolicTensors(r2), a2 = new FeedDict();
        if (e3 instanceof dt && (e3 = [e3]), Array.isArray(e3)) {
          if (e3.length !== this.inputs.length)
            throw new ValueError("The number of inputs provided (" + e3.length + ") does not match the number of inputs of this model (" + this.inputs.length + ").");
          for (var o2 = 0; o2 < this.inputs.length; ++o2)
            a2.add(this.inputs[o2], e3[o2]);
        } else
          for (var s2 = 0, l3 = this.inputs; s2 < l3.length; s2++) {
            var u2 = l3[s2], c2 = e3[u2.name];
            if (null == c2)
              throw new ValueError("No value is provided for the model's input " + u2.name);
            a2.add(u2, c2);
          }
        var p2 = execute(i2, a2);
        return n2 ? p2 : p2[0];
      }, t2.prototype.retrieveSymbolicTensors = function(e3) {
        for (var t3 = pyListRepeat(null, e3.length), n2 = e3.length, r2 = 0, i2 = this.layers; r2 < i2.length; r2++) {
          for (var a2 = i2[r2], o2 = Array.isArray(a2.output) ? a2.output : [a2.output], s2 = o2.map(function(e4) {
            return e4.name;
          }), l3 = 0; l3 < e3.length; ++l3) {
            var u2 = s2.indexOf(e3[l3]);
            if (-1 !== u2 && (t3[l3] = o2[u2], n2--), 0 === n2)
              break;
          }
          if (0 === n2)
            break;
        }
        if (n2 > 0) {
          var c2 = [];
          throw t3.forEach(function(t4, n3) {
            null == t4 && c2.push(e3[n3]);
          }), new ValueError("Cannot find SymbolicTensors for output name(s): " + JSON.stringify(c2));
        }
        return t3;
      }, t2.prototype.predictLoop = function(e3, t3, n2) {
        var r2 = this;
        return void 0 === t3 && (t3 = 32), void 0 === n2 && (n2 = false), je(function() {
          var i2 = r2.checkNumSamples(e3);
          if (n2)
            throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");
          for (var a2 = makeBatches(i2, t3), o2 = r2.outputs.map(function(e4) {
            return [];
          }), s2 = function(t4) {
            je(function() {
              var n3 = a2[t4][0], i3 = a2[t4][1], o3 = sliceArrays(e3, n3, i3), s3 = [];
              if (Array.isArray(o3))
                for (var l4 = 0; l4 < o3.length; ++l4)
                  s3.push({ key: r2.inputs[l4], value: o3[l4] });
              else
                s3.push({ key: r2.inputs[0], value: o3 });
              var u2 = new FeedDict(s3);
              return execute(r2.outputs, u2);
            }).forEach(function(e4, t5) {
              return o2[t5].push(e4);
            });
          }, l3 = 0; l3 < a2.length; ++l3)
            s2(l3);
          return singletonOrArray(o2.map(function(e4) {
            return Gn(e4, 0);
          }));
        });
      }, t2.prototype.predict = function(e3, t3) {
        void 0 === t3 && (t3 = {});
        var n2 = ensureTensorsRank2OrHigher(e3);
        checkInputData(n2, this.inputNames, this.feedInputShapes, false);
        try {
          var r2 = null == t3.batchSize ? 32 : t3.batchSize;
          return checkBatchSize(r2), this.predictLoop(n2, r2);
        } finally {
          disposeNewTensors(n2, e3);
        }
      }, t2.prototype.predictOnBatch = function(e3) {
        checkInputData(e3, this.inputNames, this.feedInputShapes, true);
        var t3 = (Array.isArray(e3) ? e3[0] : e3).shape[0];
        return this.predictLoop(e3, t3);
      }, t2.prototype.standardizeUserDataXY = function(e3, t3, n2, r2) {
        if (void 0 === n2 && (n2 = true), null == this.optimizer_)
          throw new RuntimeError("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
        for (var i2 = [], a2 = 0; a2 < this.feedOutputShapes.length; ++a2) {
          var o2 = this.feedOutputShapes[a2];
          this.feedLossFns[a2] === sparseCategoricalCrossentropy ? i2.push(o2.slice(0, o2.length - 1).concat([1])) : i2.push(o2);
        }
        if (checkArrayLengths(e3 = standardizeInputData(e3, this.feedInputNames, this.feedInputShapes, false, "input"), t3 = standardizeInputData(t3, this.feedOutputNames, i2, false, "target"), null), checkLossAndTargetCompatibility(t3, this.feedLossFns, this.feedOutputShapes), this.stateful && null != r2 && r2 > 0 && e3[0].shape[0] % r2 != 0)
          throw new ValueError("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size " + r2 + ". Found: " + e3[0].shape[0] + " sample(s).");
        return [e3, t3];
      }, t2.prototype.standardizeUserData = function(e3, t3, n2, r2, i2, a2) {
        return void 0 === i2 && (i2 = true), __awaiter(this, void 0, void 0, function() {
          var o2, s2, l3, u2, c2, p2, h2, d2;
          return __generator(this, function(f2) {
            switch (f2.label) {
              case 0:
                if (o2 = this.standardizeUserDataXY(e3, t3, i2, a2), s2 = o2[0], l3 = o2[1], null != n2)
                  throw new Error("sample weight is not supported yet.");
                if (u2 = null, null == r2)
                  return [3, 4];
                c2 = standardizeClassWeights(r2, this.outputNames), u2 = [], p2 = 0, f2.label = 1;
              case 1:
                return p2 < c2.length ? (d2 = (h2 = u2).push, [4, standardizeWeights(l3[p2], null, c2[p2])]) : [3, 4];
              case 2:
                d2.apply(h2, [f2.sent()]), f2.label = 3;
              case 3:
                return ++p2, [3, 1];
              case 4:
                return [2, [s2, l3, u2]];
            }
          });
        });
      }, t2.prototype.testLoop = function(e3, t3, n2, r2, i2) {
        var a2 = this;
        return void 0 === r2 && (r2 = 0), je(function() {
          var o2 = a2.checkNumSamples(t3, n2, i2, "steps"), s2 = [];
          if (r2 > 0)
            throw new NotImplementedError("Verbose mode is not implemented yet.");
          if (null != i2)
            throw new NotImplementedError("steps mode in testLoop() is not implemented yet");
          for (var l3 = makeBatches(o2, n2), u2 = Dn(range(0, o2)), c2 = 0; c2 < l3.length; ++c2) {
            var p2 = l3[c2][0], h2 = l3[c2][1], d2 = sliceAlongFirstAxis(u2, p2, h2 - p2), f2 = sliceArraysByIndices(t3, d2), g2 = e3(f2);
            if (0 === c2)
              for (var m2 = 0; m2 < g2.length; ++m2)
                s2.push(An(0));
            for (m2 = 0; m2 < g2.length; ++m2) {
              var y2 = g2[m2];
              s2[m2] = Vs(s2[m2], tc(h2 - p2, y2));
            }
          }
          for (m2 = 0; m2 < s2.length; ++m2)
            s2[m2] = qs(s2[m2], o2);
          return s2;
        });
      }, t2.prototype.getDedupedMetricsNames = function() {
        for (var e3 = this.metricsNames, t3 = [], n2 = 0; n2 < e3.length; ++n2) {
          var r2 = e3[n2], i2 = r2;
          if (count(e3, r2) > 1)
            i2 += "_" + count(e3.slice(0, n2), r2);
          t3.push(i2);
        }
        return t3;
      }, t2.prototype.makeTrainFunction = function() {
        var e3 = this;
        return function(t3) {
          var n2 = [], r2 = t3.slice(0, e3.inputs.length), i2 = t3.slice(e3.inputs.length, e3.inputs.length + e3.outputs.length), a2 = t3.slice(e3.inputs.length + e3.outputs.length, e3.inputs.length + 2 * e3.outputs.length), o2 = [], s2 = e3.collectedTrainableWeights.map(function(e4) {
            return e4.read();
          });
          return [e3.optimizer_.minimize(function() {
            for (var t4 = [], s3 = 0; s3 < e3.inputs.length; ++s3)
              t4.push({ key: e3.inputs[s3], value: r2[s3] });
            var l3, u2 = new FeedDict(t4), c2 = execute(e3.outputs, u2, { training: true });
            for (s3 = 0; s3 < e3.lossFunctions.length; ++s3) {
              var p2 = (0, e3.lossFunctions[s3])(i2[s3], c2[s3]);
              null != a2[s3] && (p2 = computeWeightedLoss(p2, a2[s3]));
              var h2 = fl(p2);
              n2.push(h2), l3 = 0 === s3 ? p2 : Vs(l3, p2);
            }
            for (s3 = 0; s3 < e3.metricsTensors.length; ++s3) {
              var d2 = void 0;
              if (e3.outputs.length > 1 && s3 < e3.outputs.length)
                d2 = n2[s3];
              else {
                var f2 = e3.metricsTensors[s3][0], g2 = e3.metricsTensors[s3][1];
                d2 = fl(f2(i2[g2], c2[g2]));
              }
              $e(d2), o2.push(d2);
            }
            return l3 = fl(l3), e3.calculateLosses().forEach(function(e4) {
              l3 = Vs(l3, e4);
            }), l3;
          }, true, s2)].concat(o2);
        };
      }, t2.prototype.makeTestFunction = function() {
        var e3 = this;
        this.testFunction = function(t3) {
          return je(function() {
            for (var n2, r2 = [], i2 = t3.slice(0, e3.inputs.length), a2 = t3.slice(e3.inputs.length, e3.inputs.length + e3.outputs.length), o2 = [], s2 = 0; s2 < e3.inputs.length; ++s2)
              o2.push({ key: e3.inputs[s2], value: i2[s2] });
            var l3 = new FeedDict(o2), u2 = execute(e3.outputs, l3);
            for (s2 = 0; s2 < e3.lossFunctions.length; ++s2) {
              var c2 = e3.lossFunctions[s2], p2 = fl(c2(a2[s2], u2[s2]));
              n2 = 0 === s2 ? p2 : Vs(n2, p2), r2.push(n2);
            }
            for (s2 = 0; s2 < e3.metricsTensors.length; ++s2) {
              var h2 = e3.metricsTensors[s2][0], d2 = e3.metricsTensors[s2][1], f2 = fl(h2(a2[d2], u2[d2]));
              r2.push(f2);
            }
            return r2;
          });
        };
      }, t2.prototype.fit = function(e3, t3, n2) {
        return void 0 === n2 && (n2 = {}), __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(r2) {
            return [2, fitTensors(this, e3, t3, n2)];
          });
        });
      }, t2.prototype.fitDataset = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(n2) {
            return [2, fitDataset(this, e3, t3)];
          });
        });
      }, t2.prototype.trainOnBatch = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var n2, r2, i2, a2, o2, s2, l3, u2, c2;
          return __generator(this, function(p2) {
            switch (p2.label) {
              case 0:
                return [4, this.standardizeUserData(e3, t3)];
              case 1:
                n2 = p2.sent(), r2 = n2[0], i2 = n2[1], a2 = this.makeTrainFunction(), o2 = a2(r2.concat(i2)), s2 = [], l3 = 0, u2 = o2, p2.label = 2;
              case 2:
                return l3 < u2.length ? [4, u2[l3].data()] : [3, 5];
              case 3:
                c2 = p2.sent(), s2.push(c2[0]), p2.label = 4;
              case 4:
                return l3++, [3, 2];
              case 5:
                return Xe(o2), [2, singletonOrArray(s2)];
            }
          });
        });
      }, t2.prototype.getNamedWeights = function(e3) {
        for (var t3 = [], n2 = null != e3 && e3.trainableOnly, r2 = n2 ? this.trainableWeights : this.weights, i2 = this.getWeights(n2), a2 = 0; a2 < r2.length; ++a2)
          n2 && !r2[a2].trainable || t3.push({ name: r2[a2].originalName, tensor: i2[a2] });
        return t3;
      }, Object.defineProperty(t2.prototype, "stopTraining", { get: function() {
        return this.stopTraining_;
      }, set: function(e3) {
        this.stopTraining_ = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "optimizer", { get: function() {
        return this.optimizer_;
      }, set: function(e3) {
        this.optimizer_ !== e3 && (this.optimizer_ = e3, this.isOptimizerOwned = false);
      }, enumerable: true, configurable: true }), t2.prototype.dispose = function() {
        var t3 = e2.prototype.dispose.call(this);
        if (0 === t3.refCountAfterDispose && null != this.optimizer && this.isOptimizerOwned) {
          var n2 = qe().numTensors;
          this.optimizer_.dispose(), t3.numDisposedVariables += n2 - qe().numTensors;
        }
        return t3;
      }, t2.prototype.getLossIdentifiers = function() {
        var e3;
        if ("string" == typeof this.loss)
          e3 = toSnakeCase(this.loss);
        else if (Array.isArray(this.loss)) {
          for (var t3 = 0, n2 = this.loss; t3 < n2.length; t3++) {
            if ("string" != typeof n2[t3])
              throw new Error("Serialization of non-string loss is not supported.");
          }
          e3 = this.loss.map(function(e4) {
            return toSnakeCase(e4);
          });
        } else {
          var r2 = Object.keys(this.loss);
          e3 = {};
          for (var i2 = this.loss, a2 = 0, o2 = r2; a2 < o2.length; a2++) {
            var s2 = o2[a2];
            if ("string" != typeof i2[s2])
              throw new Error("Serialization of non-string loss is not supported.");
            e3[s2] = toSnakeCase(i2[s2]);
          }
        }
        return e3;
      }, t2.prototype.getMetricIdentifiers = function() {
        if ("string" == typeof this.metrics || "function" == typeof this.metrics)
          return [toSnakeCase(getLossOrMetricName(this.metrics))];
        if (Array.isArray(this.metrics))
          return this.metrics.map(function(e4) {
            return toSnakeCase(getLossOrMetricName(e4));
          });
        var e3 = {};
        for (var t3 in this.metrics)
          e3[t3] = toSnakeCase(getLossOrMetricName(this.metrics[t3]));
        return e3;
      }, t2.prototype.getTrainingConfig = function() {
        return { loss: this.getLossIdentifiers(), metrics: this.getMetricIdentifiers(), optimizer_config: { class_name: this.optimizer.getClassName(), config: this.optimizer.getConfig() } };
      }, t2.prototype.loadTrainingConfig = function(e3) {
        if (null != e3.weighted_metrics)
          throw new Error("Loading weight_metrics is not supported yet.");
        if (null != e3.loss_weights)
          throw new Error("Loading loss_weights is not supported yet.");
        if (null != e3.sample_weight_mode)
          throw new Error("Loading sample_weight_mode is not supported yet.");
        var t3, n2, r2 = deserialize(convertPythonicToTs(e3.optimizer_config));
        if ("string" == typeof e3.loss)
          t3 = toCamelCase(e3.loss);
        else if (Array.isArray(e3.loss))
          t3 = e3.loss.map(function(e4) {
            return toCamelCase(e4);
          });
        else if (null != e3.loss)
          for (var i2 in t3 = {}, e3.loss)
            t3[i2] = toCamelCase(e3.loss[i2]);
        if (Array.isArray(e3.metrics))
          n2 = e3.metrics.map(function(e4) {
            return toCamelCase(e4);
          });
        else if (null != e3.metrics)
          for (var i2 in n2 = {}, e3.metrics)
            n2[i2] = toCamelCase(e3.metrics[i2]);
        this.compile({ loss: t3, metrics: n2, optimizer: r2 });
      }, t2.prototype.save = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var n2, r2, i2, a2, o2, s2, l3, u2, c2, p2, h2, d2, f2, g2;
          return __generator(this, function(m2) {
            switch (m2.label) {
              case 0:
                if ("string" == typeof e3) {
                  if (0 === (n2 = Sf.getSaveHandlers(e3)).length)
                    throw new ValueError("Cannot find any save handlers for URL '" + e3 + "'");
                  if (n2.length > 1)
                    throw new ValueError("Found more than one (" + n2.length + ") save handlers for URL '" + e3 + "'");
                  e3 = n2[0];
                }
                if (null == e3.save)
                  throw new ValueError("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
                return [4, Sf.encodeWeights(this.getNamedWeights(t3))];
              case 1:
                return r2 = m2.sent(), i2 = false, a2 = null, o2 = this.toJSON(a2, i2), s2 = { modelTopology: o2, format: LAYERS_MODEL_FORMAT_NAME, generatedBy: "TensorFlow.js tfjs-layers v" + version, convertedBy: null }, null != t3 && t3.includeOptimizer && null != this.optimizer ? (s2.trainingConfig = this.getTrainingConfig(), l3 = "optimizer", d2 = (h2 = Sf).encodeWeights, [4, this.optimizer.getWeights()]) : [3, 4];
              case 2:
                return [4, d2.apply(h2, [m2.sent(), l3])];
              case 3:
                u2 = m2.sent(), c2 = u2.data, p2 = u2.specs, (g2 = r2.specs).push.apply(g2, p2), r2.data = Sf.concatenateArrayBuffers([r2.data, c2]), m2.label = 4;
              case 4:
                return null != this.userDefinedMetadata && (f2 = true, checkUserDefinedMetadata(this.userDefinedMetadata, this.name, f2), s2.userDefinedMetadata = this.userDefinedMetadata), s2.weightData = r2.data, s2.weightSpecs = r2.specs, [2, e3.save(s2)];
            }
          });
        });
      }, t2.prototype.setUserDefinedMetadata = function(e3) {
        checkUserDefinedMetadata(e3, this.name), this.userDefinedMetadata = e3;
      }, t2.prototype.getUserDefinedMetadata = function() {
        return this.userDefinedMetadata;
      }, t2.className = "Model", t2;
    }(Container);
    Mf.registerClass(LayersModel);
    Sequential = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, { inputs: [], outputs: [] }) || this;
        if (t3 = t3 || {}, n2.trainable = true, n2.built = false, n2.name = null != t3.name ? t3.name : getUid("sequential_"), null != t3.layers)
          for (var r2 = 0, i2 = t3.layers; r2 < i2.length; r2++) {
            var a2 = i2[r2];
            n2.add(a2);
          }
        return n2;
      }
      return __extends(t2, e2), t2.prototype.checkShape = function(e3) {
        if (e3.inboundNodes[0].outputTensors[0].shape.some(function(e4) {
          return e4 < 0;
        }))
          throw new ValueError("Negative dimension size caused by adding layer " + e3.name + " with input shape [" + e3.inboundNodes[0].inputTensors[0].shape + "]");
      }, t2.prototype.add = function(e3) {
        var n2, r2 = e3 instanceof t2 || e3 instanceof LayersModel;
        if (r2) {
          if (1 !== (n2 = e3).outputs.length)
            throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
          if (1 !== n2.inputs.length)
            throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
        }
        if (0 === this.outputs.length) {
          if (0 === e3.inboundNodes.length) {
            if (null == e3.batchInputShape)
              throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
            var i2 = Input({ batchShape: e3.batchInputShape, dtype: e3.dtype, name: e3.name + "_input" });
            e3.apply(i2);
          }
          if (r2)
            this.outputs = n2.outputs, this.inputs = n2.inputs;
          else {
            if (1 !== e3.inboundNodes.length)
              throw new ValueError("A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer " + e3.name + " which has " + e3.inboundNodes.length + " pre-existing inbound connections.");
            if (1 !== e3.inboundNodes[0].outputTensors.length)
              throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
            this.checkShape(e3), this.outputs = [e3.inboundNodes[0].outputTensors[0]], this.inputs = getSourceInputs(this.outputs[0]);
          }
          this.inboundNodes = [], new Node({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: pyListRepeat(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map(function(e4) {
            return e4.shape;
          }), outputShapes: this.outputs[0].shape });
        } else {
          var a2 = e3.apply(this.outputs[0]);
          if (Array.isArray(a2))
            throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
          this.checkShape(e3), this.outputs = [a2], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
        }
        this.layers.push(e3), this.built = false;
      }, t2.prototype.pop = function() {
        if (0 === this.layers.length)
          throw new TypeError("There are no layers in the model.");
        if (this.layers.pop(), 0 === this.layers.length)
          this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
        else {
          var e3 = this.layers.length - 1;
          this.layers[e3].outboundNodes = [], this.outputs = [this.layers[e3].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
        }
      }, t2.prototype.call = function(e3, t3) {
        return null == this.model && this.build(), this.model.call(e3, t3);
      }, t2.prototype.build = function(e3) {
        if (getExactlyOneShape(e3), 0 === this.inputs.length || 0 === this.outputs.length)
          throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
        this.model = new LayersModel({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = true;
      }, t2.prototype.countParams = function() {
        return this.built || this.build(), e2.prototype.countParams.call(this);
      }, t2.prototype.summary = function(t3, n2, r2) {
        void 0 === r2 && (r2 = console.log), this.built || this.build(), e2.prototype.summary.call(this, t3, n2, r2);
      }, t2.prototype.setWeights = function(e3) {
        null == this.model && this.build(), this.model.setWeights(e3);
      }, t2.prototype.evaluate = function(e3, t3, n2) {
        if (void 0 === n2 && (n2 = {}), !this.built)
          throw new RuntimeError("The model needs to be compiled before being used.");
        return this.model.evaluate(e3, t3, n2);
      }, t2.prototype.evaluateDataset = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(n2) {
            if (!this.built)
              throw new RuntimeError("The model needs to be compiled before being used.");
            return [2, this.model.evaluateDataset(e3, t3)];
          });
        });
      }, t2.prototype.predict = function(e3, t3) {
        return void 0 === t3 && (t3 = {}), null == this.model && this.build(), this.model.predict(e3, t3);
      }, t2.prototype.predictOnBatch = function(e3) {
        return null == this.model && this.build(), this.model.predictOnBatch(e3);
      }, t2.prototype.compile = function(e3) {
        this.build(), this.model.compile(e3), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
      }, Object.defineProperty(t2.prototype, "optimizer", { get: function() {
        return null == this.model ? void 0 : this.model.optimizer;
      }, set: function(e3) {
        this.model.optimizer = e3;
      }, enumerable: true, configurable: true }), t2.prototype.fit = function(e3, t3, n2) {
        return void 0 === n2 && (n2 = {}), __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(r2) {
            if (!this.built)
              throw new RuntimeError("The model needs to be compiled before being used.");
            return [2, this.model.fit(e3, t3, n2)];
          });
        });
      }, t2.prototype.fitDataset = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(n2) {
            if (!this.built)
              throw new RuntimeError("The model needs to be compiled before being used.");
            return [2, this.model.fitDataset(e3, t3)];
          });
        });
      }, t2.prototype.trainOnBatch = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(n2) {
            return [2, this.model.trainOnBatch(e3, t3)];
          });
        });
      }, t2.fromConfig = function(e3, n2, r2, i2) {
        var a2;
        void 0 === r2 && (r2 = {}), void 0 === i2 && (i2 = false);
        var o2 = {};
        if (n2 instanceof Array) {
          if (null == n2[0].className || "Merge" === n2[0].className)
            throw new ValueError("Legacy serialization format not supported yet.");
          a2 = n2;
        } else
          tt.assert(null != n2.layers, function() {
            return "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.";
          }), a2 = n2.layers, delete n2.layers, o2 = n2;
        var s2 = new e3(o2);
        if (!(s2 instanceof t2))
          throw new NotImplementedError("Sequential.fromConfig called on non-Sequential input: " + s2);
        for (var l3 = 0, u2 = a2; l3 < u2.length; l3++) {
          var c2 = deserialize(u2[l3], void 0, i2);
          i2 && c2.setFastWeightInitDuringBuild(true), s2.add(c2);
        }
        return s2;
      }, Object.defineProperty(t2.prototype, "stopTraining", { get: function() {
        if (null == this.model)
          throw new ValueError("Cannot get the stopTraining property of a sequential model before it is compiled.");
        return this.model.stopTraining;
      }, set: function(e3) {
        if (null == this.model)
          throw new ValueError("Cannot set the stopTraining property of a sequential model before it is compiled.");
        this.model.stopTraining = e3;
      }, enumerable: true, configurable: true }), t2.prototype.getConfig = function() {
        for (var e3 = [], t3 = 0, n2 = this.layers; t3 < n2.length; t3++) {
          var r2 = n2[t3], i2 = {};
          i2.className = r2.getClassName(), i2.config = r2.getConfig(), e3.push(i2);
        }
        return { name: this.name, layers: e3 };
      }, t2.className = "Sequential", t2;
    }(LayersModel);
    Mf.registerClass(Sequential);
    Activation = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.getConfig = function() {
        return {};
      }, t2;
    }(Mf.Serializable);
    Elu = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        return void 0 === t3 && (t3 = 1), elu$1(e3, t3);
      }, t2.className = "elu", t2;
    }(Activation);
    Mf.registerClass(Elu);
    Selu = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return Cl(e3);
      }, t2.className = "selu", t2;
    }(Activation);
    Mf.registerClass(Selu);
    Relu = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return bl(e3);
      }, t2.className = "relu", t2;
    }(Activation);
    Mf.registerClass(Relu);
    Relu6 = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return je(function() {
          return Ys(6, bl(e3));
        });
      }, t2.className = "relu6", t2;
    }(Activation);
    Mf.registerClass(Relu6);
    Linear = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return e3;
      }, t2.className = "linear", t2;
    }(Activation);
    Mf.registerClass(Linear);
    Sigmoid = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return cs(e3);
      }, t2.className = "sigmoid", t2;
    }(Activation);
    Mf.registerClass(Sigmoid);
    HardSigmoid = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return hardSigmoid(e3);
      }, t2.className = "hardSigmoid", t2;
    }(Activation);
    Mf.registerClass(HardSigmoid);
    Softplus = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return ms(e3);
      }, t2.className = "softplus", t2;
    }(Activation);
    Mf.registerClass(Softplus);
    Softsign = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return softsign(e3);
      }, t2.className = "softsign", t2;
    }(Activation);
    Mf.registerClass(Softsign);
    Tanh = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        return bs(e3);
      }, t2.className = "tanh", t2;
    }(Activation);
    Mf.registerClass(Tanh);
    Softmax = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        return void 0 === t3 && (t3 = -1), io(e3, t3);
      }, t2.className = "softmax", t2;
    }(Activation);
    Mf.registerClass(Softmax);
    LogSoftmax = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3, t3) {
        return void 0 === t3 && (t3 = -1), uo(e3, t3);
      }, t2.className = "logSoftmax", t2;
    }(Activation);
    Mf.registerClass(LogSoftmax);
    Regularizer = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2;
    }(Mf.Serializable);
    L1L2 = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        return assertObjectArgs(t3), n2.l1 = null == t3 || null == t3.l1 ? 0.01 : t3.l1, n2.l2 = null == t3 || null == t3.l2 ? 0.01 : t3.l2, n2.hasL1 = 0 !== n2.l1, n2.hasL2 = 0 !== n2.l2, n2;
      }
      return __extends(t2, e2), t2.prototype.apply = function(e3) {
        var t3 = this;
        return je(function() {
          var n2 = Pn([1]);
          return t3.hasL1 && (n2 = Vs(n2, vl(tc(t3.l1, Vu(e3))))), t3.hasL2 && (n2 = Vs(n2, vl(tc(t3.l2, square(e3))))), n2.asScalar();
        });
      }, t2.prototype.getConfig = function() {
        return { l1: this.l1, l2: this.l2 };
      }, t2.fromConfig = function(e3, t3) {
        return new e3({ l1: t3.l1, l2: t3.l2 });
      }, t2.className = "L1L2", t2;
    }(Regularizer);
    Mf.registerClass(L1L2);
    REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = { l1l2: "L1L2" };
    ReLU = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, null == t3 ? {} : t3) || this;
        return n2.supportsMasking = true, null != t3 && (n2.maxValue = t3.maxValue), n2;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        e3 = getExactlyOneTensor(e3);
        var n2 = bl(e3);
        return null != this.maxValue && (n2 = $u(n2, 0, this.maxValue)), n2;
      }, t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = { maxValue: this.maxValue }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "ReLU", t2;
    }(Layer);
    Mf.registerClass(ReLU);
    LeakyReLU = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, null == t3 ? {} : t3) || this;
        return n2.DEFAULT_ALPHA = 0.3, null == t3 && (t3 = {}), n2.alpha = null == t3.alpha ? n2.DEFAULT_ALPHA : t3.alpha, n2;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        var n2 = getExactlyOneTensor(e3);
        return yl(n2, this.alpha);
      }, t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = { alpha: this.alpha }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "LeakyReLU", t2;
    }(Layer);
    Mf.registerClass(LeakyReLU);
    PReLU = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, null == t3 ? {} : t3) || this;
        if (n2.DEFAULT_ALPHA_INITIALIZER = "zeros", null == t3 && (t3 = {}), n2.supportsMasking = true, n2.alphaInitializer = getInitializer(t3.alphaInitializer || n2.DEFAULT_ALPHA_INITIALIZER), n2.alphaRegularizer = getRegularizer(t3.alphaRegularizer), n2.alphaConstraint = getConstraint(t3.alphaConstraint), null == t3.sharedAxes)
          n2.sharedAxes = null;
        else if (Array.isArray(t3.sharedAxes))
          n2.sharedAxes = t3.sharedAxes;
        else {
          if ("number" != typeof t3.sharedAxes)
            throw new ValueError("Expected sharedAxes to be a number or an array of numbers, but got " + t3.sharedAxes);
          n2.sharedAxes = [t3.sharedAxes];
        }
        return n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3 = (e3 = getExactlyOneShape(e3)).slice(1);
        if (null != this.sharedAxes)
          for (var n2 = 0, r2 = this.sharedAxes; n2 < r2.length; n2++) {
            t3[(a2 = r2[n2]) - 1] = 1;
          }
        this.alpha = this.addWeight("alpha", t3, "float32", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
        var i2 = {};
        if (null != this.sharedAxes)
          for (var a2 = 1; a2 < e3.length; ++a2)
            i2[a2] = e3[a2];
        this.inputSpec = [new InputSpec({ ndim: e3.length, axes: i2 })], this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        return e3 = getExactlyOneTensor(e3), xl(e3, this.alpha.read());
      }, t2.prototype.getConfig = function() {
        var t3 = { alphaInitializer: serializeInitializer(this.alphaInitializer), alphaRegularizer: serializeRegularizer(this.alphaRegularizer), alphaConstraint: serializeConstraint(this.alphaConstraint), sharedAxes: this.sharedAxes }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "PReLU", t2;
    }(Layer);
    Mf.registerClass(PReLU);
    ELU = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, null == t3 ? {} : t3) || this;
        if (n2.DEFAULT_ALPHA = 1, null == t3 && (t3 = {}), null != t3.alpha && t3.alpha !== n2.DEFAULT_ALPHA)
          throw new NotImplementedError("Non-default alpha value (" + t3.alpha + ") is not supported by the ELU layer yet.");
        return n2.alpha = null == t3.alpha ? n2.DEFAULT_ALPHA : t3.alpha, n2;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        var n2 = getExactlyOneTensor(e3);
        return gl(n2);
      }, t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = { alpha: this.alpha }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "ELU", t2;
    }(Layer);
    Mf.registerClass(ELU);
    ThresholdedReLU = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, null == t3 ? {} : t3) || this;
        return n2.DEFAULT_THETA = 1, null == t3 && (t3 = {}), n2.theta = null == t3.theta ? n2.DEFAULT_THETA : t3.theta, n2;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        var n2 = getExactlyOneTensor(e3);
        return n2.mul(cast$1(n2.greater(this.theta), "float32"));
      }, t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = { theta: this.theta }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "ThresholdedReLU", t2;
    }(Layer);
    Mf.registerClass(ThresholdedReLU);
    Softmax$1 = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, null == t3 ? {} : t3) || this;
        return n2.DEFAULT_AXIS = 1, null == t3 && (t3 = {}), n2.softmax = new Softmax().apply, n2.axis = null == t3.axis ? n2.DEFAULT_AXIS : t3.axis, n2;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        var n2 = getExactlyOneTensor(e3);
        return this.softmax(n2, this.axis);
      }, t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = { axis: this.axis }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Softmax", t2;
    }(Layer);
    Mf.registerClass(Softmax$1);
    BaseConv = function(e2) {
      function t2(n2, r2) {
        var i2 = e2.call(this, r2) || this;
        if (i2.bias = null, i2.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", i2.DEFAULT_BIAS_INITIALIZER = "zeros", t2.verifyArgs(r2), i2.rank = n2, assertPositiveInteger(i2.rank, "rank"), 1 !== i2.rank && 2 !== i2.rank && 3 !== i2.rank)
          throw new NotImplementedError("Convolution layer for rank other than 1, 2, or 3 (" + i2.rank + ") is not implemented yet.");
        if (i2.kernelSize = normalizeArray(r2.kernelSize, n2, "kernelSize"), i2.strides = normalizeArray(null == r2.strides ? 1 : r2.strides, n2, "strides"), i2.padding = null == r2.padding ? "valid" : r2.padding, checkPaddingMode(i2.padding), i2.dataFormat = null == r2.dataFormat ? "channelsLast" : r2.dataFormat, checkDataFormat(i2.dataFormat), i2.activation = getActivation(r2.activation), i2.useBias = null == r2.useBias || r2.useBias, i2.biasInitializer = getInitializer(r2.biasInitializer || i2.DEFAULT_BIAS_INITIALIZER), i2.biasConstraint = getConstraint(r2.biasConstraint), i2.biasRegularizer = getRegularizer(r2.biasRegularizer), i2.activityRegularizer = getRegularizer(r2.activityRegularizer), i2.dilationRate = normalizeArray(null == r2.dilationRate ? 1 : r2.dilationRate, n2, "dilationRate"), 1 === i2.rank && Array.isArray(i2.dilationRate) && 1 !== i2.dilationRate.length)
          throw new ValueError("dilationRate must be a number or an array of a single number for 1D convolution, but received " + JSON.stringify(i2.dilationRate));
        if (2 === i2.rank) {
          if ("number" == typeof i2.dilationRate)
            i2.dilationRate = [i2.dilationRate, i2.dilationRate];
          else if (2 !== i2.dilationRate.length)
            throw new ValueError("dilationRate must be a number or array of two numbers for 2D convolution, but received " + JSON.stringify(i2.dilationRate));
        } else if (3 === i2.rank) {
          if ("number" == typeof i2.dilationRate)
            i2.dilationRate = [i2.dilationRate, i2.dilationRate, i2.dilationRate];
          else if (3 !== i2.dilationRate.length)
            throw new ValueError("dilationRate must be a number or array of three numbers for 3D convolution, but received " + JSON.stringify(i2.dilationRate));
        }
        return i2;
      }
      return __extends(t2, e2), t2.verifyArgs = function(e3) {
        if (assert("kernelSize" in e3, "required key 'kernelSize' not in config"), "number" != typeof e3.kernelSize && !checkArrayTypeAndLength(e3.kernelSize, "number", 1, 3))
          throw new ValueError("BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received " + JSON.stringify(e3.kernelSize) + ".");
      }, t2.prototype.getConfig = function() {
        var t3 = { kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: serializeActivation(this.activation), useBias: this.useBias, biasInitializer: serializeInitializer(this.biasInitializer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), biasConstraint: serializeConstraint(this.biasConstraint) }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2;
    }(Layer);
    Conv = function(e2) {
      function t2(n2, r2) {
        var i2 = e2.call(this, n2, r2) || this;
        return i2.kernel = null, t2.verifyArgs(r2), i2.filters = r2.filters, assertPositiveInteger(i2.filters, "filters"), i2.kernelInitializer = getInitializer(r2.kernelInitializer || i2.DEFAULT_KERNEL_INITIALIZER), i2.kernelConstraint = getConstraint(r2.kernelConstraint), i2.kernelRegularizer = getRegularizer(r2.kernelRegularizer), i2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3;
        e3 = getExactlyOneShape(e3);
        var n2 = "channelsFirst" === this.dataFormat ? 1 : e3.length - 1;
        if (null == e3[n2])
          throw new ValueError("The channel dimension of the input should be defined. Found " + e3[n2]);
        var r2 = e3[n2], i2 = this.kernelSize.concat([r2, this.filters]);
        this.kernel = this.addWeight("kernel", i2, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: (t3 = {}, t3[n2] = r2, t3) }], this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var t4;
          e3 = getExactlyOneTensor(e3);
          var r2 = null == n2.bias ? null : n2.bias.read(), i2 = mapActivationToFusedKernel(n2.activation.getClassName());
          if (null != i2 && 2 === n2.rank)
            t4 = conv2dWithBiasActivation(e3, n2.kernel.read(), r2, n2.strides, n2.padding, n2.dataFormat, n2.dilationRate, i2);
          else {
            if (1 === n2.rank)
              t4 = conv1dWithBias(e3, n2.kernel.read(), r2, n2.strides[0], n2.padding, n2.dataFormat, n2.dilationRate[0]);
            else if (2 === n2.rank)
              t4 = conv2dWithBiasActivation(e3, n2.kernel.read(), r2, n2.strides, n2.padding, n2.dataFormat, n2.dilationRate);
            else {
              if (3 !== n2.rank)
                throw new NotImplementedError("convolutions greater than 3D are not implemented yet.");
              t4 = conv3dWithBias(e3, n2.kernel.read(), r2, n2.strides, n2.padding, n2.dataFormat, n2.dilationRate);
            }
            null != n2.activation && (t4 = n2.activation.apply(t4));
          }
          return t4;
        });
      }, t2.prototype.computeOutputShape = function(e3) {
        e3 = getExactlyOneShape(e3);
        for (var t3 = [], n2 = "channelsLast" === this.dataFormat ? e3.slice(1, e3.length - 1) : e3.slice(2), r2 = 0; r2 < n2.length; ++r2) {
          var i2 = convOutputLength(n2[r2], this.kernelSize[r2], this.padding, this.strides[r2], "number" == typeof this.dilationRate ? this.dilationRate : this.dilationRate[r2]);
          t3.push(i2);
        }
        var a2 = [e3[0]];
        return "channelsLast" === this.dataFormat ? (a2 = a2.concat(t3)).push(this.filters) : (a2.push(this.filters), a2 = a2.concat(t3)), a2;
      }, t2.prototype.getConfig = function() {
        var t3 = { filters: this.filters, kernelInitializer: serializeInitializer(this.kernelInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint) }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.verifyArgs = function(e3) {
        if (!("filters" in e3) || "number" != typeof e3.filters || e3.filters < 1)
          throw new ValueError("Convolution layer expected config.filters to be a 'number' > 0 but got " + JSON.stringify(e3.filters));
      }, t2;
    }(BaseConv);
    Conv2D = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, 2, n2) || this;
        return t2.verifyArgs(n2), r2;
      }
      return __extends(t2, e2), t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this);
        return delete t3.rank, t3;
      }, t2.verifyArgs = function(e3) {
        if ("number" != typeof e3.kernelSize && !checkArrayTypeAndLength(e3.kernelSize, "number", 1, 2))
          throw new ValueError("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received " + JSON.stringify(e3.kernelSize) + ".");
      }, t2.className = "Conv2D", t2;
    }(Conv);
    Mf.registerClass(Conv2D);
    Conv3D = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, 3, n2) || this;
        return t2.verifyArgs(n2), r2;
      }
      return __extends(t2, e2), t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this);
        return delete t3.rank, t3;
      }, t2.verifyArgs = function(e3) {
        if ("number" != typeof e3.kernelSize && (!Array.isArray(e3.kernelSize) || 1 !== e3.kernelSize.length && 3 !== e3.kernelSize.length))
          throw new ValueError("Conv3D expects config.kernelSize to be number or [number, number, number], but received " + JSON.stringify(e3.kernelSize) + ".");
      }, t2.className = "Conv3D", t2;
    }(Conv);
    Mf.registerClass(Conv3D);
    Conv2DTranspose = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        if (n2.inputSpec = [new InputSpec({ ndim: 4 })], "same" !== n2.padding && "valid" !== n2.padding)
          throw new ValueError("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode " + n2.padding);
        return n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3;
        if (4 !== (e3 = getExactlyOneShape(e3)).length)
          throw new ValueError("Input should have rank 4; Received input shape: " + JSON.stringify(e3));
        var n2 = "channelsFirst" === this.dataFormat ? 1 : e3.length - 1;
        if (null == e3[n2])
          throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");
        var r2 = e3[n2], i2 = this.kernelSize.concat([this.filters, r2]);
        this.kernel = this.addWeight("kernel", i2, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new InputSpec({ ndim: 4, axes: (t3 = {}, t3[n2] = r2, t3) })], this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var t4 = getExactlyOneTensor(e3);
          if (4 !== t4.shape.length)
            throw new ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-" + t4.shape.length);
          var r2, i2, a2 = t4.shape, o2 = a2[0];
          "channelsFirst" === n2.dataFormat ? (r2 = 2, i2 = 3) : (r2 = 1, i2 = 2);
          var s2 = a2[r2], l3 = a2[i2], u2 = n2.kernelSize[0], c2 = n2.kernelSize[1], p2 = n2.strides[0], h2 = n2.strides[1], d2 = [o2, deconvLength(s2, p2, u2, n2.padding), deconvLength(l3, h2, c2, n2.padding), n2.filters];
          "channelsLast" !== n2.dataFormat && (t4 = El(t4, [0, 2, 3, 1]));
          var f2 = Pc(t4, n2.kernel.read(), d2, n2.strides, n2.padding);
          return "channelsLast" !== n2.dataFormat && (f2 = El(f2, [0, 3, 1, 2])), null != n2.bias && (f2 = biasAdd(f2, n2.bias.read(), n2.dataFormat)), null != n2.activation && (f2 = n2.activation.apply(f2)), f2;
        });
      }, t2.prototype.computeOutputShape = function(e3) {
        var t3, n2, r2, i2 = (e3 = getExactlyOneShape(e3)).slice();
        "channelsFirst" === this.dataFormat ? (t3 = 1, n2 = 2, r2 = 3) : (t3 = 3, n2 = 1, r2 = 2);
        var a2 = this.kernelSize[0], o2 = this.kernelSize[1], s2 = this.strides[0], l3 = this.strides[1];
        return i2[t3] = this.filters, i2[n2] = deconvLength(i2[n2], s2, a2, this.padding), i2[r2] = deconvLength(i2[r2], l3, o2, this.padding), i2;
      }, t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this);
        return delete t3.dilationRate, t3;
      }, t2.className = "Conv2DTranspose", t2;
    }(Conv2D);
    Mf.registerClass(Conv2DTranspose);
    SeparableConv = function(e2) {
      function t2(t3, n2) {
        var r2 = e2.call(this, t3, n2) || this;
        if (r2.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", r2.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", r2.depthwiseKernel = null, r2.pointwiseKernel = null, null == n2.filters)
          throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");
        if (null != n2.kernelInitializer || null != n2.kernelRegularizer || null != n2.kernelConstraint)
          throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
        if (null != n2.padding && "same" !== n2.padding && "valid" !== n2.padding)
          throw new ValueError("SeparableConv" + r2.rank + "D supports only padding modes: 'same' and 'valid', but received " + JSON.stringify(n2.padding));
        return r2.depthMultiplier = null == n2.depthMultiplier ? 1 : n2.depthMultiplier, r2.depthwiseInitializer = getInitializer(n2.depthwiseInitializer || r2.DEFAULT_DEPTHWISE_INITIALIZER), r2.depthwiseRegularizer = getRegularizer(n2.depthwiseRegularizer), r2.depthwiseConstraint = getConstraint(n2.depthwiseConstraint), r2.pointwiseInitializer = getInitializer(n2.depthwiseInitializer || r2.DEFAULT_POINTWISE_INITIALIZER), r2.pointwiseRegularizer = getRegularizer(n2.pointwiseRegularizer), r2.pointwiseConstraint = getConstraint(n2.pointwiseConstraint), r2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3;
        if ((e3 = getExactlyOneShape(e3)).length < this.rank + 2)
          throw new ValueError("Inputs to SeparableConv" + this.rank + "D should have rank " + (this.rank + 2) + ", but received input shape: " + JSON.stringify(e3));
        var n2 = "channelsFirst" === this.dataFormat ? 1 : e3.length - 1;
        if (null == e3[n2] || e3[n2] < 0)
          throw new ValueError("The channel dimension of the inputs should be defined, but found " + JSON.stringify(e3[n2]));
        for (var r2 = e3[n2], i2 = this.kernelSize.concat([r2, this.depthMultiplier]), a2 = [], o2 = 0; o2 < this.rank; ++o2)
          a2.push(1);
        a2.push(r2 * this.depthMultiplier, this.filters);
        this.depthwiseKernel = this.addWeight("depthwise_kernel", i2, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", a2, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, true, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.inputSpec = [new InputSpec({ ndim: this.rank + 2, axes: (t3 = {}, t3[n2] = r2, t3) })], this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var t4;
          if (e3 = getExactlyOneTensor(e3), 1 === n2.rank)
            throw new NotImplementedError("1D separable convolution is not implemented yet.");
          return 2 === n2.rank && ("channelsFirst" === n2.dataFormat && (e3 = El(e3, [0, 2, 3, 1])), t4 = Bc(e3, n2.depthwiseKernel.read(), n2.pointwiseKernel.read(), n2.strides, n2.padding, n2.dilationRate, "NHWC")), n2.useBias && (t4 = biasAdd(t4, n2.bias.read(), n2.dataFormat)), null != n2.activation && (t4 = n2.activation.apply(t4)), "channelsFirst" === n2.dataFormat && (t4 = El(t4, [0, 3, 1, 2])), t4;
        });
      }, t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this);
        return delete t3.rank, delete t3.kernelInitializer, delete t3.kernelRegularizer, delete t3.kernelConstraint, t3.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), t3.pointwiseInitializer = serializeInitializer(this.pointwiseInitializer), t3.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), t3.pointwiseRegularizer = serializeRegularizer(this.pointwiseRegularizer), t3.depthwiseConstraint = serializeConstraint(this.depthwiseConstraint), t3.pointwiseConstraint = serializeConstraint(this.pointwiseConstraint), t3;
      }, t2.className = "SeparableConv", t2;
    }(Conv);
    SeparableConv2D = function(e2) {
      function t2(t3) {
        return e2.call(this, 2, t3) || this;
      }
      return __extends(t2, e2), t2.className = "SeparableConv2D", t2;
    }(SeparableConv);
    Mf.registerClass(SeparableConv2D);
    Conv1D = function(e2) {
      function t2(n2) {
        var r2 = e2.call(this, 1, n2) || this;
        return t2.verifyArgs(n2), r2.inputSpec = [{ ndim: 3 }], r2;
      }
      return __extends(t2, e2), t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this);
        return delete t3.rank, delete t3.dataFormat, t3;
      }, t2.verifyArgs = function(e3) {
        if ("number" != typeof e3.kernelSize && !checkArrayTypeAndLength(e3.kernelSize, "number", 1, 1))
          throw new ValueError("Conv1D expects config.kernelSize to be number or number[] with length 1, but received " + JSON.stringify(e3.kernelSize) + ".");
      }, t2.className = "Conv1D", t2;
    }(Conv);
    Mf.registerClass(Conv1D);
    Cropping2D = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return "number" == typeof t3.cropping ? n2.cropping = [[t3.cropping, t3.cropping], [t3.cropping, t3.cropping]] : "number" == typeof t3.cropping[0] ? n2.cropping = [[t3.cropping[0], t3.cropping[0]], [t3.cropping[1], t3.cropping[1]]] : n2.cropping = t3.cropping, n2.dataFormat = void 0 === t3.dataFormat ? "channelsLast" : t3.dataFormat, n2.inputSpec = [{ ndim: 4 }], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        return "channelsFirst" === this.dataFormat ? [e3[0], e3[1], e3[2] - this.cropping[0][0] - this.cropping[0][1], e3[3] - this.cropping[1][0] - this.cropping[1][1]] : [e3[0], e3[1] - this.cropping[0][0] - this.cropping[0][1], e3[2] - this.cropping[1][0] - this.cropping[1][1], e3[3]];
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return e3 = getExactlyOneTensor(e3), "channelsLast" === n2.dataFormat ? sliceAlongAxis(sliceAlongAxis(e3, n2.cropping[0][0], e3.shape[1] - n2.cropping[0][0] - n2.cropping[0][1], 2), n2.cropping[1][0], e3.shape[2] - n2.cropping[1][1] - n2.cropping[1][0], 3) : sliceAlongAxis(sliceAlongAxis(e3, n2.cropping[0][0], e3.shape[2] - n2.cropping[0][0] - n2.cropping[0][1], 3), n2.cropping[1][0], e3.shape[3] - n2.cropping[1][1] - n2.cropping[1][0], 4);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { cropping: this.cropping, dataFormat: this.dataFormat }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Cropping2D", t2;
    }(Layer);
    Mf.registerClass(Cropping2D);
    UpSampling2D = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.DEFAULT_SIZE = [2, 2], n2.inputSpec = [{ ndim: 4 }], n2.size = null == t3.size ? n2.DEFAULT_SIZE : t3.size, n2.dataFormat = null == t3.dataFormat ? "channelsLast" : t3.dataFormat, n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        if ("channelsFirst" === this.dataFormat) {
          var t3 = null == e3[2] ? null : this.size[0] * e3[2], n2 = null == e3[3] ? null : this.size[1] * e3[3];
          return [e3[0], e3[1], t3, n2];
        }
        t3 = null == e3[1] ? null : this.size[0] * e3[1], n2 = null == e3[2] ? null : this.size[1] * e3[2];
        return [e3[0], t3, n2, e3[3]];
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var t4 = getExactlyOneTensor(e3), r2 = t4.shape;
          if ("channelsFirst" === n2.dataFormat) {
            t4 = El(t4, [0, 2, 3, 1]);
            var i2 = n2.size[0] * r2[2], a2 = n2.size[1] * r2[3], o2 = t4.resizeNearestNeighbor([i2, a2]);
            return El(o2, [0, 3, 1, 2]);
          }
          i2 = n2.size[0] * r2[1], a2 = n2.size[1] * r2[2];
          return t4.resizeNearestNeighbor([i2, a2]);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { size: this.size, dataFormat: this.dataFormat }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "UpSampling2D", t2;
    }(Layer);
    Mf.registerClass(UpSampling2D);
    DepthwiseConv2D = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, 2, t3) || this;
        return n2.depthwiseKernel = null, n2.depthMultiplier = null == t3.depthMultiplier ? 1 : t3.depthMultiplier, n2.depthwiseInitializer = getInitializer(t3.depthwiseInitializer || n2.DEFAULT_KERNEL_INITIALIZER), n2.depthwiseConstraint = getConstraint(t3.depthwiseConstraint), n2.depthwiseRegularizer = getRegularizer(t3.depthwiseRegularizer), n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        if ((e3 = getExactlyOneShape(e3)).length < 4)
          throw new ValueError("Inputs to DepthwiseConv2D should have rank 4. Received input shape: " + JSON.stringify(e3) + ".");
        var t3 = "channelsFirst" === this.dataFormat ? 1 : 3;
        if (null == e3[t3] || e3[t3] < 0)
          throw new ValueError("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (" + e3[t3] + ").");
        var n2 = e3[t3], r2 = [this.kernelSize[0], this.kernelSize[1], n2, this.depthMultiplier];
        this.depthwiseKernel = this.addWeight("depthwise_kernel", r2, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n2 * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var t4 = depthwiseConv2d$1(e3 = getExactlyOneTensor(e3), n2.depthwiseKernel.read(), n2.strides, n2.padding, n2.dataFormat, null);
          return n2.useBias && (t4 = biasAdd(t4, n2.bias.read(), n2.dataFormat)), null != n2.activation && (t4 = n2.activation.apply(t4)), t4;
        });
      }, t2.prototype.computeOutputShape = function(e3) {
        e3 = getExactlyOneShape(e3);
        var t3 = "channelsFirst" === this.dataFormat ? e3[2] : e3[1], n2 = "channelsFirst" === this.dataFormat ? e3[3] : e3[2], r2 = "channelsFirst" === this.dataFormat ? e3[1] * this.depthMultiplier : e3[3] * this.depthMultiplier, i2 = convOutputLength(t3, this.kernelSize[0], this.padding, this.strides[0]), a2 = convOutputLength(n2, this.kernelSize[1], this.padding, this.strides[1]);
        return "channelsFirst" === this.dataFormat ? [e3[0], r2, i2, a2] : [e3[0], i2, a2, r2];
      }, t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this);
        return t3.depthMultiplier = this.depthMultiplier, t3.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), t3.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), t3.depthwiseConstraint = serializeConstraint(this.depthwiseRegularizer), t3;
      }, t2.className = "DepthwiseConv2D", t2;
    }(BaseConv);
    Mf.registerClass(DepthwiseConv2D);
    Dropout = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.rate = Math.max(Math.min(t3.rate, 1), 0), n2.noiseShape = t3.noiseShape, n2.seed = t3.seed, n2.supportsMasking = true, n2;
      }
      return __extends(t2, e2), t2.prototype.getNoiseShape = function(e3) {
        if (null == this.noiseShape)
          return this.noiseShape;
        for (var t3 = e3.shape, n2 = [], r2 = 0; r2 < this.noiseShape.length; ++r2)
          n2.push(null == this.noiseShape[r2] ? t3[r2] : this.noiseShape[r2]);
        return n2;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2 = getExactlyOneTensor(e3);
          if (0 < n2.rate && n2.rate < 1) {
            var i2 = null != t3.training && t3.training, a2 = n2.getNoiseShape(r2);
            return inTrainPhase(function() {
              return dropout$1(r2, n2.rate, a2, n2.seed);
            }, function() {
              return r2;
            }, i2);
          }
          return e3;
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.prototype.dispose = function() {
        return e2.prototype.dispose.call(this);
      }, t2.className = "Dropout", t2;
    }(Layer);
    Mf.registerClass(Dropout);
    Dense = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        if (n2.activation = null, n2.useBias = true, n2.kernel = null, n2.bias = null, n2.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n2.DEFAULT_BIAS_INITIALIZER = "zeros", null == t3.batchInputShape && null == t3.inputShape && null != t3.inputDim) {
          var r2 = null;
          null != t3.batchSize && (r2 = t3.batchSize), n2.batchInputShape = [r2, t3.inputDim];
        }
        return n2.units = t3.units, assertPositiveInteger(n2.units, "units"), n2.activation = getActivation(t3.activation), null != t3.useBias && (n2.useBias = t3.useBias), n2.kernelInitializer = getInitializer(t3.kernelInitializer || n2.DEFAULT_KERNEL_INITIALIZER), n2.biasInitializer = getInitializer(t3.biasInitializer || n2.DEFAULT_BIAS_INITIALIZER), n2.kernelConstraint = getConstraint(t3.kernelConstraint), n2.biasConstraint = getConstraint(t3.biasConstraint), n2.kernelRegularizer = getRegularizer(t3.kernelRegularizer), n2.biasRegularizer = getRegularizer(t3.biasRegularizer), n2.activityRegularizer = getRegularizer(t3.activityRegularizer), n2.supportsMasking = true, n2.inputSpec = [{ minNDim: 2 }], n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3, n2 = (e3 = getExactlyOneShape(e3))[e3.length - 1];
        null == this.kernel && (this.kernel = this.addWeight("kernel", [n2, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: (t3 = {}, t3[-1] = n2, t3) }], this.built = true;
      }, t2.prototype.computeOutputShape = function(e3) {
        var t3 = (e3 = getExactlyOneShape(e3)).slice();
        return t3[t3.length - 1] = this.units, t3;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2, i2 = getExactlyOneTensor(e3), a2 = mapActivationToFusedKernel(n2.activation.getClassName());
          return null != a2 ? r2 = dot(i2, n2.kernel.read(), a2, n2.bias ? n2.bias.read() : null) : (r2 = dot(i2, n2.kernel.read()), null != n2.bias && (r2 = biasAdd(r2, n2.bias.read())), null != n2.activation && (r2 = n2.activation.apply(r2))), r2;
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { units: this.units, activation: serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), biasConstraint: serializeConstraint(this.biasConstraint) }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Dense", t2;
    }(Layer);
    Mf.registerClass(Dense);
    Flatten = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3 || {}) || this;
        return n2.inputSpec = [{ minNDim: 3 }], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        for (var t3 = 0, n2 = (e3 = getExactlyOneShape(e3)).slice(1); t3 < n2.length; t3++) {
          if (null == n2[t3])
            throw new ValueError('The shape of the input to "Flatten" is not fully defined (got ' + e3.slice(1) + '). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.');
        }
        return [e3[0], arrayProd(e3, 1)];
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return n2.invokeCallHook(e3, t3), batchFlatten(getExactlyOneTensor(e3));
        });
      }, t2.className = "Flatten", t2;
    }(Layer);
    Mf.registerClass(Flatten);
    Activation$1 = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.supportsMasking = true, n2.activation = getActivation(t3.activation), n2;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2 = getExactlyOneTensor(e3);
          return n2.activation.apply(r2);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { activation: serializeActivation(this.activation) }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Activation", t2;
    }(Layer);
    Mf.registerClass(Activation$1);
    RepeatVector = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.n = t3.n, n2.inputSpec = [{ ndim: 2 }], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        return [e3[0], this.n, e3[1]];
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return repeat(e3 = getExactlyOneTensor(e3), n2.n);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { n: this.n }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "RepeatVector", t2;
    }(Layer);
    Mf.registerClass(RepeatVector);
    Reshape = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        n2.targetShape = t3.targetShape;
        for (var r2 = 0; r2 < n2.targetShape.length; ++r2)
          n2.isUnknown(n2.targetShape[r2]) && (n2.targetShape[r2] = null);
        return n2;
      }
      return __extends(t2, e2), t2.prototype.isUnknown = function(e3) {
        return e3 < 0 || null == e3;
      }, t2.prototype.fixUnknownDimension = function(e3, t3) {
        for (var n2 = "Total size of new array must be unchanged.", r2 = t3.slice(), i2 = 1, a2 = null, o2 = 0; o2 < r2.length; ++o2) {
          var s2 = r2[o2];
          if (this.isUnknown(s2)) {
            if (null !== a2)
              throw new ValueError("Can only specifiy one unknown dimension.");
            a2 = o2;
          } else
            i2 *= s2;
        }
        var l3 = arrayProd(e3);
        if (null !== a2) {
          if (0 === i2 || l3 % i2 != 0)
            throw new ValueError(n2);
          r2[a2] = l3 / i2;
        } else if (l3 !== i2)
          throw new ValueError(n2);
        return r2;
      }, t2.prototype.computeOutputShape = function(e3) {
        for (var t3 = false, n2 = 0; n2 < e3.length; ++n2)
          if (this.isUnknown(e3[n2])) {
            t3 = true;
            break;
          }
        return t3 ? e3.slice(0, 1).concat(this.targetShape) : e3.slice(0, 1).concat(this.fixUnknownDimension(e3.slice(1), this.targetShape));
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2 = getExactlyOneTensor(e3), i2 = r2.shape, a2 = i2.slice(0, 1).concat(n2.fixUnknownDimension(i2.slice(1), n2.targetShape));
          return r2.reshape(a2);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { targetShape: this.targetShape }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Reshape", t2;
    }(Layer);
    Mf.registerClass(Reshape);
    Permute = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        if (null == t3.dims)
          throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
        if (!Array.isArray(t3.dims))
          throw new Error("Permute constructor requires `dims` to be an Array, but received " + t3.dims + " instead.");
        var r2 = range(1, t3.dims.length + 1);
        if (!tt.arraysEqual(t3.dims.slice().sort(), r2))
          throw new Error("Invalid permutation `dims`: " + JSON.stringify(t3.dims) + " `dims` must contain consecutive integers starting from 1.");
        return n2.dims = t3.dims, n2.dimsIncludingBatch = [0].concat(n2.dims), n2.inputSpec = [new InputSpec({ ndim: n2.dims.length + 1 })], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        var t3 = (e3 = getExactlyOneShape(e3)).slice();
        return this.dims.forEach(function(n2, r2) {
          t3[r2 + 1] = e3[n2];
        }), t3;
      }, t2.prototype.call = function(e3, t3) {
        return El(getExactlyOneTensor(e3), this.dimsIncludingBatch);
      }, t2.prototype.getConfig = function() {
        var t3 = { dims: this.dims }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Permute", t2;
    }(Layer);
    Mf.registerClass(Permute);
    Masking = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, null == t3 ? {} : t3) || this;
        return n2.supportsMasking = true, n2.maskValue = null != t3 ? null == t3.maskValue ? 0 : t3.maskValue : 0, n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this), n2 = { maskValue: this.maskValue };
        return Object.assign(n2, t3), n2;
      }, t2.prototype.computeMask = function(e3, t3) {
        var n2 = getExactlyOneTensor(e3);
        return ul(yc(n2, this.maskValue), -1);
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2 = getExactlyOneTensor(e3), i2 = ul(yc(r2, n2.maskValue), -1, true);
          return r2.mul(i2.asType(r2.dtype));
        });
      }, t2.className = "Masking", t2;
    }(Layer);
    Mf.registerClass(Masking);
    Embedding = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        if (n2.embeddings = null, n2.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", null == t3.batchInputShape && null == t3.inputShape) {
          var r2 = null;
          null != t3.batchSize && (r2 = t3.batchSize), null == t3.inputLength ? n2.batchInputShape = [r2, null] : n2.batchInputShape = [r2].concat(toList(t3.inputLength));
        }
        return n2.inputDim = t3.inputDim, assertPositiveInteger(n2.inputDim, "inputDim"), n2.outputDim = t3.outputDim, assertPositiveInteger(n2.outputDim, "outputDim"), n2.embeddingsInitializer = getInitializer(t3.embeddingsInitializer || n2.DEFAULT_EMBEDDINGS_INITIALIZER), n2.embeddingsRegularizer = getRegularizer(t3.embeddingsRegularizer), n2.activityRegularizer = getRegularizer(t3.activityRegularizer), n2.embeddingsConstraint = getConstraint(t3.embeddingsConstraint), n2.maskZero = t3.maskZero, n2.supportsMasking = t3.maskZero, n2.inputLength = t3.inputLength, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint), this.built = true;
      }, t2.prototype.warnOnIncompatibleInputShape = function(e3) {
      }, t2.prototype.computeMask = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return n2.maskZero ? (e3 = getExactlyOneTensor(e3), yc(e3, zn(e3))) : null;
        });
      }, t2.prototype.computeOutputShape = function(e3) {
        if (e3 = getExactlyOneShape(e3), null == this.inputLength)
          return e3.concat([this.outputDim]);
        var t3 = toList(this.inputLength);
        if (t3.length !== e3.length - 1)
          throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e3);
        for (var n2 = 0, r2 = 0; r2 < t3.length; ++r2) {
          var i2 = t3[r2], a2 = e3[r2 + 1];
          if (null != i2 && null != a2 && i2 !== a2)
            throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e3);
          null == i2 && (t3[n2] = a2), n2++;
        }
        return [e3[0]].concat(t3, [this.outputDim]);
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2 = getExactlyOneTensor(e3);
          return "int32" !== r2.dtype && (r2 = cast$1(r2, "int32")), gather$1(n2.embeddings.read(), r2.as1D()).reshape(getExactlyOneShape(n2.computeOutputShape(r2.shape)));
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: serializeInitializer(this.embeddingsInitializer), embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), embeddingsConstraint: serializeConstraint(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Embedding", t2;
    }(Layer);
    Mf.registerClass(Embedding);
    Merge = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3 || {}) || this;
        return n2.supportsMasking = true, n2;
      }
      return __extends(t2, e2), t2.prototype.mergeFunction = function(e3) {
        throw new NotImplementedError();
      }, t2.prototype.computeElementwiseOpOutputShape = function(e3, t3) {
        if (null == e3 || null == t3)
          return null;
        if (e3.length < t3.length)
          return this.computeElementwiseOpOutputShape(t3, e3);
        if (0 === t3.length)
          return e3;
        for (var n2 = e3.slice(0, e3.length - t3.length), r2 = 0; r2 < t3.length; ++r2) {
          var i2 = e3[e3.length - t3.length + r2], a2 = t3[r2];
          if (null == i2 || null == a2 || i2 < 0 || a2 < 0)
            n2.push(null);
          else if (1 === i2)
            n2.push(a2);
          else if (1 === a2)
            n2.push(i2);
          else {
            if (i2 !== a2)
              throw new ValueError("Operands could not be broadcast together with shapes " + JSON.stringify(e3) + " " + JSON.stringify(t3));
            n2.push(i2);
          }
        }
        return n2;
      }, t2.prototype.build = function(e3) {
        if (Array.isArray(e3) && !Array.isArray(e3[0]) && (e3 = [getExactlyOneShape(e3)]), (e3 = e3).length < 2)
          throw new ValueError("A merge layer should be called on an Array of at least 2 inputs. Got " + e3.length + " input(s).");
        for (var t3 = [], n2 = 0, r2 = e3; n2 < r2.length; n2++) {
          null != (o2 = r2[n2]) && null !== o2[0] && t3.push(o2[0]);
        }
        if ((t3 = unique(t3)).length > 1)
          throw new ValueError("Can not merge tensors with different batch sizes. Got tensors with shapes: " + JSON.stringify(e3) + ".");
        for (var i2 = null == e3[0] ? null : e3[0].slice(1), a2 = 1; a2 < e3.length; ++a2) {
          var o2 = null == e3[a2] ? null : e3[a2].slice(1);
          i2 = this.computeElementwiseOpOutputShape(i2, o2);
        }
        var s2 = e3.map(function(e4) {
          return e4.length;
        });
        -1 === e3.indexOf(null) && 1 === unique(s2).length ? this.reshapeRequired = false : this.reshapeRequired = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          if (e3 = e3, n2.reshapeRequired) {
            var t4 = [], r2 = e3.map(function(e4) {
              return e4.rank;
            });
            if (-1 === r2.indexOf(null)) {
              for (var i2 = max$1(r2), a2 = 0, o2 = e3; a2 < o2.length; a2++) {
                for (var s2 = (h2 = o2[a2]).rank, l3 = 0; l3 < i2 - s2; ++l3)
                  h2 = expandDims$1(h2, 1);
                t4.push(h2);
              }
              return n2.mergeFunction(t4);
            }
            for (var u2 = false, c2 = 0, p2 = e3; c2 < p2.length; c2++) {
              var h2;
              if (null == (s2 = (h2 = p2[c2]).rank)) {
                var d2 = h2.shape, f2 = d2[0], g2 = d2.slice(1).concat([f2]), m2 = h2.reshape([f2].concat(arrayProd(d2.slice(1))));
                m2 = (m2 = El(m2, [1, 0])).reshape(g2), t4.push(m2), u2 = true;
              } else if (s2 > 1) {
                var y2 = range(1, s2).concat([0]);
                t4.push(El(h2, y2)), u2 = true;
              } else
                t4.push(h2);
            }
            var v2 = n2.mergeFunction(t4), b2 = v2.rank;
            if (u2) {
              if (null == b2) {
                var w2 = v2.shape;
                g2 = [f2 = w2[w2.length - 1]].concat(w2.slice(0, w2.length - 1));
                v2 = El(v2.reshape([-1, f2]), [1, 0]).reshape(g2);
              } else if (b2 > 1) {
                y2 = [b2 - 1].concat(range(0, b2 - 1));
                v2 = El(v2, y2);
              }
            }
            return v2;
          }
          return n2.mergeFunction(e3);
        });
      }, t2.prototype.computeOutputShape = function(e3) {
        var t3;
        t3 = null == (e3 = e3)[0] ? null : e3[0].slice(1);
        for (var n2 = 1; n2 < e3.length; ++n2) {
          var r2 = null == e3[n2] ? null : e3[n2].slice(1);
          t3 = this.computeElementwiseOpOutputShape(t3, r2);
        }
        for (var i2 = [], a2 = 0, o2 = e3; a2 < o2.length; a2++) {
          null != (r2 = o2[a2]) && null !== r2[0] && i2.push(r2[0]);
        }
        return t3 = 1 === (i2 = unique(i2)).length ? i2.concat(t3) : [null].concat(t3);
      }, t2.prototype.computeMask = function(e3, t3) {
        return je(function() {
          if (null == t3)
            return null;
          if (!Array.isArray(t3))
            throw new ValueError("`mask` should be an Array");
          if (!Array.isArray(e3))
            throw new ValueError("`inputs` should be an Array");
          if (t3.length !== e3.length)
            throw new ValueError("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (" + e3.length + " vs " + t3.length + ")");
          if (t3.every(function(e4) {
            return null == e4;
          }))
            return null;
          for (var n2 = (t3 = t3.map(function(e4) {
            return null == e4 ? e4 : dr(e4, 0);
          }))[0], r2 = 1; r2 < t3.length - 1; ++r2)
            n2 = Ms(n2, t3[r2]);
          return n2;
        });
      }, t2;
    }(Layer);
    Add = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.mergeFunction = function(e3) {
        return je(function() {
          for (var t3 = e3[0].clone(), n2 = 1; n2 < e3.length; ++n2)
            t3 = Vs(t3, e3[n2]);
          return t3;
        });
      }, t2.className = "Add", t2;
    }(Merge);
    Mf.registerClass(Add);
    Multiply = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.mergeFunction = function(e3) {
        return je(function() {
          for (var t3 = e3[0].clone(), n2 = 1; n2 < e3.length; ++n2)
            t3 = tc(t3, e3[n2]);
          return t3;
        });
      }, t2.className = "Multiply", t2;
    }(Merge);
    Mf.registerClass(Multiply);
    Average = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.mergeFunction = function(e3) {
        return je(function() {
          for (var t3 = e3[0].clone(), n2 = 1; n2 < e3.length; ++n2)
            t3 = Vs(t3, e3[n2]);
          return tc(1 / e3.length, t3);
        });
      }, t2.className = "Average", t2;
    }(Merge);
    Mf.registerClass(Average);
    Maximum = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.mergeFunction = function(e3) {
        return je(function() {
          for (var t3 = e3[0], n2 = 1; n2 < e3.length; ++n2)
            t3 = Xs(t3, e3[n2]);
          return t3;
        });
      }, t2.className = "Maximum", t2;
    }(Merge);
    Mf.registerClass(Maximum);
    Minimum = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.mergeFunction = function(e3) {
        return je(function() {
          for (var t3 = e3[0], n2 = 1; n2 < e3.length; ++n2)
            t3 = Ys(t3, e3[n2]);
          return t3;
        });
      }, t2.className = "Minimum", t2;
    }(Merge);
    Mf.registerClass(Minimum);
    Concatenate = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.DEFAULT_AXIS = -1, null == t3 && (t3 = {}), n2.axis = null == t3.axis ? n2.DEFAULT_AXIS : t3.axis, n2.supportsMasking = true, n2.reshapeRequired = false, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        if (!Array.isArray(e3) || !Array.isArray(e3[0]) || 1 === e3.length)
          throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");
        for (var t3 = true, n2 = 0, r2 = e3 = e3; n2 < r2.length; n2++) {
          if (null != (c2 = r2[n2])) {
            t3 = false;
            break;
          }
        }
        if (!t3) {
          for (var i2 = [], a2 = 0; a2 < e3.length; ++a2) {
            var o2 = e3[a2].slice();
            o2.splice(this.axis, 1);
            for (var s2 = false, l3 = 0, u2 = i2; l3 < u2.length; l3++) {
              var c2 = u2[l3];
              if (tt.arraysEqual(c2, o2)) {
                s2 = true;
                break;
              }
            }
            s2 || i2.push(o2);
          }
          if (i2.length > 1)
            throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e3));
        }
      }, t2.prototype.mergeFunction = function(e3) {
        var t3 = this;
        return je(function() {
          return concatenate(e3, t3.axis);
        });
      }, t2.prototype.computeOutputShape = function(e3) {
        if (!Array.isArray(e3) || !Array.isArray(e3[0]))
          throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");
        for (var t3 = e3, n2 = t3[0].slice(), r2 = this.axis < 0 ? n2.length + this.axis : this.axis, i2 = 0, a2 = t3.slice(1); i2 < a2.length; i2++) {
          var o2 = a2[i2];
          if (null == n2[r2] || null == o2[r2]) {
            n2[r2] = null;
            break;
          }
          n2[r2] += o2[r2];
        }
        return n2;
      }, t2.prototype.computeMask = function(e3, t3) {
        var n2 = this;
        if (null == t3)
          return null;
        if (!Array.isArray(t3))
          throw new ValueError("`mask` should be an array for Concatenate");
        if (!Array.isArray(e3))
          throw new ValueError("`inputs` should be an array for Concatenate");
        if (t3.length !== e3.length)
          throw new ValueError("Mismatch in the length of mask (" + t3.length + ") and the legnth of inputs (" + e3.length + ")");
        return je(function() {
          var r2 = true;
          if (t3.forEach(function(e4) {
            null == e4 || (r2 = false);
          }), r2)
            return null;
          for (var i2 = [], a2 = 0; a2 < e3.length; ++a2)
            null == t3[a2] ? i2.push(Vn(e3[a2]).asType("bool")) : t3[a2].rank < e3[a2].rank ? i2.push(dr(t3[a2], -1)) : i2.push(t3[a2]);
          var o2 = Gn(i2, n2.axis);
          return il(o2, -1, false);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { axis: this.axis }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Concatenate", t2;
    }(Merge);
    Mf.registerClass(Concatenate);
    Dot = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.axes = t3.axes, n2.normalize = null != t3.normalize && t3.normalize, n2.supportsMasking = true, n2.reshapeRequired = false, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        tt.assert(Array.isArray(e3) && 2 === e3.length && Array.isArray(e3[0]) && Array.isArray(e3[1]), function() {
          return "A `Dot` layer should be called on a list of exactly 2 inputs.";
        });
        var t3 = e3[0], n2 = e3[1];
        if (t3.length > 3 || n2.length > 3)
          throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
        var r2 = this.interpretAxes(t3, n2);
        if (t3[r2[0]] !== n2[r2[1]])
          throw new ValueError("Dimension incompatibility: " + t3[r2[0]] + " !== " + n2[r2[1]]);
      }, t2.prototype.mergeFunction = function(e3) {
        if (2 !== e3.length)
          throw new ValueError("A `Dot` layer must be called on exactly 2 inputs, but received " + e3.length + " input(s).");
        var t3, n2 = e3[0], r2 = e3[1];
        return t3 = Array.isArray(this.axes) ? this.axes.map(function(t4, n3) {
          return interpretAxis(t4, e3[n3].shape.length);
        }) : [interpretAxis(this.axes, n2.shape.length), interpretAxis(this.axes, r2.shape.length)], this.normalize && (n2 = l2Normalize(n2, t3[0]), r2 = l2Normalize(r2, t3[1])), batchDot(n2, r2, t3);
      }, t2.prototype.interpretAxes = function(e3, t3) {
        return Array.isArray(this.axes) ? this.axes : [interpretAxis(this.axes, e3.length), interpretAxis(this.axes, t3.length)];
      }, t2.prototype.computeOutputShape = function(e3) {
        tt.assert(Array.isArray(e3) && 2 === e3.length && Array.isArray(e3[0]) && Array.isArray(e3[1]), function() {
          return "A `Dot` layer should be called on a list of exactly 2 inputs.";
        });
        var t3 = e3[0].slice(), n2 = e3[1].slice();
        if (t3.length > 3 || n2.length > 3)
          throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
        var r2 = this.interpretAxes(t3, n2);
        t3.splice(r2[0], 1), n2.splice(r2[1], 1), n2.splice(0, 1);
        var i2 = t3.concat(n2);
        return 1 === i2.length && i2.push(1), i2;
      }, t2.prototype.computeMask = function(e3, t3) {
        return null;
      }, t2.prototype.getConfig = function() {
        var t3 = { axes: this.axes, normalize: this.normalize }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "Dot", t2;
    }(Merge);
    Mf.registerClass(Dot);
    GaussianNoise = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.supportsMasking = true, n2.stddev = t3.stddev, n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this), n2 = { stddev: this.stddev };
        return Object.assign(n2, t3), n2;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2 = getExactlyOneTensor(e3);
          return inTrainPhase(function() {
            return randomNormal$1(r2.shape, 0, n2.stddev).add(r2);
          }, function() {
            return r2;
          }, t3.training || false);
        });
      }, t2.className = "GaussianNoise", t2;
    }(Layer);
    Mf.registerClass(GaussianNoise);
    GaussianDropout = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.supportsMasking = true, n2.rate = t3.rate, n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this), n2 = { rate: this.rate };
        return Object.assign(n2, t3), n2;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3);
          var r2 = getExactlyOneTensor(e3);
          if (n2.rate > 0 && n2.rate < 1) {
            return inTrainPhase(function() {
              var e4 = Math.sqrt(n2.rate / (1 - n2.rate));
              return r2.mul(randomNormal$1(r2.shape, 1, e4));
            }, function() {
              return r2;
            }, t3.training || false);
          }
          return r2;
        });
      }, t2.className = "GaussianDropout", t2;
    }(Layer);
    Mf.registerClass(GaussianDropout);
    AlphaDropout = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.supportsMasking = true, n2.rate = t3.rate, n2.noiseShape = t3.noiseShape, n2;
      }
      return __extends(t2, e2), t2.prototype._getNoiseShape = function(e3) {
        return this.noiseShape || getExactlyOneTensor(e3).shape;
      }, t2.prototype.computeOutputShape = function(e3) {
        return e3;
      }, t2.prototype.getConfig = function() {
        var t3 = e2.prototype.getConfig.call(this), n2 = { rate: this.rate };
        return Object.assign(n2, t3), n2;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          if (n2.rate < 1 && n2.rate > 0) {
            var r2 = n2._getNoiseShape(e3);
            return inTrainPhase(function() {
              var t4 = getExactlyOneTensor(e3), i2 = -1.7580993408473766, a2 = hc(kr(r2), n2.rate);
              a2 = cast$1(a2, "float32");
              var o2 = Math.pow((1 - n2.rate) * (1 + n2.rate * Math.pow(i2, 2)), -0.5), s2 = -o2 * i2 * n2.rate;
              return t4.mul(a2).add(a2.add(-1).mul(i2)).mul(o2).add(s2);
            }, function() {
              return getExactlyOneTensor(e3);
            }, t3.training || false);
          }
          return e3;
        });
      }, t2.className = "AlphaDropout", t2;
    }(Layer);
    Mf.registerClass(AlphaDropout);
    BatchNormalization = function(e2) {
      function t2(t3) {
        var n2 = this;
        return null == t3 && (t3 = {}), (n2 = e2.call(this, t3) || this).supportsMasking = true, n2.axis = null == t3.axis ? -1 : t3.axis, n2.momentum = null == t3.momentum ? 0.99 : t3.momentum, n2.epsilon = null == t3.epsilon ? 1e-3 : t3.epsilon, n2.center = null == t3.center || t3.center, n2.scale = null == t3.scale || t3.scale, n2.betaInitializer = getInitializer(t3.betaInitializer || "zeros"), n2.gammaInitializer = getInitializer(t3.gammaInitializer || "ones"), n2.movingMeanInitializer = getInitializer(t3.movingMeanInitializer || "zeros"), n2.movingVarianceInitializer = getInitializer(t3.movingVarianceInitializer || "ones"), n2.betaConstraint = getConstraint(t3.betaConstraint), n2.gammaConstraint = getConstraint(t3.gammaConstraint), n2.betaRegularizer = getRegularizer(t3.betaRegularizer), n2.gammaRegularizer = getRegularizer(t3.gammaRegularizer), n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3;
        e3 = getExactlyOneShape(e3);
        var n2 = this.axis >= 0 ? this.axis : this.axis + e3.length, r2 = e3[n2];
        if (null == r2)
          throw new ValueError("Axis " + n2 + " of input tensor should have a defined dimension but the layer received an input with shape " + JSON.stringify(e3) + ".");
        this.inputSpec = [new InputSpec({ ndim: e3.length, axes: (t3 = {}, t3[n2] = r2, t3) })];
        var i2 = [r2];
        this.scale && (this.gamma = this.addWeight("gamma", i2, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", i2, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", i2, null, this.movingMeanInitializer, null, false), this.movingVariance = this.addWeight("moving_variance", i2, null, this.movingVarianceInitializer, null, false), this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var r2 = null != t3.training && t3.training, i2 = getExactlyOneTensor(e3), a2 = i2.shape, o2 = a2.length, s2 = range(0, o2), l3 = n2.axis >= 0 ? n2.axis : n2.axis + o2;
          s2.splice(l3, 1);
          var u2 = pyListRepeat(1, o2);
          u2[l3] = a2[l3];
          var c2 = s2.slice();
          c2.sort();
          var p2 = !tt.arraysEqual(c2, range(0, o2).slice(0, o2 - 1));
          if (!r2)
            return function() {
              if (p2) {
                var e4 = n2.movingMean.read().reshape(u2), t4 = n2.movingVariance.read().reshape(u2), r3 = n2.center ? n2.beta.read().reshape(u2) : null, a3 = n2.scale ? n2.gamma.read().reshape(u2) : null;
                return batchNormalization(i2, e4, t4, r3, a3, n2.epsilon);
              }
              return batchNormalization(i2, n2.movingMean.read(), n2.movingVariance.read(), null == n2.beta ? null : n2.beta.read(), null == n2.gamma ? null : n2.gamma.read(), n2.epsilon);
            }();
          var h2 = normalizeBatchInTraining(i2, n2.gamma.read(), n2.beta.read(), s2, n2.epsilon), d2 = h2[0], f2 = h2[1], g2 = h2[2], m2 = function(e4, t4, n3) {
            je(function() {
              var r3 = 1 - n3, i3 = e4.read(), a3 = i3.sub(t4).mul(r3);
              e4.write(i3.sub(a3));
            });
          };
          return m2(n2.movingMean, f2, n2.momentum), m2(n2.movingVariance, g2, n2.momentum), d2;
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: serializeInitializer(this.betaInitializer), gammaInitializer: serializeInitializer(this.gammaInitializer), movingMeanInitializer: serializeInitializer(this.movingMeanInitializer), movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer), betaRegularizer: serializeRegularizer(this.betaRegularizer), gammaRegularizer: serializeRegularizer(this.gammaRegularizer), betaConstraint: serializeConstraint(this.betaConstraint), gammaConstraint: serializeConstraint(this.gammaConstraint) }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "BatchNormalization", t2;
    }(Layer);
    Mf.registerClass(BatchNormalization);
    LayerNormalization = function(e2) {
      function t2(t3) {
        var n2 = this;
        if (null == t3 && (t3 = {}), (n2 = e2.call(this, t3) || this).axis = null == t3.axis ? -1 : t3.axis, "number" == typeof n2.axis) {
          if (!Number.isInteger(n2.axis))
            throw new Error("Expected axis to be an integer, but received " + n2.axis);
        } else {
          if (!Array.isArray(n2.axis))
            throw new Error("Expected axis to be an integer or an array of integers, but received " + JSON.stringify(n2.axis));
          for (var r2 = 0, i2 = n2.axis; r2 < i2.length; r2++) {
            var a2 = i2[r2];
            if (!Number.isInteger(a2))
              throw new Error("Expected axis to be an array of integers, but received " + JSON.stringify(n2.axis));
          }
        }
        return n2.epsilon = null == t3.epsilon ? 1e-3 : t3.epsilon, n2.center = null == t3.center || t3.center, n2.scale = null == t3.scale || t3.scale, n2.betaInitializer = getInitializer(t3.betaInitializer || "zeros"), n2.gammaInitializer = getInitializer(t3.gammaInitializer || "ones"), n2.betaRegularizer = getRegularizer(t3.betaRegularizer), n2.gammaRegularizer = getRegularizer(t3.gammaRegularizer), n2.supportsMasking = true, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3 = (e3 = getExactlyOneShape(e3)).length;
        "number" == typeof this.axis && (this.axis = [this.axis]);
        for (var n2 = 0; n2 < this.axis.length; ++n2)
          this.axis[n2] < 0 && (this.axis[n2] += t3);
        for (var r2 = 0, i2 = this.axis; r2 < i2.length; r2++) {
          var a2 = i2[r2];
          if (a2 < 0 || a2 >= t3)
            throw new Error("Invalid axis: " + a2);
        }
        if (this.axis.length !== unique(this.axis).length)
          throw new Error("Found duplicate axes in: " + this.axis);
        var o2 = this.axis.map(function(t4) {
          return e3[t4];
        });
        this.scale ? this.gamma = this.addWeight("gamma", o2, "float32", this.gammaInitializer, this.gammaRegularizer, true) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", o2, "float32", this.betaInitializer, this.betaRegularizer, true) : this.beta = null, this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this, r2 = getExactlyOneTensor(e3), i2 = r2.shape, a2 = i2.length;
        return je(function() {
          for (var e4 = dl(r2, n2.axis, true), t4 = e4.mean, o2 = e4.variance, s2 = pyListRepeat(1, a2), l3 = 0, u2 = n2.axis; l3 < u2.length; l3++) {
            var c2 = u2[l3];
            s2[c2] = i2[c2];
          }
          for (var p2 = function(e5) {
            return null != e5 && e5.shape.length !== a2 && n2.axis !== [a2 - 1] ? e5.reshape(s2) : e5;
          }, h2 = p2(n2.gamma.read()), d2 = p2(n2.beta.read()), f2 = [], g2 = [], m2 = 0; m2 < a2; ++m2)
            -1 !== n2.axis.indexOf(m2) ? (f2.push(i2[m2]), g2.push(1)) : (f2.push(1), g2.push(i2[m2]));
          return t4 = t4.tile(f2), o2 = o2.tile(f2), h2 = h2.tile(g2), d2 = d2.tile(g2), batchNormalization(r2, t4, o2, d2, h2, n2.epsilon);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { axis: this.axis, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: serializeInitializer(this.betaInitializer), gammaInitializer: serializeInitializer(this.gammaInitializer), betaRegularizer: serializeRegularizer(this.betaRegularizer), gammaRegularizer: serializeRegularizer(this.gammaRegularizer) }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "LayerNormalization", t2;
    }(Layer);
    Mf.registerClass(LayerNormalization);
    ZeroPadding2D = function(e2) {
      function t2(t3) {
        var n2 = this;
        if (null == t3 && (t3 = {}), (n2 = e2.call(this, t3) || this).dataFormat = null == t3.dataFormat ? imageDataFormat() : t3.dataFormat, null == t3.padding)
          n2.padding = [[1, 1], [1, 1]];
        else if ("number" == typeof t3.padding)
          n2.padding = [[t3.padding, t3.padding], [t3.padding, t3.padding]];
        else {
          if (t3.padding = t3.padding, 2 !== t3.padding.length)
            throw new ValueError("ZeroPadding2D expects padding to be a length-2 array, but received a length-" + t3.padding.length + " array.");
          var r2 = void 0, i2 = void 0;
          if ("number" == typeof t3.padding[0])
            r2 = [t3.padding[0], t3.padding[0]], i2 = [t3.padding[1], t3.padding[1]];
          else {
            if (t3.padding = t3.padding, 2 !== t3.padding[0].length)
              throw new ValueError("ZeroPadding2D expects height padding to be a length-2 array, but received a length-" + t3.padding[0].length + " array.");
            if (r2 = t3.padding[0], 2 !== t3.padding[1].length)
              throw new ValueError("ZeroPadding2D expects width padding to be a length-2 array, but received a length-" + t3.padding[1].length + " array.");
            i2 = t3.padding[1];
          }
          n2.padding = [r2, i2];
        }
        return n2.inputSpec = [new InputSpec({ ndim: 4 })], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        var t3, n2;
        return e3 = getExactlyOneShape(e3), "channelsFirst" === this.dataFormat ? (t3 = null != e3[2] && e3[2] >= 0 ? e3[2] + this.padding[0][0] + this.padding[0][1] : null, n2 = null != e3[3] && e3[3] >= 0 ? e3[3] + this.padding[1][0] + this.padding[1][1] : null, [e3[0], e3[1], t3, n2]) : (t3 = null != e3[1] && e3[1] >= 0 ? e3[1] + this.padding[0][0] + this.padding[0][1] : null, n2 = null != e3[2] && e3[2] >= 0 ? e3[2] + this.padding[1][0] + this.padding[1][1] : null, [e3[0], t3, n2, e3[3]]);
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return spatial2dPadding(getExactlyOneTensor(e3), n2.padding, n2.dataFormat);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { padding: this.padding, dataFormat: this.dataFormat }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "ZeroPadding2D", t2;
    }(Layer);
    Mf.registerClass(ZeroPadding2D);
    Pooling1D = function(e2) {
      function t2(t3) {
        var n2 = this;
        if (null == t3.poolSize && (t3.poolSize = 2), n2 = e2.call(this, t3) || this, "number" == typeof t3.poolSize)
          n2.poolSize = [t3.poolSize];
        else {
          if (!Array.isArray(t3.poolSize) || 1 !== t3.poolSize.length || "number" != typeof t3.poolSize[0])
            throw new ValueError("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t3.poolSize));
          n2.poolSize = t3.poolSize;
        }
        if (assertPositiveInteger(n2.poolSize, "poolSize"), null == t3.strides)
          n2.strides = n2.poolSize;
        else if ("number" == typeof t3.strides)
          n2.strides = [t3.strides];
        else {
          if (!Array.isArray(t3.strides) || 1 !== t3.strides.length || "number" != typeof t3.strides[0])
            throw new ValueError("strides for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t3.strides));
          n2.strides = t3.strides;
        }
        return assertPositiveInteger(n2.strides, "strides"), n2.padding = null == t3.padding ? "valid" : t3.padding, checkPaddingMode(n2.padding), n2.inputSpec = [new InputSpec({ ndim: 3 })], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        var t3 = convOutputLength((e3 = getExactlyOneShape(e3))[1], this.poolSize[0], this.padding, this.strides[0]);
        return [e3[0], t3, e3[2]];
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          n2.invokeCallHook(e3, t3), e3 = expandDims$1(getExactlyOneTensor(e3), 2);
          var r2 = n2.poolingFunction(getExactlyOneTensor(e3), [n2.poolSize[0], 1], [n2.strides[0], 1], n2.padding, "channelsLast");
          return Dr(r2, [2]);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { poolSize: this.poolSize, padding: this.padding, strides: this.strides }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2;
    }(Layer);
    MaxPooling1D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.poolingFunction = function(e3, t3, n2, r2, i2) {
        return checkDataFormat(i2), checkPaddingMode(r2), pool2d(e3, t3, n2, r2, i2, "max");
      }, t2.className = "MaxPooling1D", t2;
    }(Pooling1D);
    Mf.registerClass(MaxPooling1D);
    AveragePooling1D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.poolingFunction = function(e3, t3, n2, r2, i2) {
        return checkDataFormat(i2), checkPaddingMode(r2), pool2d(e3, t3, n2, r2, i2, "avg");
      }, t2.className = "AveragePooling1D", t2;
    }(Pooling1D);
    Mf.registerClass(AveragePooling1D);
    Pooling2D = function(e2) {
      function t2(t3) {
        var n2 = this;
        if (null == t3.poolSize && (t3.poolSize = [2, 2]), (n2 = e2.call(this, t3) || this).poolSize = Array.isArray(t3.poolSize) ? t3.poolSize : [t3.poolSize, t3.poolSize], null == t3.strides)
          n2.strides = n2.poolSize;
        else if (Array.isArray(t3.strides)) {
          if (2 !== t3.strides.length)
            throw new ValueError("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length " + t3.strides.length + ".");
          n2.strides = t3.strides;
        } else
          n2.strides = [t3.strides, t3.strides];
        return assertPositiveInteger(n2.poolSize, "poolSize"), assertPositiveInteger(n2.strides, "strides"), n2.padding = null == t3.padding ? "valid" : t3.padding, n2.dataFormat = null == t3.dataFormat ? "channelsLast" : t3.dataFormat, checkDataFormat(n2.dataFormat), checkPaddingMode(n2.padding), n2.inputSpec = [new InputSpec({ ndim: 4 })], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        e3 = getExactlyOneShape(e3);
        var t3 = "channelsFirst" === this.dataFormat ? e3[2] : e3[1], n2 = "channelsFirst" === this.dataFormat ? e3[3] : e3[2];
        return t3 = convOutputLength(t3, this.poolSize[0], this.padding, this.strides[0]), n2 = convOutputLength(n2, this.poolSize[1], this.padding, this.strides[1]), "channelsFirst" === this.dataFormat ? [e3[0], e3[1], t3, n2] : [e3[0], t3, n2, e3[3]];
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return n2.invokeCallHook(e3, t3), n2.poolingFunction(getExactlyOneTensor(e3), n2.poolSize, n2.strides, n2.padding, n2.dataFormat);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2;
    }(Layer);
    MaxPooling2D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.poolingFunction = function(e3, t3, n2, r2, i2) {
        return checkDataFormat(i2), checkPaddingMode(r2), pool2d(e3, t3, n2, r2, i2, "max");
      }, t2.className = "MaxPooling2D", t2;
    }(Pooling2D);
    Mf.registerClass(MaxPooling2D);
    AveragePooling2D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.poolingFunction = function(e3, t3, n2, r2, i2) {
        return checkDataFormat(i2), checkPaddingMode(r2), pool2d(e3, t3, n2, r2, i2, "avg");
      }, t2.className = "AveragePooling2D", t2;
    }(Pooling2D);
    Mf.registerClass(AveragePooling2D);
    Pooling3D = function(e2) {
      function t2(t3) {
        var n2 = this;
        if (null == t3.poolSize && (t3.poolSize = [2, 2, 2]), (n2 = e2.call(this, t3) || this).poolSize = Array.isArray(t3.poolSize) ? t3.poolSize : [t3.poolSize, t3.poolSize, t3.poolSize], null == t3.strides)
          n2.strides = n2.poolSize;
        else if (Array.isArray(t3.strides)) {
          if (3 !== t3.strides.length)
            throw new ValueError("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length " + t3.strides.length + ".");
          n2.strides = t3.strides;
        } else
          n2.strides = [t3.strides, t3.strides, t3.strides];
        return assertPositiveInteger(n2.poolSize, "poolSize"), assertPositiveInteger(n2.strides, "strides"), n2.padding = null == t3.padding ? "valid" : t3.padding, n2.dataFormat = null == t3.dataFormat ? "channelsLast" : t3.dataFormat, checkDataFormat(n2.dataFormat), checkPaddingMode(n2.padding), n2.inputSpec = [new InputSpec({ ndim: 5 })], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        e3 = getExactlyOneShape(e3);
        var t3 = "channelsFirst" === this.dataFormat ? e3[2] : e3[1], n2 = "channelsFirst" === this.dataFormat ? e3[3] : e3[2], r2 = "channelsFirst" === this.dataFormat ? e3[4] : e3[3];
        return t3 = convOutputLength(t3, this.poolSize[0], this.padding, this.strides[0]), n2 = convOutputLength(n2, this.poolSize[1], this.padding, this.strides[1]), r2 = convOutputLength(r2, this.poolSize[2], this.padding, this.strides[2]), "channelsFirst" === this.dataFormat ? [e3[0], e3[1], t3, n2, r2] : [e3[0], t3, n2, r2, e3[4]];
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return n2.invokeCallHook(e3, t3), n2.poolingFunction(getExactlyOneTensor(e3), n2.poolSize, n2.strides, n2.padding, n2.dataFormat);
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2;
    }(Layer);
    MaxPooling3D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.poolingFunction = function(e3, t3, n2, r2, i2) {
        return checkDataFormat(i2), checkPaddingMode(r2), pool3d(e3, t3, n2, r2, i2, "max");
      }, t2.className = "MaxPooling3D", t2;
    }(Pooling3D);
    Mf.registerClass(MaxPooling3D);
    AveragePooling3D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.poolingFunction = function(e3, t3, n2, r2, i2) {
        return checkDataFormat(i2), checkPaddingMode(r2), pool3d(e3, t3, n2, r2, i2, "avg");
      }, t2.className = "AveragePooling3D", t2;
    }(Pooling3D);
    Mf.registerClass(AveragePooling3D);
    GlobalPooling1D = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.inputSpec = [new InputSpec({ ndim: 3 })], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        return [e3[0], e3[2]];
      }, t2.prototype.call = function(e3, t3) {
        throw new NotImplementedError();
      }, t2;
    }(Layer);
    GlobalAveragePooling1D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3 || {}) || this;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        return je(function() {
          var t4 = getExactlyOneTensor(e3);
          return fl(t4, 1);
        });
      }, t2.className = "GlobalAveragePooling1D", t2;
    }(GlobalPooling1D);
    Mf.registerClass(GlobalAveragePooling1D);
    GlobalMaxPooling1D = function(e2) {
      function t2(t3) {
        return e2.call(this, t3 || {}) || this;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        return je(function() {
          var t4 = getExactlyOneTensor(e3);
          return hl(t4, 1);
        });
      }, t2.className = "GlobalMaxPooling1D", t2;
    }(GlobalPooling1D);
    Mf.registerClass(GlobalMaxPooling1D);
    GlobalPooling2D = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.dataFormat = null == t3.dataFormat ? "channelsLast" : t3.dataFormat, checkDataFormat(n2.dataFormat), n2.inputSpec = [new InputSpec({ ndim: 4 })], n2;
      }
      return __extends(t2, e2), t2.prototype.computeOutputShape = function(e3) {
        return e3 = e3, "channelsLast" === this.dataFormat ? [e3[0], e3[3]] : [e3[0], e3[1]];
      }, t2.prototype.call = function(e3, t3) {
        throw new NotImplementedError();
      }, t2.prototype.getConfig = function() {
        var t3 = { dataFormat: this.dataFormat }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2;
    }(Layer);
    GlobalAveragePooling2D = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var t4 = getExactlyOneTensor(e3);
          return "channelsLast" === n2.dataFormat ? fl(t4, [1, 2]) : fl(t4, [2, 3]);
        });
      }, t2.className = "GlobalAveragePooling2D", t2;
    }(GlobalPooling2D);
    Mf.registerClass(GlobalAveragePooling2D);
    GlobalMaxPooling2D = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var t4 = getExactlyOneTensor(e3);
          return "channelsLast" === n2.dataFormat ? hl(t4, [1, 2]) : hl(t4, [2, 3]);
        });
      }, t2.className = "GlobalMaxPooling2D", t2;
    }(GlobalPooling2D);
    Mf.registerClass(GlobalMaxPooling2D);
    RNN = function(e2) {
      function t2(t3) {
        var n2, r2 = e2.call(this, t3) || this;
        if (null == t3.cell)
          throw new ValueError("cell property is missing for the constructor of RNN.");
        if (null == (n2 = Array.isArray(t3.cell) ? new StackedRNNCells({ cells: t3.cell }) : t3.cell).stateSize)
          throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
        return r2.cell = n2, r2.returnSequences = null != t3.returnSequences && t3.returnSequences, r2.returnState = null != t3.returnState && t3.returnState, r2.goBackwards = null != t3.goBackwards && t3.goBackwards, r2._stateful = null != t3.stateful && t3.stateful, r2.unroll = null != t3.unroll && t3.unroll, r2.supportsMasking = true, r2.inputSpec = [new InputSpec({ ndim: 3 })], r2.stateSpec = null, r2.states_ = null, r2.numConstants = null, r2.keptStates = [], r2;
      }
      return __extends(t2, e2), t2.prototype.getStates = function() {
        return null == this.states_ ? range(0, Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1).map(function(e3) {
          return null;
        }) : this.states_;
      }, t2.prototype.setStates = function(e3) {
        this.states_ = e3;
      }, t2.prototype.computeOutputShape = function(e3) {
        isArrayOfShapes(e3) && (e3 = e3[0]), e3 = e3;
        var t3 = this.cell.stateSize;
        Array.isArray(t3) || (t3 = [t3]);
        var n2, r2 = t3[0];
        if (n2 = this.returnSequences ? [e3[0], e3[1], r2] : [e3[0], r2], this.returnState) {
          for (var i2 = [], a2 = 0, o2 = t3; a2 < o2.length; a2++) {
            var s2 = o2[a2];
            i2.push([e3[0], s2]);
          }
          return [n2].concat(i2);
        }
        return n2;
      }, t2.prototype.computeMask = function(e3, t3) {
        var n2 = this;
        return je(function() {
          Array.isArray(t3) && (t3 = t3[0]);
          var e4 = n2.returnSequences ? t3 : null;
          if (n2.returnState) {
            var r2 = n2.states.map(function(e5) {
              return null;
            });
            return [e4].concat(r2);
          }
          return e4;
        });
      }, Object.defineProperty(t2.prototype, "states", { get: function() {
        if (null == this.states_) {
          for (var e3 = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t3 = [], n2 = 0; n2 < e3; ++n2)
            t3.push(null);
          return t3;
        }
        return this.states_;
      }, set: function(e3) {
        this.states_ = e3;
      }, enumerable: true, configurable: true }), t2.prototype.build = function(e3) {
        if (null != this.numConstants)
          throw new NotImplementedError("Constants support is not implemented in RNN yet.");
        isArrayOfShapes(e3) && (e3 = e3[0]), e3 = e3;
        var t3 = this.stateful ? e3[0] : null, n2 = e3[e3.length - 1];
        this.inputSpec[0] = new InputSpec({ shape: [t3, null, n2] });
        var r2, i2 = [e3[0]].concat(e3.slice(2));
        if (this.cell.build(i2), r2 = Array.isArray(this.cell.stateSize) ? this.cell.stateSize : [this.cell.stateSize], null != this.stateSpec) {
          if (!tt.arraysEqual(this.stateSpec.map(function(e4) {
            return e4.shape[e4.shape.length - 1];
          }), r2))
            throw new ValueError("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=" + this.stateSpec + "; However cell.stateSize is " + this.cell.stateSize);
        } else
          this.stateSpec = r2.map(function(e4) {
            return new InputSpec({ shape: [null, e4] });
          });
        this.stateful && this.resetStates();
      }, t2.prototype.resetStates = function(e3, t3) {
        var n2 = this;
        void 0 === t3 && (t3 = false), je(function() {
          if (!n2.stateful)
            throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");
          var r2 = n2.inputSpec[0].shape[0];
          if (null == r2)
            throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
          if (null == n2.states_)
            Array.isArray(n2.cell.stateSize) ? n2.states_ = n2.cell.stateSize.map(function(e4) {
              return Pn([r2, e4]);
            }) : n2.states_ = [Pn([r2, n2.cell.stateSize])];
          else if (null == e3)
            Xe(n2.states_), null != n2.keptStates && (Xe(n2.keptStates), n2.keptStates = []), Array.isArray(n2.cell.stateSize) ? n2.states_ = n2.cell.stateSize.map(function(e4) {
              return Pn([r2, e4]);
            }) : n2.states_[0] = Pn([r2, n2.cell.stateSize]);
          else {
            if (Array.isArray(e3) || (e3 = [e3]), e3.length !== n2.states_.length)
              throw new ValueError("Layer " + n2.name + " expects " + n2.states_.length + " state(s), but it received " + e3.length + " state value(s). Input received: " + e3);
            true === t3 ? n2.keptStates.push(n2.states_.slice()) : Xe(n2.states_);
            for (var i2 = 0; i2 < n2.states_.length; ++i2) {
              var a2 = e3[i2], o2 = Array.isArray(n2.cell.stateSize) ? n2.cell.stateSize[i2] : n2.cell.stateSize, s2 = [r2, o2];
              if (!tt.arraysEqual(a2.shape, s2))
                throw new ValueError("State " + i2 + " is incompatible with layer " + n2.name + ": expected shape=" + s2 + ", received shape=" + a2.shape);
              n2.states_[i2] = a2;
            }
          }
          n2.states_ = n2.states_.map(function(e4) {
            return $e(e4.clone());
          });
        });
      }, t2.prototype.apply = function(t3, n2) {
        var r2 = null == n2 ? null : n2.initialState, i2 = null == n2 ? null : n2.constants;
        null == n2 && (n2 = {});
        var a2 = standardizeArgs(t3, r2, i2, this.numConstants);
        t3 = a2.inputs, r2 = a2.initialState, i2 = a2.constants;
        var o2 = [], s2 = [];
        if (null != r2) {
          n2.initialState = r2, o2 = o2.concat(r2), this.stateSpec = [];
          for (var l3 = 0, u2 = r2; l3 < u2.length; l3++) {
            var c2 = u2[l3];
            this.stateSpec.push(new InputSpec({ shape: c2.shape }));
          }
          s2 = s2.concat(this.stateSpec);
        }
        if (null != i2 && (n2.constants = i2, o2 = o2.concat(i2), this.numConstants = i2.length), o2[0] instanceof SymbolicTensor) {
          var p2 = [t3].concat(o2), h2 = this.inputSpec.concat(s2), d2 = this.inputSpec;
          this.inputSpec = h2;
          var f2 = e2.prototype.apply.call(this, p2, n2);
          return this.inputSpec = d2, f2;
        }
        return e2.prototype.apply.call(this, t3, n2);
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var r2 = null == t3 ? null : t3.mask, i2 = null == t3 ? null : t3.training, a2 = null == t3 ? null : t3.initialState;
          e3 = getExactlyOneTensor(e3), null == a2 && (a2 = n2.stateful ? n2.states_ : n2.getInitialState(e3));
          var o2 = Array.isArray(n2.cell.stateSize) ? n2.cell.stateSize.length : 1;
          if (a2.length !== o2)
            throw new ValueError("RNN Layer has " + o2 + " state(s) but was passed " + a2.length + " initial state(s).");
          n2.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
          var s2 = { training: i2 }, l3 = rnn(function(e4, t4) {
            var r3 = n2.cell.call([e4].concat(t4), s2);
            return [r3[0], r3.slice(1)];
          }, e3, a2, n2.goBackwards, r2, null, n2.unroll, n2.returnSequences), u2 = l3[0], c2 = l3[1], p2 = l3[2];
          n2.stateful && n2.resetStates(p2, i2);
          var h2 = n2.returnSequences ? c2 : u2;
          return n2.returnState ? [h2].concat(p2) : h2;
        });
      }, t2.prototype.getInitialState = function(e3) {
        var t3 = this;
        return je(function() {
          var n2 = Pn(e3.shape);
          return n2 = expandDims$1(n2 = vl(n2, [1, 2])), Array.isArray(t3.cell.stateSize) ? t3.cell.stateSize.map(function(e4) {
            return e4 > 1 ? tile$1(n2, [1, e4]) : n2;
          }) : t3.cell.stateSize > 1 ? [tile$1(n2, [1, t3.cell.stateSize])] : [n2];
        });
      }, Object.defineProperty(t2.prototype, "trainableWeights", { get: function() {
        return this.trainable ? this.cell.trainableWeights : [];
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nonTrainableWeights", { get: function() {
        return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
      }, enumerable: true, configurable: true }), t2.prototype.setFastWeightInitDuringBuild = function(t3) {
        e2.prototype.setFastWeightInitDuringBuild.call(this, t3), null != this.cell && this.cell.setFastWeightInitDuringBuild(t3);
      }, t2.prototype.getConfig = function() {
        var t3 = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };
        null != this.numConstants && (t3.numConstants = this.numConstants);
        var n2 = this.cell.getConfig();
        t3.cell = { className: this.cell.getClassName(), config: n2 };
        var r2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, r2), t3;
      }, t2.fromConfig = function(e3, t3, n2) {
        void 0 === n2 && (n2 = {});
        var r2 = deserialize(t3.cell, n2);
        return new e3(Object.assign(t3, { cell: r2 }));
      }, t2.className = "RNN", t2;
    }(Layer);
    Mf.registerClass(RNN);
    RNNCell = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return __extends(t2, e2), t2;
    }(Layer);
    SimpleRNNCell = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.DEFAULT_ACTIVATION = "tanh", n2.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n2.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n2.DEFAULT_BIAS_INITIALIZER = "zeros", n2.units = t3.units, assertPositiveInteger(n2.units, "units"), n2.activation = getActivation(null == t3.activation ? n2.DEFAULT_ACTIVATION : t3.activation), n2.useBias = null == t3.useBias || t3.useBias, n2.kernelInitializer = getInitializer(t3.kernelInitializer || n2.DEFAULT_KERNEL_INITIALIZER), n2.recurrentInitializer = getInitializer(t3.recurrentInitializer || n2.DEFAULT_RECURRENT_INITIALIZER), n2.biasInitializer = getInitializer(t3.biasInitializer || n2.DEFAULT_BIAS_INITIALIZER), n2.kernelRegularizer = getRegularizer(t3.kernelRegularizer), n2.recurrentRegularizer = getRegularizer(t3.recurrentRegularizer), n2.biasRegularizer = getRegularizer(t3.biasRegularizer), n2.kernelConstraint = getConstraint(t3.kernelConstraint), n2.recurrentConstraint = getConstraint(t3.recurrentConstraint), n2.biasConstraint = getConstraint(t3.biasConstraint), n2.dropout = min$1([1, max$1([0, null == t3.dropout ? 0 : t3.dropout])]), n2.recurrentDropout = min$1([1, max$1([0, null == t3.recurrentDropout ? 0 : t3.recurrentDropout])]), n2.stateSize = n2.units, n2.dropoutMask = null, n2.recurrentDropoutMask = null, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        e3 = getExactlyOneShape(e3), this.kernel = this.addWeight("kernel", [e3[e3.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          if (2 !== (e3 = e3).length)
            throw new ValueError("SimpleRNNCell expects 2 input Tensors, got " + e3.length + ".");
          var r2 = e3[1];
          e3 = e3[0];
          var i2, a2 = null != t3.training && t3.training;
          0 < n2.dropout && n2.dropout < 1 && null == n2.dropoutMask && (n2.dropoutMask = generateDropoutMask(function() {
            return Vn(e3);
          }, n2.dropout, a2)), 0 < n2.recurrentDropout && n2.recurrentDropout < 1 && null == n2.recurrentDropoutMask && (n2.recurrentDropoutMask = generateDropoutMask(function() {
            return Vn(r2);
          }, n2.recurrentDropout, a2));
          var o2 = n2.dropoutMask, s2 = n2.recurrentDropoutMask;
          i2 = dot(null != o2 ? tc(e3, o2) : e3, n2.kernel.read()), null != n2.bias && (i2 = biasAdd(i2, n2.bias.read())), null != s2 && (r2 = tc(r2, s2));
          var l3 = Vs(i2, dot(r2, n2.recurrentKernel.read()));
          return null != n2.activation && (l3 = n2.activation.apply(l3)), [l3, l3];
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { units: this.units, activation: serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "SimpleRNNCell", t2;
    }(RNNCell);
    Mf.registerClass(SimpleRNNCell);
    SimpleRNN = function(e2) {
      function t2(t3) {
        return t3.cell = new SimpleRNNCell(t3), e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.call = function(t3, n2) {
        var r2 = this;
        return je(function() {
          null != r2.cell.dropoutMask && (Xe(r2.cell.dropoutMask), r2.cell.dropoutMask = null), null != r2.cell.recurrentDropoutMask && (Xe(r2.cell.recurrentDropoutMask), r2.cell.recurrentDropoutMask = null);
          var i2 = null == n2 ? null : n2.mask, a2 = null == n2 ? null : n2.training, o2 = null == n2 ? null : n2.initialState;
          return e2.prototype.call.call(r2, t3, { mask: i2, training: a2, initialState: o2 });
        });
      }, Object.defineProperty(t2.prototype, "units", { get: function() {
        return this.cell.units;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "activation", { get: function() {
        return this.cell.activation;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "useBias", { get: function() {
        return this.cell.useBias;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelInitializer", { get: function() {
        return this.cell.kernelInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentInitializer", { get: function() {
        return this.cell.recurrentInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasInitializer", { get: function() {
        return this.cell.biasInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelRegularizer", { get: function() {
        return this.cell.kernelRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentRegularizer", { get: function() {
        return this.cell.recurrentRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasRegularizer", { get: function() {
        return this.cell.biasRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelConstraint", { get: function() {
        return this.cell.kernelConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentConstraint", { get: function() {
        return this.cell.recurrentConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasConstraint", { get: function() {
        return this.cell.biasConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "dropout", { get: function() {
        return this.cell.dropout;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentDropout", { get: function() {
        return this.cell.recurrentDropout;
      }, enumerable: true, configurable: true }), t2.prototype.getConfig = function() {
        var t3 = { units: this.units, activation: serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout }, n2 = e2.prototype.getConfig.call(this);
        return delete n2.cell, Object.assign(t3, n2), t3;
      }, t2.fromConfig = function(e3, t3) {
        return new e3(t3);
      }, t2.className = "SimpleRNN", t2;
    }(RNN);
    Mf.registerClass(SimpleRNN);
    GRUCell = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.DEFAULT_ACTIVATION = "tanh", n2.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n2.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n2.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n2.DEFAULT_BIAS_INITIALIZER = "zeros", n2.units = t3.units, assertPositiveInteger(n2.units, "units"), n2.activation = getActivation(void 0 === t3.activation ? n2.DEFAULT_ACTIVATION : t3.activation), n2.recurrentActivation = getActivation(void 0 === t3.recurrentActivation ? n2.DEFAULT_RECURRENT_ACTIVATION : t3.recurrentActivation), n2.useBias = null == t3.useBias || t3.useBias, n2.kernelInitializer = getInitializer(t3.kernelInitializer || n2.DEFAULT_KERNEL_INITIALIZER), n2.recurrentInitializer = getInitializer(t3.recurrentInitializer || n2.DEFAULT_RECURRENT_INITIALIZER), n2.biasInitializer = getInitializer(t3.biasInitializer || n2.DEFAULT_BIAS_INITIALIZER), n2.kernelRegularizer = getRegularizer(t3.kernelRegularizer), n2.recurrentRegularizer = getRegularizer(t3.recurrentRegularizer), n2.biasRegularizer = getRegularizer(t3.biasRegularizer), n2.kernelConstraint = getConstraint(t3.kernelConstraint), n2.recurrentConstraint = getConstraint(t3.recurrentConstraint), n2.biasConstraint = getConstraint(t3.biasConstraint), n2.dropout = min$1([1, max$1([0, null == t3.dropout ? 0 : t3.dropout])]), n2.recurrentDropout = min$1([1, max$1([0, null == t3.recurrentDropout ? 0 : t3.recurrentDropout])]), n2.implementation = t3.implementation, n2.stateSize = n2.units, n2.dropoutMask = null, n2.recurrentDropoutMask = null, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3 = (e3 = getExactlyOneShape(e3))[e3.length - 1];
        this.kernel = this.addWeight("kernel", [t3, 3 * this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 3 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [3 * this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          if (2 !== (e3 = e3).length)
            throw new ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got " + e3.length + ".");
          var r2 = null != t3.training && t3.training, i2 = e3[1];
          e3 = e3[0], 0 < n2.dropout && n2.dropout < 1 && null == n2.dropoutMask && (n2.dropoutMask = generateDropoutMask(function() {
            return Vn(e3);
          }, n2.dropout, r2, 3)), 0 < n2.recurrentDropout && n2.recurrentDropout < 1 && null == n2.recurrentDropoutMask && (n2.recurrentDropoutMask = generateDropoutMask(function() {
            return Vn(i2);
          }, n2.recurrentDropout, r2, 3));
          var a2, o2, s2, l3 = n2.dropoutMask, u2 = n2.recurrentDropoutMask;
          0 < n2.dropout && n2.dropout < 1 && (e3 = tc(e3, l3[0]));
          var c2 = dot(e3, n2.kernel.read());
          n2.useBias && (c2 = biasAdd(c2, n2.bias.read())), 0 < n2.recurrentDropout && n2.recurrentDropout < 1 && (i2 = tc(i2, u2[0]));
          var p2 = n2.recurrentKernel.read(), h2 = Xn(p2, [2 * n2.units, n2.units], p2.rank - 1), d2 = h2[0], f2 = h2[1], g2 = dot(i2, d2), m2 = Xn(c2, 3, c2.rank - 1), y2 = m2[0], v2 = m2[1], b2 = m2[2], w2 = Xn(g2, 2, g2.rank - 1), z2 = w2[0], S2 = w2[1];
          a2 = n2.recurrentActivation.apply(Vs(y2, z2)), o2 = n2.recurrentActivation.apply(Vs(v2, S2));
          var A2 = dot(tc(o2, i2), f2);
          s2 = n2.activation.apply(Vs(b2, A2));
          var _2 = Vs(tc(a2, i2), tc(Vs(1, as(a2)), s2));
          return [_2, _2];
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "GRUCell", t2;
    }(RNNCell);
    Mf.registerClass(GRUCell);
    GRU = function(e2) {
      function t2(t3) {
        return 0 === t3.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t3.cell = new GRUCell(t3), e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.call = function(t3, n2) {
        var r2 = this;
        return je(function() {
          null != r2.cell.dropoutMask && (Xe(r2.cell.dropoutMask), r2.cell.dropoutMask = null), null != r2.cell.recurrentDropoutMask && (Xe(r2.cell.recurrentDropoutMask), r2.cell.recurrentDropoutMask = null);
          var i2 = null == n2 ? null : n2.mask, a2 = null == n2 ? null : n2.training, o2 = null == n2 ? null : n2.initialState;
          return e2.prototype.call.call(r2, t3, { mask: i2, training: a2, initialState: o2 });
        });
      }, Object.defineProperty(t2.prototype, "units", { get: function() {
        return this.cell.units;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "activation", { get: function() {
        return this.cell.activation;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentActivation", { get: function() {
        return this.cell.recurrentActivation;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "useBias", { get: function() {
        return this.cell.useBias;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelInitializer", { get: function() {
        return this.cell.kernelInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentInitializer", { get: function() {
        return this.cell.recurrentInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasInitializer", { get: function() {
        return this.cell.biasInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelRegularizer", { get: function() {
        return this.cell.kernelRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentRegularizer", { get: function() {
        return this.cell.recurrentRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasRegularizer", { get: function() {
        return this.cell.biasRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelConstraint", { get: function() {
        return this.cell.kernelConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentConstraint", { get: function() {
        return this.cell.recurrentConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasConstraint", { get: function() {
        return this.cell.biasConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "dropout", { get: function() {
        return this.cell.dropout;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentDropout", { get: function() {
        return this.cell.recurrentDropout;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "implementation", { get: function() {
        return this.cell.implementation;
      }, enumerable: true, configurable: true }), t2.prototype.getConfig = function() {
        var t3 = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation }, n2 = e2.prototype.getConfig.call(this);
        return delete n2.cell, Object.assign(t3, n2), t3;
      }, t2.fromConfig = function(e3, t3) {
        return 0 === t3.implmentation && (t3.implementation = 1), new e3(t3);
      }, t2.className = "GRU", t2;
    }(RNN);
    Mf.registerClass(GRU);
    LSTMCell = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.DEFAULT_ACTIVATION = "tanh", n2.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n2.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n2.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n2.DEFAULT_BIAS_INITIALIZER = "zeros", n2.units = t3.units, assertPositiveInteger(n2.units, "units"), n2.activation = getActivation(void 0 === t3.activation ? n2.DEFAULT_ACTIVATION : t3.activation), n2.recurrentActivation = getActivation(void 0 === t3.recurrentActivation ? n2.DEFAULT_RECURRENT_ACTIVATION : t3.recurrentActivation), n2.useBias = null == t3.useBias || t3.useBias, n2.kernelInitializer = getInitializer(t3.kernelInitializer || n2.DEFAULT_KERNEL_INITIALIZER), n2.recurrentInitializer = getInitializer(t3.recurrentInitializer || n2.DEFAULT_RECURRENT_INITIALIZER), n2.biasInitializer = getInitializer(t3.biasInitializer || n2.DEFAULT_BIAS_INITIALIZER), n2.unitForgetBias = t3.unitForgetBias, n2.kernelRegularizer = getRegularizer(t3.kernelRegularizer), n2.recurrentRegularizer = getRegularizer(t3.recurrentRegularizer), n2.biasRegularizer = getRegularizer(t3.biasRegularizer), n2.kernelConstraint = getConstraint(t3.kernelConstraint), n2.recurrentConstraint = getConstraint(t3.recurrentConstraint), n2.biasConstraint = getConstraint(t3.biasConstraint), n2.dropout = min$1([1, max$1([0, null == t3.dropout ? 0 : t3.dropout])]), n2.recurrentDropout = min$1([1, max$1([0, null == t3.recurrentDropout ? 0 : t3.recurrentDropout])]), n2.implementation = t3.implementation, n2.stateSize = [n2.units, n2.units], n2.dropoutMask = null, n2.recurrentDropoutMask = null, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        var t3, n2, r2 = (e3 = getExactlyOneShape(e3))[e3.length - 1];
        if (this.kernel = this.addWeight("kernel", [r2, 4 * this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 4 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias) {
          if (this.unitForgetBias) {
            var i2 = this.biasInitializer, a2 = this.units;
            n2 = new ((t3 = function(e4) {
              function t4() {
                return null !== e4 && e4.apply(this, arguments) || this;
              }
              return __extends(t4, e4), t4.prototype.apply = function(e5, t5) {
                var n3 = i2.apply([a2]), r3 = new Ones().apply([a2]), o2 = i2.apply([2 * a2]);
                return concatAlongFirstAxis(concatAlongFirstAxis(n3, r3), o2);
              }, t4;
            }(Initializer)).className = "CustomInit", t3)();
          } else
            n2 = this.biasInitializer;
          this.bias = this.addWeight("bias", [4 * this.units], null, n2, this.biasRegularizer, true, this.biasConstraint);
        } else
          this.bias = null;
        this.built = true;
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          var r2 = null != t3.training && t3.training;
          if (3 !== (e3 = e3).length)
            throw new ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got " + e3.length + ".");
          var i2 = e3[1], a2 = e3[2];
          e3 = e3[0], 0 < n2.dropout && n2.dropout < 1 && null == n2.dropoutMask && (n2.dropoutMask = generateDropoutMask(function() {
            return Vn(e3);
          }, n2.dropout, r2, 4)), 0 < n2.recurrentDropout && n2.recurrentDropout < 1 && null == n2.recurrentDropoutMask && (n2.recurrentDropoutMask = generateDropoutMask(function() {
            return Vn(i2);
          }, n2.recurrentDropout, r2, 4));
          var o2, s2, l3, u2, c2 = n2.dropoutMask, p2 = n2.recurrentDropoutMask;
          0 < n2.dropout && n2.dropout < 1 && (e3 = tc(e3, c2[0]));
          var h2 = dot(e3, n2.kernel.read());
          0 < n2.recurrentDropout && n2.recurrentDropout < 1 && (i2 = tc(i2, p2[0])), h2 = Vs(h2, dot(i2, n2.recurrentKernel.read())), n2.useBias && (h2 = biasAdd(h2, n2.bias.read()));
          var d2 = Xn(h2, 4, h2.rank - 1), f2 = d2[0], g2 = d2[1], m2 = d2[2], y2 = d2[3];
          o2 = n2.recurrentActivation.apply(f2), s2 = n2.recurrentActivation.apply(g2), l3 = Vs(tc(s2, a2), tc(o2, n2.activation.apply(m2))), u2 = n2.recurrentActivation.apply(y2);
          var v2 = tc(u2, n2.activation.apply(l3));
          return [v2, v2, l3];
        });
      }, t2.prototype.getConfig = function() {
        var t3 = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.className = "LSTMCell", t2;
    }(RNNCell);
    Mf.registerClass(LSTMCell);
    LSTM = function(e2) {
      function t2(t3) {
        return 0 === t3.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t3.cell = new LSTMCell(t3), e2.call(this, t3) || this;
      }
      return __extends(t2, e2), t2.prototype.call = function(t3, n2) {
        var r2 = this;
        return je(function() {
          null != r2.cell.dropoutMask && (Xe(r2.cell.dropoutMask), r2.cell.dropoutMask = null), null != r2.cell.recurrentDropoutMask && (Xe(r2.cell.recurrentDropoutMask), r2.cell.recurrentDropoutMask = null);
          var i2 = null == n2 ? null : n2.mask, a2 = null == n2 ? null : n2.training, o2 = null == n2 ? null : n2.initialState;
          return e2.prototype.call.call(r2, t3, { mask: i2, training: a2, initialState: o2 });
        });
      }, Object.defineProperty(t2.prototype, "units", { get: function() {
        return this.cell.units;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "activation", { get: function() {
        return this.cell.activation;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentActivation", { get: function() {
        return this.cell.recurrentActivation;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "useBias", { get: function() {
        return this.cell.useBias;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelInitializer", { get: function() {
        return this.cell.kernelInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentInitializer", { get: function() {
        return this.cell.recurrentInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasInitializer", { get: function() {
        return this.cell.biasInitializer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "unitForgetBias", { get: function() {
        return this.cell.unitForgetBias;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelRegularizer", { get: function() {
        return this.cell.kernelRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentRegularizer", { get: function() {
        return this.cell.recurrentRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasRegularizer", { get: function() {
        return this.cell.biasRegularizer;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "kernelConstraint", { get: function() {
        return this.cell.kernelConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentConstraint", { get: function() {
        return this.cell.recurrentConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "biasConstraint", { get: function() {
        return this.cell.biasConstraint;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "dropout", { get: function() {
        return this.cell.dropout;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "recurrentDropout", { get: function() {
        return this.cell.recurrentDropout;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "implementation", { get: function() {
        return this.cell.implementation;
      }, enumerable: true, configurable: true }), t2.prototype.getConfig = function() {
        var t3 = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation }, n2 = e2.prototype.getConfig.call(this);
        return delete n2.cell, Object.assign(t3, n2), t3;
      }, t2.fromConfig = function(e3, t3) {
        return 0 === t3.implmentation && (t3.implementation = 1), new e3(t3);
      }, t2.className = "LSTM", t2;
    }(RNN);
    Mf.registerClass(LSTM);
    StackedRNNCells = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.cells = t3.cells, n2;
      }
      return __extends(t2, e2), Object.defineProperty(t2.prototype, "stateSize", { get: function() {
        for (var e3 = [], t3 = 0, n2 = this.cells.slice().reverse(); t3 < n2.length; t3++) {
          var r2 = n2[t3];
          Array.isArray(r2.stateSize) ? e3.push.apply(e3, r2.stateSize) : e3.push(r2.stateSize);
        }
        return e3;
      }, enumerable: true, configurable: true }), t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          for (var r2 = (e3 = e3).slice(1), i2 = [], a2 = 0, o2 = n2.cells.slice().reverse(); a2 < o2.length; a2++) {
            var s2 = o2[a2];
            Array.isArray(s2.stateSize) ? i2.push(r2.splice(0, s2.stateSize.length)) : i2.push(r2.splice(0, 1));
          }
          i2.reverse();
          for (var l3, u2 = [], c2 = 0; c2 < n2.cells.length; ++c2) {
            s2 = n2.cells[c2];
            r2 = i2[c2], l3 = 0 === c2 ? [e3[0]].concat(r2) : [l3[0]].concat(r2), l3 = s2.call(l3, t3), u2.push(l3.slice(1));
          }
          r2 = [];
          for (var p2 = 0, h2 = u2.slice().reverse(); p2 < h2.length; p2++) {
            var d2 = h2[p2];
            r2.push.apply(r2, d2);
          }
          return [l3[0]].concat(r2);
        });
      }, t2.prototype.build = function(e3) {
        var t3;
        isArrayOfShapes(e3) && (e3 = e3[0]), e3 = e3, this.cells.forEach(function(n2, r2) {
          nameScope("RNNCell_" + r2, function() {
            n2.build(e3), t3 = Array.isArray(n2.stateSize) ? n2.stateSize[0] : n2.stateSize, e3 = [e3[0], t3];
          });
        }), this.built = true;
      }, t2.prototype.getConfig = function() {
        for (var t3 = [], n2 = 0, r2 = this.cells; n2 < r2.length; n2++) {
          var i2 = r2[n2];
          t3.push({ className: i2.getClassName(), config: i2.getConfig() });
        }
        var a2 = { cells: t3 }, o2 = e2.prototype.getConfig.call(this);
        return Object.assign(a2, o2), a2;
      }, t2.fromConfig = function(e3, t3, n2) {
        void 0 === n2 && (n2 = {});
        for (var r2 = [], i2 = 0, a2 = t3.cells; i2 < a2.length; i2++) {
          var o2 = a2[i2];
          r2.push(deserialize(o2, n2));
        }
        return new e3({ cells: r2 });
      }, Object.defineProperty(t2.prototype, "trainableWeights", { get: function() {
        if (!this.trainable)
          return [];
        for (var e3 = [], t3 = 0, n2 = this.cells; t3 < n2.length; t3++) {
          var r2 = n2[t3];
          e3.push.apply(e3, r2.trainableWeights);
        }
        return e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nonTrainableWeights", { get: function() {
        for (var e3 = [], t3 = 0, n2 = this.cells; t3 < n2.length; t3++) {
          var r2 = n2[t3];
          e3.push.apply(e3, r2.nonTrainableWeights);
        }
        if (!this.trainable) {
          for (var i2 = [], a2 = 0, o2 = this.cells; a2 < o2.length; a2++) {
            r2 = o2[a2];
            i2.push.apply(i2, r2.trainableWeights);
          }
          return i2.concat(e3);
        }
        return e3;
      }, enumerable: true, configurable: true }), t2.prototype.getWeights = function() {
        for (var e3 = [], t3 = 0, n2 = this.cells; t3 < n2.length; t3++) {
          var r2 = n2[t3];
          e3.push.apply(e3, r2.weights);
        }
        return batchGetValue(e3);
      }, t2.prototype.setWeights = function(e3) {
        for (var t3 = [], n2 = 0, r2 = this.cells; n2 < r2.length; n2++)
          for (var i2 = r2[n2], a2 = i2.weights.length, o2 = e3.splice(a2), s2 = 0; s2 < i2.weights.length; ++s2)
            t3.push([i2.weights[s2], o2[s2]]);
        batchSetValue(t3);
      }, t2.className = "StackedRNNCells", t2;
    }(RNNCell);
    Mf.registerClass(StackedRNNCells);
    Wrapper = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.layer = t3.layer, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(e3) {
        this.built = true;
      }, Object.defineProperty(t2.prototype, "trainable", { get: function() {
        return null != this.layer && this.layer.trainable;
      }, set: function(e3) {
        null != this.layer && (this.layer.trainable = e3);
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "trainableWeights", { get: function() {
        return this.layer.trainableWeights;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nonTrainableWeights", { get: function() {
        return this.layer.nonTrainableWeights;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "updates", { get: function() {
        return this.layer._updates;
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "losses", { get: function() {
        return this.layer.losses;
      }, enumerable: true, configurable: true }), t2.prototype.getWeights = function() {
        return this.layer.getWeights();
      }, t2.prototype.setWeights = function(e3) {
        this.layer.setWeights(e3);
      }, t2.prototype.getConfig = function() {
        var t3 = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.prototype.setFastWeightInitDuringBuild = function(t3) {
        e2.prototype.setFastWeightInitDuringBuild.call(this, t3), null != this.layer && this.layer.setFastWeightInitDuringBuild(t3);
      }, t2.fromConfig = function(e3, t3, n2) {
        void 0 === n2 && (n2 = {});
        var r2 = deserialize(t3.layer, n2);
        delete t3.layer;
        var i2 = { layer: r2 };
        return Object.assign(i2, t3), new e3(i2);
      }, t2;
    }(Layer);
    TimeDistributed = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this;
        return n2.supportsMasking = true, n2;
      }
      return __extends(t2, e2), t2.prototype.build = function(t3) {
        if ((t3 = getExactlyOneShape(t3)).length < 3)
          throw new ValueError("TimeDistributed layer expects an input shape >= 3D, but received input shape " + JSON.stringify(t3));
        this.inputSpec = [{ shape: t3 }];
        var n2 = [t3[0]].concat(t3.slice(2));
        this.layer.built || (this.layer.build(n2), this.layer.built = true), e2.prototype.build.call(this, t3);
      }, t2.prototype.computeOutputShape = function(e3) {
        var t3 = [(e3 = getExactlyOneShape(e3))[0]].concat(e3.slice(2)), n2 = this.layer.computeOutputShape(t3), r2 = e3[1];
        return [n2[0], r2].concat(n2.slice(1));
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          return rnn(function(e4, r2) {
            return [getExactlyOneTensor(n2.layer.call(e4, t3)), []];
          }, e3 = getExactlyOneTensor(e3), [], false, null, null, false, true)[1];
        });
      }, t2.className = "TimeDistributed", t2;
    }(Wrapper);
    Mf.registerClass(TimeDistributed);
    DEFAULT_BIDIRECTIONAL_MERGE_MODE = "concat";
    Bidirectional = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this, t3) || this, r2 = t3.layer.getConfig(), i2 = {};
        i2.className = t3.layer.getClassName(), i2.config = r2, n2.forwardLayer = deserialize(i2), r2.goBackwards = true !== r2.goBackwards;
        var a2 = {};
        if (a2.className = t3.layer.getClassName(), a2.config = r2, n2.backwardLayer = deserialize(a2), n2.forwardLayer.name = "forward_" + n2.forwardLayer.name, n2.backwardLayer.name = "backward_" + n2.backwardLayer.name, n2.mergeMode = void 0 === t3.mergeMode ? DEFAULT_BIDIRECTIONAL_MERGE_MODE : t3.mergeMode, checkBidirectionalMergeMode(n2.mergeMode), t3.weights)
          throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");
        return n2._stateful = t3.layer.stateful, n2.returnSequences = t3.layer.returnSequences, n2.returnState = t3.layer.returnState, n2.supportsMasking = true, n2._trainable = true, n2.inputSpec = t3.layer.inputSpec, n2.numConstants = null, n2;
      }
      return __extends(t2, e2), Object.defineProperty(t2.prototype, "trainable", { get: function() {
        return this._trainable;
      }, set: function(e3) {
        this._trainable = e3, null != this.forwardLayer && (this.forwardLayer.trainable = e3), null != this.backwardLayer && (this.backwardLayer.trainable = e3);
      }, enumerable: true, configurable: true }), t2.prototype.getWeights = function() {
        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
      }, t2.prototype.setWeights = function(e3) {
        var t3 = e3.length, n2 = Math.floor(t3 / 2);
        this.forwardLayer.setWeights(e3.slice(0, n2)), this.backwardLayer.setWeights(e3.slice(n2));
      }, t2.prototype.computeOutputShape = function(e3) {
        var t3, n2, r2, i2 = this.forwardLayer.computeOutputShape(e3);
        return Array.isArray(i2) && Array.isArray(i2[0]) || (i2 = [i2]), i2 = i2, this.returnState ? (r2 = i2.slice(1), t3 = i2[0]) : t3 = i2[0], t3 = t3, "concat" === this.mergeMode ? (t3[t3.length - 1] *= 2, n2 = [t3]) : n2 = null == this.mergeMode ? [t3, t3.slice()] : [t3], this.returnState ? null == this.mergeMode ? n2.concat(r2).concat(r2.slice()) : [t3].concat(r2).concat(r2.slice()) : singletonOrArray(n2);
      }, t2.prototype.apply = function(t3, n2) {
        var r2 = null == n2 ? null : n2.initialState, i2 = null == n2 ? null : n2.constants;
        null == n2 && (n2 = {});
        var a2 = standardizeArgs(t3, r2, i2, this.numConstants);
        if (t3 = a2.inputs, r2 = a2.initialState, i2 = a2.constants, Array.isArray(t3) && (r2 = t3.slice(1), t3 = t3[0]), (null == r2 || 0 === r2.length) && null == i2)
          return e2.prototype.apply.call(this, t3, n2);
        var o2 = [], s2 = [];
        if (null != r2) {
          var l3 = r2.length;
          if (l3 % 2 > 0)
            throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
          n2.initialState = r2, o2.push.apply(o2, r2);
          var u2 = r2.map(function(e3) {
            return new InputSpec({ shape: e3.shape });
          });
          this.forwardLayer.stateSpec = u2.slice(0, l3 / 2), this.backwardLayer.stateSpec = u2.slice(l3 / 2), s2.push.apply(s2, u2);
        }
        if (null != i2)
          throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");
        for (var c2 = o2[0] instanceof SymbolicTensor, p2 = 0, h2 = o2; p2 < h2.length; p2++) {
          if (h2[p2] instanceof SymbolicTensor !== c2)
            throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
        }
        if (c2) {
          var d2 = [t3].concat(o2), f2 = this.inputSpec.concat(s2), g2 = this.inputSpec;
          this.inputSpec = f2;
          var m2 = e2.prototype.apply.call(this, d2, n2);
          return this.inputSpec = g2, m2;
        }
        return e2.prototype.apply.call(this, t3, n2);
      }, t2.prototype.call = function(e3, t3) {
        var n2 = this;
        return je(function() {
          if (null != t3.mask)
            throw new NotImplementedError("The support for masking is not implemented for Bidirectional layers yet.");
          var r2, i2, a2, o2, s2 = t3.initialState;
          if (null == s2)
            r2 = n2.forwardLayer.call(e3, t3), i2 = n2.backwardLayer.call(e3, t3);
          else {
            var l3 = s2.slice(0, s2.length / 2), u2 = s2.slice(s2.length / 2);
            r2 = n2.forwardLayer.call(e3, Object.assign(t3, { initialState: l3 })), i2 = n2.backwardLayer.call(e3, Object.assign(t3, { initialState: u2 }));
          }
          return n2.returnState && (Array.isArray(r2) && (a2 = r2.slice(1).concat(i2.slice(1))), r2 = r2[0], i2 = i2[0]), n2.returnSequences && (i2 = zc(i2, 1)), "concat" === n2.mergeMode ? o2 = concatenate([r2, i2]) : "sum" === n2.mergeMode ? o2 = Vs(r2, i2) : "ave" === n2.mergeMode ? o2 = tc(0.5, Vs(r2, i2)) : "mul" === n2.mergeMode ? o2 = tc(r2, i2) : null == n2.mergeMode && (o2 = [r2, i2]), n2.returnState ? null == n2.mergeMode ? o2.concat(a2) : [o2].concat(a2) : o2;
        });
      }, t2.prototype.resetStates = function(e3) {
        this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
      }, t2.prototype.build = function(e3) {
        var t3 = this;
        nameScope(this.forwardLayer.name, function() {
          t3.forwardLayer.build(e3);
        }), nameScope(this.backwardLayer.name, function() {
          t3.backwardLayer.build(e3);
        }), this.built = true;
      }, Object.defineProperty(t2.prototype, "trainableWeights", { get: function() {
        return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
      }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nonTrainableWeights", { get: function() {
        return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
      }, enumerable: true, configurable: true }), t2.prototype.setFastWeightInitDuringBuild = function(t3) {
        e2.prototype.setFastWeightInitDuringBuild.call(this, t3), null != this.forwardLayer && this.forwardLayer.setFastWeightInitDuringBuild(t3), null != this.backwardLayer && this.backwardLayer.setFastWeightInitDuringBuild(t3);
      }, t2.prototype.getConfig = function() {
        var t3 = { mergeMode: this.mergeMode }, n2 = e2.prototype.getConfig.call(this);
        return Object.assign(t3, n2), t3;
      }, t2.fromConfig = function(e3, t3) {
        var n2 = deserialize(t3.layer);
        if (delete t3.layer, null != t3.numConstants)
          throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
        var r2 = t3;
        return r2.layer = n2, new e3(r2);
      }, t2.className = "Bidirectional", t2;
    }(Wrapper);
    Mf.registerClass(Bidirectional);
    globalMaxPool1d = globalMaxPooling1d;
    globalMaxPool2d = globalMaxPooling2d;
    maxPool1d = maxPooling1d;
    maxPool2d = maxPooling2d;
    exports_layers = Object.freeze({ inputLayer, elu: elu$2, reLU, leakyReLU, prelu: prelu$1, softmax: softmax$1, thresholdedReLU, conv1d: conv1d$2, conv2d: conv2d$1, conv2dTranspose: conv2dTranspose$1, conv3d: conv3d$2, separableConv2d: separableConv2d$1, cropping2D, upSampling2d, depthwiseConv2d: depthwiseConv2d$2, activation, dense, dropout: dropout$2, flatten: flatten$1, repeatVector, reshape, permute, embedding, add: add$2, average: average$1, concatenate: concatenate$2, maximum: maximum$2, minimum: minimum$2, multiply: multiply$1, dot: dot$1, batchNormalization: batchNormalization$1, layerNormalization, zeroPadding2d, averagePooling1d, avgPool1d, avgPooling1d, averagePooling2d, avgPool2d, avgPooling2d, averagePooling3d, avgPool3d: avgPool3d$1, avgPooling3d, globalAveragePooling1d, globalAveragePooling2d, globalMaxPooling1d, globalMaxPooling2d, maxPooling1d, maxPooling2d, maxPooling3d, gru, gruCell, lstm, lstmCell, simpleRNN, simpleRNNCell, rnn: rnn$1, stackedRNNCells, bidirectional, timeDistributed, globalMaxPool1d, globalMaxPool2d, maxPool1d, maxPool2d, Layer, RNN, RNNCell, input, gaussianNoise, gaussianDropout, alphaDropout, masking });
    exports_metrics = Object.freeze({ binaryAccuracy: binaryAccuracy$1, binaryCrossentropy: binaryCrossentropy$2, sparseCategoricalAccuracy: sparseCategoricalAccuracy$1, categoricalAccuracy: categoricalAccuracy$1, categoricalCrossentropy: categoricalCrossentropy$2, precision: precision$1, recall: recall$1, cosineProximity: cosineProximity$1, meanAbsoluteError: meanAbsoluteError$1, meanAbsolutePercentageError: meanAbsolutePercentageError$1, MAPE: MAPE$2, mape: mape$2, meanSquaredError: meanSquaredError$1, MSE: MSE$2, mse: mse$2 });
    exports_models = Object.freeze({ modelFromJSON });
    exports_regularizers = Object.freeze({ l1l2, l1: l1$1, l2: l2$1 });
    Callback = function(e2) {
      function t2() {
        var t3 = null !== e2 && e2.apply(this, arguments) || this;
        return t3.model = null, t3;
      }
      return __extends(t2, e2), t2.prototype.setModel = function(e3) {
        if (!(e3 instanceof LayersModel))
          throw new Error("model must be a LayersModel, not some other Container");
        this.model = e3;
      }, t2;
    }(BaseCallback);
    EarlyStopping = function(e2) {
      function t2(t3) {
        var n2 = e2.call(this) || this;
        if (null == t3 && (t3 = {}), t3.restoreBestWeights)
          throw new NotImplementedError("restoreBestWeights = True is not implemented in EarlyStopping yet.");
        return n2.monitor = t3.monitor || "val_loss", n2.minDelta = Math.abs(t3.minDelta || 0), n2.patience = t3.patience || 0, n2.verbose = t3.verbose || 0, n2.mode = t3.mode || "auto", n2.baseline = t3.baseline, -1 === ["auto", "min", "max"].indexOf(n2.mode) && (console.warn("EarlyStopping mode '" + n2.mode + "' is invalid. Falling back to mode 'auto'."), n2.mode = "auto"), "min" === n2.mode ? n2.monitorFunc = less : "max" === n2.mode ? n2.monitorFunc = greater$1 : -1 !== n2.monitor.indexOf("acc") ? n2.monitorFunc = greater$1 : n2.monitorFunc = less, n2.monitorFunc === less && (n2.minDelta *= -1), n2;
      }
      return __extends(t2, e2), t2.prototype.onTrainBegin = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return this.wait = 0, this.stoppedEpoch = 0, null != this.baseline ? this.best = this.baseline : this.best = this.monitorFunc === less ? 1 / 0 : -1 / 0, [2];
          });
        });
      }, t2.prototype.onEpochEnd = function(e3, t3) {
        return __awaiter(this, void 0, void 0, function() {
          var n2;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                return [4, resolveScalarsInLogs(t3)];
              case 1:
                return r2.sent(), null == (n2 = this.getMonitorValue(t3)) ? [2] : (this.monitorFunc(n2 - this.minDelta, this.best) ? (this.best = n2, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e3, this.model.stopTraining = true)), [2]);
            }
          });
        });
      }, t2.prototype.onTrainEnd = function(e3) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(e4) {
            return this.stoppedEpoch > 0 && this.verbose && console.log("Epoch " + this.stoppedEpoch + ": early stopping."), [2];
          });
        });
      }, t2.prototype.getMonitorValue = function(e3) {
        null == e3 && (e3 = {});
        var t3 = e3[this.monitor];
        return null == t3 && console.warn("Metric for EarlyStopping " + this.monitor + " is not available. Available metrics are: " + Object.keys(e3)), t3;
      }, t2;
    }(Callback);
    callbacks = { earlyStopping };
  }
});

// node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js
function __awaiter2(e2, t2, a2, r2) {
  return new (a2 || (a2 = Promise))(function(n2, s2) {
    function o2(e3) {
      try {
        u2(r2.next(e3));
      } catch (e4) {
        s2(e4);
      }
    }
    function p2(e3) {
      try {
        u2(r2.throw(e3));
      } catch (e4) {
        s2(e4);
      }
    }
    function u2(e3) {
      e3.done ? n2(e3.value) : new a2(function(t3) {
        t3(e3.value);
      }).then(o2, p2);
    }
    u2((r2 = r2.apply(e2, t2 || [])).next());
  });
}
function __generator2(e2, t2) {
  var a2, r2, n2, s2, o2 = { label: 0, sent: function() {
    if (1 & n2[0])
      throw n2[1];
    return n2[1];
  }, trys: [], ops: [] };
  return s2 = { next: p2(0), throw: p2(1), return: p2(2) }, "function" == typeof Symbol && (s2[Symbol.iterator] = function() {
    return this;
  }), s2;
  function p2(s3) {
    return function(p3) {
      return function(s4) {
        if (a2)
          throw new TypeError("Generator is already executing.");
        for (; o2; )
          try {
            if (a2 = 1, r2 && (n2 = 2 & s4[0] ? r2.return : s4[0] ? r2.throw || ((n2 = r2.return) && n2.call(r2), 0) : r2.next) && !(n2 = n2.call(r2, s4[1])).done)
              return n2;
            switch (r2 = 0, n2 && (s4 = [2 & s4[0], n2.value]), s4[0]) {
              case 0:
              case 1:
                n2 = s4;
                break;
              case 4:
                return o2.label++, { value: s4[1], done: false };
              case 5:
                o2.label++, r2 = s4[1], s4 = [0];
                continue;
              case 7:
                s4 = o2.ops.pop(), o2.trys.pop();
                continue;
              default:
                if (!(n2 = (n2 = o2.trys).length > 0 && n2[n2.length - 1]) && (6 === s4[0] || 2 === s4[0])) {
                  o2 = 0;
                  continue;
                }
                if (3 === s4[0] && (!n2 || s4[1] > n2[0] && s4[1] < n2[3])) {
                  o2.label = s4[1];
                  break;
                }
                if (6 === s4[0] && o2.label < n2[1]) {
                  o2.label = n2[1], n2 = s4;
                  break;
                }
                if (n2 && o2.label < n2[2]) {
                  o2.label = n2[2], o2.ops.push(s4);
                  break;
                }
                n2[2] && o2.ops.pop(), o2.trys.pop();
                continue;
            }
            s4 = t2.call(e2, o2);
          } catch (e3) {
            s4 = [6, e3], r2 = 0;
          } finally {
            a2 = n2 = 0;
          }
        if (5 & s4[0])
          throw s4[1];
        return { value: s4[0] ? s4[1] : void 0, done: true };
      }([s3, p3]);
    };
  }
}
function registerOp(e2, t2) {
  var a2 = { tfOpName: e2, category: "custom", inputs: [], attrs: [], customExecutor: t2 };
  CUSTOM_OPS[e2] = a2;
}
function getRegisteredOp(e2) {
  return CUSTOM_OPS[e2];
}
function deregisterOp(e2) {
  delete CUSTOM_OPS[e2];
}
function getParamValue(e2, t2, a2, r2) {
  var n2 = t2.inputParams[e2];
  if (n2 && void 0 !== n2.inputIndexStart) {
    var s2 = n2.inputIndexStart, o2 = 0 === n2.inputIndexEnd ? void 0 : void 0 === n2.inputIndexEnd ? s2 + 1 : n2.inputIndexEnd;
    if ("tensor" === n2.type)
      return getTensor(t2.inputNames[n2.inputIndexStart], a2, r2);
    if ("tensors" === n2.type)
      return t2.inputNames.slice(s2, o2).map(function(e3) {
        return getTensor(e3, a2, r2);
      });
    var p2 = Array.prototype.slice.call(getTensor(t2.inputNames.slice(s2)[0], a2, r2).dataSync());
    return "number" === n2.type ? p2[0] : p2;
  }
  var u2 = t2.attrParams[e2];
  return u2 && u2.value;
}
function getTensor(e2, t2, a2) {
  var r2 = parseNodeName(e2), n2 = r2[0], s2 = r2[1], o2 = a2.currentContextIds.find(function(e3) {
    return !!t2[getNodeNameWithContextId(n2, e3)];
  });
  return void 0 !== o2 ? t2[getNodeNameWithContextId(n2, o2)][s2] : void 0;
}
function getTensorsForCurrentContenxt(e2, t2, a2) {
  return t2[getNodeNameWithContextId(e2, a2.currentContextId)];
}
function getNodeNameAndIndex(e2, t2) {
  var a2 = parseNodeName(e2), r2 = a2[0], n2 = a2[1];
  return [getNodeNameWithContextId(r2, t2 && t2.currentContextId), n2];
}
function getNodeNameWithContextId(e2, t2) {
  return t2 ? e2 + "-" + t2 : e2;
}
function parseNodeName(e2) {
  var t2 = e2.lastIndexOf(":");
  return -1 === t2 ? [e2, 0] : [e2.substring(0, t2), Number(e2.substring(t2 + 1))];
}
function split$1(e2, t2) {
  for (var a2 = [], r2 = 0; r2 < e2.length; r2 += t2)
    a2.push(e2.slice(r2, r2 + t2));
  return a2;
}
function decodeBase64(e2) {
  var t2 = a().global;
  if (void 0 !== t2.atob)
    return t2.atob(e2);
  if ("undefined" != typeof Buffer)
    return new Buffer(e2, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function parseStringParam(e2, t2) {
  var a2 = Array.isArray(e2) ? String.fromCharCode.apply(null, e2) : decodeBase64(e2);
  return t2 ? a2 : a2.toLowerCase();
}
function getStringParam(e2, t2, a2, r2) {
  void 0 === r2 && (r2 = false);
  var n2 = e2[t2];
  return null != n2 ? parseStringParam(n2.s, r2) : a2;
}
function getBoolParam(e2, t2, a2) {
  var r2 = e2[t2];
  return r2 ? r2.b : a2;
}
function getNumberParam(e2, t2, a2) {
  var r2 = e2[t2] || {}, n2 = null != r2.i ? r2.i : null != r2.f ? r2.f : a2;
  return "number" == typeof n2 ? n2 : parseInt(n2, 10);
}
function parseDtypeParam(e2) {
  switch ("string" == typeof e2 && (e2 = DataType[e2]), e2) {
    case DataType.DT_FLOAT:
      return "float32";
    case DataType.DT_INT32:
    case DataType.DT_INT64:
      return "int32";
    case DataType.DT_BOOL:
      return "bool";
    case DataType.DT_DOUBLE:
      return "float32";
    case DataType.DT_STRING:
      return "string";
    default:
      return null;
  }
}
function getDtypeParam(e2, t2, a2) {
  var r2 = e2[t2];
  return r2 && r2.type ? parseDtypeParam(r2.type) : a2;
}
function getDtypeArrayParam(e2, t2, a2) {
  var r2 = e2[t2];
  return r2 && r2.list && r2.list.type ? r2.list.type.map(function(e3) {
    return parseDtypeParam(e3);
  }) : a2;
}
function parseTensorShapeParam(e2) {
  if (!e2.unknownRank)
    return null != e2.dim ? e2.dim.map(function(e3) {
      return "number" == typeof e3.size ? e3.size : parseInt(e3.size, 10);
    }) : [];
}
function getTensorShapeParam(e2, t2, a2) {
  var r2 = e2[t2];
  return r2 && r2.shape ? parseTensorShapeParam(r2.shape) : a2;
}
function getNumericArrayParam(e2, t2, a2) {
  var r2 = e2[t2];
  return r2 ? ((r2.list.f && r2.list.f.length ? r2.list.f : r2.list.i) || []).map(function(e3) {
    return "number" == typeof e3 ? e3 : parseInt(e3, 10);
  }) : a2;
}
function getStringArrayParam(e2, t2, a2, r2) {
  void 0 === r2 && (r2 = false);
  var n2 = e2[t2];
  return n2 && n2.list && n2.list.s ? n2.list.s.map(function(e3) {
    return parseStringParam(e3, r2);
  }) : a2;
}
function getTensorShapeArrayParam(e2, t2, a2) {
  var r2 = e2[t2];
  return r2 && r2.list && r2.list.shape ? r2.list.shape.map(function(e3) {
    return parseTensorShapeParam(e3);
  }) : a2;
}
function getBoolArrayParam(e2, t2, a2) {
  var r2 = e2[t2];
  return r2 && r2.list && r2.list.b ? r2.list.b : a2;
}
function executeOp$2(e2, t2, a2) {
  return __awaiter2(this, void 0, void 0, function() {
    var r2, n2, s2, o2, p2, u2, i2, m2, l3, c2, d2, y2, f2, g2, h2, N2, x2, V2, P2, b2, T2, O2, S2, v2, _2, w2, A2, D2, E2, I2, C2, M2, k2, z2, j2;
    return __generator2(this, function(F2) {
      switch (F2.label) {
        case 0:
          switch (e2.op) {
            case "LoopCond":
              return [3, 1];
            case "Switch":
              return [3, 2];
            case "Merge":
              return [3, 4];
            case "Enter":
              return [3, 5];
            case "Exit":
              return [3, 6];
            case "NextIteration":
              return [3, 7];
            case "TensorArrayV3":
              return [3, 8];
            case "TensorArrayWriteV3":
              return [3, 9];
            case "TensorArrayReadV3":
              return [3, 10];
            case "TensorArrayGatherV3":
              return [3, 11];
            case "TensorArrayScatterV3":
              return [3, 12];
            case "TensorArrayConcatV3":
              return [3, 13];
            case "TensorArraySplitV3":
              return [3, 14];
            case "TensorArraySizeV3":
              return [3, 15];
            case "TensorArrayCloseV3":
              return [3, 16];
          }
          return [3, 17];
        case 1:
          return [2, [getParamValue("pred", e2, t2, a2).clone()]];
        case 2:
          return r2 = getParamValue("pred", e2, t2, a2), n2 = getParamValue("data", e2, t2, a2), [4, r2.data()];
        case 3:
          return [2, F2.sent()[0] ? [void 0, n2.clone()] : [n2.clone(), void 0]];
        case 4:
          return [2, (s2 = e2.inputNames.find(function(e3) {
            return void 0 !== getTensor(e3, t2, a2);
          })) ? [getTensor(s2, t2, a2).clone()] : void 0];
        case 5:
          return o2 = getParamValue("frameName", e2, t2, a2), p2 = getParamValue("tensor", e2, t2, a2), a2.enterFrame(o2), [2, [p2.clone()]];
        case 6:
          return u2 = getParamValue("tensor", e2, t2, a2), a2.exitFrame(), [2, [u2.clone()]];
        case 7:
          return i2 = getParamValue("tensor", e2, t2, a2), a2.nextIteration(), [2, [i2.clone()]];
        case 8:
          return m2 = getParamValue("size", e2, t2, a2), l3 = getParamValue("dtype", e2, t2, a2), c2 = getParamValue("elementShape", e2, t2, a2), d2 = getParamValue("dynamicSize", e2, t2, a2), y2 = getParamValue("clearAfterRead", e2, t2, a2), f2 = getParamValue("identicalElementShapes", e2, t2, a2), g2 = getParamValue("name", e2, t2, a2), h2 = new TensorArray(g2, l3, m2, c2, f2, d2, y2), a2.addTensorArray(h2), [2, [An(h2.id), An(1)]];
        case 9:
          return N2 = getParamValue("tensorArrayId", e2, t2, a2), x2 = getParamValue("index", e2, t2, a2), V2 = getParamValue("tensor", e2, t2, a2), a2.getTensorArray(N2).write(x2, V2), [2, [An(1)]];
        case 10:
          return P2 = getParamValue("tensorArrayId", e2, t2, a2), b2 = getParamValue("index", e2, t2, a2), [2, [a2.getTensorArray(P2).read(b2)]];
        case 11:
          return T2 = getParamValue("tensorArrayId", e2, t2, a2), O2 = getParamValue("indices", e2, t2, a2), S2 = getParamValue("dtype", e2, t2, a2), [2, [a2.getTensorArray(T2).gather(O2, S2)]];
        case 12:
          return v2 = getParamValue("tensorArrayId", e2, t2, a2), _2 = getParamValue("indices", e2, t2, a2), w2 = getParamValue("tensor", e2, t2, a2), a2.getTensorArray(v2).scatter(_2, w2), [2, [An(1)]];
        case 13:
          return A2 = getParamValue("tensorArrayId", e2, t2, a2), D2 = a2.getTensorArray(A2), E2 = getParamValue("dtype", e2, t2, a2), [2, [D2.concat(E2)]];
        case 14:
          return I2 = getParamValue("tensorArrayId", e2, t2, a2), C2 = getParamValue("tensor", e2, t2, a2), M2 = getParamValue("lengths", e2, t2, a2), a2.getTensorArray(I2).split(M2, C2), [2, [An(1)]];
        case 15:
          return k2 = getParamValue("tensorArrayId", e2, t2, a2), z2 = a2.getTensorArray(k2), [2, [An(z2.size(), "int32")]];
        case 16:
          return j2 = getParamValue("tensorArrayId", e2, t2, a2), a2.getTensorArray(j2).clearAndClose(), [2, []];
        case 17:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    });
  });
}
function executeOp$5(e2, t2, a2) {
  return __awaiter2(this, void 0, void 0, function() {
    var r2, n2, s2, o2, p2;
    return __generator2(this, function(u2) {
      switch (u2.label) {
        case 0:
          switch (e2.op) {
            case "NonMaxSuppressionV3":
            case "NonMaxSuppressionV2":
              return [3, 1];
            case "Where":
              return [3, 3];
            case "ListDiff":
              return [3, 5];
          }
          return [3, 6];
        case 1:
          return r2 = getParamValue("boxes", e2, t2, a2), n2 = getParamValue("scores", e2, t2, a2), s2 = getParamValue("maxOutputSize", e2, t2, a2), o2 = getParamValue("iouThreshold", e2, t2, a2), p2 = getParamValue("scoreThreshold", e2, t2, a2), [4, vh.nonMaxSuppressionAsync(r2, n2, s2, o2, p2)];
        case 2:
          return [2, [u2.sent()]];
        case 3:
          return [4, Us(getParamValue("condition", e2, t2, a2).asType("bool"))];
        case 4:
          return [2, [u2.sent()]];
        case 5:
          return [2, _r(getParamValue("x", e2, t2, a2), getParamValue("y", e2, t2, a2))];
        case 6:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    });
  });
}
function executeOp$16(e2, t2, a2) {
  var r2 = function(e3, t3, a3) {
    switch (e3.category) {
      case "arithmetic":
        return executeOp(e3, t3, a3);
      case "basic_math":
        return executeOp$1(e3, t3, a3);
      case "control":
        return executeOp$2(e3, t3, a3);
      case "convolution":
        return executeOp$3(e3, t3, a3);
      case "creation":
        return executeOp$4(e3, t3, a3);
      case "dynamic":
        return executeOp$5(e3, t3, a3);
      case "evaluation":
        return executeOp$6(e3, t3, a3);
      case "image":
        return executeOp$8(e3, t3, a3);
      case "graph":
        return executeOp$7(e3, t3, a3);
      case "logical":
        return executeOp$9(e3, t3, a3);
      case "matrices":
        return executeOp$10(e3, t3, a3);
      case "normalization":
        return executeOp$11(e3, t3, a3);
      case "reduction":
        return executeOp$12(e3, t3, a3);
      case "slice_join":
        return executeOp$13(e3, t3, a3);
      case "spectral":
        return executeOp$14(e3, t3, a3);
      case "transformation":
        return executeOp$15(e3, t3, a3);
      case "custom":
        var r3 = getRegisteredOp(e3.op);
        if (r3 && r3.customExecutor)
          return r3.customExecutor(new NodeValueImpl(e3, t3, a3));
        throw TypeError("Custom op " + e3.op + " is not registered.");
      default:
        throw TypeError("Unknown op '" + e3.op + "'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()");
    }
  }(e2, t2, a2);
  return r2 instanceof Promise ? r2.then(function(e3) {
    return [].concat(e3);
  }) : [].concat(r2);
}
function getExecutionSubgraph(e2, t2, a2) {
  for (var r2 = /* @__PURE__ */ new Set(), n2 = [], s2 = null, o2 = null, p2 = /* @__PURE__ */ new Set(), u2 = t2.slice(); u2.length > 0; ) {
    var i2 = u2.pop();
    (isControlFlow(i2) || isDynamicShape(i2)) && null == s2 && (o2 = (s2 = i2).children.map(function(e3) {
      return e3.name;
    }).filter(function(e3) {
      return r2.has(e3);
    })), r2.add(i2.name), null == a2[i2.name] && (null == e2[i2.name] && (0 !== i2.inputs.length ? i2.inputs.forEach(function(e3) {
      p2.has(e3.name) || (p2.add(e3.name), u2.push(e3));
    }) : n2.push(i2.name)));
  }
  return { inputs: e2, outputs: t2, usedNodes: r2, missingInputs: n2, dynamicNode: s2, syncInputs: o2 };
}
function getNodesInTopologicalOrder(e2, t2, a2) {
  var r2 = a2.usedNodes, n2 = a2.inputs, s2 = [];
  Object.keys(n2).map(function(t3) {
    return e2.nodes[t3];
  }).forEach(function(e3) {
    r2.has(e3.name) && s2.push(e3);
  }), e2.weights.forEach(function(e3) {
    r2.has(e3.name) && s2.push(e3);
  });
  for (var o2 = /* @__PURE__ */ new Set(), p2 = []; s2.length > 0; ) {
    var u2 = s2.pop();
    o2.add(u2.name), t2[u2.name] || p2.push(u2), u2.children.forEach(function(e3) {
      !o2.has(e3.name) && r2.has(e3.name) && e3.inputs.every(function(e4) {
        return o2.has(e4.name);
      }) && s2.push(e3);
    });
  }
  return p2;
}
function isControlFlow(e2) {
  return CONTROL_FLOW_OPS.indexOf(e2.op) >= 0;
}
function isDynamicShape(e2) {
  return DYNAMIC_SHAPE_OPS.indexOf(e2.op) >= 0;
}
function loadGraphModel(e2, t2) {
  return void 0 === t2 && (t2 = {}), __awaiter2(this, void 0, void 0, function() {
    var a2;
    return __generator2(this, function(r2) {
      switch (r2.label) {
        case 0:
          if (null == e2)
            throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
          return null == t2 && (t2 = {}), t2.fromTFHub && null == e2.load && (e2.endsWith("/") || (e2 += "/"), e2 = "" + e2 + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM), [4, (a2 = new GraphModel(e2, t2)).load()];
        case 1:
          return r2.sent(), [2, a2];
      }
    });
  });
}
var DataType, SaverDef, __assign2, CUSTOM_OPS, json, arithmetic, json$1, basicMath, json$2, control, json$3, convolution, json$4, creation, json$5, dynamic, json$6, evaluation, json$7, graph, json$8, image$1, json$9, logical, json$10, matrices, json$11, normalization, json$12, reduction, json$13, sliceJoin, json$14, spectral, json$15, transformation, OperationMapper, NodeValueImpl, executeOp, executeOp$1, TensorArray, executeOp$3, executeOp$4, executeOp$6, executeOp$7, executeOp$8, executeOp$9, executeOp$10, executeOp$11, executeOp$12, executeOp$13, executeOp$14, executeOp$15, ExecutionContext, CONTROL_FLOW_OPS, DYNAMIC_SHAPE_OPS, GraphExecutor, TFHUB_SEARCH_PARAM, DEFAULT_MODEL_NAME, GraphModel, version2;
var init_tf_converter_esm = __esm({
  "node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js"() {
    init_tf_core_esm();
    __assign2 = function() {
      return (__assign2 = Object.assign || function(e2) {
        for (var t2, a2 = 1, r2 = arguments.length; a2 < r2; a2++)
          for (var n2 in t2 = arguments[a2])
            Object.prototype.hasOwnProperty.call(t2, n2) && (e2[n2] = t2[n2]);
        return e2;
      }).apply(this, arguments);
    };
    !function(e2) {
      e2[e2.DT_INVALID = 0] = "DT_INVALID", e2[e2.DT_FLOAT = 1] = "DT_FLOAT", e2[e2.DT_DOUBLE = 2] = "DT_DOUBLE", e2[e2.DT_INT32 = 3] = "DT_INT32", e2[e2.DT_UINT8 = 4] = "DT_UINT8", e2[e2.DT_INT16 = 5] = "DT_INT16", e2[e2.DT_INT8 = 6] = "DT_INT8", e2[e2.DT_STRING = 7] = "DT_STRING", e2[e2.DT_COMPLEX64 = 8] = "DT_COMPLEX64", e2[e2.DT_INT64 = 9] = "DT_INT64", e2[e2.DT_BOOL = 10] = "DT_BOOL", e2[e2.DT_QINT8 = 11] = "DT_QINT8", e2[e2.DT_QUINT8 = 12] = "DT_QUINT8", e2[e2.DT_QINT32 = 13] = "DT_QINT32", e2[e2.DT_BFLOAT16 = 14] = "DT_BFLOAT16", e2[e2.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", e2[e2.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", e2[e2.DT_INT32_REF = 103] = "DT_INT32_REF", e2[e2.DT_UINT8_REF = 104] = "DT_UINT8_REF", e2[e2.DT_INT16_REF = 105] = "DT_INT16_REF", e2[e2.DT_INT8_REF = 106] = "DT_INT8_REF", e2[e2.DT_STRING_REF = 107] = "DT_STRING_REF", e2[e2.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", e2[e2.DT_INT64_REF = 109] = "DT_INT64_REF", e2[e2.DT_BOOL_REF = 110] = "DT_BOOL_REF", e2[e2.DT_QINT8_REF = 111] = "DT_QINT8_REF", e2[e2.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", e2[e2.DT_QINT32_REF = 113] = "DT_QINT32_REF", e2[e2.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF";
    }(DataType || (DataType = {})), function(e2) {
      !function(e3) {
        e3[e3.LEGACY = 0] = "LEGACY", e3[e3.V1 = 1] = "V1", e3[e3.V2 = 2] = "V2";
      }(e2.CheckpointFormatVersion || (e2.CheckpointFormatVersion = {}));
    }(SaverDef || (SaverDef = {}));
    CUSTOM_OPS = {};
    json = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
    arithmetic = Object.freeze({ json });
    json$1 = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "clip_value_min", name: "clipValueMin", type: "number" }, { tfName: "clip_value_max", name: "clipValueMax", type: "number" }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "clipValueMin", name: "clipValueMin", type: "number", defaultValue: 0 }, { tfName: "clipValueMax", name: "clipValueMax", type: "number", defaultValue: 6 }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Prod", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axes", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
    basicMath = Object.freeze({ json: json$1 });
    json$2 = [{ tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: true }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }] }];
    control = Object.freeze({ json: json$2 });
    json$3 = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: true }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }];
    convolution = Object.freeze({ json: json$3 });
    json$4 = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }];
    creation = Object.freeze({ json: json$4 });
    json$5 = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
    dynamic = Object.freeze({ json: json$5 });
    json$6 = [{ tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }];
    evaluation = Object.freeze({ json: json$6 });
    json$7 = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: true }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }];
    graph = Object.freeze({ json: json$7 });
    json$8 = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }];
    image$1 = Object.freeze({ json: json$8 });
    json$9 = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
    logical = Object.freeze({ json: json$9 });
    json$10 = [{ tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
    matrices = Object.freeze({ json: json$10 });
    json$11 = [{ tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "normalization", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: true, notSupported: true }] }];
    normalization = Object.freeze({ json: json$11 });
    json$12 = [{ tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }];
    reduction = Object.freeze({ json: json$12 });
    json$13 = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: true }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool", notSupported: true }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: false, notSupported: true }] }];
    sliceJoin = Object.freeze({ json: json$13 });
    json$14 = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }];
    spectral = Object.freeze({ json: json$14 });
    json$15 = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: true }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }];
    transformation = Object.freeze({ json: json$15 });
    OperationMapper = function() {
      function e2() {
        var e3 = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image$1, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation], t2 = [].concat.apply([], e3.map(function(e4) {
          return e4.json;
        }));
        this.opMappers = t2.reduce(function(e4, t3) {
          return e4[t3.tfOpName] = t3, e4;
        }, {});
      }
      return Object.defineProperty(e2, "Instance", { get: function() {
        return this._instance || (this._instance = new this());
      }, enumerable: true, configurable: true }), e2.prototype.transformGraph = function(e3) {
        var t2 = this, a2 = [], r2 = [], n2 = e3.node.reduce(function(e4, n3) {
          return e4[n3.name] = t2.mapNode(n3), "Placeholder" === n3.op && a2.push(e4[n3.name]), "Const" === n3.op && r2.push(e4[n3.name]), e4;
        }, {}), s2 = [], o2 = [], p2 = Object.keys(n2);
        return p2.forEach(function(e4) {
          var t3 = n2[e4];
          t3.inputNames.forEach(function(e5) {
            var a3 = getNodeNameAndIndex(e5)[0];
            t3.inputs.push(n2[a3]), n2[a3].children.push(t3);
          }), 0 === t3.inputs.length && s2.push(t3);
        }), p2.forEach(function(e4) {
          var t3 = n2[e4];
          0 === t3.children.length && o2.push(t3);
        }), { nodes: n2, inputs: s2, outputs: o2, weights: r2, placeholders: a2 };
      }, e2.prototype.mapNode = function(e3) {
        var t2 = getRegisteredOp(e3.op) || this.opMappers[e3.op] || {};
        null == e3.attr && (e3.attr = {});
        var a2 = { name: e3.name, op: e3.op, category: t2.category, inputNames: (e3.input || []).map(function(e4) {
          return e4.startsWith("^") ? e4.substr(1) : e4;
        }), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: e3.attr };
        return null != t2.inputs && (a2.inputParams = t2.inputs.reduce(function(e4, t3) {
          return e4[t3.name] = { type: t3.type, inputIndexStart: t3.start, inputIndexEnd: t3.end }, e4;
        }, {})), null != t2.attrs && (a2.attrParams = t2.attrs.reduce(function(t3, a3) {
          var r2 = a3.type, n2 = void 0;
          switch (a3.type) {
            case "string":
              void 0 === (n2 = getStringParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getStringParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "string[]":
              void 0 === (n2 = getStringArrayParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getStringArrayParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "number":
              void 0 === (n2 = getNumberParam(e3.attr, a3.tfName, a3.defaultValue || 0)) && a3.tfDeprecatedName && (n2 = getNumberParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "number[]":
              void 0 === (n2 = getNumericArrayParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getNumericArrayParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "bool":
              void 0 === (n2 = getBoolParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getBoolParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "bool[]":
              void 0 === (n2 = getBoolArrayParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getBoolArrayParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "shape":
              void 0 === (n2 = getTensorShapeParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getTensorShapeParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "shape[]":
              void 0 === (n2 = getTensorShapeArrayParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getTensorShapeArrayParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "dtype":
              void 0 === (n2 = getDtypeParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getDtypeParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "dtype[]":
              void 0 === (n2 = getDtypeArrayParam(e3.attr, a3.tfName, a3.defaultValue)) && a3.tfDeprecatedName && (n2 = getDtypeArrayParam(e3.attr, a3.tfDeprecatedName, a3.defaultValue));
              break;
            case "tensor":
            case "tensors":
              break;
            default:
              throw new Error("Unsupported param type: " + a3.type + " for op: " + e3.op);
          }
          return t3[a3.name] = { value: n2, type: r2 }, t3;
        }, {})), a2;
      }, e2;
    }();
    NodeValueImpl = function() {
      function e2(e3, t2, a2) {
        var r2 = this;
        this.node = e3, this.tensorMap = t2, this.context = a2, this.inputs = [], this.attrs = {}, this.inputs = e3.inputNames.map(function(e4) {
          return r2.getInput(e4);
        }), null != e3.rawAttrs && (this.attrs = Object.keys(e3.rawAttrs).reduce(function(e4, t3) {
          return e4[t3] = r2.getAttr(t3), e4;
        }, {}));
      }
      return e2.prototype.getInput = function(e3) {
        return getTensor(e3, this.tensorMap, this.context);
      }, e2.prototype.getAttr = function(e3, t2) {
        var a2 = this.node.rawAttrs[e3];
        if (null != a2.tensor)
          return getTensor(e3, this.tensorMap, this.context);
        if (null != a2.i || null != a2.f)
          return getNumberParam(this.node.rawAttrs, e3, t2);
        if (null != a2.s)
          return getStringParam(this.node.rawAttrs, e3, t2);
        if (null != a2.b)
          return getBoolParam(this.node.rawAttrs, e3, t2);
        if (null != a2.shape)
          return getTensorShapeParam(this.node.rawAttrs, e3, t2);
        if (null != a2.type)
          return getDtypeParam(this.node.rawAttrs, e3, t2);
        if (null != a2.list) {
          if (null != a2.list.i || null != a2.list.f)
            return getNumericArrayParam(this.node.rawAttrs, e3, t2);
          if (null != a2.list.s)
            return getStringArrayParam(this.node.rawAttrs, e3, t2);
          if (null != a2.list.shape)
            return getTensorShapeArrayParam(this.node.rawAttrs, e3, t2);
          if (null != a2.list.b)
            return getBoolArrayParam(this.node.rawAttrs, e3, t2);
          if (null != a2.list.type)
            return getDtypeArrayParam(this.node.rawAttrs, e3, t2);
        }
        return t2;
      }, e2;
    }();
    executeOp = function(e2, t2, a2) {
      switch (e2.op) {
        case "BiasAdd":
        case "AddV2":
        case "Add":
          return [Vs(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "AddN":
          return [zs(getParamValue("tensors", e2, t2, a2))];
        case "FloorMod":
        case "Mod":
          return [Js(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Mul":
          return [tc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "RealDiv":
        case "Div":
          return [qs(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "FloorDiv":
          return [js(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Sub":
          return [ic(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Minimum":
          return [Ys(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Maximum":
          return [Xs(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Pow":
          return [nc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "SquaredDifference":
          return [oc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$1 = function(e2, t2, a2) {
      switch (e2.op) {
        case "Abs":
        case "ComplexAbs":
          return [Vu(getParamValue("x", e2, t2, a2))];
        case "Acos":
          return [zu(getParamValue("x", e2, t2, a2))];
        case "Acosh":
          return [Gu(getParamValue("x", e2, t2, a2))];
        case "Asin":
          return [Hu(getParamValue("x", e2, t2, a2))];
        case "Asinh":
          return [qu(getParamValue("x", e2, t2, a2))];
        case "Atan":
          return [Ku(getParamValue("x", e2, t2, a2))];
        case "Atan2":
          return [Hs(getParamValue("x", e2, t2, a2), getParamValue("y", e2, t2, a2))];
        case "Atanh":
          return [ju(getParamValue("x", e2, t2, a2))];
        case "Ceil":
          return [Xu(getParamValue("x", e2, t2, a2))];
        case "Complex":
          return [En(getParamValue("real", e2, t2, a2), getParamValue("imag", e2, t2, a2))];
        case "Cos":
          return [Yu(getParamValue("x", e2, t2, a2))];
        case "Cosh":
          return [Qu(getParamValue("x", e2, t2, a2))];
        case "Elu":
          return [gl(getParamValue("x", e2, t2, a2))];
        case "Erf":
          return [Ju(getParamValue("x", e2, t2, a2))];
        case "Exp":
          return [Zu(getParamValue("x", e2, t2, a2))];
        case "Expm1":
          return [ts(getParamValue("x", e2, t2, a2))];
        case "Floor":
          return [es(getParamValue("x", e2, t2, a2))];
        case "Log":
          return [ns(getParamValue("x", e2, t2, a2))];
        case "Log1p":
          return [rs(getParamValue("x", e2, t2, a2))];
        case "Imag":
          return [In(getParamValue("x", e2, t2, a2))];
        case "Neg":
          return [as(getParamValue("x", e2, t2, a2))];
        case "Reciprocal":
          return [is(getParamValue("x", e2, t2, a2))];
        case "Real":
          return [Rn(getParamValue("x", e2, t2, a2))];
        case "Relu":
          return [bl(getParamValue("x", e2, t2, a2))];
        case "Round":
          return [us(getParamValue("x", e2, t2, a2))];
        case "Selu":
          return [Cl(getParamValue("x", e2, t2, a2))];
        case "Sigmoid":
          return [cs(getParamValue("x", e2, t2, a2))];
        case "Sin":
          return [ds(getParamValue("x", e2, t2, a2))];
        case "Sign":
          return [ls(getParamValue("x", e2, t2, a2))];
        case "Sinh":
          return [vs(getParamValue("x", e2, t2, a2))];
        case "Softplus":
          return [ms(getParamValue("x", e2, t2, a2))];
        case "Sqrt":
          return [gs(getParamValue("x", e2, t2, a2))];
        case "Square":
          return [Uu(getParamValue("x", e2, t2, a2))];
        case "Tanh":
          return [bs(getParamValue("x", e2, t2, a2))];
        case "Tan":
          return [xs(getParamValue("x", e2, t2, a2))];
        case "Relu6":
        case "ClipByValue":
          return [$u(getParamValue("x", e2, t2, a2), getParamValue("clipValueMin", e2, t2, a2), getParamValue("clipValueMax", e2, t2, a2))];
        case "Rsqrt":
          return [ss(getTensor(e2.inputNames[0], t2, a2))];
        case "Prod":
          return [ml(getParamValue("x", e2, t2, a2), getParamValue("axes", e2, t2, a2))];
        case "LeakyRelu":
          return [yl(getParamValue("x", e2, t2, a2), getParamValue("alpha", e2, t2, a2))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    TensorArray = function() {
      function e2(t2, a2, r2, n2, s2, o2, p2) {
        this.name = t2, this.dtype = a2, this.maxSize = r2, this.elementShape = n2, this.identicalElementShapes = s2, this.dynamicSize = o2, this.clearAfterRead = p2, this.tensors = [], this.closed_ = false, this.id = e2.nextId++;
      }
      return Object.defineProperty(e2.prototype, "closed", { get: function() {
        return this.closed_;
      }, enumerable: true, configurable: true }), e2.prototype.clearAndClose = function() {
        this.tensors.forEach(function(e3) {
          return e3.tensor.dispose();
        }), this.tensors = [], this.closed_ = true;
      }, e2.prototype.size = function() {
        return this.tensors.length;
      }, e2.prototype.read = function(e3) {
        if (this.closed_)
          throw new Error("TensorArray " + this.name + " has already been closed.");
        if (e3 < 0 || e3 >= this.tensors.length)
          throw new Error("Tried to read from index " + e3 + ", but array size is: " + this.tensors.length);
        var t2 = this.tensors[e3];
        if (t2.cleared)
          throw new Error("TensorArray " + this.name + ": Could not read index " + e3 + " twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");
        return this.clearAfterRead && (t2.cleared = true), t2.read = true, t2.tensor;
      }, e2.prototype.readMany = function(e3) {
        var t2 = this;
        return e3.map(function(e4) {
          return t2.read(e4);
        });
      }, e2.prototype.write = function(e3, t2) {
        if (this.closed_)
          throw new Error("TensorArray " + this.name + " has already been closed.");
        if (e3 < 0 || !this.dynamicSize && e3 >= this.maxSize)
          throw new Error("Tried to write to index " + e3 + ", but array is not resizeable and size is: " + this.maxSize);
        var a2 = this.tensors[e3] || {};
        if (t2.dtype !== this.dtype)
          throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e3 + ",\n          because the value dtype is " + t2.dtype + ", but TensorArray dtype is " + this.dtype + ".");
        if (0 !== this.size() || null != this.elementShape && 0 !== this.elementShape.length || (this.elementShape = t2.shape), this.assertShapesMatchAllowUndefinedSize(this.elementShape, t2.shape, "TensorArray " + this.name + ": Could not write to TensorArray index " + e3 + "."), a2 && a2.read)
          throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e3 + ", because it has already been read.");
        if (a2 && a2.written)
          throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e3 + ", because it has already been written.");
        a2.tensor = t2, a2.written = true, this.tensors[e3] = a2;
      }, e2.prototype.writeMany = function(e3, t2) {
        var a2 = this;
        if (e3.length !== t2.length)
          throw new Error("TensorArray " + this.name + ": could not write multiple tensors,because the index size: " + e3.length + " is not the same as tensors size: " + t2.length + ".");
        e3.forEach(function(e4, r2) {
          return a2.write(e4, t2[r2]);
        });
      }, e2.prototype.gather = function(e3, t2) {
        if (t2 && t2 !== this.dtype)
          throw new Error("TensorArray dtype is " + this.dtype + " but gather requested dtype " + t2);
        if (!e3) {
          e3 = [];
          for (var a2 = 0; a2 < this.size(); a2++)
            e3.push(a2);
        }
        if (0 === e3.length)
          return kn([], [0].concat(this.elementShape));
        var r2 = this.readMany(e3);
        return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r2[0].shape, "TensorArray shape mismatch: "), Tr(r2, 0);
      }, e2.prototype.concat = function(e3) {
        if (e3 && e3 !== this.dtype)
          throw new Error("TensorArray dtype is " + this.dtype + " but concat requested dtype " + e3);
        if (0 === this.size())
          return kn([], [0].concat(this.elementShape));
        for (var t2 = [], a2 = 0; a2 < this.size(); a2++)
          t2.push(a2);
        var r2 = this.readMany(t2);
        return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r2[0].shape, "TensorArray shape mismatch: tensor array shape (" + this.elementShape + ") vs first tensor shape (" + r2[0].shape + ")"), Gn(r2, 0);
      }, e2.prototype.scatter = function(e3, t2) {
        if (t2.dtype !== this.dtype)
          throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t2.dtype);
        if (e3.length !== t2.shape[0])
          throw new Error("Expected len(indices) == tensor.shape[0], but saw: " + e3.length + " vs. " + t2.shape[0]);
        var a2 = Math.max.apply(Math, e3);
        if (!this.dynamicSize && a2 >= this.maxSize)
          throw new Error("Max index must be < array size (" + a2 + "  vs. " + this.maxSize + ")");
        this.writeMany(e3, Or(t2, 0));
      }, e2.prototype.split = function(e3, t2) {
        var a2 = this;
        if (t2.dtype !== this.dtype)
          throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t2.dtype);
        var r2 = 0, n2 = e3.map(function(e4) {
          return r2 += e4;
        });
        if (r2 !== t2.shape[0])
          throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        " + r2 + ", and tensor's shape is: " + t2.shape);
        if (!this.dynamicSize && e3.length !== this.maxSize)
          throw new Error("TensorArray's size is not equal to the size of lengths (" + this.maxSize + " vs. " + e3.length + "), and the TensorArray is not marked as dynamically resizeable");
        var s2 = 0 === r2 ? 0 : t2.size / r2, o2 = [];
        je(function() {
          t2 = t2.reshape([1, r2, s2]);
          for (var p3 = 0; p3 < e3.length; ++p3) {
            var u3 = [0, 0 === p3 ? 0 : n2[p3 - 1], 0], i2 = [1, e3[p3], s2];
            o2[p3] = tl(t2, u3, i2).reshape(a2.elementShape);
          }
          return o2;
        });
        for (var p2 = [], u2 = 0; u2 < e3.length; u2++)
          p2[u2] = u2;
        this.writeMany(p2, o2);
      }, e2.prototype.assertShapesMatchAllowUndefinedSize = function(e3, t2, a2) {
        void 0 === a2 && (a2 = ""), tt.assert(this.shapesEqualAllowUndefinedSize(e3, t2), function() {
          return a2 + " Shapes " + e3 + " and " + t2 + " must match";
        });
      }, e2.prototype.shapesEqualAllowUndefinedSize = function(e3, t2) {
        if (e3.length !== t2.length)
          return false;
        for (var a2 = 0; a2 < e3.length; a2++)
          if (-1 !== e3[a2] && -1 !== t2[a2] && e3[a2] !== t2[a2])
            return false;
        return true;
      }, e2.nextId = 0, e2;
    }();
    executeOp$3 = function(e2, t2, a2) {
      var r2, n2;
      switch (e2.op) {
        case "Conv1D":
          var s2 = getParamValue("stride", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), p2 = getParamValue("dataFormat", e2, t2, a2).toUpperCase(), u2 = getParamValue("dilation", e2, t2, a2);
          return [Ac(getParamValue("x", e2, t2, a2), getParamValue("filter", e2, t2, a2), s2, o2, p2, u2)];
        case "Conv2D":
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), p2 = getParamValue("dataFormat", e2, t2, a2).toUpperCase();
          var i2 = getParamValue("dilations", e2, t2, a2);
          return [Dc(getParamValue("x", e2, t2, a2), getParamValue("filter", e2, t2, a2), [s2[1], s2[2]], o2, p2, [i2[1], i2[2]])];
        case "_FusedConv2D":
          var m2 = (r2 = getParamValue("fusedOps", e2, t2, a2))[0], l3 = r2[1], c2 = "biasadd" === m2, d2 = "prelu" === l3, y2 = "fusedbatchnorm" === m2, f2 = getParamValue("numArgs", e2, t2, a2);
          if (c2) {
            if (d2 && 2 !== f2)
              throw new Error("Fused Conv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
            if (!d2 && 1 !== f2)
              throw new Error("Fused Conv2d with BiasAdd must have one extra argument: bias.");
          }
          if (y2)
            throw new Error("Fused Conv2d with FusedBatchNorm is not supported.");
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), p2 = getParamValue("dataFormat", e2, t2, a2).toUpperCase(), i2 = getParamValue("dilations", e2, t2, a2);
          var g2 = (n2 = getParamValue("args", e2, t2, a2))[0], h2 = n2[1];
          return [Eh.conv2d({ x: getParamValue("x", e2, t2, a2), filter: getParamValue("filter", e2, t2, a2), strides: [s2[1], s2[2]], pad: o2, dataFormat: p2, dilations: [i2[1], i2[2]], bias: g2, activation: l3, preluActivationWeights: h2 })];
        case "Conv2DBackpropInput":
        case "Conv2dTranspose":
          var N2 = getParamValue("outputShape", e2, t2, a2);
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2);
          return [Pc(getParamValue("x", e2, t2, a2), getParamValue("filter", e2, t2, a2), N2, [s2[1], s2[2]], o2)];
        case "DepthwiseConv2dNative":
        case "DepthwiseConv2d":
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), i2 = getParamValue("dilations", e2, t2, a2), p2 = getParamValue("dataFormat", e2, t2, a2).toUpperCase();
          return [Oc(getParamValue("input", e2, t2, a2), getParamValue("filter", e2, t2, a2), [s2[1], s2[2]], o2, p2, [i2[1], i2[2]])];
        case "Conv3D":
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), p2 = getParamValue("dataFormat", e2, t2, a2).toUpperCase(), i2 = getParamValue("dilations", e2, t2, a2);
          return [Tc(getParamValue("x", e2, t2, a2), getParamValue("filter", e2, t2, a2), [s2[1], s2[2], s2[3]], o2, p2, [i2[1], i2[2], i2[3]])];
        case "AvgPool":
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2);
          var x2 = getParamValue("kernelSize", e2, t2, a2);
          return [Yc(getParamValue("x", e2, t2, a2), [x2[1], x2[2]], [s2[1], s2[2]], o2)];
        case "MaxPool":
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), x2 = getParamValue("kernelSize", e2, t2, a2);
          return [$c(getParamValue("x", e2, t2, a2), [x2[1], x2[2]], [s2[1], s2[2]], o2)];
        case "AvgPool3D":
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), x2 = getParamValue("kernelSize", e2, t2, a2);
          return [Zc(getParamValue("x", e2, t2, a2), [x2[1], x2[2], x2[3]], [s2[1], s2[2], s2[3]], o2)];
        case "MaxPool3D":
          s2 = getParamValue("strides", e2, t2, a2), o2 = getParamValue("pad", e2, t2, a2), x2 = getParamValue("kernelSize", e2, t2, a2);
          return [Jc(getParamValue("x", e2, t2, a2), [x2[1], x2[2], x2[3]], [s2[1], s2[2], s2[3]], o2)];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$4 = function(e2, t2, a2) {
      switch (e2.op) {
        case "Fill":
          var r2 = getParamValue("shape", e2, t2, a2), n2 = getParamValue("dtype", e2, t2, a2), s2 = getParamValue("value", e2, t2, a2);
          return [Ln(r2, s2, n2)];
        case "LinSpace":
          var o2 = getParamValue("start", e2, t2, a2), p2 = getParamValue("stop", e2, t2, a2), u2 = getParamValue("num", e2, t2, a2);
          return [Wn(o2, p2, u2)];
        case "Multinomial":
          var i2 = getParamValue("logits", e2, t2, a2), m2 = getParamValue("numSamples", e2, t2, a2), l3 = getParamValue("seed", e2, t2, a2);
          return [mr(i2, m2, l3)];
        case "OneHot":
          var c2 = getParamValue("indices", e2, t2, a2), d2 = getParamValue("depth", e2, t2, a2), y2 = getParamValue("onValue", e2, t2, a2), f2 = getParamValue("offValue", e2, t2, a2);
          return [gr(c2, d2, y2, f2)];
        case "Ones":
          return [Bn(getParamValue("shape", e2, t2, a2), getParamValue("dtype", e2, t2, a2))];
        case "OnesLike":
          return [Vn(getParamValue("x", e2, t2, a2))];
        case "RandomUniform":
          return [kr(getParamValue("shape", e2, t2, a2), getParamValue("minval", e2, t2, a2), getParamValue("maxval", e2, t2, a2), getParamValue("dtype", e2, t2, a2))];
        case "Range":
          o2 = getParamValue("start", e2, t2, a2);
          var g2 = getParamValue("stop", e2, t2, a2), h2 = getParamValue("step", e2, t2, a2);
          return [Un(o2, g2, h2, getParamValue("dtype", e2, t2, a2))];
        case "TruncatedNormal":
          r2 = getParamValue("shape", e2, t2, a2);
          var N2 = getParamValue("mean", e2, t2, a2), x2 = getParamValue("stdDev", e2, t2, a2);
          l3 = getParamValue("seed", e2, t2, a2);
          return [Fr(r2, N2, x2, getParamValue("dtype", e2, t2, a2), l3)];
        case "Zeros":
          return [Pn(getParamValue("shape", e2, t2, a2), getParamValue("dtype", e2, t2, a2))];
        case "ZerosLike":
          return [zn(getParamValue("x", e2, t2, a2))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$6 = function(e2, t2, a2) {
      switch (e2.op) {
        case "TopKV2":
          var r2 = getParamValue("x", e2, t2, a2), n2 = getParamValue("k", e2, t2, a2), s2 = getParamValue("sorted", e2, t2, a2), o2 = Tl(r2, n2, s2);
          return [o2.values, o2.indices];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$7 = function(e2, t2, a2) {
      switch (e2.op) {
        case "Const":
          return t2[e2.name];
        case "PlaceholderWithDefault":
          var r2 = getParamValue("default", e2, t2, a2);
          return [getTensor(e2.name, t2, a2) || r2];
        case "Placeholder":
          return [getTensor(e2.name, t2, a2)];
        case "Identity":
        case "StopGradient":
        case "FakeQuantWithMinMaxVars":
          return [getParamValue("x", e2, t2, a2).clone()];
        case "IdentityN":
          return getParamValue("x", e2, t2, a2).map(function(e3) {
            return e3.clone();
          });
        case "Snapshot":
          return [getParamValue("x", e2, t2, a2).clone()];
        case "Shape":
          return [Dn(getParamValue("x", e2, t2, a2).shape, "int32")];
        case "ShapeN":
          return getParamValue("x", e2, t2, a2).map(function(e3) {
            return Dn(e3.shape);
          });
        case "Size":
          return [An(getParamValue("x", e2, t2, a2).size, "int32")];
        case "Rank":
          return [An(getParamValue("x", e2, t2, a2).rank, "int32")];
        case "NoOp":
          return [];
        case "Print":
          var n2 = getParamValue("x", e2, t2, a2), s2 = getParamValue("data", e2, t2, a2), o2 = getParamValue("message", e2, t2, a2), p2 = getParamValue("summarize", e2, t2, a2);
          console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(o2);
          for (var u2 = 0; u2 < s2.length; u2++)
            console.log(Array.prototype.slice.call(s2[u2].dataSync()).slice(0, p2));
          return [n2];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$8 = function(e2, t2, a2) {
      switch (e2.op) {
        case "ResizeBilinear":
          var r2 = getParamValue("images", e2, t2, a2), n2 = getParamValue("size", e2, t2, a2), s2 = getParamValue("alignCorners", e2, t2, a2);
          return [vh.resizeBilinear(r2, [n2[0], n2[1]], s2)];
        case "ResizeNearestNeighbor":
          r2 = getParamValue("images", e2, t2, a2), n2 = getParamValue("size", e2, t2, a2), s2 = getParamValue("alignCorners", e2, t2, a2);
          return [vh.resizeNearestNeighbor(r2, [n2[0], n2[1]], s2)];
        case "CropAndResize":
          var o2 = getParamValue("image", e2, t2, a2), p2 = getParamValue("boxes", e2, t2, a2), u2 = getParamValue("boxInd", e2, t2, a2), i2 = getParamValue("cropSize", e2, t2, a2), m2 = getParamValue("method", e2, t2, a2), l3 = getParamValue("extrapolationValue", e2, t2, a2);
          return [vh.cropAndResize(o2, p2, u2, i2, m2, l3)];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$9 = function(e2, t2, a2) {
      switch (e2.op) {
        case "Equal":
          return [sc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "NotEqual":
          return [yc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Greater":
          return [lc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "GreaterEqual":
          return [hc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Less":
          return [dc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "LessEqual":
          return [vc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "LogicalAnd":
          return [Ms(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "LogicalNot":
          return [Bs(getParamValue("a", e2, t2, a2))];
        case "LogicalOr":
          return [Ps(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        case "Select":
          return [Ws(getParamValue("condition", e2, t2, a2), getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$10 = function(e2, t2, a2) {
      switch (e2.op) {
        case "BatchMatMul":
        case "BatchMatMulV2":
        case "MatMul":
          return [Wc(getParamValue("a", e2, t2, a2), getParamValue("b", e2, t2, a2), getParamValue("transposeA", e2, t2, a2), getParamValue("transposeB", e2, t2, a2))];
        case "Transpose":
          return [El(getParamValue("x", e2, t2, a2), getParamValue("perm", e2, t2, a2))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$11 = function(e2, t2, a2) {
      switch (e2.op) {
        case "FusedBatchNorm":
        case "FusedBatchNormV2":
        case "FusedBatchNormV3":
          return [Ns(getParamValue("x", e2, t2, a2), getParamValue("mean", e2, t2, a2), getParamValue("variance", e2, t2, a2), getParamValue("offset", e2, t2, a2), getParamValue("scale", e2, t2, a2), getParamValue("epsilon", e2, t2, a2))];
        case "LRN":
          return [Rl(getParamValue("x", e2, t2, a2), getParamValue("radius", e2, t2, a2), getParamValue("bias", e2, t2, a2), getParamValue("alpha", e2, t2, a2), getParamValue("beta", e2, t2, a2))];
        case "Softmax":
          return [io(getParamValue("x", e2, t2, a2))];
        case "LogSoftmax":
          return [uo(getParamValue("x", e2, t2, a2))];
        case "SparseToDense":
          return [Pl(getParamValue("sparseIndices", e2, t2, a2), getParamValue("outputShape", e2, t2, a2), getParamValue("sparseValues", e2, t2, a2), getParamValue("defaultValue", e2, t2, a2))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$12 = function(e2, t2, a2) {
      switch (e2.op) {
        case "Max":
          var r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("keepDims", e2, t2, a2);
          return [hl(getParamValue("x", e2, t2, a2), r2, n2)];
        case "Mean":
          r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("keepDims", e2, t2, a2);
          return [fl(getParamValue("x", e2, t2, a2), r2, n2)];
        case "Min":
          r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("keepDims", e2, t2, a2);
          return [pl(getParamValue("x", e2, t2, a2), r2, n2)];
        case "Sum":
          r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("keepDims", e2, t2, a2);
          return [vl(getParamValue("x", e2, t2, a2), r2, n2)];
        case "All":
          r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("keepDims", e2, t2, a2);
          return [il(getParamValue("x", e2, t2, a2), r2, n2)];
        case "Any":
          r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("keepDims", e2, t2, a2);
          return [ul(getParamValue("x", e2, t2, a2), r2, n2)];
        case "ArgMax":
          r2 = getParamValue("axis", e2, t2, a2);
          return [sl(getParamValue("x", e2, t2, a2), r2)];
        case "ArgMin":
          r2 = getParamValue("axis", e2, t2, a2);
          return [cl(getParamValue("x", e2, t2, a2), r2)];
        case "Prod":
          r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("keepDims", e2, t2, a2);
          return [ml(getParamValue("x", e2, t2, a2), r2, n2)];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$13 = function(e2, t2, a2) {
      switch (e2.op) {
        case "ConcatV2":
        case "Concat":
          var r2 = getParamValue("axis", e2, t2, a2), n2 = getParamValue("tensors", e2, t2, a2);
          return [Gn(n2, r2)];
        case "GatherV2":
        case "Gather":
          r2 = getParamValue("axis", e2, t2, a2);
          var s2 = getParamValue("x", e2, t2, a2), o2 = getParamValue("indices", e2, t2, a2);
          return [Cc(s2, o2.asType("int32"), r2)];
        case "ReverseV2":
        case "Reverse":
          r2 = getParamValue("axis", e2, t2, a2), s2 = getParamValue("x", e2, t2, a2);
          return [zc(s2, r2)];
        case "Slice":
          var p2 = getParamValue("begin", e2, t2, a2), u2 = getParamValue("size", e2, t2, a2);
          return [tl(getParamValue("x", e2, t2, a2), p2, u2)];
        case "StridedSlice":
          p2 = getParamValue("begin", e2, t2, a2);
          var i2 = getParamValue("end", e2, t2, a2), m2 = getParamValue("strides", e2, t2, a2), l3 = getParamValue("beginMask", e2, t2, a2), c2 = getParamValue("endMask", e2, t2, a2), d2 = getParamValue("ellipsisMask", e2, t2, a2), y2 = getParamValue("newAxisMask", e2, t2, a2), f2 = getParamValue("shrinkAxisMask", e2, t2, a2), g2 = getParamValue("x", e2, t2, a2);
          if (1 === p2.length && g2.shape.length > 1)
            for (var h2 = 1; h2 < g2.shape.length; h2++)
              p2.push(0), i2.push(g2.shape[h2]), m2.push(m2[0]);
          return [Dl(g2, p2, i2, m2, l3, c2, d2, y2, f2)];
        case "Pack":
          return je(function() {
            var r3 = getParamValue("axis", e2, t2, a2), n3 = getParamValue("tensors", e2, t2, a2), s3 = n3[0].shape, o3 = n3[0].squeeze().shape, p3 = n3.map(function(e3) {
              var t3 = tt.arraysEqual(e3.shape, s3);
              if (!t3 && !tt.arraysEqual(e3.squeeze().shape, o3))
                throw new Error("the input tensors shape does not match");
              return t3 ? e3 : e3.reshape(s3);
            });
            return [Tr(p3, r3)];
          });
        case "Unpack":
          return je(function() {
            var r3 = getParamValue("axis", e2, t2, a2), n3 = getParamValue("tensor", e2, t2, a2);
            return Or(n3, r3);
          });
        case "Tile":
          var N2 = getParamValue("reps", e2, t2, a2);
          return [Nr(getParamValue("x", e2, t2, a2), N2)];
        case "Split":
        case "SplitV":
          r2 = getParamValue("axis", e2, t2, a2);
          var x2 = getParamValue("numOrSizeSplits", e2, t2, a2);
          return Xn(getParamValue("x", e2, t2, a2), x2, r2);
        case "ScatterNd":
          o2 = getParamValue("indices", e2, t2, a2);
          var V2 = getParamValue("values", e2, t2, a2), P2 = getParamValue("shape", e2, t2, a2);
          return [Nl(o2, V2, P2)];
        case "GatherNd":
          var b2 = getParamValue("x", e2, t2, a2);
          o2 = getParamValue("indices", e2, t2, a2);
          return [Ll(b2, o2)];
        case "SparseToDense":
          o2 = getParamValue("sparseIndices", e2, t2, a2), P2 = getParamValue("outputShape", e2, t2, a2);
          var T2 = getParamValue("sparseValues", e2, t2, a2), O2 = getParamValue("defaultValue", e2, t2, a2);
          return [Pl(o2, T2, P2, T2.dtype === O2.dtype ? O2 : O2.asType(T2.dtype))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$14 = function(e2, t2, a2) {
      switch (e2.op) {
        case "FFT":
          return [Fl(getParamValue("x", e2, t2, a2))];
        case "IFFT":
          return [Ol(getParamValue("x", e2, t2, a2))];
        case "RFFT":
          return [_l(getParamValue("x", e2, t2, a2))];
        case "IRFFT":
          return [Ml(getParamValue("x", e2, t2, a2))];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    executeOp$15 = function(e2, t2, a2) {
      switch (e2.op) {
        case "Cast":
          return [lr(getParamValue("x", e2, t2, a2), getParamValue("dtype", e2, t2, a2))];
        case "ExpandDims":
          var r2 = getParamValue("axis", e2, t2, a2);
          return [dr(getParamValue("x", e2, t2, a2), r2)];
        case "Squeeze":
          r2 = getParamValue("axis", e2, t2, a2);
          return [Dr(getParamValue("x", e2, t2, a2), r2)];
        case "Reshape":
          return [Sr(getParamValue("x", e2, t2, a2), getParamValue("shape", e2, t2, a2))];
        case "PadV2":
        case "Pad":
          return [yr(getParamValue("x", e2, t2, a2), split$1(getParamValue("padding", e2, t2, a2), 2), getParamValue("constantValue", e2, t2, a2))];
        case "SpaceToBatchND":
          var n2 = getParamValue("blockShape", e2, t2, a2), s2 = split$1(getParamValue("paddings", e2, t2, a2), 2);
          return [Ar(getParamValue("x", e2, t2, a2), n2, s2)];
        case "BatchToSpaceND":
          n2 = getParamValue("blockShape", e2, t2, a2);
          var o2 = split$1(getParamValue("crops", e2, t2, a2), 2);
          return [cr(getParamValue("x", e2, t2, a2), n2, o2)];
        case "DepthToSpace":
          var p2 = getParamValue("blockSize", e2, t2, a2), u2 = getParamValue("dataFormat", e2, t2, a2).toUpperCase();
          return [pr(getParamValue("x", e2, t2, a2), p2, u2)];
        default:
          throw TypeError("Node type " + e2.op + " is not implemented");
      }
    };
    ExecutionContext = function() {
      function e2(e3, t2) {
        this.weightMap = e3, this.tensorArrayMap = t2, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
      }
      return e2.prototype.newFrame = function(e3, t2) {
        return { id: e3, frameName: t2, iterationId: 0 };
      }, Object.defineProperty(e2.prototype, "currentContext", { get: function() {
        return this.contexts;
      }, set: function(e3) {
        this.contexts !== e3 && (this.contexts = e3, this.generateCurrentContextIds());
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "currentContextId", { get: function() {
        return this._currentContextIds[0];
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "currentContextIds", { get: function() {
        return this._currentContextIds;
      }, enumerable: true, configurable: true }), e2.prototype.generateCurrentContextIds = function() {
        for (var e3 = [], t2 = 0; t2 < this.contexts.length - 1; t2++) {
          var a2 = this.contexts.slice(0, this.contexts.length - t2);
          e3.push(this.contextIdforContexts(a2));
        }
        e3.push(""), this._currentContextIds = e3;
      }, e2.prototype.contextIdforContexts = function(e3) {
        return e3 ? e3.map(function(e4) {
          return 0 === e4.id && 0 === e4.iterationId ? "" : e4.frameName + "-" + e4.iterationId;
        }).join("/") : "";
      }, e2.prototype.enterFrame = function(e3) {
        this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e3)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
      }, e2.prototype.exitFrame = function() {
        if (!(this.contexts && this.contexts.length > 1))
          throw new Error("Cannot exit frame, the context is empty");
        this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
      }, e2.prototype.nextIteration = function() {
        if (!(this.contexts && this.contexts.length > 0))
          throw new Error("Cannot increase frame iteration, the context is empty");
        this.contexts = this.contexts.slice(), this.lastId++;
        var e3 = Object.assign({}, this.contexts[this.contexts.length - 1]);
        e3.iterationId += 1, e3.id = this.lastId, this.contexts.splice(-1, 1, e3), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
      }, e2.prototype.getWeight = function(e3) {
        return this.weightMap[e3];
      }, e2.prototype.addTensorArray = function(e3) {
        this.tensorArrayMap[e3.id] = e3;
      }, e2.prototype.getTensorArray = function(e3) {
        return this.tensorArrayMap[e3];
      }, e2;
    }();
    CONTROL_FLOW_OPS = ["Switch", "Merge", "Enter", "Exit", "NextIteration"];
    DYNAMIC_SHAPE_OPS = ["NonMaxSuppressionV2", "NonMaxSuppressionV3", "Where"];
    GraphExecutor = function() {
      function e2(e3) {
        this.graph = e3, this.compiledMap = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPERATOR = ",", this.placeholders = e3.placeholders, this._outputs = e3.outputs;
      }
      return Object.defineProperty(e2.prototype, "weightMap", { get: function() {
        return this._weightMap;
      }, set: function(e3) {
        var t2 = Object.keys(e3).map(function(t3) {
          return e3[t3].map(function(e4) {
            return e4.id;
          });
        });
        this.weightIds = [].concat.apply([], t2), this._weightMap = e3;
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "inputs", { get: function() {
        return this.placeholders.map(function(e3) {
          return { name: e3.name, shape: e3.attrParams.shape ? e3.attrParams.shape.value : void 0, dtype: e3.attrParams.dtype ? e3.attrParams.dtype.value : void 0 };
        });
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "outputs", { get: function() {
        return this._outputs.map(function(e3) {
          return { name: e3.name, shape: e3.attrParams.shape ? e3.attrParams.shape.value : void 0, dtype: e3.attrParams.dtype ? e3.attrParams.dtype.value : void 0 };
        });
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "inputNodes", { get: function() {
        return this.placeholders.map(function(e3) {
          return e3.name;
        });
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "outputNodes", { get: function() {
        return this.outputs.map(function(e3) {
          return e3.name;
        });
      }, enumerable: true, configurable: true }), e2.prototype.getCompilationKey = function(e3, t2) {
        var a2 = e3.map(function(e4) {
          return e4.name;
        }).sort(), r2 = t2.map(function(e4) {
          return e4.name;
        }).sort();
        return a2.join(this.SEPERATOR) + "--" + r2.join(this.SEPERATOR);
      }, e2.prototype.compile = function(e3, t2) {
        var a2 = getExecutionSubgraph(e3, t2, this.weightMap), r2 = a2.missingInputs, n2 = a2.dynamicNode, s2 = a2.syncInputs;
        if (null != n2)
          throw new Error("This execution contains the node '" + n2.name + "', which has the dynamic op '" + n2.op + "'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [" + s2 + "]");
        if (r2.length > 0) {
          var o2 = t2.map(function(e4) {
            return e4.name;
          }), p2 = Object.keys(e3);
          throw new Error("Cannot compute the outputs [" + o2 + "] from the provided inputs [" + p2 + "]. Missing the following inputs: [" + r2 + "]");
        }
        return getNodesInTopologicalOrder(this.graph, this.weightMap, a2);
      }, e2.prototype.execute = function(e3, t2) {
        var a2 = this, r2 = Object.keys(e3).sort();
        this.checkInputs(e3), this.checkInputShapeAndType(e3), this.checkOutputs(t2);
        var n2 = r2.map(function(e4) {
          return a2.graph.nodes[e4];
        }), s2 = t2.map(function(e4) {
          return a2.graph.nodes[parseNodeName(e4)[0]];
        }), o2 = this.getCompilationKey(n2, s2), p2 = this.compiledMap.get(o2);
        null == p2 && (p2 = this.compile(e3, s2), this.compiledMap.set(o2, p2));
        var u2 = {};
        return je(function() {
          var r3 = new ExecutionContext(a2._weightMap, u2), n3 = __assign2({}, a2.weightMap);
          Object.keys(e3).forEach(function(t3) {
            n3[t3] = [e3[t3]];
          });
          for (var s3 = a2.getFrozenTensorIds(n3), o3 = {}, i2 = 0; i2 < p2.length; i2++) {
            var m2 = p2[i2];
            if (!n3[m2.name]) {
              var l3 = executeOp$16(m2, n3, r3);
              if (l3 instanceof Promise)
                throw new Error("The execution of the op '" + m2.op + "' returned a promise. Please use model.executeAsync() instead.");
              n3[m2.name] = l3, a2.checkTensorForDisposal(m2.name, m2, n3, r3, s3, t2, o3);
            }
          }
          return t2.map(function(e4) {
            return getTensor(e4, n3, r3);
          });
        });
      }, e2.prototype.getFrozenTensorIds = function(e3) {
        var t2 = [].concat.apply([], Object.keys(e3).map(function(t3) {
          return e3[t3];
        }).map(function(e4) {
          return e4.map(function(e5) {
            return e5.id;
          });
        }));
        return new Set(t2);
      }, e2.prototype.checkTensorForDisposal = function(e3, t2, a2, r2, n2, s2, o2) {
        "control" !== t2.category && -1 === s2.indexOf(e3) && (a2[e3].forEach(function(e4) {
          null != e4 && (o2[e4.id] = (o2[e4.id] || 0) + t2.children.length);
        }), t2.inputs.forEach(function(e4) {
          if ("control" !== e4.category) {
            var t3 = getTensorsForCurrentContenxt(e4.name, a2, r2);
            null != t3 && t3.forEach(function(e5) {
              if (e5 && !n2.has(e5.id)) {
                var t4 = o2[e5.id];
                1 === t4 ? (e5.dispose(), delete o2[e5.id]) : null != t4 && o2[e5.id]--;
              }
            });
          }
        }));
      }, e2.prototype.executeAsync = function(e3, t2) {
        return __awaiter2(this, void 0, void 0, function() {
          var a2, r2, n2, s2, o2, p2, u2 = this;
          return __generator2(this, function(i2) {
            switch (i2.label) {
              case 0:
                return this.checkInputs(e3), this.checkInputShapeAndType(e3), this.checkOutputs(t2), a2 = {}, r2 = new ExecutionContext(this._weightMap, a2), [4, this.executeWithControlFlow(e3, r2, t2)];
              case 1:
                return n2 = i2.sent(), s2 = t2.map(function(e4) {
                  return getTensor(e4, n2, r2);
                }), o2 = new Set(s2.map(function(e4) {
                  return e4.id;
                })), p2 = new Set(Object.keys(e3).map(function(t3) {
                  return e3[t3].id;
                })), Object.keys(n2).forEach(function(e4) {
                  n2[e4].forEach(function(e5) {
                    !e5 || e5.isDisposed || o2.has(e5.id) || p2.has(e5.id) || -1 !== u2.weightIds.indexOf(e5.id) || e5.dispose();
                  });
                }), [2, s2];
            }
          });
        });
      }, e2.prototype.executeWithControlFlow = function(e3, t2, a2) {
        return __awaiter2(this, void 0, void 0, function() {
          var r2, n2, s2, o2, p2, u2, i2, m2, l3, c2, d2, y2, f2, g2, h2, N2, x2 = this;
          return __generator2(this, function(V2) {
            switch (V2.label) {
              case 0:
                r2 = Object.keys(e3), n2 = r2.map(function(e4) {
                  return x2.graph.nodes[e4];
                }), s2 = a2.map(function(e4) {
                  return x2.graph.nodes[parseNodeName(e4)[0]];
                }), o2 = getExecutionSubgraph(e3, s2, this.weightMap), p2 = o2.usedNodes, u2 = o2.missingInputs, i2 = o2.dynamicNode, m2 = o2.syncInputs, l3 = n2.concat(this.graph.weights).map(function(e4) {
                  return { node: e4, contexts: t2.currentContext };
                }), c2 = __assign2({}, this.weightMap), Object.keys(e3).forEach(function(t3) {
                  c2[t3] = [e3[t3]];
                }), d2 = {}, y2 = this.getFrozenTensorIds(c2), f2 = {}, V2.label = 1;
              case 1:
                return l3.length > 0 ? (g2 = this.processStack(n2, l3, t2, c2, f2, y2, a2, d2, p2), [4, Promise.all(g2)]) : [3, 3];
              case 2:
                return V2.sent(), [3, 1];
              case 3:
                if (null == i2 && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."), (h2 = s2.filter(function(e4) {
                  return !isControlFlow(e4) && !getTensor(e4.name, c2, t2);
                }).map(function(e4) {
                  return e4.name;
                })).length > 0)
                  throw N2 = "", null != i2 && (N2 = "Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [" + m2 + "]"), new Error("Cannot compute the outputs [" + h2 + "] from the provided inputs [" + r2 + "]. Consider providing the following inputs: [" + u2 + "]. " + N2);
                return [2, c2];
            }
          });
        });
      }, e2.prototype.processStack = function(e3, t2, a2, r2, n2, s2, o2, p2, u2) {
        for (var i2 = this, m2 = [], l3 = function() {
          var l4 = t2.pop();
          a2.currentContext = l4.contexts;
          var d2 = "";
          if ("Enter" === l4.node.op && getParamValue("isConstant", l4.node, r2, a2) && (d2 = getNodeNameAndIndex(l4.node.name, a2)[0]), -1 === e3.indexOf(l4.node)) {
            var y2 = executeOp$16(l4.node, r2, a2);
            d2 || (d2 = getNodeNameAndIndex(l4.node.name, a2)[0]);
            var f2 = a2.currentContext;
            y2 instanceof Promise ? m2.push(y2.then(function(e4) {
              return r2[d2] = e4, a2.currentContext = f2, i2.checkTensorForDisposal(d2, l4.node, r2, a2, s2, o2, p2), i2.processChildNodes(l4.node, t2, a2, r2, n2, u2), e4;
            })) : (r2[d2] = y2, c2.checkTensorForDisposal(d2, l4.node, r2, a2, s2, o2, p2), c2.processChildNodes(l4.node, t2, a2, r2, n2, u2));
          } else
            c2.processChildNodes(l4.node, t2, a2, r2, n2, u2);
        }, c2 = this; t2.length > 0; )
          l3();
        return m2;
      }, e2.prototype.processChildNodes = function(e3, t2, a2, r2, n2, s2) {
        e3.children.forEach(function(e4) {
          var o2 = getNodeNameAndIndex(e4.name, a2)[0];
          !n2[o2] && s2.has(e4.name) && ("Merge" === e4.op ? e4.inputNames.some(function(e5) {
            return !!getTensor(e5, r2, a2);
          }) && (n2[o2] = true, t2.push({ contexts: a2.currentContext, node: e4 })) : e4.inputNames.every(function(e5) {
            return !!getTensor(e5, r2, a2);
          }) && (n2[o2] = true, t2.push({ contexts: a2.currentContext, node: e4 })));
        });
      }, e2.prototype.dispose = function() {
        var e3 = this;
        Object.keys(this.weightMap).forEach(function(t2) {
          return e3.weightMap[t2].forEach(function(e4) {
            return e4.dispose();
          });
        });
      }, e2.prototype.checkInputShapeAndType = function(e3) {
        var t2 = this;
        Object.keys(e3).forEach(function(a2) {
          var r2 = e3[a2], n2 = t2.graph.nodes[a2];
          if (n2.attrParams.shape && n2.attrParams.shape.value) {
            var s2 = n2.attrParams.shape.value, o2 = s2.length === r2.shape.length && r2.shape.every(function(e4, t3) {
              return -1 === s2[t3] || s2[t3] === e4;
            });
            tt.assert(o2, function() {
              return "The shape of dict['" + n2.name + "'] provided in model.execute(dict) must be [" + s2 + "], but was [" + r2.shape + "]";
            });
          }
          n2.attrParams.dtype && n2.attrParams.dtype.value && tt.assert(r2.dtype === n2.attrParams.dtype.value, function() {
            return "The dtype of dict['" + n2.name + "'] provided in model.execute(dict) must be " + n2.attrParams.dtype.value + ", but was " + r2.dtype;
          });
        });
      }, e2.prototype.checkInputs = function(e3) {
        var t2 = this, a2 = Object.keys(e3).filter(function(e4) {
          return !t2.graph.nodes[e4];
        });
        if (a2.length > 0)
          throw new Error("The dict provided in model.execute(dict) has keys: [" + a2 + "] that are not part of graph");
      }, e2.prototype.checkOutputs = function(e3) {
        var t2 = this;
        e3.forEach(function(e4) {
          var a2 = parseNodeName(e4)[0];
          if (!t2.graph.nodes[a2])
            throw new Error("The output '" + e4 + "' is not found in the graph");
        });
      }, e2;
    }();
    TFHUB_SEARCH_PARAM = "?tfjs-format=file";
    DEFAULT_MODEL_NAME = "model.json";
    GraphModel = function() {
      function e2(e3, t2) {
        void 0 === t2 && (t2 = {}), this.modelUrl = e3, this.loadOptions = t2, this.version = "n/a", null == t2 && (this.loadOptions = {});
      }
      return Object.defineProperty(e2.prototype, "modelVersion", { get: function() {
        return this.version;
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "inputNodes", { get: function() {
        return this.executor.inputNodes;
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "outputNodes", { get: function() {
        return this.executor.outputNodes;
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "inputs", { get: function() {
        return this.executor.inputs;
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "outputs", { get: function() {
        return this.executor.outputs;
      }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "weights", { get: function() {
        return this.executor.weightMap;
      }, enumerable: true, configurable: true }), e2.prototype.findIOHandler = function() {
        var e3 = this.modelUrl;
        if (null != e3.load)
          this.handler = e3;
        else if (null != this.loadOptions.requestInit)
          this.handler = Sf.browserHTTPRequest(e3, this.loadOptions);
        else {
          var t2 = Sf.getLoadHandlers(e3, this.loadOptions.onProgress);
          if (0 === t2.length)
            t2.push(Sf.browserHTTPRequest(e3, this.loadOptions));
          else if (t2.length > 1)
            throw new Error("Found more than one (" + t2.length + ") load handlers for URL '" + [e3] + "'");
          this.handler = t2[0];
        }
      }, e2.prototype.load = function() {
        return __awaiter2(this, void 0, void 0, function() {
          var e3, t2, a2;
          return __generator2(this, function(r2) {
            switch (r2.label) {
              case 0:
                if (this.findIOHandler(), null == this.handler.load)
                  throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
                return [4, this.handler.load()];
              case 1:
                return e3 = r2.sent(), t2 = e3.modelTopology, this.version = t2.versions.producer + "." + t2.versions.minConsumer, a2 = Sf.decodeWeights(e3.weightData, e3.weightSpecs), this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(t2)), this.executor.weightMap = this.convertTensorMapToTensorsMap(a2), [2, true];
            }
          });
        });
      }, e2.prototype.predict = function(e3, t2) {
        return this.execute(e3, this.outputNodes);
      }, e2.prototype.normalizeInputs = function(e3) {
        if (!(e3 instanceof dt || Array.isArray(e3)))
          return e3;
        if ((e3 = Array.isArray(e3) ? e3 : [e3]).length !== this.inputNodes.length)
          throw new Error("Input tensor count mismatch,the graph model has " + this.inputNodes.length + " placeholders, while there are " + e3.length + " input tensors.");
        return this.inputNodes.reduce(function(t2, a2, r2) {
          return t2[a2] = e3[r2], t2;
        }, {});
      }, e2.prototype.normalizeOutputs = function(e3) {
        return e3 = e3 || this.outputNodes, Array.isArray(e3) ? e3 : [e3];
      }, e2.prototype.execute = function(e3, t2) {
        e3 = this.normalizeInputs(e3), t2 = this.normalizeOutputs(t2);
        var a2 = this.executor.execute(e3, t2);
        return a2.length > 1 ? a2 : a2[0];
      }, e2.prototype.executeAsync = function(e3, t2) {
        return __awaiter2(this, void 0, void 0, function() {
          var a2;
          return __generator2(this, function(r2) {
            switch (r2.label) {
              case 0:
                return e3 = this.normalizeInputs(e3), t2 = this.normalizeOutputs(t2), [4, this.executor.executeAsync(e3, t2)];
              case 1:
                return [2, (a2 = r2.sent()).length > 1 ? a2 : a2[0]];
            }
          });
        });
      }, e2.prototype.convertTensorMapToTensorsMap = function(e3) {
        return Object.keys(e3).reduce(function(t2, a2) {
          return t2[a2] = [e3[a2]], t2;
        }, {});
      }, e2.prototype.dispose = function() {
        this.executor.dispose();
      }, e2;
    }();
    version2 = "1.3.1";
  }
});

// browser-external:string_decoder
var require_string_decoder = __commonJS({
  "browser-external:string_decoder"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "string_decoder" has been externalized for browser compatibility. Cannot access "string_decoder.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@tensorflow/tfjs-data/dist/tf-data.esm.js
var tf_data_esm_exports = {};
__export(tf_data_esm_exports, {
  CSVDataset: () => CSVDataset,
  Dataset: () => Dataset,
  FileDataSource: () => FileDataSource,
  TextLineDataset: () => TextLineDataset,
  URLDataSource: () => URLDataSource,
  array: () => array,
  csv: () => csv,
  func: () => func,
  generator: () => generator,
  microphone: () => microphone,
  version_data: () => version3,
  webcam: () => webcam,
  zip: () => zip
});
function __extends2(t2, e2) {
  function r2() {
    this.constructor = t2;
  }
  extendStatics2(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
}
function __awaiter3(t2, e2, r2, n2) {
  return new (r2 || (r2 = Promise))(function(i2, o2) {
    function a2(t3) {
      try {
        u2(n2.next(t3));
      } catch (t4) {
        o2(t4);
      }
    }
    function s2(t3) {
      try {
        u2(n2.throw(t3));
      } catch (t4) {
        o2(t4);
      }
    }
    function u2(t3) {
      t3.done ? i2(t3.value) : new r2(function(e3) {
        e3(t3.value);
      }).then(a2, s2);
    }
    u2((n2 = n2.apply(t2, e2 || [])).next());
  });
}
function __generator3(t2, e2) {
  var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
    if (1 & i2[0])
      throw i2[1];
    return i2[1];
  }, trys: [], ops: [] };
  return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
    return this;
  }), o2;
  function s2(o3) {
    return function(s3) {
      return function(o4) {
        if (r2)
          throw new TypeError("Generator is already executing.");
        for (; a2; )
          try {
            if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
              return i2;
            switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
              case 0:
              case 1:
                i2 = o4;
                break;
              case 4:
                return a2.label++, { value: o4[1], done: false };
              case 5:
                a2.label++, n2 = o4[1], o4 = [0];
                continue;
              case 7:
                o4 = a2.ops.pop(), a2.trys.pop();
                continue;
              default:
                if (!(i2 = (i2 = a2.trys).length > 0 && i2[i2.length - 1]) && (6 === o4[0] || 2 === o4[0])) {
                  a2 = 0;
                  continue;
                }
                if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                  a2.label = o4[1];
                  break;
                }
                if (6 === o4[0] && a2.label < i2[1]) {
                  a2.label = i2[1], i2 = o4;
                  break;
                }
                if (i2 && a2.label < i2[2]) {
                  a2.label = i2[2], a2.ops.push(o4);
                  break;
                }
                i2[2] && a2.ops.pop(), a2.trys.pop();
                continue;
            }
            o4 = e2.call(t2, a2);
          } catch (t3) {
            o4 = [6, t3], n2 = 0;
          } finally {
            r2 = i2 = 0;
          }
        if (5 & o4[0])
          throw o4[1];
        return { value: o4[0] ? o4[1] : void 0, done: true };
      }([o3, s3]);
    };
  }
}
function createCommonjsModule(t2, e2) {
  return t2(e2 = { exports: {} }, e2.exports), e2.exports;
}
function deepMap(t2, e2) {
  return deepMapInternal(t2, e2);
}
function deepMapInternal(t2, e2, r2, n2) {
  if (void 0 === r2 && (r2 = /* @__PURE__ */ new Map()), void 0 === n2 && (n2 = /* @__PURE__ */ new Set()), null == t2)
    return null;
  if (n2.has(t2))
    throw new Error("Circular references are not supported.");
  if (r2.has(t2))
    return r2.get(t2);
  var i2 = e2(t2);
  if (i2.recurse && null !== i2.value)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (i2.recurse) {
    if (isIterable(t2)) {
      var o2 = Array.isArray(t2) ? [] : {};
      for (var a2 in n2.add(t2), t2) {
        var s2 = deepMapInternal(t2[a2], e2, r2, n2);
        o2[a2] = s2;
      }
      return n2.delete(t2), o2;
    }
    throw new Error("Can't recurse into non-iterable type: " + t2);
  }
  return r2.set(t2, i2.value), i2.value;
}
function deepZip(t2, e2) {
  return void 0 === e2 && (e2 = zipToList), deepZipInternal(t2, e2);
}
function deepZipInternal(t2, e2, r2) {
  void 0 === r2 && (r2 = /* @__PURE__ */ new Set());
  var n2 = t2[0];
  if (r2.has(n2))
    throw new Error("Circular references are not supported.");
  var i2 = e2(t2);
  if (i2.recurse && null !== i2.value)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (i2.recurse) {
    if (isIterable(n2)) {
      var o2 = Array.isArray(n2) ? [] : {};
      r2.add(n2);
      var a2 = function(n3) {
        var i3 = deepZipInternal(t2.map(function(t3) {
          return t3[n3];
        }), e2, r2);
        o2[n3] = i3;
      };
      for (var s2 in n2)
        a2(s2);
      return r2.delete(n2), o2;
    }
    throw new Error("Can't recurse into non-iterable type: " + n2);
  }
  return i2.value;
}
function zipToList(t2) {
  return null === t2 ? null : isIterable(t2[0]) ? { value: null, recurse: true } : { value: t2, recurse: false };
}
function deepMapAndAwaitAll(t2, e2) {
  return __awaiter3(this, void 0, void 0, function() {
    var r2, n2, i2, o2, a2, s2;
    return __generator3(this, function(u2) {
      switch (u2.label) {
        case 0:
          r2 = /* @__PURE__ */ new Map(), deepMapInternal(t2, e2, r2), n2 = 0, i2 = Array.from(r2.keys()), u2.label = 1;
        case 1:
          return n2 < i2.length ? (o2 = i2[n2], (a2 = r2.get(o2)) instanceof Promise ? [4, a2] : [3, 3]) : [3, 4];
        case 2:
          s2 = u2.sent(), r2.set(o2, s2), u2.label = 3;
        case 3:
          return n2++, [3, 1];
        case 4:
          return [2, deepMapInternal(t2, e2, r2)];
      }
    });
  });
}
function isIterable(t2) {
  return null != t2 && !ArrayBuffer.isView(t2) && (Array.isArray(t2) || "object" == typeof t2 && !(t2 instanceof dt));
}
function canTensorify(t2) {
  return null == t2 || isPrimitive(t2) || Array.isArray(t2) || "object" == typeof t2 && t2 instanceof dt || tt.isTypedArray(t2);
}
function isPrimitive(t2) {
  return null === t2 || "object" != typeof t2 && "function" != typeof t2;
}
function deepClone(t2) {
  return deepMap(t2, cloneIfTensor);
}
function cloneIfTensor(t2) {
  return t2 instanceof dt ? { value: t2.clone(), recurse: false } : isIterable(t2) ? { value: null, recurse: true } : { value: t2, recurse: false };
}
function iteratorFromItems(t2) {
  return new ArrayIterator(t2);
}
function iteratorFromFunction(t2) {
  return new FunctionCallIterator(t2);
}
function iteratorFromConcatenated(t2, e2) {
  return new ChainedIterator(t2, e2);
}
function iteratorFromZipped(t2, e2) {
  return void 0 === e2 && (e2 = ZipMismatchMode.FAIL), new ZipIterator(t2, e2);
}
function datasetFromIteratorFn(t2, e2) {
  return void 0 === e2 && (e2 = null), new (function(r2) {
    function n2() {
      var t3 = null !== r2 && r2.apply(this, arguments) || this;
      return t3.size = e2, t3;
    }
    return __extends2(n2, r2), n2.prototype.iterator = function() {
      return __awaiter3(this, void 0, void 0, function() {
        return __generator3(this, function(e3) {
          return [2, t2()];
        });
      });
    }, n2;
  }(Dataset))();
}
function array(t2) {
  var e2 = this;
  return datasetFromIteratorFn(function() {
    return __awaiter3(e2, void 0, void 0, function() {
      return __generator3(this, function(e3) {
        return [2, iteratorFromItems(t2)];
      });
    });
  }, t2.length);
}
function zip(t2) {
  var e2, r2 = this;
  if (!isIterable(t2))
    throw new Error("The argument to zip() must be an object or array.");
  if (Array.isArray(t2))
    for (var n2 = 0; n2 < t2.length; n2++)
      e2 = null == e2 ? t2[n2].size : Math.min(e2, t2[n2].size);
  else if (t2 instanceof Object)
    for (var i2 in t2)
      e2 = null == e2 ? t2[i2].size : Math.min(e2, t2[i2].size);
  return datasetFromIteratorFn(function() {
    return __awaiter3(r2, void 0, void 0, function() {
      return __generator3(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, deepMapAndAwaitAll(t2, function(t3) {
              if (t3 instanceof Dataset)
                return { value: t3.iterator(), recurse: false };
              if (isIterable(t3))
                return { value: null, recurse: true };
              throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
            })];
          case 1:
            return [2, iteratorFromZipped(e3.sent(), ZipMismatchMode.SHORTEST)];
        }
      });
    });
  }, e2);
}
function deepBatchConcat(t2) {
  return null === t2 ? null : canTensorify(t2[0]) ? { value: batchConcat(t2), recurse: false } : { value: null, recurse: true };
}
function batchConcat(t2) {
  if (0 === t2.length)
    throw new Error("Can't make a batch of zero elements.");
  return t2[0] instanceof dt ? Tr(t2) : kn(t2);
}
function urlChunkIterator(t2, e2) {
  return void 0 === e2 && (e2 = {}), __awaiter3(this, void 0, void 0, function() {
    var r2, n2, i2, o2, a2;
    return __generator3(this, function(s2) {
      switch (s2.label) {
        case 0:
          return "string" == typeof t2 ? r2 = t2 : (r2 = t2.url, n2 = getRequestInitFromRequest(t2)), [4, tt.fetch(r2, n2)];
        case 1:
          return (i2 = s2.sent()).ok ? (a2 = Uint8Array.bind, [4, i2.arrayBuffer()]) : [3, 3];
        case 2:
          return o2 = new (a2.apply(Uint8Array, [void 0, s2.sent()]))(), [2, new FileChunkIterator(o2, e2)];
        case 3:
          throw new Error(i2.statusText);
      }
    });
  });
}
function isLocalPath(t2) {
  return "string" == typeof t2 && "file://" === t2.substr(0, 7);
}
function csv(t2, e2) {
  return void 0 === e2 && (e2 = {}), new CSVDataset(new URLDataSource(t2), e2);
}
function func(t2) {
  var e2 = this, r2 = iteratorFromFunction(t2);
  return datasetFromIteratorFn(function() {
    return __awaiter3(e2, void 0, void 0, function() {
      return __generator3(this, function(t3) {
        return [2, r2];
      });
    });
  });
}
function generator(t2) {
  var e2 = this;
  return datasetFromIteratorFn(function() {
    return __awaiter3(e2, void 0, void 0, function() {
      var e3;
      return __generator3(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, t2()];
          case 1:
            return e3 = r2.sent(), [2, iteratorFromFunction(function() {
              return e3.next();
            })];
        }
      });
    });
  });
}
function webcam(t2, e2) {
  return __awaiter3(this, void 0, void 0, function() {
    return __generator3(this, function(r2) {
      return [2, WebcamIterator.create(t2, e2)];
    });
  });
}
function microphone(t2) {
  return __awaiter3(this, void 0, void 0, function() {
    return __generator3(this, function(e2) {
      return [2, MicrophoneIterator.create(t2)];
    });
  });
}
var extendStatics2, alea, xor128, xorwow, xorshift7, xor4096, tychei, seedrandom, seedrandom$1, seedrandom_1, RingBuffer, GrowingRingBuffer, ZipMismatchMode, LazyIterator, ArrayIterator, FunctionCallIterator, SerialIterator, SkipIterator, TakeIterator, RowMajorBatchIterator, FilterIterator, MapIterator, ErrorHandlingLazyIterator, AsyncMapIterator, OneToManyIterator, FlatmapIterator, ChainedIterator, ZipIterator, PrefetchIterator, ShuffleIterator, Dataset, TextLineDataset, CODE_QUOTE, STATE_OUT, STATE_FIELD, STATE_QUOTE, STATE_QUOTE_AFTER_QUOTE, STATE_WITHIN_QUOTE_IN_QUOTE, CSVDataset, MicrophoneIterator, WebcamIterator, DataSource, StringIterator, SplitIterator, SplitIteratorImpl, ByteChunkIterator, Utf8Iterator, Utf8IteratorImpl, FileChunkIterator, getRequestInitFromRequest, FileDataSource, URLDataSource, version3;
var init_tf_data_esm = __esm({
  "node_modules/@tensorflow/tfjs-data/dist/tf-data.esm.js"() {
    init_tf_core_esm();
    extendStatics2 = function(t2, e2) {
      return (extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
        t3.__proto__ = e3;
      } || function(t3, e3) {
        for (var r2 in e3)
          e3.hasOwnProperty(r2) && (t3[r2] = e3[r2]);
      })(t2, e2);
    };
    alea = createCommonjsModule(function(t2) {
      !function(t3, e2, r2) {
        function n2(t4, e3) {
          return e3.c = t4.c, e3.s0 = t4.s0, e3.s1 = t4.s1, e3.s2 = t4.s2, e3;
        }
        function i2(t4, e3) {
          var r3 = new function(t5) {
            var e4, r4 = this, n3 = (e4 = 4022871197, function(t6) {
              t6 = t6.toString();
              for (var r5 = 0; r5 < t6.length; r5++) {
                var n4 = 0.02519603282416938 * (e4 += t6.charCodeAt(r5));
                n4 -= e4 = n4 >>> 0, e4 = (n4 *= e4) >>> 0, e4 += 4294967296 * (n4 -= e4);
              }
              return 23283064365386963e-26 * (e4 >>> 0);
            });
            r4.next = function() {
              var t6 = 2091639 * r4.s0 + 23283064365386963e-26 * r4.c;
              return r4.s0 = r4.s1, r4.s1 = r4.s2, r4.s2 = t6 - (r4.c = 0 | t6);
            }, r4.c = 1, r4.s0 = n3(" "), r4.s1 = n3(" "), r4.s2 = n3(" "), r4.s0 -= n3(t5), r4.s0 < 0 && (r4.s0 += 1), r4.s1 -= n3(t5), r4.s1 < 0 && (r4.s1 += 1), r4.s2 -= n3(t5), r4.s2 < 0 && (r4.s2 += 1), n3 = null;
          }(t4), i3 = e3 && e3.state, o2 = r3.next;
          return o2.int32 = function() {
            return 4294967296 * r3.next() | 0;
          }, o2.double = function() {
            return o2() + 11102230246251565e-32 * (2097152 * o2() | 0);
          }, o2.quick = o2, i3 && ("object" == typeof i3 && n2(i3, r3), o2.state = function() {
            return n2(r3, {});
          }), o2;
        }
        e2 && e2.exports ? e2.exports = i2 : r2 && r2.amd ? r2(function() {
          return i2;
        }) : this.alea = i2;
      }(0, t2, false);
    });
    xor128 = createCommonjsModule(function(t2) {
      !function(t3, e2, r2) {
        function n2(t4, e3) {
          return e3.x = t4.x, e3.y = t4.y, e3.z = t4.z, e3.w = t4.w, e3;
        }
        function i2(t4, e3) {
          var r3 = new function(t5) {
            var e4 = this, r4 = "";
            e4.x = 0, e4.y = 0, e4.z = 0, e4.w = 0, e4.next = function() {
              var t6 = e4.x ^ e4.x << 11;
              return e4.x = e4.y, e4.y = e4.z, e4.z = e4.w, e4.w ^= e4.w >>> 19 ^ t6 ^ t6 >>> 8;
            }, t5 === (0 | t5) ? e4.x = t5 : r4 += t5;
            for (var n3 = 0; n3 < r4.length + 64; n3++)
              e4.x ^= 0 | r4.charCodeAt(n3), e4.next();
          }(t4), i3 = e3 && e3.state, o2 = function() {
            return (r3.next() >>> 0) / 4294967296;
          };
          return o2.double = function() {
            do {
              var t5 = ((r3.next() >>> 11) + (r3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, o2.int32 = r3.next, o2.quick = o2, i3 && ("object" == typeof i3 && n2(i3, r3), o2.state = function() {
            return n2(r3, {});
          }), o2;
        }
        e2 && e2.exports ? e2.exports = i2 : r2 && r2.amd ? r2(function() {
          return i2;
        }) : this.xor128 = i2;
      }(0, t2, false);
    });
    xorwow = createCommonjsModule(function(t2) {
      !function(t3, e2, r2) {
        function n2(t4, e3) {
          return e3.x = t4.x, e3.y = t4.y, e3.z = t4.z, e3.w = t4.w, e3.v = t4.v, e3.d = t4.d, e3;
        }
        function i2(t4, e3) {
          var r3 = new function(t5) {
            var e4 = this, r4 = "";
            e4.next = function() {
              var t6 = e4.x ^ e4.x >>> 2;
              return e4.x = e4.y, e4.y = e4.z, e4.z = e4.w, e4.w = e4.v, (e4.d = e4.d + 362437 | 0) + (e4.v = e4.v ^ e4.v << 4 ^ t6 ^ t6 << 1) | 0;
            }, e4.x = 0, e4.y = 0, e4.z = 0, e4.w = 0, e4.v = 0, t5 === (0 | t5) ? e4.x = t5 : r4 += t5;
            for (var n3 = 0; n3 < r4.length + 64; n3++)
              e4.x ^= 0 | r4.charCodeAt(n3), n3 == r4.length && (e4.d = e4.x << 10 ^ e4.x >>> 4), e4.next();
          }(t4), i3 = e3 && e3.state, o2 = function() {
            return (r3.next() >>> 0) / 4294967296;
          };
          return o2.double = function() {
            do {
              var t5 = ((r3.next() >>> 11) + (r3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, o2.int32 = r3.next, o2.quick = o2, i3 && ("object" == typeof i3 && n2(i3, r3), o2.state = function() {
            return n2(r3, {});
          }), o2;
        }
        e2 && e2.exports ? e2.exports = i2 : r2 && r2.amd ? r2(function() {
          return i2;
        }) : this.xorwow = i2;
      }(0, t2, false);
    });
    xorshift7 = createCommonjsModule(function(t2) {
      !function(t3, e2, r2) {
        function n2(t4, e3) {
          return e3.x = t4.x.slice(), e3.i = t4.i, e3;
        }
        function i2(t4, e3) {
          null == t4 && (t4 = +/* @__PURE__ */ new Date());
          var r3 = new function(t5) {
            var e4 = this;
            e4.next = function() {
              var t6, r4, n3 = e4.x, i4 = e4.i;
              return t6 = n3[i4], r4 = (t6 ^= t6 >>> 7) ^ t6 << 24, r4 ^= (t6 = n3[i4 + 1 & 7]) ^ t6 >>> 10, r4 ^= (t6 = n3[i4 + 3 & 7]) ^ t6 >>> 3, r4 ^= (t6 = n3[i4 + 4 & 7]) ^ t6 << 7, t6 = n3[i4 + 7 & 7], r4 ^= (t6 ^= t6 << 13) ^ t6 << 9, n3[i4] = r4, e4.i = i4 + 1 & 7, r4;
            }, function(t6, e5) {
              var r4, n3 = [];
              if (e5 === (0 | e5))
                n3[0] = e5;
              else
                for (e5 = "" + e5, r4 = 0; r4 < e5.length; ++r4)
                  n3[7 & r4] = n3[7 & r4] << 15 ^ e5.charCodeAt(r4) + n3[r4 + 1 & 7] << 13;
              for (; n3.length < 8; )
                n3.push(0);
              for (r4 = 0; r4 < 8 && 0 === n3[r4]; ++r4)
                ;
              for (8 == r4 ? n3[7] = -1 : n3[r4], t6.x = n3, t6.i = 0, r4 = 256; r4 > 0; --r4)
                t6.next();
            }(e4, t5);
          }(t4), i3 = e3 && e3.state, o2 = function() {
            return (r3.next() >>> 0) / 4294967296;
          };
          return o2.double = function() {
            do {
              var t5 = ((r3.next() >>> 11) + (r3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, o2.int32 = r3.next, o2.quick = o2, i3 && (i3.x && n2(i3, r3), o2.state = function() {
            return n2(r3, {});
          }), o2;
        }
        e2 && e2.exports ? e2.exports = i2 : r2 && r2.amd ? r2(function() {
          return i2;
        }) : this.xorshift7 = i2;
      }(0, t2, false);
    });
    xor4096 = createCommonjsModule(function(t2) {
      !function(t3, e2, r2) {
        function n2(t4, e3) {
          return e3.i = t4.i, e3.w = t4.w, e3.X = t4.X.slice(), e3;
        }
        function i2(t4, e3) {
          null == t4 && (t4 = +/* @__PURE__ */ new Date());
          var r3 = new function(t5) {
            var e4 = this;
            e4.next = function() {
              var t6, r4, n3 = e4.w, i4 = e4.X, o3 = e4.i;
              return e4.w = n3 = n3 + 1640531527 | 0, r4 = i4[o3 + 34 & 127], t6 = i4[o3 = o3 + 1 & 127], r4 ^= r4 << 13, t6 ^= t6 << 17, r4 ^= r4 >>> 15, t6 ^= t6 >>> 12, r4 = i4[o3] = r4 ^ t6, e4.i = o3, r4 + (n3 ^ n3 >>> 16) | 0;
            }, function(t6, e5) {
              var r4, n3, i4, o3, a2, s2 = [], u2 = 128;
              for (e5 === (0 | e5) ? (n3 = e5, e5 = null) : (e5 += "\0", n3 = 0, u2 = Math.max(u2, e5.length)), i4 = 0, o3 = -32; o3 < u2; ++o3)
                e5 && (n3 ^= e5.charCodeAt((o3 + 32) % e5.length)), 0 === o3 && (a2 = n3), n3 ^= n3 << 10, n3 ^= n3 >>> 15, n3 ^= n3 << 4, n3 ^= n3 >>> 13, o3 >= 0 && (a2 = a2 + 1640531527 | 0, i4 = 0 == (r4 = s2[127 & o3] ^= n3 + a2) ? i4 + 1 : 0);
              for (i4 >= 128 && (s2[127 & (e5 && e5.length || 0)] = -1), i4 = 127, o3 = 512; o3 > 0; --o3)
                n3 = s2[i4 + 34 & 127], r4 = s2[i4 = i4 + 1 & 127], n3 ^= n3 << 13, r4 ^= r4 << 17, n3 ^= n3 >>> 15, r4 ^= r4 >>> 12, s2[i4] = n3 ^ r4;
              t6.w = a2, t6.X = s2, t6.i = i4;
            }(e4, t5);
          }(t4), i3 = e3 && e3.state, o2 = function() {
            return (r3.next() >>> 0) / 4294967296;
          };
          return o2.double = function() {
            do {
              var t5 = ((r3.next() >>> 11) + (r3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, o2.int32 = r3.next, o2.quick = o2, i3 && (i3.X && n2(i3, r3), o2.state = function() {
            return n2(r3, {});
          }), o2;
        }
        e2 && e2.exports ? e2.exports = i2 : r2 && r2.amd ? r2(function() {
          return i2;
        }) : this.xor4096 = i2;
      }(0, t2, false);
    });
    tychei = createCommonjsModule(function(t2) {
      !function(t3, e2, r2) {
        function n2(t4, e3) {
          return e3.a = t4.a, e3.b = t4.b, e3.c = t4.c, e3.d = t4.d, e3;
        }
        function i2(t4, e3) {
          var r3 = new function(t5) {
            var e4 = this, r4 = "";
            e4.next = function() {
              var t6 = e4.b, r5 = e4.c, n4 = e4.d, i4 = e4.a;
              return t6 = t6 << 25 ^ t6 >>> 7 ^ r5, r5 = r5 - n4 | 0, n4 = n4 << 24 ^ n4 >>> 8 ^ i4, i4 = i4 - t6 | 0, e4.b = t6 = t6 << 20 ^ t6 >>> 12 ^ r5, e4.c = r5 = r5 - n4 | 0, e4.d = n4 << 16 ^ r5 >>> 16 ^ i4, e4.a = i4 - t6 | 0;
            }, e4.a = 0, e4.b = 0, e4.c = -1640531527, e4.d = 1367130551, t5 === Math.floor(t5) ? (e4.a = t5 / 4294967296 | 0, e4.b = 0 | t5) : r4 += t5;
            for (var n3 = 0; n3 < r4.length + 20; n3++)
              e4.b ^= 0 | r4.charCodeAt(n3), e4.next();
          }(t4), i3 = e3 && e3.state, o2 = function() {
            return (r3.next() >>> 0) / 4294967296;
          };
          return o2.double = function() {
            do {
              var t5 = ((r3.next() >>> 11) + (r3.next() >>> 0) / 4294967296) / (1 << 21);
            } while (0 === t5);
            return t5;
          }, o2.int32 = r3.next, o2.quick = o2, i3 && ("object" == typeof i3 && n2(i3, r3), o2.state = function() {
            return n2(r3, {});
          }), o2;
        }
        e2 && e2.exports ? e2.exports = i2 : r2 && r2.amd ? r2(function() {
          return i2;
        }) : this.tychei = i2;
      }(0, t2, false);
    });
    seedrandom = createCommonjsModule(function(t2) {
      !function(e2, r2) {
        var n2, i2 = this, o2 = 256, a2 = 6, s2 = "random", u2 = r2.pow(o2, a2), c2 = r2.pow(2, 52), l3 = 2 * c2, h2 = o2 - 1;
        function f2(t3, f3, v2) {
          var _2 = [], w2 = p2(function t4(e3, r3) {
            var n3, i3 = [], o3 = typeof e3;
            if (r3 && "object" == o3)
              for (n3 in e3)
                try {
                  i3.push(t4(e3[n3], r3 - 1));
                } catch (t5) {
                }
            return i3.length ? i3 : "string" == o3 ? e3 : e3 + "\0";
          }((f3 = 1 == f3 ? { entropy: true } : f3 || {}).entropy ? [t3, m2(e2)] : null == t3 ? function() {
            try {
              var t4;
              return n2 && (t4 = n2.randomBytes) ? t4 = t4(o2) : (t4 = new Uint8Array(o2), (i2.crypto || i2.msCrypto).getRandomValues(t4)), m2(t4);
            } catch (t5) {
              var r3 = i2.navigator, a3 = r3 && r3.plugins;
              return [+/* @__PURE__ */ new Date(), i2, a3, i2.screen, m2(e2)];
            }
          }() : t3, 3), _2), y2 = new function(t4) {
            var e3, r3 = t4.length, n3 = this, i3 = 0, a3 = n3.i = n3.j = 0, s3 = n3.S = [];
            r3 || (t4 = [r3++]);
            for (; i3 < o2; )
              s3[i3] = i3++;
            for (i3 = 0; i3 < o2; i3++)
              s3[i3] = s3[a3 = h2 & a3 + t4[i3 % r3] + (e3 = s3[i3])], s3[a3] = e3;
            (n3.g = function(t5) {
              for (var e4, r4 = 0, i4 = n3.i, a4 = n3.j, s4 = n3.S; t5--; )
                e4 = s4[i4 = h2 & i4 + 1], r4 = r4 * o2 + s4[h2 & (s4[i4] = s4[a4 = h2 & a4 + e4]) + (s4[a4] = e4)];
              return n3.i = i4, n3.j = a4, r4;
            })(o2);
          }(_2), g2 = function() {
            for (var t4 = y2.g(a2), e3 = u2, r3 = 0; t4 < c2; )
              t4 = (t4 + r3) * o2, e3 *= o2, r3 = y2.g(1);
            for (; t4 >= l3; )
              t4 /= 2, e3 /= 2, r3 >>>= 1;
            return (t4 + r3) / e3;
          };
          return g2.int32 = function() {
            return 0 | y2.g(4);
          }, g2.quick = function() {
            return y2.g(4) / 4294967296;
          }, g2.double = g2, p2(m2(y2.S), e2), (f3.pass || v2 || function(t4, e3, n3, i3) {
            return i3 && (i3.S && d2(i3, y2), t4.state = function() {
              return d2(y2, {});
            }), n3 ? (r2[s2] = t4, e3) : t4;
          })(g2, w2, "global" in f3 ? f3.global : this == r2, f3.state);
        }
        function d2(t3, e3) {
          return e3.i = t3.i, e3.j = t3.j, e3.S = t3.S.slice(), e3;
        }
        function p2(t3, e3) {
          for (var r3, n3 = t3 + "", i3 = 0; i3 < n3.length; )
            e3[h2 & i3] = h2 & (r3 ^= 19 * e3[h2 & i3]) + n3.charCodeAt(i3++);
          return m2(e3);
        }
        function m2(t3) {
          return String.fromCharCode.apply(0, t3);
        }
        if (r2["seed" + s2] = f2, p2(r2.random(), e2), t2.exports) {
          t2.exports = f2;
          try {
            n2 = require_crypto();
          } catch (t3) {
          }
        } else
          0;
      }([], Math);
    });
    seedrandom.alea = alea, seedrandom.xor128 = xor128, seedrandom.xorwow = xorwow, seedrandom.xorshift7 = xorshift7, seedrandom.xor4096 = xor4096, seedrandom.tychei = tychei;
    seedrandom$1 = seedrandom;
    seedrandom_1 = seedrandom$1.alea;
    RingBuffer = function() {
      function t2(t3) {
        if (this.capacity = t3, this.begin = 0, this.end = 0, null == t3)
          throw new RangeError("Can't create a ring buffer of unknown capacity.");
        if (t3 < 1)
          throw new RangeError("Can't create ring buffer of capacity < 1.");
        this.data = new Array(t3), this.doubledCapacity = 2 * t3;
      }
      return t2.prototype.wrap = function(t3) {
        for (; t3 < 0; )
          t3 += this.doubledCapacity;
        return t3 % this.doubledCapacity;
      }, t2.prototype.get = function(t3) {
        if (t3 < 0)
          throw new RangeError("Can't get item at a negative index.");
        return this.data[t3 % this.capacity];
      }, t2.prototype.set = function(t3, e2) {
        if (t3 < 0)
          throw new RangeError("Can't set item at a negative index.");
        this.data[t3 % this.capacity] = e2;
      }, t2.prototype.length = function() {
        var t3 = this.end - this.begin;
        return t3 < 0 && (t3 = this.doubledCapacity + t3), t3;
      }, t2.prototype.isFull = function() {
        return this.length() === this.capacity;
      }, t2.prototype.isEmpty = function() {
        return 0 === this.length();
      }, t2.prototype.push = function(t3) {
        if (this.isFull())
          throw new RangeError("Ring buffer is full.");
        this.set(this.end, t3), this.end = this.wrap(this.end + 1);
      }, t2.prototype.pushAll = function(t3) {
        for (var e2 = 0, r2 = t3; e2 < r2.length; e2++) {
          var n2 = r2[e2];
          this.push(n2);
        }
      }, t2.prototype.pop = function() {
        if (this.isEmpty())
          throw new RangeError("Ring buffer is empty.");
        this.end = this.wrap(this.end - 1);
        var t3 = this.get(this.end);
        return this.set(this.end, void 0), t3;
      }, t2.prototype.unshift = function(t3) {
        if (this.isFull())
          throw new RangeError("Ring buffer is full.");
        this.begin = this.wrap(this.begin - 1), this.set(this.begin, t3);
      }, t2.prototype.shift = function() {
        if (this.isEmpty())
          throw new RangeError("Ring buffer is empty.");
        var t3 = this.get(this.begin);
        return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), t3;
      }, t2.prototype.shuffleExcise = function(t3) {
        if (this.isEmpty())
          throw new RangeError("Ring buffer is empty.");
        var e2 = this.wrap(this.begin + t3), r2 = this.get(e2);
        return this.set(e2, this.pop()), r2;
      }, t2;
    }();
    GrowingRingBuffer = function(t2) {
      function e2() {
        return t2.call(this, e2.INITIAL_CAPACITY) || this;
      }
      return __extends2(e2, t2), e2.prototype.isFull = function() {
        return false;
      }, e2.prototype.push = function(e3) {
        t2.prototype.isFull.call(this) && this.expand(), t2.prototype.push.call(this, e3);
      }, e2.prototype.unshift = function(e3) {
        t2.prototype.isFull.call(this) && this.expand(), t2.prototype.unshift.call(this, e3);
      }, e2.prototype.expand = function() {
        for (var t3 = 2 * this.capacity, e3 = new Array(t3), r2 = this.length(), n2 = 0; n2 < r2; n2++)
          e3[n2] = this.get(this.wrap(this.begin + n2));
        this.data = e3, this.capacity = t3, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = r2;
      }, e2.INITIAL_CAPACITY = 32, e2;
    }(RingBuffer);
    LazyIterator = function() {
      function t2() {
      }
      return t2.prototype.toArray = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e2;
          return __generator3(this, function(r2) {
            switch (r2.label) {
              case 0:
                return t3 = [], [4, this.next()];
              case 1:
                e2 = r2.sent(), r2.label = 2;
              case 2:
                return e2.done ? [3, 4] : (t3.push(e2.value), [4, this.next()]);
              case 3:
                return e2 = r2.sent(), [3, 2];
              case 4:
                return [2, t3];
            }
          });
        });
      }, t2.prototype.toArrayForTest = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e2, r2;
          return __generator3(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t3 = this.prefetch(100), e2 = [], [4, t3.next()];
              case 1:
                r2 = n2.sent(), n2.label = 2;
              case 2:
                return r2.done ? [3, 4] : (e2.push(r2.value), [4, t3.next()]);
              case 3:
                return r2 = n2.sent(), [3, 2];
              case 4:
                return [2, e2];
            }
          });
        });
      }, t2.prototype.resolveFully = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3;
          return __generator3(this, function(e2) {
            switch (e2.label) {
              case 0:
                return [4, this.next()];
              case 1:
                t3 = e2.sent(), e2.label = 2;
              case 2:
                return t3.done ? [3, 4] : [4, this.next()];
              case 3:
                return t3 = e2.sent(), [3, 2];
              case 4:
                return [2];
            }
          });
        });
      }, t2.prototype.resolveWhile = function(t3) {
        return __awaiter3(this, void 0, void 0, function() {
          var e2, r2;
          return __generator3(this, function(n2) {
            switch (n2.label) {
              case 0:
                return [4, this.next()];
              case 1:
                e2 = n2.sent(), r2 = t3(e2.value), n2.label = 2;
              case 2:
                return e2.done || !r2 ? [3, 4] : [4, this.next()];
              case 3:
                return e2 = n2.sent(), r2 = t3(e2.value), [3, 2];
              case 4:
                return [2];
            }
          });
        });
      }, t2.prototype.handleErrors = function(t3) {
        return new ErrorHandlingLazyIterator(this, t3);
      }, t2.prototype.filter = function(t3) {
        return new FilterIterator(this, t3);
      }, t2.prototype.map = function(t3) {
        return new MapIterator(this, t3);
      }, t2.prototype.mapAsync = function(t3) {
        return new AsyncMapIterator(this, t3);
      }, t2.prototype.serialMapAsync = function(t3) {
        return new AsyncMapIterator(this, t3).serial();
      }, t2.prototype.flatmap = function(t3) {
        return new FlatmapIterator(this, t3);
      }, t2.prototype.forEachAsync = function(t3) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(e2) {
            return [2, this.map(t3).resolveFully()];
          });
        });
      }, t2.prototype.serialForEach = function(t3) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(e2) {
            return [2, this.serialMapAsync(t3).resolveWhile(function(t4) {
              return true === t4;
            })];
          });
        });
      }, t2.prototype.rowMajorBatch = function(t3, e2) {
        return void 0 === e2 && (e2 = true), new RowMajorBatchIterator(this, t3, e2);
      }, t2.prototype.columnMajorBatch = function(t3, e2, r2) {
        return void 0 === e2 && (e2 = true), void 0 === r2 && (r2 = zipToList), this.rowMajorBatch(t3, e2).map(function(t4) {
          return deepZip(t4, r2);
        });
      }, t2.prototype.concatenate = function(t3, e2) {
        return new ChainedIterator(iteratorFromItems([this, t3]), e2);
      }, t2.prototype.take = function(t3) {
        return t3 < 0 || null == t3 ? this : new TakeIterator(this, t3);
      }, t2.prototype.skip = function(t3) {
        return t3 < 0 || null == t3 ? this : new SkipIterator(this, t3);
      }, t2.prototype.prefetch = function(t3) {
        return new PrefetchIterator(this, t3);
      }, t2.prototype.shuffle = function(t3, e2) {
        return new ShuffleIterator(this, t3, e2);
      }, t2.prototype.serial = function() {
        return new SerialIterator(this);
      }, t2;
    }();
    ArrayIterator = function(t2) {
      function e2(e3) {
        var r2 = t2.call(this) || this;
        return r2.items = e3, r2.trav = 0, r2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return "Array of " + this.items.length + " items";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3;
          return __generator3(this, function(e3) {
            return this.trav >= this.items.length ? [2, { value: null, done: true }] : (t3 = this.items[this.trav], this.trav++, [2, { value: deepClone(t3), done: false }]);
          });
        });
      }, e2;
    }(LazyIterator);
    FunctionCallIterator = function(t2) {
      function e2(e3) {
        var r2 = t2.call(this) || this;
        return r2.nextFn = e3, r2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return "Function call";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            try {
              return [2, this.nextFn()];
            } catch (t4) {
              throw t4.message = "Error thrown while iterating through a dataset: " + t4.message, t4;
            }
            return [2];
          });
        });
      }, e2;
    }(LazyIterator);
    SerialIterator = function(t2) {
      function e2(e3) {
        var r2 = t2.call(this) || this;
        return r2.upstream = e3, r2.lastRead = Promise.resolve({ value: null, done: false }), r2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Serial";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3 = this;
          return __generator3(this, function(e3) {
            return this.lastRead = this.lastRead.then(function() {
              return t3.serialNext();
            }), [2, this.lastRead];
          });
        });
      }, e2.prototype.serialNext = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            return [2, this.upstream.next()];
          });
        });
      }, e2;
    }(LazyIterator);
    SkipIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.maxCount = r2, n2.count = 0, n2.lastRead = Promise.resolve({ value: null, done: false }), n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Skip";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3 = this;
          return __generator3(this, function(e3) {
            return this.lastRead = this.lastRead.then(function() {
              return t3.serialNext();
            }), [2, this.lastRead];
          });
        });
      }, e2.prototype.serialNext = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3;
          return __generator3(this, function(e3) {
            switch (e3.label) {
              case 0:
                return this.count++ < this.maxCount ? [4, this.upstream.next()] : [3, 2];
              case 1:
                return (t3 = e3.sent()).done ? [2, t3] : (Xe(t3.value), [3, 0]);
              case 2:
                return [2, this.upstream.next()];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    TakeIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.maxCount = r2, n2.count = 0, n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Take";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            return this.count++ >= this.maxCount ? [2, { value: null, done: true }] : [2, this.upstream.next()];
          });
        });
      }, e2;
    }(LazyIterator);
    RowMajorBatchIterator = function(t2) {
      function e2(e3, r2, n2) {
        void 0 === n2 && (n2 = true);
        var i2 = t2.call(this) || this;
        return i2.upstream = e3, i2.batchSize = r2, i2.enableSmallLastBatch = n2, i2.lastRead = Promise.resolve({ value: null, done: false }), i2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> RowMajorBatch";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3 = this;
          return __generator3(this, function(e3) {
            return this.lastRead = this.lastRead.then(function() {
              return t3.serialNext();
            }), [2, this.lastRead];
          });
        });
      }, e2.prototype.serialNext = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3;
          return __generator3(this, function(r2) {
            switch (r2.label) {
              case 0:
                t3 = [], r2.label = 1;
              case 1:
                return t3.length < this.batchSize ? [4, this.upstream.next()] : [3, 3];
              case 2:
                return (e3 = r2.sent()).done ? this.enableSmallLastBatch && t3.length > 0 ? [2, { value: t3, done: false }] : [2, { value: null, done: true }] : (t3.push(e3.value), [3, 1]);
              case 3:
                return [2, { value: t3, done: false }];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    FilterIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.predicate = r2, n2.lastRead = Promise.resolve({ value: null, done: false }), n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Filter";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3 = this;
          return __generator3(this, function(e3) {
            return this.lastRead = this.lastRead.then(function() {
              return t3.serialNext();
            }), [2, this.lastRead];
          });
        });
      }, e2.prototype.serialNext = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3;
          return __generator3(this, function(e3) {
            switch (e3.label) {
              case 0:
                return [4, this.upstream.next()];
              case 1:
                return (t3 = e3.sent()).done || this.predicate(t3.value) ? [2, t3] : (Xe(t3.value), [3, 0]);
              case 2:
                return [2];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    MapIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.transform = r2, n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Map";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2, i2, o2, a2;
          return __generator3(this, function(s2) {
            switch (s2.label) {
              case 0:
                return [4, this.upstream.next()];
              case 1:
                if ((t3 = s2.sent()).done)
                  return [2, { value: null, done: true }];
                for (e3 = At.getTensorsInContainer(t3.value), r2 = this.transform(t3.value), n2 = At.getTensorsInContainer(r2), i2 = 0, o2 = e3; i2 < o2.length; i2++)
                  a2 = o2[i2], At.isTensorInList(a2, n2) || a2.dispose();
                return [2, { value: r2, done: false }];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    ErrorHandlingLazyIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.handler = r2, n2.count = 0, n2.lastRead = Promise.resolve({ value: null, done: false }), n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> handleErrors";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3 = this;
          return __generator3(this, function(e3) {
            return this.lastRead = this.lastRead.then(function() {
              return t3.serialNext();
            }), [2, this.lastRead];
          });
        });
      }, e2.prototype.serialNext = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3;
          return __generator3(this, function(e3) {
            switch (e3.label) {
              case 0:
                e3.label = 1;
              case 1:
                return e3.trys.push([1, 3, , 4]), [4, this.upstream.next()];
              case 2:
                return [2, e3.sent()];
              case 3:
                return t3 = e3.sent(), this.handler(t3) ? [3, 4] : [2, { value: null, done: true }];
              case 4:
                return [3, 0];
              case 5:
                return [2];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    AsyncMapIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.transform = r2, n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> AsyncMap";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2, i2, o2, a2;
          return __generator3(this, function(s2) {
            switch (s2.label) {
              case 0:
                return [4, this.upstream.next()];
              case 1:
                return (t3 = s2.sent()).done ? [2, { value: null, done: true }] : (e3 = At.getTensorsInContainer(t3.value), [4, this.transform(t3.value)]);
              case 2:
                for (r2 = s2.sent(), n2 = At.getTensorsInContainer(r2), i2 = 0, o2 = e3; i2 < o2.length; i2++)
                  a2 = o2[i2], At.isTensorInList(a2, n2) || a2.dispose();
                return [2, { value: r2, done: false }];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    OneToManyIterator = function(t2) {
      function e2() {
        var e3 = t2.call(this) || this;
        return e3.outputQueue = new GrowingRingBuffer(), e3.lastRead = Promise.resolve({ value: null, done: false }), e3;
      }
      return __extends2(e2, t2), e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3 = this;
          return __generator3(this, function(e3) {
            return this.lastRead = this.lastRead.then(function() {
              return t3.serialNext();
            }), [2, this.lastRead];
          });
        });
      }, e2.prototype.serialNext = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            switch (t3.label) {
              case 0:
                return 0 !== this.outputQueue.length() ? [3, 2] : [4, this.pump()];
              case 1:
                return t3.sent() ? [3, 0] : [2, { value: null, done: true }];
              case 2:
                return [2, { value: this.outputQueue.shift(), done: false }];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    FlatmapIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.transform = r2, n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Flatmap";
      }, e2.prototype.pump = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2, i2, o2, a2;
          return __generator3(this, function(s2) {
            switch (s2.label) {
              case 0:
                return [4, this.upstream.next()];
              case 1:
                if ((t3 = s2.sent()).done)
                  return [2, false];
                for (e3 = At.getTensorsInContainer(t3.value), r2 = this.transform(t3.value), n2 = At.getTensorsInContainer(r2), this.outputQueue.pushAll(r2), i2 = 0, o2 = e3; i2 < o2.length; i2++)
                  a2 = o2[i2], At.isTensorInList(a2, n2) || a2.dispose();
                return [2, true];
            }
          });
        });
      }, e2;
    }(OneToManyIterator);
    ChainedIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.baseErrorHandler = r2, n2.lastRead = null, n2.iterator = null, n2.moreIterators = e3, n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return "TODO: fill in upstream of chained summaries -> Chained";
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            return this.lastRead = this.readFromChain(this.lastRead), [2, this.lastRead];
          });
        });
      }, e2.prototype.readFromChain = function(t3) {
        return __awaiter3(this, void 0, void 0, function() {
          var e3, r2;
          return __generator3(this, function(n2) {
            switch (n2.label) {
              case 0:
                return [4, t3];
              case 1:
                return n2.sent(), null != this.iterator ? [3, 3] : [4, this.moreIterators.next()];
              case 2:
                if ((e3 = n2.sent()).done)
                  return [2, { value: null, done: true }];
                this.iterator = e3.value, null != this.baseErrorHandler && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler)), n2.label = 3;
              case 3:
                return [4, this.iterator.next()];
              case 4:
                return (r2 = n2.sent()).done ? (this.iterator = null, [2, this.readFromChain(t3)]) : [2, r2];
            }
          });
        });
      }, e2;
    }(LazyIterator);
    !function(t2) {
      t2[t2.FAIL = 0] = "FAIL", t2[t2.SHORTEST = 1] = "SHORTEST", t2[t2.LONGEST = 2] = "LONGEST";
    }(ZipMismatchMode || (ZipMismatchMode = {}));
    ZipIterator = function(t2) {
      function e2(e3, r2) {
        void 0 === r2 && (r2 = ZipMismatchMode.FAIL);
        var n2 = t2.call(this) || this;
        return n2.iterators = e3, n2.mismatchMode = r2, n2.count = 0, n2.currentPromise = null, n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return "{TODO: fill in upstream of zip summaries} -> Zip";
      }, e2.prototype.nextState = function(t3) {
        return __awaiter3(this, void 0, void 0, function() {
          function e3(t4) {
            return t4 instanceof LazyIterator ? { value: t4.next().then(function(t5) {
              return r2++, t5.done && n2++, t5.value;
            }), recurse: false } : { value: null, recurse: true };
          }
          var r2, n2, i2;
          return __generator3(this, function(o2) {
            switch (o2.label) {
              case 0:
                return [4, t3];
              case 1:
                return o2.sent(), r2 = 0, n2 = 0, [4, deepMapAndAwaitAll(this.iterators, e3)];
              case 2:
                if (i2 = o2.sent(), r2 === n2)
                  return [2, { value: null, done: true }];
                if (n2 > 0)
                  switch (this.mismatchMode) {
                    case ZipMismatchMode.FAIL:
                      throw new Error("Zipped streams should have the same length. Mismatched at element " + this.count + ".");
                    case ZipMismatchMode.SHORTEST:
                      return [2, { value: null, done: true }];
                    case ZipMismatchMode.LONGEST:
                  }
                return this.count++, [2, { value: i2, done: false }];
            }
          });
        });
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            return this.currentPromise = this.nextState(this.currentPromise), [2, this.currentPromise];
          });
        });
      }, e2;
    }(LazyIterator);
    PrefetchIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.bufferSize = r2, n2.buffer = new RingBuffer(r2), n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Prefetch";
      }, e2.prototype.refill = function() {
        for (; !this.buffer.isFull(); ) {
          var t3 = this.upstream.next();
          this.buffer.push(t3);
        }
      }, e2.prototype.next = function() {
        return this.refill(), this.buffer.shift();
      }, e2;
    }(LazyIterator);
    ShuffleIterator = function(t2) {
      function e2(e3, r2, n2) {
        var i2 = t2.call(this, e3, r2) || this;
        return i2.upstream = e3, i2.windowSize = r2, i2.upstreamExhausted = false, i2.random = seedrandom_1(n2 || tt.now().toString()), i2.lastRead = Promise.resolve({ value: null, done: false }), i2;
      }
      return __extends2(e2, t2), e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3 = this;
          return __generator3(this, function(e3) {
            return this.lastRead = this.lastRead.then(function() {
              return t3.serialNext();
            }), [2, this.lastRead];
          });
        });
      }, e2.prototype.randomInt = function(t3) {
        return Math.floor(this.random() * t3);
      }, e2.prototype.chooseIndex = function() {
        return this.randomInt(this.buffer.length());
      }, e2.prototype.serialNext = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3;
          return __generator3(this, function(r2) {
            switch (r2.label) {
              case 0:
                this.upstreamExhausted || this.refill(), r2.label = 1;
              case 1:
                return this.buffer.isEmpty() ? [3, 3] : (t3 = this.chooseIndex(), [4, this.buffer.shuffleExcise(t3)]);
              case 2:
                return (e3 = r2.sent()).done ? (this.upstreamExhausted = true, [3, 1]) : (this.refill(), [2, e3]);
              case 3:
                return [2, { value: null, done: true }];
            }
          });
        });
      }, e2;
    }(PrefetchIterator);
    Dataset = function() {
      function t2() {
        this.size = null;
      }
      return t2.prototype.batch = function(t3, e2) {
        var r2 = this;
        void 0 === e2 && (e2 = true);
        var n2 = this;
        return tt.assert(t3 > 0, function() {
          return "batchSize needs to be positive, but it is\n      " + t3;
        }), datasetFromIteratorFn(function() {
          return __awaiter3(r2, void 0, void 0, function() {
            return __generator3(this, function(r3) {
              switch (r3.label) {
                case 0:
                  return [4, n2.iterator()];
                case 1:
                  return [2, r3.sent().columnMajorBatch(t3, e2, deepBatchConcat)];
              }
            });
          });
        }, this.size === 1 / 0 || null == this.size ? this.size : e2 ? Math.ceil(this.size / t3) : Math.floor(this.size / t3));
      }, t2.prototype.concatenate = function(t3) {
        var e2 = this, r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            var e3, n2;
            return __generator3(this, function(i2) {
              switch (i2.label) {
                case 0:
                  return [4, r2.iterator()];
                case 1:
                  return n2 = (e3 = i2.sent()).concatenate, [4, t3.iterator()];
                case 2:
                  return [2, n2.apply(e3, [i2.sent()])];
              }
            });
          });
        }, this.size === 1 / 0 || t3.size === 1 / 0 ? 1 / 0 : null != this.size && null != t3.size ? this.size + t3.size : null);
      }, t2.prototype.filter = function(t3) {
        var e2 = this, r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            return __generator3(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, r2.iterator()];
                case 1:
                  return [2, e3.sent().filter(function(e4) {
                    return je(function() {
                      return t3(e4);
                    });
                  })];
              }
            });
          });
        }, this.size === 1 / 0 ? 1 / 0 : null);
      }, t2.prototype.forEachAsync = function(t3) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(e2) {
            switch (e2.label) {
              case 0:
                return [4, this.iterator()];
              case 1:
                return [2, e2.sent().forEachAsync(t3)];
            }
          });
        });
      }, t2.prototype.forEach = function(t3) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(e2) {
            return ze("dataset.forEach() is deprecated and will be removed. Please use dataset.forEachAsync() instead"), [2, this.forEachAsync(t3)];
          });
        });
      }, t2.prototype.map = function(t3) {
        var e2 = this, r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            return __generator3(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, r2.iterator()];
                case 1:
                  return [2, e3.sent().map(function(e4) {
                    return je(function() {
                      return t3(e4);
                    });
                  })];
              }
            });
          });
        }, this.size);
      }, t2.prototype.mapAsync = function(t3) {
        var e2 = this, r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            return __generator3(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, r2.iterator()];
                case 1:
                  return [2, e3.sent().mapAsync(t3)];
              }
            });
          });
        }, this.size);
      }, t2.prototype.prefetch = function(t3) {
        var e2 = this;
        if (null == t3)
          throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
        var r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            return __generator3(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, r2.iterator()];
                case 1:
                  return [2, e3.sent().prefetch(t3)];
              }
            });
          });
        }, this.size);
      }, t2.prototype.repeat = function(t3) {
        var e2 = this, r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            var e3 = this;
            return __generator3(this, function(n2) {
              return [2, iteratorFromConcatenated(iteratorFromFunction(function() {
                return __awaiter3(e3, void 0, void 0, function() {
                  var t4;
                  return __generator3(this, function(e4) {
                    switch (e4.label) {
                      case 0:
                        return t4 = {}, [4, r2.iterator()];
                      case 1:
                        return [2, (t4.value = e4.sent(), t4.done = false, t4)];
                    }
                  });
                });
              }).take(t3))];
            });
          });
        }, null != this.size && t3 > 0 ? this.size * t3 : 0 === t3 ? 0 : null != this.size && (void 0 === t3 || t3 < 0) ? 1 / 0 : null);
      }, t2.prototype.skip = function(t3) {
        var e2 = this, r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            return __generator3(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, r2.iterator()];
                case 1:
                  return [2, e3.sent().skip(t3)];
              }
            });
          });
        }, null != this.size && t3 >= 0 && this.size >= t3 ? this.size - t3 : null != this.size && (this.size < t3 || void 0 === t3 || t3 < 0) ? 0 : null);
      }, t2.prototype.shuffle = function(t3, e2, r2) {
        var n2 = this;
        if (void 0 === r2 && (r2 = true), null == t3 || t3 < 0)
          throw null == this.size ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for `tf.Tensor`s), consider setting bufferSize to the dataset size (" + this.size + " elements)");
        var i2 = this, o2 = seedrandom_1(e2 || tt.now().toString());
        return datasetFromIteratorFn(function() {
          return __awaiter3(n2, void 0, void 0, function() {
            var e3;
            return __generator3(this, function(n3) {
              switch (n3.label) {
                case 0:
                  return e3 = o2.int32(), r2 && (e3 += o2.int32()), [4, i2.iterator()];
                case 1:
                  return [2, n3.sent().shuffle(t3, e3.toString())];
              }
            });
          });
        }, this.size);
      }, t2.prototype.take = function(t3) {
        var e2 = this, r2 = this;
        return datasetFromIteratorFn(function() {
          return __awaiter3(e2, void 0, void 0, function() {
            return __generator3(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, r2.iterator()];
                case 1:
                  return [2, e3.sent().take(t3)];
              }
            });
          });
        }, null != this.size && this.size > t3 ? t3 : null != this.size && this.size <= t3 ? this.size : null);
      }, t2.prototype.toArray = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            switch (t3.label) {
              case 0:
                if (this.size === 1 / 0)
                  throw new Error("Can not convert infinite data stream to array.");
                return [4, this.iterator()];
              case 1:
                return [2, t3.sent().toArray()];
            }
          });
        });
      }, t2.prototype.toArrayForTest = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            switch (t3.label) {
              case 0:
                if (this.size === 1 / 0)
                  throw new Error("Can not convert infinite data stream to array.");
                return [4, this.iterator()];
              case 1:
                return [2, t3.sent().toArrayForTest()];
            }
          });
        });
      }, t2.MAX_BUFFER_SIZE = 1e4, t2;
    }();
    TextLineDataset = function(t2) {
      function e2(e3) {
        var r2 = t2.call(this) || this;
        return r2.input = e3, r2;
      }
      return __extends2(e2, t2), e2.prototype.iterator = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3;
          return __generator3(this, function(r2) {
            switch (r2.label) {
              case 0:
                return [4, this.input.iterator()];
              case 1:
                return t3 = r2.sent(), e3 = t3.decodeUTF8(), [2, e3.split("\n").map(function(t4) {
                  return t4.endsWith("\r") && (t4 = t4.slice(0, -1)), t4;
                })];
            }
          });
        });
      }, e2;
    }(Dataset);
    CODE_QUOTE = '"';
    STATE_OUT = Symbol("out");
    STATE_FIELD = Symbol("field");
    STATE_QUOTE = Symbol("quote");
    STATE_QUOTE_AFTER_QUOTE = Symbol("quoteafterquote");
    STATE_WITHIN_QUOTE_IN_QUOTE = Symbol("quoteinquote");
    CSVDataset = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.input = e3, n2.hasHeader = true, n2.fullColumnNames = null, n2.columnNamesValidated = false, n2.columnConfigs = null, n2.configuredColumnsOnly = false, n2.delimiter = ",", n2.delimWhitespace = false, n2.base = new TextLineDataset(e3), r2 || (r2 = {}), n2.hasHeader = false !== r2.hasHeader, n2.fullColumnNames = r2.columnNames, n2.columnConfigs = r2.columnConfigs, n2.configuredColumnsOnly = r2.configuredColumnsOnly, r2.delimWhitespace ? (tt.assert(null == r2.delimiter, function() {
          return "Delimiter should not be provided when delimWhitespace is true.";
        }), n2.delimWhitespace = true, n2.delimiter = " ") : n2.delimiter = r2.delimiter ? r2.delimiter : ",", n2;
      }
      return __extends2(e2, t2), e2.prototype.columnNames = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            switch (t3.label) {
              case 0:
                return this.columnNamesValidated ? [3, 2] : [4, this.setColumnNames()];
              case 1:
                t3.sent(), t3.label = 2;
              case 2:
                return [2, this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames];
            }
          });
        });
      }, e2.prototype.setColumnNames = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2, i2, o2, a2 = this;
          return __generator3(this, function(s2) {
            switch (s2.label) {
              case 0:
                return [4, this.maybeReadHeaderLine()];
              case 1:
                if (t3 = s2.sent(), !this.fullColumnNames && !t3)
                  throw new Error("Column names must be provided if there is no header line.");
                if (this.fullColumnNames && t3 && tt.assert(t3.length === this.fullColumnNames.length, function() {
                  return "The length of provided columnNames (" + a2.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + t3.length.toString() + ").";
                }), this.fullColumnNames || (this.fullColumnNames = t3), e3 = this.fullColumnNames.reduce(function(t4, e4) {
                  return t4[e4] = t4[e4] + 1 || 1, t4;
                }, {}), r2 = Object.keys(e3).filter(function(t4) {
                  return e3[t4] > 1;
                }), tt.assert(0 === r2.length, function() {
                  return "Duplicate column names found: " + r2.toString();
                }), this.columnConfigs) {
                  for (n2 = 0, i2 = Object.keys(this.columnConfigs); n2 < i2.length; n2++)
                    if (o2 = i2[n2], -1 === this.fullColumnNames.indexOf(o2))
                      throw new Error('The key "' + o2 + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
                }
                return this.columnNamesValidated = true, [2];
            }
          });
        });
      }, e2.prototype.maybeReadHeaderLine = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3;
          return __generator3(this, function(r2) {
            switch (r2.label) {
              case 0:
                return this.hasHeader ? [4, this.base.iterator()] : [3, 3];
              case 1:
                return [4, r2.sent().next()];
              case 2:
                if ((t3 = r2.sent()).done)
                  throw new Error("No data was found for CSV parsing.");
                return e3 = t3.value, [2, this.parseRow(e3, false)];
              case 3:
                return [2, null];
            }
          });
        });
      }, e2.prototype.iterator = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3 = this;
          return __generator3(this, function(r2) {
            switch (r2.label) {
              case 0:
                return this.columnNamesValidated ? [3, 2] : [4, this.setColumnNames()];
              case 1:
                r2.sent(), r2.label = 2;
              case 2:
                return [4, this.base.iterator()];
              case 3:
                return t3 = r2.sent(), this.hasHeader && (t3 = t3.skip(1)), [2, t3.map(function(t4) {
                  return e3.makeDataElement(t4);
                })];
            }
          });
        });
      }, e2.prototype.makeDataElement = function(t3) {
        for (var e3 = this.parseRow(t3), r2 = {}, n2 = {}, i2 = 0; i2 < this.fullColumnNames.length; i2++) {
          var o2 = this.fullColumnNames[i2], a2 = this.columnConfigs ? this.columnConfigs[o2] : null;
          if (!this.configuredColumnsOnly || a2) {
            var s2 = e3[i2], u2 = null;
            if ("" === s2)
              if (a2 && void 0 !== a2.default)
                u2 = a2.default;
              else {
                if (a2 && (a2.required || a2.isLabel))
                  throw new Error("Required column " + o2 + " is empty in this line: " + t3);
                u2 = void 0;
              }
            else {
              var c2 = Number(s2);
              if (isNaN(c2))
                u2 = a2 && "bool" === a2.dtype ? this.getBoolean(s2) : s2;
              else if (a2 && a2.dtype)
                switch (a2.dtype) {
                  case "float32":
                    u2 = c2;
                    break;
                  case "int32":
                    u2 = Math.floor(c2);
                    break;
                  case "bool":
                    u2 = this.getBoolean(s2);
                    break;
                  default:
                    u2 = c2;
                }
              else
                u2 = c2;
            }
            a2 && a2.isLabel ? n2[o2] = u2 : r2[o2] = u2;
          }
        }
        return 0 === Object.keys(n2).length ? r2 : { xs: r2, ys: n2 };
      }, e2.prototype.getBoolean = function(t3) {
        return "1" === t3 || "true" === t3.toLowerCase() ? 1 : 0;
      }, e2.prototype.parseRow = function(t3, e3) {
        void 0 === e3 && (e3 = true);
        for (var r2 = [], n2 = 0, i2 = t3.length, o2 = STATE_OUT, a2 = 0; a2 < i2; a2++)
          switch (o2) {
            case STATE_OUT:
              switch (t3.charAt(a2)) {
                case CODE_QUOTE:
                  n2 = a2 + 1, o2 = STATE_QUOTE;
                  break;
                case this.delimiter:
                  if (n2 = a2 + 1, " " === this.delimiter && this.delimWhitespace)
                    break;
                  r2.push(""), o2 = STATE_OUT;
                  break;
                default:
                  o2 = STATE_FIELD, n2 = a2;
              }
              break;
            case STATE_FIELD:
              switch (t3.charAt(a2)) {
                case this.delimiter:
                  r2.push(t3.substring(n2, a2)), o2 = STATE_OUT, n2 = a2 + 1;
              }
              break;
            case STATE_QUOTE:
              switch (t3.charAt(a2)) {
                case CODE_QUOTE:
                  o2 = STATE_QUOTE_AFTER_QUOTE;
              }
              break;
            case STATE_QUOTE_AFTER_QUOTE:
              switch (t3.charAt(a2)) {
                case this.delimiter:
                  r2.push(t3.substring(n2, a2 - 1)), o2 = STATE_OUT, n2 = a2 + 1;
                  break;
                case CODE_QUOTE:
                  o2 = STATE_QUOTE;
                  break;
                default:
                  o2 = STATE_WITHIN_QUOTE_IN_QUOTE;
              }
              break;
            case STATE_WITHIN_QUOTE_IN_QUOTE:
              switch (t3.charAt(a2)) {
                case CODE_QUOTE:
                  o2 = STATE_QUOTE;
              }
          }
        if (o2 === STATE_QUOTE_AFTER_QUOTE ? r2.push(t3.substring(n2, i2 - 1)) : r2.push(t3.substring(n2)), e3 && r2.length !== this.fullColumnNames.length)
          throw new Error("Invalid row in csv file. Should have " + this.fullColumnNames.length + " elements in a row, but got " + r2);
        return r2;
      }, e2;
    }(Dataset);
    MicrophoneIterator = function(t2) {
      function e2(e3) {
        var r2 = t2.call(this) || this;
        r2.microphoneConfig = e3, r2.isClosed = false, r2.fftSize = e3.fftSize || 1024;
        var n2 = Math.log2(r2.fftSize);
        if (r2.fftSize < 0 || n2 < 4 || n2 > 14 || !Number.isInteger(n2))
          throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got " + r2.fftSize);
        if (r2.numFrames = e3.numFramesPerSpectrogram || 43, r2.sampleRateHz = e3.sampleRateHz, r2.columnTruncateLength = e3.columnTruncateLength || r2.fftSize, r2.audioTrackConstraints = e3.audioTrackConstraints, r2.smoothingTimeConstant = e3.smoothingTimeConstant || 0, r2.includeSpectrogram = false !== e3.includeSpectrogram, r2.includeWaveform = true === e3.includeWaveform, !r2.includeSpectrogram && !r2.includeWaveform)
          throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
        return r2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return "microphone";
      }, e2.create = function(t3) {
        return void 0 === t3 && (t3 = {}), __awaiter3(this, void 0, void 0, function() {
          var r2;
          return __generator3(this, function(n2) {
            switch (n2.label) {
              case 0:
                if (a().get("IS_NODE"))
                  throw new Error("microphone API is only supported in browser environment.");
                return [4, (r2 = new e2(t3)).start()];
              case 1:
                return n2.sent(), [2, r2];
            }
          });
        });
      }, e2.prototype.start = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2;
          return __generator3(this, function(i2) {
            switch (i2.label) {
              case 0:
                return i2.trys.push([0, 2, , 3]), t3 = this, [4, navigator.mediaDevices.getUserMedia({ audio: null == this.audioTrackConstraints || this.audioTrackConstraints, video: false })];
              case 1:
                return t3.stream = i2.sent(), [3, 3];
              case 2:
                throw e3 = i2.sent(), new Error("Error thrown while initializing video stream: " + e3.message);
              case 3:
                if (!this.stream)
                  throw new Error("Could not obtain audio from microphone.");
                if (r2 = window.AudioContext || window.webkitAudioContext, this.audioContext = new r2(), this.sampleRateHz) {
                  if (this.audioContext.sampleRate !== this.sampleRateHz)
                    throw new Error("Mismatch in sampling rate: Expected: " + this.sampleRateHz + "; Actual: " + this.audioContext.sampleRate);
                } else
                  this.sampleRateHz = this.audioContext.sampleRate;
                return n2 = this.audioContext.createMediaStreamSource(this.stream), this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = 2 * this.fftSize, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, n2.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize), [2];
            }
          });
        });
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2, i2;
          return __generator3(this, function(o2) {
            switch (o2.label) {
              case 0:
                return this.isClosed ? [2, { value: null, done: true }] : [4, this.getAudioData()];
              case 1:
                return r2 = o2.sent(), this.includeSpectrogram && (n2 = this.flattenQueue(r2.freqDataQueue), t3 = this.getTensorFromAudioDataArray(n2, [this.numFrames, this.columnTruncateLength, 1])), this.includeWaveform && (i2 = this.flattenQueue(r2.timeDataQueue), e3 = this.getTensorFromAudioDataArray(i2, [this.numFrames * this.fftSize, 1])), [2, { value: { spectrogram: t3, waveform: e3 }, done: false }];
            }
          });
        });
      }, e2.prototype.capture = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            switch (t3.label) {
              case 0:
                return [4, this.next()];
              case 1:
                return [2, t3.sent().value];
            }
          });
        });
      }, e2.prototype.getAudioData = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2 = this;
          return __generator3(this, function(i2) {
            return t3 = [], e3 = [], r2 = 0, [2, new Promise(function(i3) {
              var o2 = setInterval(function() {
                n2.includeSpectrogram && (n2.analyser.getFloatFrequencyData(n2.freqData), n2.freqData[0] === -1 / 0 && i3({ freqDataQueue: t3, timeDataQueue: e3 }), t3.push(n2.freqData.slice(0, n2.columnTruncateLength))), n2.includeWaveform && (n2.analyser.getFloatTimeDomainData(n2.timeData), e3.push(n2.timeData.slice())), ++r2 === n2.numFrames && (clearInterval(o2), i3({ freqDataQueue: t3, timeDataQueue: e3 }));
              }, n2.fftSize / n2.sampleRateHz * 1e3);
            })];
          });
        });
      }, e2.prototype.stop = function() {
        this.isClosed || (this.isClosed = true, this.analyser.disconnect(), this.audioContext.close(), null != this.stream && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
      }, e2.prototype.toArray = function() {
        throw new Error("Can not convert infinite audio stream to array.");
      }, e2.prototype.getSampleRate = function() {
        return this.sampleRateHz;
      }, e2.prototype.flattenQueue = function(t3) {
        var e3 = t3[0].length, r2 = new Float32Array(t3.length * e3);
        return t3.forEach(function(t4, n2) {
          return r2.set(t4, n2 * e3);
        }), r2;
      }, e2.prototype.getTensorFromAudioDataArray = function(t3, e3) {
        var r2 = new Float32Array(tt.sizeFromShape(e3));
        return r2.set(t3, r2.length - t3.length), kn(r2, e3);
      }, e2;
    }(LazyIterator);
    WebcamIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        if (n2.webcamVideoElement = e3, n2.webcamConfig = r2, n2.isClosed = true, n2.resize = false, n2.needToResize())
          if (n2.resize = true, n2.cropSize = [n2.webcamConfig.resizeHeight, n2.webcamConfig.resizeWidth], n2.cropBoxInd = Dn([0], "int32"), n2.webcamConfig.centerCrop) {
            var i2 = 1 * n2.webcamConfig.resizeWidth / n2.webcamVideoElement.width, o2 = 1 * n2.webcamConfig.resizeHeight / n2.webcamVideoElement.height, a2 = (1 - i2) / 2, s2 = (1 - o2) / 2, u2 = a2 + i2, c2 = o2 + s2;
            n2.cropBox = Tn([s2, a2, c2, u2], [1, 4]);
          } else
            n2.cropBox = Tn([0, 0, 1, 1], [1, 4]);
        return n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return "webcam";
      }, e2.create = function(t3, r2) {
        return void 0 === r2 && (r2 = {}), __awaiter3(this, void 0, void 0, function() {
          var n2;
          return __generator3(this, function(i2) {
            switch (i2.label) {
              case 0:
                if (a().get("IS_NODE"))
                  throw new Error("tf.data.webcam is only supported in browser environment.");
                if (!t3) {
                  if (t3 = document.createElement("video"), !r2.resizeWidth || !r2.resizeHeight)
                    throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
                  t3.width = r2.resizeWidth, t3.height = r2.resizeHeight;
                }
                return [4, (n2 = new e2(t3, r2)).start()];
              case 1:
                return i2.sent(), [2, n2];
            }
          });
        });
      }, e2.prototype.start = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2 = this;
          return __generator3(this, function(n2) {
            switch (n2.label) {
              case 0:
                this.webcamConfig.facingMode && tt.assert("user" === this.webcamConfig.facingMode || "environment" === this.webcamConfig.facingMode, function() {
                  return "Invalid webcam facing mode: " + r2.webcamConfig.facingMode + ". Please provide 'user' or 'environment'";
                }), n2.label = 1;
              case 1:
                return n2.trys.push([1, 3, , 4]), t3 = this, [4, navigator.mediaDevices.getUserMedia({ video: { deviceId: this.webcamConfig.deviceId, facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user", width: this.webcamVideoElement.width, height: this.webcamVideoElement.height } })];
              case 2:
                return t3.stream = n2.sent(), [3, 4];
              case 3:
                throw (e3 = n2.sent()).message = "Error thrown while initializing video stream: " + e3.message, e3;
              case 4:
                if (!this.stream)
                  throw new Error("Could not obtain video from webcam.");
                try {
                  this.webcamVideoElement.srcObject = this.stream;
                } catch (t4) {
                  console.log(t4), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
                }
                return this.webcamVideoElement.play(), this.isClosed = false, [2, new Promise(function(t4) {
                  r2.webcamVideoElement.onloadedmetadata = function() {
                    t4();
                  };
                })];
            }
          });
        });
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3;
          return __generator3(this, function(e3) {
            if (this.isClosed)
              return [2, { value: null, done: true }];
            try {
              t3 = Nf.fromPixels(this.webcamVideoElement);
            } catch (t4) {
              throw new Error("Error thrown converting video to pixels: " + JSON.stringify(t4));
            }
            if (!this.resize)
              return [2, { value: t3, done: false }];
            try {
              return [2, { value: this.cropAndResizeFrame(t3), done: false }];
            } catch (t4) {
              throw new Error("Error thrown cropping the video: " + t4.message);
            } finally {
              t3.dispose();
            }
            return [2];
          });
        });
      }, e2.prototype.needToResize = function() {
        return !(!this.webcamConfig.resizeWidth || !this.webcamConfig.resizeHeight || this.webcamVideoElement.width === this.webcamConfig.resizeWidth && this.webcamVideoElement.height === this.webcamConfig.resizeHeight);
      }, e2.prototype.cropAndResizeFrame = function(t3) {
        var e3 = this;
        return je(function() {
          var r2, n2 = t3.toFloat().expandDims(0), i2 = (r2 = vh.cropAndResize(n2, e3.cropBox, e3.cropBoxInd, e3.cropSize, "bilinear")).shape;
          return r2.reshape(i2.slice(1));
        });
      }, e2.prototype.capture = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            switch (t3.label) {
              case 0:
                return [4, this.next()];
              case 1:
                return [2, t3.sent().value];
            }
          });
        });
      }, e2.prototype.stop = function() {
        this.stream.getTracks().forEach(function(t3) {
          return t3.stop();
        });
        try {
          this.webcamVideoElement.srcObject = null;
        } catch (t3) {
          console.log(t3), this.webcamVideoElement.src = null;
        }
        this.isClosed = true;
      }, e2.prototype.toArray = function() {
        throw new Error("Can not convert infinite video stream to array.");
      }, e2;
    }(LazyIterator);
    DataSource = /* @__PURE__ */ function() {
      return function() {
      };
    }();
    StringIterator = function(t2) {
      function e2() {
        return null !== t2 && t2.apply(this, arguments) || this;
      }
      return __extends2(e2, t2), e2.prototype.split = function(t3) {
        return new SplitIterator(this, t3);
      }, e2;
    }(LazyIterator);
    SplitIterator = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.impl = new SplitIteratorImpl(e3, r2), n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.impl.summary();
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            return [2, this.impl.next()];
          });
        });
      }, e2;
    }(StringIterator);
    SplitIteratorImpl = function(t2) {
      function e2(e3, r2) {
        var n2 = t2.call(this) || this;
        return n2.upstream = e3, n2.separator = r2, n2.carryover = "", n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Split('" + this.separator + "')";
      }, e2.prototype.pump = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2, n2, i2;
          return __generator3(this, function(o2) {
            switch (o2.label) {
              case 0:
                return [4, this.upstream.next()];
              case 1:
                if ((t3 = o2.sent()).done)
                  return "" === this.carryover ? [2, false] : (this.outputQueue.push(this.carryover), this.carryover = "", [2, true]);
                for ((e3 = t3.value.split(this.separator))[0] = this.carryover + e3[0], r2 = 0, n2 = e3.slice(0, -1); r2 < n2.length; r2++)
                  i2 = n2[r2], this.outputQueue.push(i2);
                return this.carryover = e3[e3.length - 1], [2, true];
            }
          });
        });
      }, e2;
    }(OneToManyIterator);
    ByteChunkIterator = function(t2) {
      function e2() {
        return null !== t2 && t2.apply(this, arguments) || this;
      }
      return __extends2(e2, t2), e2.prototype.decodeUTF8 = function() {
        return new Utf8Iterator(this);
      }, e2;
    }(LazyIterator);
    Utf8Iterator = function(t2) {
      function e2(e3) {
        var r2 = t2.call(this) || this;
        return r2.upstream = e3, r2.impl = new Utf8IteratorImpl(e3), r2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.impl.summary();
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            return [2, this.impl.next()];
          });
        });
      }, e2;
    }(StringIterator);
    Utf8IteratorImpl = function(t2) {
      function e2(e3) {
        var r2 = t2.call(this) || this;
        if (r2.upstream = e3, a().get("IS_BROWSER"))
          r2.decoder = new TextDecoder("utf-8");
        else {
          var n2 = require_string_decoder().StringDecoder;
          r2.decoder = new n2("utf8");
        }
        return r2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return this.upstream.summary() + " -> Utf8";
      }, e2.prototype.pump = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2;
          return __generator3(this, function(n2) {
            switch (n2.label) {
              case 0:
                return [4, this.upstream.next()];
              case 1:
                return (t3 = n2.sent()).done ? [2, false] : (e3 = t3.value, r2 = a().get("IS_BROWSER") ? this.decoder.decode(e3, { stream: true }) : this.decoder.write(Buffer.from(e3.buffer)), this.outputQueue.push(r2), [2, true]);
            }
          });
        });
      }, e2;
    }(OneToManyIterator);
    FileChunkIterator = function(t2) {
      function e2(e3, r2) {
        void 0 === r2 && (r2 = {});
        var n2 = t2.call(this) || this;
        return n2.file = e3, n2.options = r2, tt.assert(e3 instanceof Uint8Array || !!a().get("IS_BROWSER") && (e3 instanceof File || e3 instanceof Blob), function() {
          return "FileChunkIterator only supports File, Blob and Uint8Array right now.";
        }), n2.offset = r2.offset || 0, n2.chunkSize = r2.chunkSize || 1048576, n2;
      }
      return __extends2(e2, t2), e2.prototype.summary = function() {
        return "FileChunks " + this.file;
      }, e2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3, e3, r2 = this;
          return __generator3(this, function(n2) {
            switch (n2.label) {
              case 0:
                return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? [2, { value: null, done: true }] : (t3 = new Promise(function(t4, e4) {
                  var n3 = r2.offset + r2.chunkSize;
                  if (r2.file instanceof Uint8Array)
                    t4(new Uint8Array(r2.file.slice(r2.offset, n3)));
                  else {
                    var i2 = new FileReader();
                    i2.onload = function(r3) {
                      var n4 = i2.result;
                      if (n4 instanceof ArrayBuffer && (n4 = new Uint8Array(n4)), !(n4 instanceof Uint8Array))
                        return e4(new TypeError("FileReader returned unknown type."));
                      t4(n4);
                    }, i2.onabort = function(t5) {
                      return e4(new Error("Aborted"));
                    }, i2.onerror = function(t5) {
                      return e4(new Error(t5.type));
                    };
                    var o2 = r2.file.slice(r2.offset, n3);
                    i2.readAsArrayBuffer(o2);
                  }
                  r2.offset = n3;
                }), e3 = {}, [4, t3]);
              case 1:
                return [2, (e3.value = n2.sent(), e3.done = false, e3)];
            }
          });
        });
      }, e2;
    }(ByteChunkIterator);
    getRequestInitFromRequest = function(t2) {
      return { method: t2.method, headers: t2.headers, body: t2.body, mode: t2.mode, credentials: t2.credentials, cache: t2.cache, redirect: t2.redirect, referrer: t2.referrer, integrity: t2.integrity };
    };
    FileDataSource = function(t2) {
      function e2(e3, r2) {
        void 0 === r2 && (r2 = {});
        var n2 = t2.call(this) || this;
        return n2.input = e3, n2.options = r2, n2;
      }
      return __extends2(e2, t2), e2.prototype.iterator = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var t3;
          return __generator3(this, function(e3) {
            return isLocalPath(this.input) && a().get("IS_NODE") && (t3 = require_fs(), this.input = t3.readFileSync(this.input.substr(7))), [2, new FileChunkIterator(this.input, this.options)];
          });
        });
      }, e2;
    }(DataSource);
    URLDataSource = function(t2) {
      function e2(e3, r2) {
        void 0 === r2 && (r2 = {});
        var n2 = t2.call(this) || this;
        return n2.url = e3, n2.fileOptions = r2, n2;
      }
      return __extends2(e2, t2), e2.prototype.iterator = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(t3) {
            return isLocalPath(this.url) ? [2, new FileDataSource(this.url, this.fileOptions).iterator()] : [2, urlChunkIterator(this.url, this.fileOptions)];
          });
        });
      }, e2;
    }(DataSource);
    version3 = "1.3.1";
  }
});

// node_modules/@tensorflow/tfjs/dist/tf.esm.js
var tf_esm_exports = {};
__export(tf_esm_exports, {
  AdadeltaOptimizer: () => qf,
  AdagradOptimizer: () => Kf,
  AdamOptimizer: () => jf,
  AdamaxOptimizer: () => Xf,
  Callback: () => Callback,
  CallbackList: () => CallbackList,
  CustomCallback: () => CustomCallback,
  DataStorage: () => so,
  ENV: () => i,
  EarlyStopping: () => EarlyStopping,
  Environment: () => o,
  GraphModel: () => GraphModel,
  History: () => History,
  InputSpec: () => InputSpec,
  KernelBackend: () => co,
  LayerVariable: () => LayerVariable,
  LayersModel: () => LayersModel,
  MomentumOptimizer: () => Yf,
  Optimizer: () => Hf,
  RMSPropOptimizer: () => Qf,
  RNN: () => RNN,
  Rank: () => vt,
  Reduction: () => jl,
  SGDOptimizer: () => $f,
  Sequential: () => Sequential,
  SymbolicTensor: () => SymbolicTensor,
  Tensor: () => dt,
  TensorBuffer: () => lt,
  Variable: () => bt,
  abs: () => Vu,
  acos: () => zu,
  acosh: () => Gu,
  add: () => Vs,
  addN: () => zs,
  addStrict: () => Gs,
  all: () => il,
  any: () => ul,
  argMax: () => sl,
  argMin: () => cl,
  asin: () => Hu,
  asinh: () => qu,
  atan: () => Ku,
  atan2: () => Hs,
  atanh: () => ju,
  avgPool: () => Yc,
  avgPool3d: () => Zc,
  backend: () => on,
  backend_util: () => To,
  basicLSTMCell: () => kl,
  batchNorm: () => Ns,
  batchNorm2d: () => Fs,
  batchNorm3d: () => Os,
  batchNorm4d: () => _s,
  batchNormalization: () => Ts,
  batchNormalization2d: () => Ss,
  batchNormalization3d: () => As,
  batchNormalization4d: () => Ds,
  batchToSpaceND: () => cr,
  booleanMaskAsync: () => Rc,
  browser: () => Nf,
  buffer: () => ur,
  callbacks: () => callbacks,
  cast: () => lr,
  ceil: () => Xu,
  clipByValue: () => $u,
  clone: () => hr,
  complex: () => En,
  concat: () => Gn,
  concat1d: () => Hn,
  concat2d: () => qn,
  concat3d: () => Kn,
  concat4d: () => jn,
  constraints: () => exports_constraints,
  conv1d: () => Ac,
  conv2d: () => Dc,
  conv2dTranspose: () => Pc,
  conv3d: () => Tc,
  conv3dTranspose: () => Lc,
  cos: () => Yu,
  cosh: () => Qu,
  cumsum: () => fr,
  customGrad: () => oo,
  data: () => tf_data_esm_exports,
  deprecationWarn: () => ze,
  depthToSpace: () => pr,
  depthwiseConv2d: () => Oc,
  deregisterOp: () => deregisterOp,
  diag: () => Wl,
  disableDeprecationWarnings: () => Ve,
  dispose: () => Xe,
  disposeVariables: () => Ge,
  div: () => qs,
  divStrict: () => Ks,
  dot: () => Uc,
  dropout: () => Ul,
  elu: () => gl,
  enableDebugMode: () => Ue,
  enableProdMode: () => We,
  engine: () => He,
  env: () => a,
  equal: () => sc,
  equalStrict: () => cc,
  erf: () => Ju,
  exp: () => Zu,
  expandDims: () => dr,
  expm1: () => ts,
  eye: () => vr,
  fft: () => Fl,
  fill: () => Ln,
  findBackend: () => en,
  findBackendFactory: () => nn,
  floor: () => es,
  floorDiv: () => js,
  frame: () => Hl,
  fused: () => Eh,
  gather: () => Cc,
  gatherND: () => Ll,
  getBackend: () => Ze,
  getKernel: () => s,
  getKernelsForBackend: () => c,
  grad: () => Zr,
  grads: () => to,
  greater: () => lc,
  greaterEqual: () => hc,
  greaterEqualStrict: () => fc,
  greaterStrict: () => pc,
  hammingWindow: () => Gl,
  hannWindow: () => zl,
  ifft: () => Ol,
  imag: () => In,
  image: () => vh,
  inTopKAsync: () => Xl,
  initializers: () => exports_initializers,
  input: () => input,
  io: () => Sf,
  irfft: () => Ml,
  isFinite: () => ps,
  isInf: () => fs,
  isNaN: () => hs,
  keep: () => $e,
  layers: () => exports_layers,
  leakyRelu: () => yl,
  less: () => dc,
  lessEqual: () => vc,
  lessEqualStrict: () => mc,
  lessStrict: () => gc,
  linalg: () => sh,
  linspace: () => Wn,
  loadGraphModel: () => loadGraphModel,
  loadLayersModel: () => loadLayersModel,
  localResponseNormalization: () => Rl,
  log: () => ns,
  log1p: () => rs,
  logSigmoid: () => os,
  logSoftmax: () => uo,
  logSumExp: () => ll,
  logicalAnd: () => Ms,
  logicalNot: () => Bs,
  logicalOr: () => Ps,
  logicalXor: () => Ls,
  losses: () => oh,
  matMul: () => Wc,
  math: () => Df,
  max: () => hl,
  maxPool: () => $c,
  maxPool3d: () => Jc,
  maximum: () => Xs,
  maximumStrict: () => $s,
  mean: () => fl,
  memory: () => qe,
  metrics: () => exports_metrics,
  min: () => pl,
  minimum: () => Ys,
  minimumStrict: () => Qs,
  mod: () => Js,
  modStrict: () => Zs,
  model: () => model,
  models: () => exports_models,
  moments: () => dl,
  movingAverage: () => Al,
  mul: () => tc,
  mulStrict: () => ec,
  multiRNNCell: () => Sl,
  multinomial: () => mr,
  neg: () => as,
  nextFrame: () => ep,
  norm: () => Il,
  notEqual: () => yc,
  notEqualStrict: () => xc,
  oneHot: () => gr,
  ones: () => Bn,
  onesLike: () => Vn,
  op: () => Cn,
  outerProduct: () => Vc,
  pad: () => yr,
  pad1d: () => xr,
  pad2d: () => br,
  pad3d: () => wr,
  pad4d: () => Cr,
  pool: () => Qc,
  pow: () => nc,
  powStrict: () => rc,
  prelu: () => xl,
  print: () => sr,
  prod: () => ml,
  profile: () => Ke,
  rand: () => Er,
  randomGamma: () => Ir,
  randomNormal: () => Rr,
  randomUniform: () => kr,
  range: () => Un,
  ready: () => Je,
  real: () => Rn,
  reciprocal: () => is,
  registerBackend: () => rn,
  registerCallbackConstructor: () => registerCallbackConstructor,
  registerKernel: () => l,
  registerOp: () => registerOp,
  regularizers: () => exports_regularizers,
  relu: () => bl,
  relu6: () => wl,
  removeBackend: () => tn,
  reshape: () => Sr,
  reverse: () => zc,
  reverse1d: () => Gc,
  reverse2d: () => Hc,
  reverse3d: () => qc,
  reverse4d: () => Kc,
  rfft: () => _l,
  round: () => us,
  rsqrt: () => ss,
  scalar: () => An,
  scatterND: () => Nl,
  selu: () => Cl,
  separableConv2d: () => Bc,
  sequential: () => sequential,
  serialization: () => Mf,
  setBackend: () => Qe,
  setPlatform: () => an,
  setdiff1dAsync: () => _r,
  sigmoid: () => cs,
  sign: () => ls,
  signal: () => Kl,
  sin: () => ds,
  sinh: () => vs,
  slice: () => tl,
  slice1d: () => el,
  slice2d: () => nl,
  slice3d: () => rl,
  slice4d: () => ol,
  slice_util: () => Jr,
  softmax: () => io,
  softplus: () => ms,
  spaceToBatchND: () => Ar,
  sparseToDense: () => Pl,
  spectral: () => Bl,
  split: () => Xn,
  sqrt: () => gs,
  square: () => Uu,
  squaredDifference: () => oc,
  squaredDifferenceStrict: () => ac,
  squeeze: () => Dr,
  stack: () => Tr,
  step: () => ys,
  stft: () => ql,
  stridedSlice: () => Dl,
  sub: () => ic,
  subStrict: () => uc,
  sum: () => vl,
  tan: () => xs,
  tanh: () => bs,
  tensor: () => kn,
  tensor1d: () => Dn,
  tensor2d: () => Tn,
  tensor3d: () => Nn,
  tensor4d: () => Fn,
  tensor5d: () => On,
  tensor6d: () => _n,
  tensor_util: () => At,
  test_util: () => Vf,
  tidy: () => je,
  tile: () => Nr,
  time: () => Ye,
  topk: () => Tl,
  train: () => Zf,
  transpose: () => El,
  truncatedNormal: () => Fr,
  unregisterKernel: () => h,
  unsortedSegmentSum: () => Ec,
  unstack: () => Or,
  util: () => tt,
  valueAndGrad: () => eo,
  valueAndGrads: () => no,
  variable: () => Mn,
  variableGrads: () => ro,
  version: () => version$1,
  version_converter: () => version2,
  version_core: () => zf,
  version_layers: () => version,
  webgl: () => Gf,
  where: () => Ws,
  whereAsync: () => Us,
  zeros: () => Pn,
  zerosLike: () => zn
});
var version4, version$1;
var init_tf_esm = __esm({
  "node_modules/@tensorflow/tfjs/dist/tf.esm.js"() {
    init_tf_core_esm();
    init_tf_core_esm();
    init_tf_layers_esm();
    init_tf_layers_esm();
    init_tf_converter_esm();
    init_tf_converter_esm();
    init_tf_data_esm();
    init_tf_data_esm();
    version4 = "1.3.1";
    version$1 = { "tfjs-core": zf, "tfjs-data": version3, "tfjs-layers": version, "tfjs-converter": version2, tfjs: version4 };
  }
});

export {
  require_crypto,
  o,
  a,
  i,
  s,
  c,
  l,
  h,
  tt,
  lt,
  dt,
  vt,
  bt,
  At,
  We,
  Ue,
  Ve,
  ze,
  Ge,
  He,
  qe,
  Ke,
  je,
  Xe,
  $e,
  Ye,
  Qe,
  Je,
  Ze,
  tn,
  en,
  nn,
  rn,
  on,
  an,
  Cn,
  En,
  Rn,
  In,
  kn,
  An,
  Dn,
  Tn,
  Nn,
  Fn,
  On,
  _n,
  Mn,
  Bn,
  Pn,
  Ln,
  Wn,
  Un,
  Vn,
  zn,
  Gn,
  Hn,
  qn,
  Kn,
  jn,
  Xn,
  ur,
  sr,
  cr,
  lr,
  hr,
  fr,
  pr,
  dr,
  vr,
  mr,
  gr,
  yr,
  xr,
  br,
  wr,
  Cr,
  Er,
  Rr,
  Ir,
  kr,
  Sr,
  Ar,
  Dr,
  Tr,
  Nr,
  Fr,
  Or,
  _r,
  Jr,
  Zr,
  to,
  eo,
  no,
  ro,
  oo,
  io,
  uo,
  so,
  co,
  To,
  Uu,
  Vu,
  zu,
  Gu,
  Hu,
  qu,
  Ku,
  ju,
  Xu,
  $u,
  Yu,
  Qu,
  Ju,
  Zu,
  ts,
  es,
  ns,
  rs,
  os,
  as,
  is,
  us,
  ss,
  cs,
  ls,
  hs,
  fs,
  ps,
  ds,
  vs,
  ms,
  gs,
  ys,
  xs,
  bs,
  Ss,
  As,
  Ds,
  Ts,
  Ns,
  Fs,
  Os,
  _s,
  Ms,
  Bs,
  Ps,
  Ls,
  Ws,
  Us,
  Vs,
  zs,
  Gs,
  Hs,
  qs,
  Ks,
  js,
  Xs,
  $s,
  Ys,
  Qs,
  Js,
  Zs,
  tc,
  ec,
  nc,
  rc,
  oc,
  ac,
  ic,
  uc,
  sc,
  cc,
  lc,
  hc,
  fc,
  pc,
  dc,
  vc,
  mc,
  gc,
  yc,
  xc,
  Cc,
  Ec,
  Rc,
  Ac,
  Dc,
  Tc,
  Oc,
  Bc,
  Pc,
  Lc,
  Wc,
  Uc,
  Vc,
  zc,
  Gc,
  Hc,
  qc,
  Kc,
  $c,
  Yc,
  Qc,
  Jc,
  Zc,
  tl,
  el,
  nl,
  rl,
  ol,
  il,
  ul,
  sl,
  cl,
  ll,
  hl,
  fl,
  pl,
  dl,
  vl,
  ml,
  gl,
  yl,
  xl,
  bl,
  wl,
  Cl,
  El,
  Rl,
  Il,
  kl,
  Sl,
  Al,
  Dl,
  Tl,
  Nl,
  Fl,
  Ol,
  _l,
  Ml,
  Bl,
  Pl,
  Ll,
  Wl,
  Ul,
  zl,
  Gl,
  Hl,
  ql,
  Kl,
  jl,
  Xl,
  oh,
  sh,
  vh,
  Eh,
  Sf,
  Df,
  Nf,
  Mf,
  Vf,
  zf,
  Gf,
  Hf,
  qf,
  Kf,
  jf,
  Xf,
  $f,
  Yf,
  Qf,
  Zf,
  ep,
  exports_constraints,
  exports_initializers,
  LayerVariable,
  InputSpec,
  SymbolicTensor,
  CallbackList,
  History,
  CustomCallback,
  version,
  LayersModel,
  Sequential,
  model,
  sequential,
  loadLayersModel,
  input,
  registerCallbackConstructor,
  RNN,
  exports_layers,
  exports_metrics,
  exports_models,
  exports_regularizers,
  Callback,
  EarlyStopping,
  callbacks,
  registerOp,
  deregisterOp,
  GraphModel,
  loadGraphModel,
  version2,
  tf_data_esm_exports,
  version$1,
  tf_esm_exports,
  init_tf_esm
};
/*! Bundled license information:

@tensorflow/tfjs-core/dist/tf-core.esm.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@tensorflow/tfjs-layers/dist/tf-layers.esm.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@tensorflow/tfjs-converter/dist/tf-converter.esm.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@tensorflow/tfjs-data/dist/tf-data.esm.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=chunk-QPU6C635.js.map
